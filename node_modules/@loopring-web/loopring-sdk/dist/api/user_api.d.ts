import { BaseAPI } from "./base_api";
import { RESULT_INFO, ChainId, CounterFactualInfo } from "../defs";
import * as loopring_defs from "../defs/loopring_defs";
import { KeyPairParams } from "./sign/sign_tools";
import { AxiosResponse } from "axios";
export declare class UserAPI extends BaseAPI {
    updateUserApiKey<R>(request: loopring_defs.UpdateUserApiKeyRequest, apiKey: string, eddsaKey: string): Promise<{
        raw_data: R;
    }>;
    getNextStorageId<R>(request: loopring_defs.GetNextStorageIdRequest, apiKey: string): Promise<{
        raw_data: R;
        orderId: number;
        offchainId: number;
    }>;
    getOrderDetails<R>(request: loopring_defs.GetOrderDetailsRequest, apiKey: string): Promise<{
        raw_data: R;
        orderDetail: loopring_defs.OrderDetail;
    }>;
    getOrders<R>(request: loopring_defs.GetOrdersRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        orders: loopring_defs.OrderDetail[];
    }>;
    submitOrder(orderRequest: loopring_defs.SubmitOrderRequestV3, privateKey: string, apiKey: string): Promise<RESULT_INFO | (Pick<any, string | number | symbol> & {
        raw_data: Pick<any, string | number | symbol>;
    })>;
    cancelOrder<R>(request: loopring_defs.CancelOrderRequest, PrivateKey: string, apiKey: string): Promise<{
        raw_data: R;
    }>;
    cancelMultiOrdersByHash<R>(request: loopring_defs.CancelMultiOrdersByHashRequest, PrivateKey: string, apiKey: string): Promise<{
        raw_data: R;
    }>;
    cancelMultiOrdersByCreditOrderId<R>(request: loopring_defs.CancelMultiOrdersByClientOrderIdRequest, PrivateKey: string, apiKey: string): Promise<{
        raw_data: R;
    }>;
    getUserRegTxs<R>(request: loopring_defs.GetUserRegTxsRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userRegTxs: loopring_defs.UserRegTx[];
    }>;
    getUserPwdResetTxs<R>(request: loopring_defs.GetUserPwdResetTxsRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userPwdResetTxs: loopring_defs.UserPwdResetTx[];
    }>;
    getUserBalances<R>(request: loopring_defs.GetUserBalancesRequest, apiKey: string): Promise<{
        raw_data: R;
        userBalances: loopring_defs.LoopringMap<loopring_defs.UserBalanceInfo>;
    }>;
    getAssetLookRecords<R>(request: loopring_defs.GetUserBalancesRequest, apiKey: string): Promise<{
        raw_data: R;
        userBalances: loopring_defs.LoopringMap<loopring_defs.UserBalanceInfo>;
    }>;
    getUserDepositHistory<R>(request: loopring_defs.GetUserDepositHistoryRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userDepositHistory: loopring_defs.UserDepositHistoryTx[];
    }>;
    getUserOnchainWithdrawalHistory<R>(request: loopring_defs.GetUserOnchainWithdrawalHistoryRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userOnchainWithdrawalHistory: loopring_defs.UserOnchainWithdrawalHistoryTx[];
    }>;
    getUserTransferList<R>(request: loopring_defs.GetUserTransferListRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userTransfers: loopring_defs.UserTransferRecord[];
    }>;
    getUserTxs<R>(request: loopring_defs.GetUserTxsRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userTxs: loopring_defs.UserTx[];
    }>;
    getUserTrades<R>(request: loopring_defs.GetUserTradesRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userTrades: loopring_defs.UserTrade[];
    }>;
    getUserFeeRate<R>(request: loopring_defs.GetUserFeeRateRequest, apiKey: string): Promise<{
        raw_data: R;
        userFreeRateMap: loopring_defs.LoopringMap<loopring_defs.UserFeeRateInfo>;
    }>;
    getUserOrderFeeRate<R>(request: loopring_defs.GetUserOrderFeeRateRequest, apiKey: string): Promise<{
        raw_data: R;
        feeRate: loopring_defs.FeeRateInfo;
        gasPrice: number;
    }>;
    getMinimumTokenAmt<R>(request: loopring_defs.GetMinimumTokenAmtRequest, apiKey: string): Promise<{
        raw_data: R;
        amounts: [loopring_defs.TokenAmount, loopring_defs.TokenAmount];
        amountMap: loopring_defs.LoopringMap<loopring_defs.TokenAmount>;
        gasPrice: number;
        cacheOverdueAt: any;
    }>;
    getOffchainFeeAmt<R>(request: loopring_defs.GetOffchainFeeAmtRequest, apiKey: string): Promise<{
        raw_data: R;
        fees: loopring_defs.LoopringMap<loopring_defs.OffchainFeeInfo>;
        gasPrice: number;
    }>;
    getNFTOffchainFeeAmt<R>(request: loopring_defs.GetNFTOffchainFeeAmtRequest, apiKey: string): Promise<{
        raw_data: R;
        fees: loopring_defs.LoopringMap<loopring_defs.OffchainFeeInfo>;
    }>;
    submitNFTValidateOrder<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginNFTValidateOrderRequestV3WithPatch): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    submitNFTTrade<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginNFTTradeRequestV3WithPatch): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    getUserOwenCollection<R>(request: loopring_defs.GetUserOwnerCollectionRequest, apiKey: string): Promise<any>;
    getUserLegacyCollection<R>(request: loopring_defs.GetUserLegacyCollectionRequest, apiKey: string): Promise<any>;
    getUserNFTCollection(request: loopring_defs.GetUserNFTCollectionRequest, apiKey: string): Promise<any>;
    getUserNFTLegacyTokenAddress(request: {
        accountId: number;
    }, apiKey: string): Promise<any>;
    getUserNFTDepositHistory<R>(request: loopring_defs.GetUserNFTDepositHistoryRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userNFTDepositHistory: loopring_defs.UserNFTDepositHistoryTx[];
    }>;
    getUserNFTWithdrawalHistory<R>(request: loopring_defs.GetUserNFTWithdrawalHistoryRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userNFTWithdrawalHistory: loopring_defs.UserNFTWithdrawalHistoryTx[];
    }>;
    getUserNFTTransferHistory<R>(request: loopring_defs.GetUserNFTTransferHistoryRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userNFTTransfers: loopring_defs.UserNFTTransferHistoryTx[];
    }>;
    /**
     * Get user NFTAction Mint list.
     * @param request
     * @param apiKey
     */
    getUserNFTMintHistory<R>(request: loopring_defs.GetUserNFTMintHistoryRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userNFTMints: loopring_defs.UserNFTMintHistoryTx[];
    }>;
    getUserNFTTransactionHistory<R>(request: loopring_defs.GetUserNFTTxsRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userNFTTxs: loopring_defs.UserNFTTxsHistory[];
    }>;
    getUserNFTTradeHistory<R>(request: loopring_defs.GetUserNFTTradeRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        trades: loopring_defs.UserNFTTradeHistory[];
    } | RESULT_INFO>;
    SetReferrer<R>(request: loopring_defs.SetReferrerRequest, eddsaKey: string): Promise<{
        raw_data: R;
        result: any;
    }>;
    getUserNFTBalances<R>(request: loopring_defs.GetUserNFTBalancesRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userNFTBalances: loopring_defs.UserNFTBalanceInfo[];
    }>;
    getUserNFTBalancesByCollection<R>(request: loopring_defs.GetUserNFTBalancesByCollectionRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userNFTBalances: loopring_defs.UserNFTBalanceInfo[];
    }>;
    getUserNFTLegacyBalance<R>(request: loopring_defs.GetUserNFTLegacyBalanceRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userNFTBalances: loopring_defs.UserNFTBalanceInfo[];
    }>;
    getUserVIPAssets<R>(request: loopring_defs.getUserVIPAssetsRequest): Promise<{
        raw_data: {
            data: R;
        };
        vipAsset: R;
    }>;
    getUserVIPInfo<R>(request: loopring_defs.GetUserVIPInfoRequest, apiKey: string): Promise<{
        raw_data: R;
        vipInfo: {
            createdAt: number;
            validTo: string;
            org: any;
            vipTag: any;
        };
    }>;
    unLockAccount<R>({ keyPair, request, }: {
        keyPair: KeyPairParams;
        request: loopring_defs.GetUserApiKeyRequest;
    }, publicKey?: {
        x: string;
        y: string;
    } | undefined): Promise<AxiosResponse | RESULT_INFO | {
        raw_data: R;
        eddsaKey: {
            keyPair: object;
            formatedPx: string;
            formatedPy: string;
            sk: string;
            counterFactualInfo: CounterFactualInfo;
        };
        apiKey: string;
    }>;
    submitOffchainWithdraw<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OffChainWithdrawalRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | AxiosResponse | RESULT_INFO>;
    submitInternalTransfer<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginTransferRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | AxiosResponse | RESULT_INFO>;
    submitForceWithdrawals<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginForcesWithdrawalsRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    submitDeployNFT<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginDeployNFTRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    submitNFTInTransfer<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginNFTTransferRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    submitNFTWithdraw<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginNFTWithdrawRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    submitNFTMint<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginNFTMINTRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
        _noEcdsa?: boolean;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    submitNFTCollection<R>(req: loopring_defs.CollectionBasicMeta, chainId: ChainId, apiKey: string, eddsaKey: string): Promise<RESULT_INFO | {
        raw_data: R;
        contractAddress: string;
    }>;
    deleteNFTCollection<R>(req: loopring_defs.CollectionDelete, chainId: ChainId, apiKey: string, eddsaKey: string): Promise<{
        raw_data: R;
    }>;
    submitNFTLegacyCollection<R>(req: loopring_defs.CollectionLegacyMeta, chainId: ChainId, apiKey: string, eddsaKey: string): Promise<RESULT_INFO | {
        raw_data: R;
        result: boolean;
    }>;
    submitEditNFTCollection<R>(req: Omit<loopring_defs.CollectionBasicMeta, "nftFactory" | "owner"> & {
        collectionId: string;
        accountId: number;
    }, chainId: ChainId, apiKey: string, eddsaKey: string): Promise<RESULT_INFO | {
        raw_data: R;
        contractAddress: string;
    }>;
    submitUpdateNFTLegacyCollection<R>(req: loopring_defs.UpdateNFTLegacyCollectionRequest, chainId: ChainId, apiKey: string, eddsaKey: string): Promise<RESULT_INFO | {
        raw_data: R;
        result: boolean;
    }>;
    submitUpdateNFTGroup<R>(req: loopring_defs.UpdateNFTGroupRequest, chainId: ChainId, apiKey: string, eddsaKey: string): Promise<RESULT_INFO | {
        raw_data: R;
        result: boolean;
    }>;
    submitDeployCollection<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.OriginDeployCollectionRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    updateAccount<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.UpdateAccountRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    getUserApiKey<R>(request: loopring_defs.GetUserApiKeyRequest, eddsaKey: string): Promise<{
        raw_data: R;
        apiKey: string;
    }>;
    getUserBills<R>(request: loopring_defs.GetUserBillsRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userTxs: loopring_defs.UserTx[];
    }>;
}
