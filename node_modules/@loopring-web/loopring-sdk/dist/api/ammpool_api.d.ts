import { BaseAPI } from "./base_api";
import { AmmPoolActivityRule, AmmPoolBalance, AmmPoolInfoV3, AmmPoolInProgressActivityRule, AmmPoolRequestPatch, AmmPoolSnapshot, AmmPoolStat, AmmPoolTrade, AmmPoolTx, AmmUserRewardMap, ExitAmmPoolRequest, ExitAmmPoolResult, GameRankInfo, GetAmmAssetRequest, GetAmmPoolGameRankRequest, GetAmmPoolGameUserRankRequest, GetAmmPoolSnapshotRequest, GetAmmPoolTradesRequest, GetAmmPoolTxsRequest, GetAmmUserRewardsRequest, GetLiquidityMiningRequest, GetLiquidityMiningUserHistoryRequest, GetUserAmmPoolTxsRequest, JoinAmmPoolRequest, JoinAmmPoolResult, LoopringMap, RewardItem, TokenRelatedInfo, TokenVolumeV3, UserAmmPoolTx, UserMiningInfo } from "../defs";
export declare class AmmpoolAPI extends BaseAPI {
    getAmmPoolConf<R>(): Promise<{
        raw_data: R;
        ammpools: LoopringMap<AmmPoolInfoV3>;
        pairs: LoopringMap<TokenRelatedInfo>;
    }>;
    getAmmPoolUserRewards<R>(request: GetAmmUserRewardsRequest): Promise<{
        raw_data: R;
        ammUserRewardMap: AmmUserRewardMap;
    }>;
    getAmmPoolGameRank<R>(request: GetAmmPoolGameRankRequest): Promise<{
        raw_data: R;
        totalRewards: TokenVolumeV3[];
        userRankList: GameRankInfo[];
    }>;
    getAmmPoolGameUserRank<R>(request: GetAmmPoolGameUserRankRequest, apiKey: string): Promise<{
        raw_data: R;
        userRank: GameRankInfo;
    }>;
    private getOrderList;
    getAmmPoolActivityRules<R>(): Promise<{
        raw_data: R;
        activityInProgressRules: LoopringMap<AmmPoolInProgressActivityRule>;
        activityDateMap: LoopringMap<{
            AMM_MINING?: LoopringMap<AmmPoolActivityRule>;
            ORDERBOOK_MINING?: LoopringMap<AmmPoolActivityRule>;
            SWAP_VOLUME_RANKING?: LoopringMap<AmmPoolActivityRule>;
        }>;
        groupByRuleType: LoopringMap<AmmPoolActivityRule[]>;
        groupByActivityStatus: LoopringMap<AmmPoolActivityRule[]>;
        groupByRuleTypeAndStatus: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>;
    }>;
    getAmmAssetHistory<R>(request: GetAmmAssetRequest): Promise<{
        raw_data: R;
        poolAddress: string;
        market: string;
        dataSeries: any;
    }>;
    getAmmPoolStats<R>(): Promise<{
        raw_data: R;
        ammPoolStats: LoopringMap<AmmPoolStat>;
    }>;
    getAmmPoolSnapshot<R>(request: GetAmmPoolSnapshotRequest): Promise<{
        raw_data: R;
        ammPoolSnapshot: AmmPoolSnapshot;
    }>;
    getAmmPoolBalances<R>(): Promise<{
        raw_data: R;
        ammpoolsbalances: LoopringMap<AmmPoolBalance>;
    }>;
    getLiquidityMining<R>(request: GetLiquidityMiningRequest, apiKey: string): Promise<{
        raw_data: R;
        rewards: RewardItem[];
    }>;
    getLiquidityMiningUserHistory<R>(request: GetLiquidityMiningUserHistoryRequest): Promise<{
        raw_data: R;
        userMiningInfos: UserMiningInfo[];
    }>;
    getUserAmmPoolTxs<R>(request: GetUserAmmPoolTxsRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userAmmPoolTxs: UserAmmPoolTx[];
    }>;
    getAmmPoolTxs<R>(request: GetAmmPoolTxsRequest): Promise<{
        raw_data: R;
        totalNum: number;
        transactions: AmmPoolTx[];
    }>;
    getAmmPoolTrades<R>(request: GetAmmPoolTradesRequest): Promise<{
        raw_data: R;
        totalNum: number;
        ammPoolTrades: AmmPoolTrade[];
    }>;
    joinAmmPool<R>(request: JoinAmmPoolRequest, patch: AmmPoolRequestPatch, apiKey: string): Promise<{
        raw_data: R;
        joinAmmPoolResult: JoinAmmPoolResult;
    }>;
    exitAmmPool<R>(request: ExitAmmPoolRequest, patch: AmmPoolRequestPatch, apiKey: string): Promise<{
        raw_data: R;
        exitAmmPoolResult: ExitAmmPoolResult;
    }>;
}
