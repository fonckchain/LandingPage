/// <reference types="node" />
import { BaseAPI } from "./base_api";
import * as loopring_defs from "../defs/loopring_defs";
import { ContractType, Guardian, HebaoOperationLog, LockHebaoHebaoParam, ModuleType, NetworkWallet, Protector, WalletType } from "../defs/loopring_defs";
import { ChainId, ConnectorNames, RESULT_INFO } from "../defs";
import Web3 from "web3";
export declare class WalletAPI extends BaseAPI {
    getUserAssets(request: loopring_defs.GetUserAssetsRequest): Promise<any>;
    private getApproveRecoverTypedData;
    getApproveRecoverV2TypedData(chainId: ChainId, guardiaContractAddress: any, wallet: any, validUntil: any, newOwner: any, newGuardians: Buffer | any): {
        types: {
            EIP712Domain: {
                name: string;
                type: string;
            }[];
            recover: {
                name: string;
                type: string;
            }[];
        };
        domain: {
            name: string;
            version: string;
            chainId: ChainId;
            verifyingContract: any;
        };
        primaryType: string;
        message: {
            wallet: any;
            validUntil: any;
            newOwner: any;
            newGuardians: any;
        };
    };
    rejectApproveHash(request: {
        approveRecordId: any;
        signer: any;
    }): string;
    /**
     *
     * @param approveRecordId  request.id
     */
    rejectHebao(req: loopring_defs.RejectHebaoRequestV3WithPatch): Promise<any>;
    signHebaoApproveWithoutDataStructure(web3: Web3, owner: string, guardian: Guardian, chainId: ChainId, walletType: ConnectorNames): Promise<unknown>;
    signHebaoApproveWithDataStructureForContract(web3: Web3, owner: string, guardian: Guardian, chainId: ChainId, newOwner?: string, newGuardians?: undefined | Buffer | any, masterCopy?: undefined | string, forwarderModuleAddress?: undefined | string): Promise<{
        sig: any;
    }>;
    encodeAddressesPacked(addrs: string[]): Buffer;
    submitApproveSignature<T extends loopring_defs.TX_HASH_API>(req: loopring_defs.SubmitApproveSignatureRequestWithPatch, guardians?: string[], isContract1XAddress?: boolean, masterCopy?: string, forwarderModuleAddress?: string): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO>;
    getAddressByENS<R extends any, T extends string>(request: loopring_defs.GetEnsAddressRequest): Promise<{
        address: string | undefined;
        raw_data: R;
    }>;
    getWalletType<T extends any>(request: loopring_defs.GET_WALLET_TYPE): Promise<{
        walletType: WalletType | undefined;
        raw_data: T;
    }>;
    getContractType<T = ContractType>(request: loopring_defs.GET_WALLET_TYPE): Promise<{
        contractType: T | undefined;
        raw_data: T;
    }>;
    getWalletModules<T = ModuleType>(request: loopring_defs.GET_WALLET_TYPE): Promise<{
        walletModule: T | undefined;
        raw_data: T;
    }>;
    getEnsByAddress<R extends any, T extends string>(request: loopring_defs.GetEnsNameRequest): Promise<{
        ensName: string | undefined;
        raw_data: R;
    }>;
    lockHebaoWallet({ web3, from, contractAddress, gasPrice, gasLimit, chainId, wallet, nonce, isVersion1, }: LockHebaoHebaoParam): Promise<any>;
    getHebaoConfig(request: {
        network?: NetworkWallet;
    }): Promise<any>;
    sendMetaTx<R extends any, T extends any>(request: loopring_defs.SendMetaTxRequest, apiKey: string): Promise<{
        raw_data: R;
    }>;
    getGuardianApproveList<R extends any, T extends Guardian>(request: loopring_defs.GetGuardianApproveListRequest): Promise<{
        guardiansArray: Array<T>;
        raw_data: R;
    }>;
    /**
     * getProtectors
     * @param {GetUserTradesRequest} request
     * @param apiKey
     */
    getProtectors<R extends any, T extends Protector>(request: loopring_defs.GetProtectorRequest, apiKey: string): Promise<{
        protectorArray: Array<T>;
        raw_data: R;
    }>;
    getHebaoOperationLogs<R extends any, T extends HebaoOperationLog>(request: loopring_defs.HebaoOperationLogs): Promise<{
        operationArray: Array<T>;
        raw_data: R;
    }>;
    getUserTradeAmount(request: loopring_defs.GetUserTradeAmount): Promise<any>;
    getTokenPrices(request: loopring_defs.GetTokenPricesRequest): Promise<any>;
    getLatestTokenPrices(request?: loopring_defs.getLatestTokenPricesRequest): Promise<any>;
}
