import Web3 from "web3";
import { ChainId } from "../defs/web3_defs";
import { TokenInfo } from "../defs/loopring_defs";
export declare enum ERC20Method {
    Approve = "approve",
    Deposit = "deposit",
    ForceWithdraw = "forceWithdraw"
}
export declare const ApproveVal: {
    Zero: string;
    Max: string;
};
/**
 * @description sign hash
 * @param web3
 * @param account
 * @param hash
 * @returns {Promise.<*>}
 */
export declare function sign(web3: any, account: string, pwd: string, hash: string): Promise<unknown>;
/**
 * @description Signs ethereum tx
 * @param web3
 * @param account
 * @param rawTx
 * @returns {Promise.<*>}
 */
export declare function signEthereumTx(web3: any, account: string, rawTx: any, chainId: ChainId): Promise<{
    result: string;
    rawTx: any;
    error?: undefined;
} | {
    error: any;
    result?: undefined;
    rawTx?: undefined;
}>;
export declare function getNonce(web3: Web3, addr: string): Promise<number>;
export declare function sendRawTx(web3: any, from: string, to: string, value: any, data: any, chainId: ChainId, nonce: number | undefined | null, gasPrice: any, gasLimit: number | undefined, sendByMetaMask?: boolean): Promise<any>;
export declare function genExchangeData(method: string, data: any): any;
export declare function approve(web3: Web3, from: string, to: string, depositAddress: string, _value: string, chainId: ChainId, nonce: number, gasPrice: number, gasLimit: number, sendByMetaMask: boolean): Promise<any>;
/**
 * Approve Zero
 * @param tokenAddress: approve token symbol to zero
 * @param nonce: Ethereum nonce of this address
 * @param gasPrice: gas price in gwei
 * @param sendByMetaMask
 */
export declare function approveZero(web3: any, owner: string, tokenAddress: string, depositAddress: string, gasPrice: number, gasLimit: number, chainId: ChainId | undefined, nonce: number, sendByMetaMask?: boolean): Promise<any>;
/**
 * Approve Max
 * @param tokenAddress: approve token symbol to max
 * @param nonce: Ethereum nonce of this address
 * @param gasPrice: gas price in gwei
 * @param sendByMetaMask
 */
export declare function approveMax(web3: any, owner: string, tokenAddress: string, depositAddress: string, gasPrice: number, gasLimit: number, chainId: ChainId | undefined, nonce: number, sendByMetaMask?: boolean): Promise<any>;
/**
 * deposit
 */
export declare function deposit(web3: any, from: string, exchangeAddress: string, token: TokenInfo, value: number, fee: number, gasPrice: number, gasLimit: number, chainId: ChainId | undefined, nonce: number, sendByMetaMask?: boolean, to?: string): Promise<any>;
/**
 * forceWithdrawal
 */
export declare function forceWithdrawal(web3: any, from: string, accountID: number, exchangeAddress: string, token: TokenInfo, fee: number, gasPrice: number, gasLimit: number, chainId: ChainId | undefined, nonce: number, sendByMetaMask?: boolean): Promise<any>;
/**
 * @description Sends ethereum tx through MetaMask
 * @param web3
 * @param tx
 * @returns {*}
 */
export declare function sendTransaction(web3: any, tx: any): Promise<any>;
export declare function isContract(web3: any, address: string): Promise<boolean>;
