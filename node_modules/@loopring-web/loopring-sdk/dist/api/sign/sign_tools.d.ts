import * as sigUtil from "eth-sig-util";
import { EIP712Message, EIP712TypedData, EIP712Types } from "eth-sig-util";
import BN from "bn.js";
import { ChainId, ConnectorNames } from "../../defs/web3_defs";
import { AmmPoolRequestPatch, ExitAmmPoolRequest, JoinAmmPoolRequest, NFTMintRequestV3, NFTWithdrawRequestV3, OffChainWithdrawalRequestV3, OriginNFTTransferRequestV3, OriginTransferRequestV3, PublicKey, UpdateAccountRequestV3, NFTOrderRequestV3, NFTTradeRequestV3, SubmitOrderRequestV3, DualOrderRequest } from "../../defs/loopring_defs";
import Web3 from "web3";
import { CounterFactualInfo } from "../../defs";
export declare enum GetEcDSASigType {
    HasDataStruct = 0,
    WithoutDataStruct = 1,
    Contract = 2
}
export interface KeyPairParams {
    web3: any;
    address: string;
    walletType: ConnectorNames;
    keySeed: string;
    chainId: ChainId;
    accountId?: number;
    counterFactualInfo?: CounterFactualInfo;
    isMobile?: boolean;
}
export declare function generatePrivateKey(result: {
    sig: string;
    counterFactualInfo: any;
    error: any;
}): {
    keyPair: {
        publicKeyX: string;
        publicKeyY: string;
        secretKey: string;
    };
    formatedPx: string;
    formatedPy: string;
    sk: string;
    counterFactualInfo: any;
};
export declare function generateKeyPair({ web3, address, walletType, keySeed, chainId, accountId, counterFactualInfo, isMobile, }: KeyPairParams, publicKey?: {
    x: string;
    y: string;
} | undefined): Promise<{
    keyPair: {
        publicKeyX: string;
        publicKeyY: string;
        secretKey: string;
    };
    formatedPx: string;
    formatedPy: string;
    sk: string;
    counterFactualInfo: any;
}>;
export declare function getEdDSASig(method: string, basePath: string, api_url: string, requestInfo: any, PrivateKey: string | undefined): string;
export declare function verifyEdDSASig(hash: string, input: {
    Rx: string;
    Ry: string;
    s: string;
}): Boolean;
export declare const getEdDSASigWithPoseidon: (inputs: any, PrivateKey: string | undefined) => {
    hash: any;
    result: string;
};
/**
 * @description sign EIP712
 * @param web3
 * @param account
 * @param method
 * @param params
 * @returns {Promise.<*>}
 */
export declare function signEip712(web3: any, account: string, method: string, params: any): Promise<any>;
export declare function signEip712WalletConnect(web3: any, account: string, typedData: any): Promise<any>;
export declare function getEcDSASig(web3: any, typedData: any, address: string | undefined, type: GetEcDSASigType, chainId: ChainId, accountId?: number, pwd?: string, walletType?: ConnectorNames, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function convertPublicKey2(pk: PublicKey): BN;
export declare function convertPublicKey(pk: PublicKey): BN;
export declare function getUpdateAccountEcdsaTypedData(data: UpdateAccountRequestV3, chainId: ChainId): sigUtil.EIP712TypedData;
export declare function signUpdateAccountWithDataStructure(web3: Web3, bodyParams: UpdateAccountRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signUpdateAccountWithoutDataStructure(web3: Web3, bodyParams: UpdateAccountRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signUpdateAccountWithDataStructureForContract(web3: Web3, bodyParams: UpdateAccountRequestV3, chainId: ChainId, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function get_EddsaSig_OffChainWithdraw(request: OffChainWithdrawalRequestV3, eddsaKey: string): {
    hash: any;
    result: string;
};
export declare function getOrderHash(request: SubmitOrderRequestV3): any;
export declare function getWithdrawTypedData(data: OffChainWithdrawalRequestV3, chainId: ChainId): EIP712TypedData;
export declare function signOffchainWithdrawWithDataStructure(web3: Web3, owner: string, bodyParams: OffChainWithdrawalRequestV3, chainId: ChainId, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signOffchainWithdrawWithoutDataStructure(web3: Web3, owner: string, bodyParams: OffChainWithdrawalRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signOffchainWithdrawWithDataStructureForContract(web3: Web3, owner: string, bodyParams: OffChainWithdrawalRequestV3, chainId: ChainId, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function get_EddsaSig_NFT_Withdraw(request: NFTWithdrawRequestV3, eddsaKey: string): {
    hash: any;
    result: string;
};
export declare function getNftData(request: NFTMintRequestV3): any;
export declare function getNFTMintTypedData(data: NFTMintRequestV3, chainId: ChainId, web3: Web3): EIP712TypedData;
export declare function getNFTWithdrawTypedData(data: NFTWithdrawRequestV3, chainId: ChainId): EIP712TypedData;
export declare function signNFTWithdrawWithDataStructure(web3: Web3, owner: string, bodyParams: NFTWithdrawRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signNFTWithdrawWithoutDataStructure(web3: Web3, owner: string, bodyParams: NFTWithdrawRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signNFTWithdrawWithDataStructureForContract(web3: Web3, owner: string, bodyParams: NFTWithdrawRequestV3, chainId: ChainId, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function get_EddsaSig_NFT_Mint(request: NFTMintRequestV3, eddsaKey: string): {
    hash: any;
    result: string;
};
export declare function get_Is_Nft_Token(tokenId: number): boolean;
export declare function get_EddsaSig_NFT_Order(request: NFTOrderRequestV3, eddsaKey: string): {
    hash: any;
    result: string;
};
export declare function get_EddsaSig_Dual_Order(request: DualOrderRequest, eddsaKey: string): {
    hash: any;
    result: string;
};
export declare function signNFTMintWithDataStructure(web3: Web3, owner: string, bodyParams: NFTMintRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signNFTMintWithoutDataStructure(web3: Web3, owner: string, bodyParams: NFTMintRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signNFTMintWithDataStructureForContract(web3: Web3, owner: string, bodyParams: NFTMintRequestV3, chainId: ChainId, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function get_EddsaSig_Transfer(request: OriginTransferRequestV3, eddsaKey: string): {
    hash: any;
    result: string;
};
export declare function getTransferOldTypedData(data: OriginTransferRequestV3, chainId: ChainId): EIP712TypedData;
export declare function getTransferTypedData(data: OriginTransferRequestV3, chainId: ChainId): EIP712TypedData;
export declare function signTransferWithDataStructure(web3: Web3, owner: string, bodyParams: OriginTransferRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signTransferWithoutDataStructure(web3: Web3, owner: string, bodyParams: OriginTransferRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signTransferWithDataStructureForContract(web3: Web3, owner: string, bodyParams: OriginTransferRequestV3, chainId: ChainId, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function get_EddsaSig_NFT_Transfer(request: OriginNFTTransferRequestV3, eddsaKey: string): {
    hash: any;
    result: string;
};
export declare function getNftTradeHash(request: NFTTradeRequestV3): any;
export declare function getNFTTransferTypedData(data: OriginNFTTransferRequestV3, chainId: ChainId): EIP712TypedData;
export declare function signTNFTransferWithDataStructure(web3: Web3, owner: string, bodyParams: OriginNFTTransferRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signNFTTransferWithoutDataStructure(web3: Web3, owner: string, bodyParams: OriginNFTTransferRequestV3, chainId: ChainId, walletType: ConnectorNames, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function signNFTTransferWithDataStructureForContract(web3: Web3, owner: string, bodyParams: OriginNFTTransferRequestV3, chainId: ChainId, accountId: number, counterFactualInfo?: CounterFactualInfo): Promise<{
    ecdsaSig: any;
    counterFactualInfo?: undefined;
} | {
    ecdsaSig: any;
    counterFactualInfo: any;
}>;
export declare function eddsaSign(typedData: any, eddsaKey: string): {
    eddsaSig: string;
};
export declare function eddsaSignWithDomain(domainHax: string, primaryType: string, message: EIP712Message, types: EIP712Types, eddsaKey: string): {
    eddsaSig: string;
};
export declare function getAmmJoinEcdsaTypedData(data: JoinAmmPoolRequest, patch: AmmPoolRequestPatch): {
    types: {
        EIP712Domain: {
            name: string;
            type: string;
        }[];
        PoolJoin: {
            name: string;
            type: string;
        }[];
    };
    primaryType: string;
    domain: {
        name: string;
        version: string;
        chainId: ChainId;
        verifyingContract: string;
    };
    message: {
        owner: string;
        joinAmounts: string[];
        joinStorageIDs: number[];
        mintMinAmount: string;
        fee: string;
        validUntil: number | undefined;
    };
};
export declare function get_EddsaSig_JoinAmmPool(data: JoinAmmPoolRequest, patch: AmmPoolRequestPatch): {
    eddsaSig: string;
};
export declare function getAmmExitEcdsaTypedData(data: ExitAmmPoolRequest, patch: AmmPoolRequestPatch): sigUtil.EIP712TypedData;
export declare function get_EddsaSig_ExitAmmPool(data: ExitAmmPoolRequest, patch: AmmPoolRequestPatch): {
    eddsaSig: string;
};
