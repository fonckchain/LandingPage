import { BaseAPI } from "./base_api";
import * as loopring_defs from "../defs/loopring_defs";
import { RESULT_INFO } from "../defs";
export declare class DefiAPI extends BaseAPI {
    getDefiToken<R>(): Promise<{
        raw_data: R;
        tokensMap: loopring_defs.LoopringMap<loopring_defs.TokenInfo>;
        idIndex: loopring_defs.LoopringMap<string>;
        addressIndex: loopring_defs.LoopringMap<loopring_defs.TokenAddress>;
    }>;
    getDefiMarkets<R>(request: loopring_defs.GetDefiMarketRequest, url?: string): Promise<{
        markets: loopring_defs.LoopringMap<loopring_defs.DefiMarketInfo>;
        pairs: loopring_defs.LoopringMap<loopring_defs.TokenRelatedInfo>;
        tokenArr: string[];
        tokenArrStr: string;
        marketArr: string[];
        marketArrStr: string;
        raw_data: R;
    }>;
    orderDefi<R>(request: loopring_defs.DefiOrderRequest, privateKey: string, apiKey: string): Promise<(Omit<any, "resultInfo"> & {
        raw_data: Omit<any, "resultInfo">;
    }) | RESULT_INFO>;
    getDefiReward<R>(request: loopring_defs.GetUserDefiRewardRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        totalRewards: string;
        lastDayRewards: string;
        rewards: [];
    } | RESULT_INFO>;
    getDefiTransaction<R>(request: loopring_defs.GetUserDefiTxRequest, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        userDefiTxs: loopring_defs.UserDefiTxsHistory[];
    } | RESULT_INFO>;
    getDualInfos<R>(request: loopring_defs.GetDualInfosRequest): Promise<RESULT_INFO | {
        totalNum: number;
        dualInfo: {
            infos: loopring_defs.DualProductAndPrice[];
            index: loopring_defs.DualIndex;
            balance: loopring_defs.DualBalance[];
            rules: loopring_defs.DualRulesCoinsInfo[];
        };
        raw_data: R;
    }>;
    getDualBalance<R>(request?: undefined): Promise<any>;
    getDualPrices(request: loopring_defs.GetDualPricesRequest): Promise<any>;
    getDualIndex(request: {
        baseSymbol: string;
        quoteSymbol: string;
    }): Promise<any>;
    getDualTransactions(request: loopring_defs.GetUserDualTxRequest, apiKey: string): Promise<any>;
    orderDual(request: loopring_defs.DualOrderRequest, privateKey: string, apiKey: string): Promise<RESULT_INFO | (Pick<any, string | number | symbol> & {
        raw_data: Pick<any, string | number | symbol>;
    })>;
    getDualUserLocked({ lockTag, ...request }: loopring_defs.DualUserLockedRequest, apiKey: string): Promise<any>;
    sendStakeClaim(req: loopring_defs.OriginStakeClaimRequestV3WithPatch, options?: {
        accountId?: number;
        counterFactualInfo?: any;
    }): Promise<any>;
    sendStakeRedeem(request: {
        accountId: number;
        hash: string;
        token: loopring_defs.TokenVolumeV3;
    }, privateKey: string, apiKey: string): Promise<any>;
    sendStake(request: {
        accountId: number;
        token: loopring_defs.TokenVolumeV3;
        timestamp: number;
    }, privateKey: string, apiKey: string): Promise<any>;
    getStakeProducts<R>(): Promise<{
        products: loopring_defs.STACKING_PRODUCT[];
        raw_data: R;
    }>;
    getStakeSummary<R>(request: {
        accountId: number;
        tokenId: number;
        start?: number;
        end?: number;
        limit?: number;
        offset?: number;
        hashes?: string;
        statuses?: string;
    }, apiKey: string): Promise<{
        raw_data: R;
        totalNum: number;
        totalStaked: string;
        totalStakedRewards: string;
        totalLastDayPendingRewards: string;
        totalClaimableRewards: string;
        list: loopring_defs.StakeInfoOrigin[];
    } | RESULT_INFO>;
    getStakeTransactions<R>(request: {
        accountId: number;
        tokenId: number;
        start?: number;
        end?: number;
        limit?: number;
        offset?: number;
        hashes?: string;
        types?: string;
    }, apiKey: string): Promise<{
        list: loopring_defs.STACKING_TRANSACTIONS[];
        totalNum: number;
        raw_data: R;
    }>;
    getCefiMarkets<R>(): Promise<{
        markets: loopring_defs.LoopringMap<loopring_defs.CEX_MARKET & {
            type: "CEX";
        }>;
        pairs: loopring_defs.LoopringMap<loopring_defs.TokenRelatedInfo>;
        tokenArr: string[];
        tokenArrStr: string;
        marketArr: string[];
        marketArrStr: string;
        raw_data: R;
    }>;
    getCefiDepth<R>({ request, }: {
        request: {
            market: string;
            level: number;
            limit?: number;
        };
    }): Promise<{
        depth: loopring_defs.DepthData;
        raw_data: R;
    }>;
    getCefiOrders<R>({ request, apiKey, }: {
        request: {
            accountId: number;
        };
        apiKey: string;
    }): Promise<any>;
    sendCefiOrder({ request, privateKey, apiKey, }: {
        request: loopring_defs.OriginCEXV3OrderRequest;
        privateKey: string;
        apiKey: string;
    }): Promise<any>;
}
