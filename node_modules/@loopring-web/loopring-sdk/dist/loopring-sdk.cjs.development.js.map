{"version":3,"file":"loopring-sdk.cjs.development.js","sources":["../src/utils/network_tools.ts","../src/utils/symbol_tools.ts","../src/defs/web3_defs.ts","../src/defs/ws_defs.ts","../src/defs/url_defs.ts","../src/defs/loopring_constants.ts","../src/defs/loopring_enums.ts","../src/defs/loopring_defs.ts","../src/defs/error_codes.ts","../src/defs/index.ts","../src/utils/formatter.ts","../src/utils/log_tools.ts","../src/utils/swap_calc_utils.ts","../node_modules/regenerator-runtime/runtime.js","../src/api/sign/poseidon/field.ts","../src/api/sign/poseidon/jubjub.ts","../src/api/sign/poseidon/permutation.ts","../src/api/sign/poseidon/eddsa.ts","../src/api/sign/poseidon/babyJub.ts","../src/api/sign/poseidon/EDDSAUtil.ts","../src/api/sign/sign_tools.ts","../src/utils/obj_tools.ts","../src/api/request.ts","../src/api/ethereum/contracts/AbiFunction.js","../src/api/ethereum/contracts/Contract.js","../src/api/ethereum/contracts/Contracts.js","../src/api/ethereum/contracts/index.js","../src/api/base_api.ts","../src/api/ws_api.ts","../src/api/exchange_api.ts","../src/api/ammpool_api.ts","../src/api/contract_api.ts","../src/api/user_api.ts","../src/api/wallet_api.ts","../src/api/whitelisted_user_api.ts","../src/api/nft_api.ts","../src/api/global_api.ts","../src/api/delegate_api.ts","../src/api/defi_api.ts","../src/api/luckToken_api.ts","../src/api/contacts_api.ts"],"sourcesContent":["/* eslint-disable no-console  */\nexport const dumpError400 = (reason: any, src = \"\") => {\n  if (src) {\n    console.debug(\"src:\", src);\n  }\n  if (reason?.response) {\n    console.error(reason.response.data);\n  } else {\n    console.error(reason.message);\n  }\n};\n\nexport function sleep(milliseconds: number) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n","import { TokenInfo } from \"defs\";\n\nconst specialSymbols = [\"ETH2x-FIL\"];\n\nexport function getBaseQuote(symbol: string) {\n  if (!symbol) {\n    return {\n      base: undefined,\n      quote: undefined,\n    };\n  }\n\n  if (symbol.startsWith(\"AMM-\")) {\n    symbol = symbol.substr(4);\n  }\n\n  if (specialSymbols.length > 0) {\n    for (let i = 0; i < specialSymbols.length; i++) {\n      const ind = symbol.indexOf(specialSymbols[i]);\n      if (ind >= 0) {\n        if (ind === 0) {\n          return {\n            base: specialSymbols[i],\n            quote: symbol.substr(symbol.lastIndexOf(\"-\") + 1),\n          };\n        } else {\n          return {\n            base: symbol.substr(0, symbol.indexOf(\"-\")),\n            quote: specialSymbols[i],\n          };\n        }\n      }\n    }\n  }\n\n  const base = symbol.substr(0, symbol.indexOf(\"-\"));\n  const quote = symbol.substr(symbol.indexOf(\"-\") + 1);\n\n  return {\n    base,\n    quote,\n  };\n}\n\nexport const getTokenInfoBySymbol = (\n  tokenSymbolMap: { [key: string]: TokenInfo },\n  symbol: string\n) => {\n  if (!tokenSymbolMap) {\n    return undefined;\n  }\n  try {\n    return tokenSymbolMap[symbol];\n  } catch (err) {\n    return undefined;\n  }\n  return undefined;\n};\n\nexport const getTokenInfoById = (\n  tokenIdMap: { [key: number]: TokenInfo },\n  id: number\n) => {\n  if (!tokenIdMap) {\n    return undefined;\n  }\n  try {\n    return tokenIdMap[id];\n  } catch (err) {\n    return undefined;\n  }\n  return undefined;\n};\n\nexport const hasMarket = (marketArr: any, market: string) => {\n  if (!marketArr) {\n    return false;\n  }\n\n  if (marketArr.includes(market)) {\n    return true;\n  }\n  return false;\n};\n\nexport const getExistedMarket = (\n  marketArr: any,\n  base: string | undefined,\n  quote: string | undefined\n) => {\n  let market: any = undefined;\n  let baseShow: any = undefined;\n  let quoteShow: any = undefined;\n\n  if (base && quote) {\n    market = `${base}-${quote}`;\n    baseShow = base;\n    quoteShow = quote;\n    if (!hasMarket(marketArr, market)) {\n      market = `${quote}-${base}`;\n      if (hasMarket(marketArr, market)) {\n        baseShow = quote;\n        quoteShow = base;\n      } else {\n        market = undefined;\n        baseShow = undefined;\n        quoteShow = undefined;\n      }\n    }\n  }\n\n  const amm = market ? `AMM-${market}` : undefined;\n\n  return {\n    market,\n    amm,\n    baseShow,\n    quoteShow,\n  };\n};\nexport const getPair = (marketArr: any, market: string) => {\n  const { base, quote } = getBaseQuote(market);\n\n  return getExistedMarket(marketArr, base, quote);\n};\n","export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n}\n\nexport const NetworkContextName = \"NETWORK\";\n\nexport enum ConnectorNames {\n  Unknown = \"Unknown\",\n  MetaMask = \"MetaMask\",\n  Network = \"Network\",\n  WalletConnect = \"WalletConnect\",\n  Gamestop = \"Gamestop\",\n  OtherExtension = \"OtherExtension\",\n  Coinbase = \"Coinbase\",\n  Ledger = \"Ledger\",\n  Trezor = \"Trezor\",\n  Authereum = \"Authereum\",\n}\n\nexport enum SigSuffix {\n  Suffix02 = \"02\",\n  Suffix03 = \"03\",\n}\n\nexport const NFTFactory = {\n  [ChainId.MAINNET]: \"0xc852aC7aAe4b0f0a0Deb9e8A391ebA2047d80026\",\n  [ChainId.GOERLI]: \"0x0ad87482a1bfd0B3036Bb4b13708C88ACAe1b8bA\",\n};\n\nexport const NFTFactory_Collection = {\n  [ChainId.MAINNET]: \"0x97BE94250AEF1Df307749aFAeD27f9bc8aB911db\",\n  [ChainId.GOERLI]: \"0x0ad87482a1bfd0B3036Bb4b13708C88ACAe1b8bA\",\n};\n","import { OrderStatus, Side } from \"./loopring_enums\";\n\nexport interface WsProps {\n  topics: any[];\n  needApiKey: boolean;\n  apikey?: string;\n}\n\nexport enum WsOps {\n  Sub = \"sub\",\n  Unsub = \"unSub\",\n}\n\nexport enum WsTopicType {\n  account = \"account\",\n  order = \"order\",\n  trade = \"trade\",\n  mixtrade = \"mixtrade\",\n  ticker = \"ticker\",\n  candlestick = \"candlestick\",\n  ammpool = \"ammpool\",\n  orderbook = \"orderbook\",\n  mixorder = \"mixorder\",\n  cefiOrderBook = \"cefiOrderBook\",\n}\n\nexport const getAccountArg = () => {\n  return {\n    topic: WsTopicType.account,\n  };\n};\n\nexport interface WsAccount {\n  accountId: number;\n  totalAmount: string;\n  tokenId: number;\n  amountLocked: string;\n}\n\nexport const getOrderArg = (market: string) => {\n  return {\n    topic: WsTopicType.order,\n    market,\n  };\n};\n\nexport interface WsOrder {\n  hash: string;\n  clientOrderId: string;\n  size: string;\n  volume: string;\n  price: string;\n  filledSize: string;\n  filledVolume: string;\n  filledFee: string;\n  status: OrderStatus;\n  createdAt: string;\n  validSince: string;\n  validUntil: string;\n  side: Side;\n  market: string;\n}\n\nexport type OrderWsRequest = {\n  topic?:\n    | WsTopicType.orderbook\n    | WsTopicType.mixorder\n    | WsTopicType.cefiOrderBook;\n  market: string;\n  level: number;\n  count?: number;\n  snapshot?: boolean;\n  showOverlap?: boolean;\n};\nexport const getOrderBookArg = ({\n  topic = WsTopicType.orderbook,\n  market,\n  level,\n  count,\n  snapshot,\n  showOverlap,\n}: OrderWsRequest) => {\n  const obj: any = {\n    topic,\n    market,\n    level,\n    count,\n    snapshot,\n    showOverlap,\n  };\n  Object.keys(obj).forEach((key) =>\n    obj[key] === undefined ? delete obj[key] : {}\n  );\n  return obj;\n};\n\nexport const getMixOrderArg = ({\n  topic = WsTopicType.mixorder,\n  ...orderWsRequest\n}: { topic?: WsTopicType.mixorder } & Omit<OrderWsRequest, \"topic\">) => {\n  return getOrderBookArg({\n    topic,\n    ...orderWsRequest,\n  });\n};\n\nexport const getCefiOrderBook = ({\n  topic = WsTopicType.cefiOrderBook,\n  ...orderWsRequest\n}: { topic?: WsTopicType.cefiOrderBook } & Omit<OrderWsRequest, \"topic\">) => {\n  return getOrderBookArg({\n    topic,\n    ...orderWsRequest,\n  });\n};\n\nexport const getTradeArg = (market: string) => {\n  return {\n    topic: WsTopicType.trade,\n    market,\n  };\n};\n\nexport const getMixTradeArg = (market: string) => {\n  return {\n    topic: WsTopicType.mixtrade,\n    market,\n  };\n};\n\nexport const getTickerArg = (market: string) => {\n  return {\n    topic: WsTopicType.ticker,\n    market,\n  };\n};\n\nexport const getCandlestickArg = (market: string) => {\n  return {\n    topic: WsTopicType.candlestick,\n    market,\n  };\n};\n\nexport const getAmmpoolArg = (poolAddress: string) => {\n  return {\n    topic: WsTopicType.ammpool,\n    snapshot: true,\n    poolAddress,\n  };\n};\n","export enum LOOPRING_URLs {\n  GET_AVAILABLE_BROKER = \"/api/v3/getAvailableBroker\",\n  GET_RELAYER_CURRENT_TIME = \"/api/v3/timestamp\",\n  API_KEY_ACTION = \"/api/v3/apiKey\", // get update\n  GET_NEXT_STORAGE_ID = \"/api/v3/storageId\",\n  ORDER_ACTION = \"/api/v3/order\", // get submit cancel\n  ORDER_CANCEL_HASH_LIST = \"/api/v3/orders/byHash\", // cancel multiple orders by hashs\n  ORDER_CANCEL_CLIENT_ORDER_ID_LIST = \"/api/v3/orders/byClientOrderId\", // cancel multiple orders by clientOrderids\n  GET_MULTI_ORDERS = \"/api/v3/orders\",\n  GET_MARKETS = \"/api/v3/exchange/markets\",\n  GET_TOKENS = \"/api/v3/exchange/tokens\",\n  GET_EXCHANGE_INFO = \"/api/v3/exchange/info\",\n  GET_WITHDRAWAL_AGENTS = \"/api/v3/exchange/withdrawalAgents\",\n  GET_EXCHANGE_FEEINFO = \"/api/v3/exchange/feeInfo\",\n  GET_IGNORE_WITHDRAW = \"/api/v3/exchange/notWithdrawContractTokens\",\n\n  GET_MIX_MARKETS = \"/api/v3/mix/markets\",\n  GET_DEPTH = \"/api/v3/depth\",\n  GET_MIX_DEPTH = \"/api/v3/mix/depth\",\n  GET_TICKER = \"/api/v3/ticker\",\n  GET_MIX_TICKER = \"/api/v3/mix/ticker\",\n  GET_CANDLESTICK = \"/api/v3/candlestick\",\n  GET_MIX_CANDLESTICK = \"/api/v3/mix/candlestick\",\n  GET_FIAT_PRICE = \"/api/v3/price\",\n  GET_TRADES = \"/api/v3/trade\",\n  POST_INTERNAL_TRANSFER = \"/api/v3/transfer\",\n  ACCOUNT_ACTION = \"/api/v3/account\", // get or update\n  COUNTER_FACTUAL_INFO = \"/api/v3/counterFactualInfo\",\n  GET_USER_REG_TXS = \"/api/v3/user/createInfo\",\n  GET_PWD_RESET_TXS = \"/api/v3/user/updateInfo\",\n  GET_USER_EXCHANGE_BALANCES = \"/api/v3/user/balances\",\n  GET_USER_DEPOSITS_HISTORY = \"/api/v3/user/deposits\",\n  WITHDRAWALS_ACTION = \"/api/v3/user/withdrawals\", // post get\n  POST_FORCE_WITHDRAWALS = \"/api/v3/user/forceWithdrawals\",\n\n  GET_USER_TRANSFERS_LIST = \"/api/v3/user/transfers\",\n  GET_USER_TRADE_HISTORY = \"/api/v3/user/trades\",\n  GET_USER_TXS = \"/api/v3/user/transactions\",\n  GET_USER_FEE_RATE = \"/api/v3/user/feeRates\", // deprecated\n  GET_USER_ORDER_FEE_RATE = \"/api/v3/user/orderFee\",\n  GET_MINIMAL_ORDER_AMT = \"/api/v3/user/orderAmount\", // IGNORE for now.\n  GET_MINIMUM_TOKEN_AMT = \"/api/v3/user/orderUserRateAmount\",\n  GET_OFFCHAIN_FEE_AMT = \"/api/v3/user/offchainFee\",\n  GET_USER_BILLS = \"/api/v3/user/bills\",\n\n  GET_ALLOWANCES = \"/api/v3/eth/allowances\",\n  GET_ETH_NONCE = \"/api/v3/eth/nonce\",\n  GET_ETH_BALANCES = \"/api/v3/eth/balances\",\n  GET_TOKEN_BALANCES = \"/api/v3/eth/tokenBalances\",\n  GET_AKK_TOKEN_BALANCES = \"/api/v3/eth/tokenBalances/all\",\n\n  GET_GAS_PRICE = \"/api/v3/eth/recommendedGasPrice\",\n  GET_GAS_PRICE_RANGE = \"/api/v3/eth/recommendedGasPriceRange\",\n\n  GET_RECOMENDED_MARKETS = \"/api/v3/exchange/recommended\",\n\n  GET_AMM_POOLS_CONF = \"/api/v3/amm/pools\",\n  GET_AMM_POOLS_SNAPSHOT = \"/api/v3/amm/balance\",\n  GET_AMM_POOLS_BALANCES = \"/api/v3/amm/balances\",\n  GET_AMM_POOL_STATS = \"/api/v3/amm/poolsStats\",\n  POST_JOIN_AMM_POOL = \"/api/v3/amm/join\",\n  POST_EXIT_AMM_POOL = \"/api/v3/amm/exit\",\n  GET_AMM_POOL_TXS = \"/api/v3/amm/transactions\",\n  GET_USER_AMM_POOL_TXS = \"/api/v3/amm/user/transactions\",\n  GET_AMM_POOL_TRADE_TXS = \"/api/v3/amm/trades\",\n  GET_AMM_ACTIVITY_RULES = \"/api/v3/sidecar/activityRules\",\n  GET_AMMPOOL_USER_REWARDS = \"/api/v3/amm/user/rewards\",\n  GET_AMMPOOL_REWARDS = \"/api/v3/amm/rewards\",\n  GET_AMMPOOL_GAME_RANK = \"/api/v3/game/rank\",\n  GET_AMMPOOL_GAME_USER_RANK = \"/api/v3/game/user/rank\",\n  GET_LIQUIDITY_MINING = \"/api/v3/sidecar/liquidityMining\",\n  GET_DELEGATE_GET_CODE = \"/api/v3/delegator/getCode\",\n  GET_DELEGATE_GET_IPFS = \"/api/v3/delegator/ipfs\",\n  GET_LIQUIDITY_MINING_USER_HISTORY = \"/api/v3/sidecar/liquidityMiningUserHistory\",\n  GET_PROTOCOL_PORTRAIT = \"/api/v3/sidecar/ProtocolPortrait\",\n  GET_AMM_ASSET_HISTORY = \"/api/v3/amm/assets\",\n  GET_ASSET_LOCK_RECORDS = \"api/v3/user/lockRecords\",\n\n  GET_DEFI_TOKENS = \"/api/v3/defi/tokens\",\n  GET_DEFI_MARKETS = \"/api/v3/defi/markets\",\n  POST_DEFI_ORDER = \"/api/v3/defi/order\",\n  GET_DEFI_REWARDS = \"/api/v3/defi/rewards\",\n  GET_DEFI_TRANSACTIONS = \"/api/v3/defi/transactions\",\n\n  SET_REFERRER = \"/api/v3/refer\",\n\n  GET_WS_KEY = \"/v3/ws/key\",\n  GET_LATEST_TOKEN_PRICES = \"/api/v3/datacenter/getLatestTokenPrices\",\n  GET_USER_TRADE_AMOUNT = \"/api/v3/datacenter/getUserTradeAmount\",\n\n  GET_USER_ASSETS = \"/api/wallet/v3/userAssets\",\n  GET_TOKEN_PRICES = \"/api/wallet/v3/tokenPrices\",\n  GET_GUARDIAN_APPROVE_LIST = \"/api/wallet/v3/getGuardianApproveList\",\n  GET_PROTECTORS = \"/api/wallet/v3/getProtects\",\n  GET_OPERATION_LOGS = \"/api/wallet/v3/operationLogs\",\n  GET_HEBAO_CONFIG = \"/api/wallet/v3/getAppConfigs\",\n  GET_WALLET_TYPE = \"/api/wallet/v3/wallet/type\",\n  GET_WALLET_MODULES = \"/api/wallet/v3/walletModules\",\n  GET_WALLET_CONTRACTVERSION = \"/api/wallet/v3/contractVersion\",\n  RESOLVE_ENS = \"/api/wallet/v3/resolveEns\",\n  RESOLVE_NAME = \"/api/wallet/v3/resolveName\",\n  //\n  SUBMIT_APPROVE_SIGNATURE = \"/api/wallet/v3/submitApproveSignature\",\n  REJECT_APPROVE_SIGNATURE = \"/api/wallet/v3/rejectApproveSignature\",\n  // OFFICIAL_LOCK_OR_UNLOCK = \"/api/wallet/v3/officialLockOrUnlock\",\n  SEND_META_TX = \"/api/wallet/v3/sendMetaTx\",\n\n  GET_ACCOUNT_SERVICES = \"/api/v3/spi/getAccountServices\",\n  // VIP\n  GET_USER_VIP_INFO = \"/api/v3/user/vipInfo\",\n  GET_USER_VIP_ASSETS = \"/api/v3/datacenter/getUserAssets\",\n  GET_USER_NFT_BALANCES = \"/api/v3/user/nft/balances\",\n  GET_USER_NFT_BALANCES_BY_COLLECTION = \"/api/v3/user/nft/collection/balances\",\n  GET_NFT_OFFCHAIN_FEE_AMT = \"/api/v3/user/nft/offchainFee\",\n  POST_NFT_INTERNAL_TRANSFER = \"/api/v3/nft/transfer\",\n  POST_NFT_WITHDRAWALS = \"/api/v3/nft/withdrawal\",\n  POST_NFT_MINT = \"/api/v3/nft/mint\",\n  POST_NFT_TRADE = \"/api/v3/nft/trade\",\n  POST_NFT_VALIDATE_ORDER = \"/api/v3/nft/validateOrder\", // post get\n  POST_NFT_EDIT_COLLECTION = \"/api/v3/nft/collection/edit\",\n  POST_NFT_CREATE_LEGACY_COLLECTION = \"/api/v3/nft/collection/legacy/tokenAddress\",\n  POST_NFT_VALIDATE_REFRESH_NFT = \"/api/v3/nft/image/refresh\",\n  POST_DEPLOY_COLLECTION = \"/api/v3/collection/deployTokenAddress\",\n  POST_NFT_LEGACY_UPDATE_COLLECTION = \"/api/v3/nft/collection/legacy/updateNftCollection\",\n  POST_NFT_UPDATE_NFT_GROUP = \"/api/v3/user/nft/updateNftPreference\",\n  GET_NFT_COLLECTION = \"/api/v3/nft/collection\",\n  POST_NFT_CREATE_COLLECTION = \"/api/v3/nft/collection\",\n  DELETE_NFT_CREATE_COLLECTION = \"/api/v3/nft/collection\",\n  GET_COLLECTION_WHOLE_NFTS = \"/api/v3/nft/public/collection/items\",\n  GET_NFT_COLLECTION_PUBLISH = \"/api/v3/nft/public/collection\",\n  GET_NFT_COLLECTION_HASNFT = \"/api/v3/user/collection/details\",\n  GET_NFT_LEGACY_COLLECTION = \"/api/v3/nft/collection/legacy\",\n  GET_NFT_LEGACY_TOKENADDRESS = \"/api/v3/nft/collection/legacy/tokenAddress\",\n  GET_NFT_LEGACY_BALANCE = \"/api/v3/nft/collection/legacy/balance\",\n\n  GET_NFTs_INFO = \"/api/v3/nft/info/nfts\",\n  GET_USER_NFT_TRANSFER_HISTORY = \"/api/v3/user/nft/transfers\",\n  GET_USER_NFT_DEPOSIT_HISTORY = \"/api/v3/user/nft/deposits\",\n  GET_USER_NFT_WITHDRAW_HISTORY = \"/api/v3/user/nft/withdrawals\",\n  GET_USER_NFT_TRANSACTION_HISTORY = \"/api/v3/user/nft/transactions\",\n  GET_USER_NFT_TRADE_HISTORY_OLD = \"/api/v3/user/nft/trades\",\n  GET_USER_NFT_TRADE_HISTORY = \"/api/v3/new/user/nft/trades\",\n  GET_USER_NFT_MINT_HISTORY = \"/api/v3/user/nft/mints\",\n  GET_DEPLOY_TOKEN_ADDRESS = \"/api/v3/nft/deployTokenAddress\",\n  IPFS_META_URL = \"https://ipfs.loopring.io/ipfs/\",\n\n  GET_DUAL_INDEX = \"/api/v3/dual/index\",\n  GET_DUAL_PRICES = \"/api/v3/dual/prices\",\n  GET_DUAL_INFOS = \"/api/v3/dual/infos\",\n  GET_DUAL_TRANSACTIONS = \"/api/v3/dual/transactions\",\n  GET_DUAL_BALANCE = \"/api/v3/dual/balance\",\n  GET_DUAL_RULE = \"/api/v3/dual/rules\",\n  POST_DUAL_ORDER = \"/api/v3/dual/order\",\n  GET_DUAL_USER_LOCKED = \"/api/v3/dual/lockRecordAmount\",\n\n  GET_LUCK_TOKEN_AGENTS = \"/api/v3/luckyToken/agents\",\n  GET_LUCK_TOKEN_AUTHORIZEDSIGNERS = \"/api/v3/luckyToken/authorizedSigners\",\n  GET_LUCK_TOKEN_CLAIMHISTORY = \"/api/v3/luckyToken/user/claimHistory\",\n  GET_LUCK_TOKEN_LUCKYTOKENS = \"/api/v3/luckyToken/user/luckyTokens\",\n  GET_LUCK_TOKEN_LUCKYTOKENDETAIL = \"/api/v3/luckyToken/user/luckyTokenDetail\",\n  GET_LUCK_TOKEN_BLINDBOXDETAIL = \"/api/v3/luckyToken/user/blindBoxDetail\",\n  GET_LUCK_TOKEN_WITHDRAWALS = \"/api/v3/luckyToken/user/withdraws \",\n  GET_LUCK_TOKEN_BALANCES = \"/api/v3/luckyToken/user/balances\",\n  GET_LUCK_TOKEN_CLAIMEDLUCKYTOKENS = \"/api/v3/luckyToken/user/claimedLuckyTokens\",\n  GET_LUCK_TOKEN_CLAIMEDBLINDBOX = \"/api/v3/luckyToken/user/claimBlindBoxHistory\",\n  GET_LUCK_TOKEN_SUMMARY = \"/api/v3/luckyToken/user/summary\",\n  POST_LUCK_TOKEN_SENDLUCKYTOKEN = \"/api/v3/luckyToken/sendLuckyToken\",\n  POST_LUCK_TOKEN_CLAIMLUCKYTOKEN = \"/api/v3/luckyToken/claimLuckyToken\",\n  POST_LUCK_TOKEN_CLAIMBLINDBOX = \"/api/v3/luckyToken/claimBlindBox\",\n  POST_LUCK_TOKEN_WITHDRAWALS = \"/api/v3/luckyToken/user/withdrawals\",\n  GET_BANXA_API_KEY = \"/api/v3/hmacAuthentication\",\n  GET_STAKE_PRODUCTS = \"/api/v3/stake/products\",\n  POST_STAKE_CLAIM = \"/api/v3/stake/claim\",\n  POST_STAKE = \"/api/v3/stake/stake\",\n  POST_STAKE_REDEEM = \"/api/v3/stake/redeem\",\n  GET_STAKE_SUMMARY = \"/api/v3/stake/user/summary\",\n  GET_STAKE_TRANSACTIONS = \"/api/v3/stake/user/transactions\",\n\n  // Contacts\n  GET_CONTACTS = \"/api/v3/user/contact\",\n  CREATE_CONTACT = \"/api/v3/user/contact/add\",\n  UPDATE_CONTACT = \"/api/v3/user/contact/update\",\n  DELETE_CONTACT = \"/api/v3/user/contact\",\n\n  // CEFI_MARKETS\n  GET_CEFI_MARKETS = \"api/v3/cefi/markets\",\n  GET_CEFI_DEPTH = \"api/v3/cefi/depth\",\n  GET_CEFI_ORDERS = \"api/v3/cefi/orders\",\n  POST_CEFI_ORDER = \"api/v3/cefi/order\",\n}\n","export enum HEBAO_LOCK_STATUS {\n  LOCK_FAILED = \"LOCK_FAILED\",\n  CREATED = \"CREATED\",\n  LOCK_WAITING = \"LOCK_WAITING\",\n  UNLOCK_FAILED = \"UNLOCK_FAILED\",\n  LOCKED = \"LOCKED\",\n  UNLOCK_WAITING = \"UNLOCK_WAITING\",\n}\n\nexport enum HEBAO_META_TYPE {\n  recovery = 16,\n  transfer = 18,\n  add_guardian = 34,\n  remove_guardian = 35,\n  unlock_wallet = 37,\n  deposit_wallet = 202,\n}\n\nexport const SoursURL = \"https://static.loopring.io/assets/\";\n","export enum ReqMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n  DELETE = \"DELETE\",\n}\n\nexport enum SigPatchField {\n  EddsaSignature = \"eddsaSignature\",\n}\n\nexport enum MarketStatus {\n  AMM = 1,\n  ORDER_BOOK = 2,\n  ALL = 3,\n}\n\nexport enum VipCatergory {\n  ORDERBOOK_TRADING_FEES_STABLECOIN = \"ORDERBOOK_TRADING_FEES_STABLECOIN\",\n  ORDERBOOK_TRADING_FEES = \"ORDERBOOK_TRADING_FEES\",\n  AMM_TRADING_FEES = \"AMM_TRADING_FEES\",\n  OTHER_FEES = \"OTHER_FEES\",\n}\n\nexport enum TradeChannel {\n  BLANK = \"\",\n  ORDER_BOOK = \"ORDER_BOOK\", // 0\n  AMM_POOL = \"AMM_POOL\", // 1\n  MIXED = \"MIXED\", // 2\n}\n\nexport enum OrderType {\n  LimitOrder = \"LIMIT_ORDER\",\n  TakerOnly = \"TAKER_ONLY\",\n  MakerOnly = \"MAKER_ONLY\",\n  ClassAmm = \"AMM\",\n}\n\nexport enum OrderTypeResp {\n  LimitOrder = \"LIMIT_ORDER\",\n  TakerOnly = \"TAKER_ONLY\",\n  MakerOnly = \"MAKER_ONLY\",\n  ClassAmm = \"CLASS_AMM\",\n}\n\nexport enum Currency {\n  usd = \"usd\",\n  cny = \"cny\",\n}\n\nexport enum OffchainFeeReqType {\n  ORDER = 0,\n  OFFCHAIN_WITHDRAWAL = 1,\n  UPDATE_ACCOUNT = 2,\n  TRANSFER = 3,\n  FAST_OFFCHAIN_WITHDRAWAL = 4,\n  OPEN_ACCOUNT = 5,\n  AMM_EXIT = 6,\n  DEPOSIT = 7,\n  AMM_JOIN = 8,\n  TRANSFER_AND_UPDATE_ACCOUNT = 15,\n  DEFI_JOIN = 21,\n  DEFI_EXIT = 22,\n  FORCE_WITHDRAWAL = 23,\n}\nexport enum OffchainNFTFeeReqType {\n  NFT_MINT = 9,\n  NFT_WITHDRAWAL = 10,\n  NFT_TRANSFER = 11,\n  NFT_DEPLOY = 13,\n  NFT_TRANSFER_AND_UPDATE_ACCOUNT = 19,\n}\n\nexport enum TradingInterval {\n  min1 = \"1min\",\n  min5 = \"5min\",\n  min15 = \"15min\",\n  min30 = \"30min\",\n  hr1 = \"1hr\",\n  hr2 = \"2hr\",\n  hr4 = \"4hr\",\n  hr12 = \"12hr\",\n  d1 = \"1d\",\n  w1 = \"1w\",\n}\n\nexport enum TxStatus {\n  processing = \"processing\",\n  processed = \"processed\",\n  received = \"received\",\n  failed = \"failed\",\n}\n\nexport enum OrderStatus {\n  processing = \"processing\",\n  processed = \"processed\",\n  failed = \"failed\",\n  cancelled = \"cancelled\",\n  cancelling = \"cancelling\",\n  expired = \"expired\",\n}\n\nexport enum Side {\n  Buy = \"BUY\",\n  Sell = \"SELL\",\n}\n\nexport enum WithdrawalTypes {\n  OFFCHAIN_WITHDRAWAL = \"OFFCHAIN_WITHDRAWAL\",\n  ONCHAIN_WITHDRAWAL = \"ONCHAIN_WITHDRAWAL\",\n  FORCE_WITHDRAWAL = \"FORCE_WITHDRAWAL\",\n}\n\nexport enum UserTxTypes {\n  DEPOSIT = \"deposit\",\n  TRANSFER = \"transfer\",\n  OFFCHAIN_WITHDRAWAL = \"offchain_withdrawal\",\n  FORCE_WITHDRAWAL = \"force_withdrawal\",\n  DELEGATED_FORCE_WITHDRAW = \"delegated_force_withdraw\",\n  SEND_LUCKY_TOKEN = \"send_lucky_token\",\n  WITHDRAW_LUCKY_TOKEN = \"withdraw_lucky_token\",\n  WITHDRAW = \"onchain_withdrawal\",\n  SEND_BACK_LUCKY_TOKEN = \"send_back_lucky_token\",\n  DUAL_INVESTMENT = \"dual_investment\",\n  L2_STAKING = \"l2_staking\",\n}\n\nexport enum UserBillTypes {\n  DEPOSIT = 0,\n  ONCHAIN_WITHDRAWAL = 1,\n  TRANSFER = 2,\n}\n\nexport enum UserNFTTxTypes {\n  DEPOSIT = \"deposit\",\n  TRANSFER = \"transfer\",\n  WITHDRAW = \"onchain_withdrawal\",\n  MINT = \"mint\",\n}\n\nexport enum TransferType {\n  transfer = \"transfer\",\n  transfer_red = \"transfer_red\",\n}\n\nexport enum BillType {\n  ORDER = \"order\",\n  DEPOSIT = \"deposit\",\n  ONCHAIN_WITHDRAWAL = \"onchain_withdrawal\",\n  OFFCHAIN_WITHDRAWAL = \"offchain_withdrawal\",\n  TRANSFER = \"transfer\",\n  TRANSFER_RED = \"transfer_red\",\n}\n\nexport enum FilledType {\n  dex = \"dex\",\n  amm = \"amm\",\n}\n\nexport enum TxType {\n  TRANSFER = \"TRANSFER\",\n  DEPOSIT = \"DEPOSIT\",\n  OFFCHAIN_WITHDRAWAL = \"OFFCHAIN_WITHDRAWAL\",\n}\n\nexport enum TxNFTType {\n  TRANSFER = \"TRANSFER\",\n  DEPOSIT = \"DEPOSIT\",\n  WITHDRAW = \"WITHDRAW\",\n  ALL = \"ALL\",\n  MINT = \"MINT\",\n}\n\nexport enum AmmTxType {\n  JOIN = \"AMM_JOIN\",\n  EXIT = \"AMM_EXIT\",\n}\n\nexport enum SortOrder {\n  ASC = 0,\n  DESC = 1,\n}\n\nexport enum RuleType {\n  AMM_MINING = \"AMM_MINING\",\n  SWAP_VOLUME_RANKING = \"SWAP_VOLUME_RANKING\",\n  ORDERBOOK_MINING = \"ORDERBOOK_MINING\",\n}\n\nexport enum AmmPoolActivityStatus {\n  NotStarted = \"NotStarted\",\n  InProgress = \"InProgress\",\n  EndOfGame = \"EndOfGame\",\n}\n\nexport enum SIG_FLAG {\n  NO_SIG,\n  EDDSA_SIG,\n  EDDSA_SIG_POSEIDON,\n}\n\nexport enum AssetType {\n  LEVEL_ONE = 0,\n  DEX = 1,\n}\n\nexport enum IntervalType {\n  HOUR = 0,\n  DAY = 1,\n}\n","import { ChainId, ConnectorNames } from \"./web3_defs\";\n\nimport Web3 from \"web3\";\n\nimport {\n  AmmPoolActivityStatus,\n  AmmTxType,\n  AssetType,\n  BillType,\n  Currency,\n  IntervalType,\n  MarketStatus,\n  OffchainFeeReqType,\n  OffchainNFTFeeReqType,\n  OrderStatus,\n  OrderType,\n  OrderTypeResp,\n  ReqMethod,\n  RuleType,\n  Side,\n  SIG_FLAG,\n  TradeChannel,\n  TradingInterval,\n  TransferType,\n  TxStatus,\n  TxType,\n  UserBillTypes,\n  UserNFTTxTypes,\n  UserTxTypes,\n  WithdrawalTypes,\n} from \"./loopring_enums\";\nimport { RESULT_INFO } from \"./error_codes\";\nimport { HEBAO_LOCK_STATUS, HEBAO_META_TYPE } from \"./loopring_constants\";\nimport { CounterFactualInfo, NFTCounterFactualInfo } from \"./account_defs\";\nimport { NFTType } from \"../api\";\n\nexport type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\nexport type XOR<T, U> = T | U extends { [key: string]: any }\n  ? (Without<T, U> & U) | (Without<U, T> & T)\n  : T | U;\n\nexport interface VipFeeRateInfo {\n  symbol: string;\n  makerRate: number;\n  takerRate: number;\n}\n\nexport type VipFeeRateInfoMap = { [key: string]: VipFeeRateInfo };\n\nexport type TX_HASH_API = { hash?: string; resultInfo?: RESULT_INFO };\nexport type TX_HASH_RESULT<T> = T & { raw_data: T };\n\nexport interface ReqOptions {\n  baseUrl?: string;\n  apiKey?: string;\n  signature?: string;\n\n  url?: string;\n}\nexport enum NetworkWallet {\n  ETHEREUM = \"ETHEREUM\",\n  ARBITRUM = \"ARBITRUM\",\n  GOERLI = \"GOERLI\",\n  TAIKO = \"TAIKO\",\n}\n\nexport interface ReqParams {\n  url: string;\n  method: ReqMethod;\n  sigFlag: SIG_FLAG;\n\n  queryParams?: any;\n  bodyParams?: any;\n\n  apiKey?: string;\n\n  sigObj?: {\n    dataToSig?: any;\n    sig?: string;\n    sigPatch?: string;\n\n    PrivateKey?: string;\n\n    owner?: string;\n    pwd?: string;\n    web3?: any;\n    hasDataStruct?: boolean;\n  };\n  eddsaSignature?: string;\n  ecdsaSignature?: string;\n}\n\nexport interface LoopringMap<T> {\n  [key: string]: T;\n}\n\nexport interface ExchangeInfo {\n  ammExitFees: Array<any>[];\n  chainId: number;\n  depositAddress: string;\n  exchangeAddress: string;\n  fastWithdrawalFees: Array<any>[];\n  onchainFees: Array<any>[];\n  openAccountFees: Array<any>[];\n  transferFees: Array<any>[];\n  updateFees: Array<any>[];\n  withdrawalFees: Array<any>[];\n}\n\nexport interface TickerData {\n  symbol: string;\n  base: string | undefined;\n  quote: string | undefined;\n  timestamp: number;\n  base_token_volume: string;\n  quote_token_volume: string;\n  base_fee_amt: string;\n  quote_fee_amt: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  count: number;\n  bid: number;\n  ask: number;\n  change?: number;\n}\n\nexport interface ABInfo {\n  price: number;\n  amt: string;\n  vol: string;\n  amtTotal: string;\n  volTotal: string;\n}\n\nexport interface DepthData {\n  symbol: string;\n\n  version: number;\n  timestamp: number;\n\n  mid_price: number;\n\n  bids: ABInfo[];\n  bids_prices: number[];\n  bids_amtTotals: string[];\n  bids_volTotals: string[];\n  bids_amtTotal: string;\n  bids_volTotal: string;\n\n  asks: ABInfo[];\n  asks_prices: number[];\n  asks_amtTotals: string[];\n  asks_volTotals: string[];\n  asks_amtTotal: string;\n  asks_volTotal: string;\n}\n\nexport interface Candlestick {\n  timestamp: number;\n  txs: number;\n  open: number;\n  close: number;\n  high: number;\n  low: number;\n  baseVol: string;\n  quoteVol: string;\n}\n\nexport interface TradesData {\n  totalNum: number;\n  trades: any[][];\n}\n\nexport interface OrdersData {\n  totalNum: number;\n  trades: any[][];\n}\n\nexport interface QuotesData {\n  quotes: any[][];\n}\n\nexport interface TokenInfo {\n  type: string;\n  tokenId: number;\n  symbol: string;\n  name: string;\n  address: string;\n  decimals: number;\n  precision: number;\n  precisionForOrder: number;\n  orderAmounts: {\n    minimum: string;\n    maximum: string;\n    dust: string;\n  };\n  luckyTokenAmounts: {\n    minimum: string;\n    maximum: string;\n    dust: string;\n  };\n  fastWithdrawLimit: string;\n  gasAmounts: {\n    distribution: string;\n    deposit: string;\n  };\n  enabled: boolean;\n\n  isLpToken: boolean;\n}\n\nexport interface AmmPoolStat {\n  market: string;\n  liquidity: string[];\n  lpLiquidity: string;\n  liquidityUSD: string;\n  ohlc: string[];\n  volume: string[];\n  fees: string[];\n  apyBips: string;\n  isRecommended: boolean;\n  rewards: TokenVolumeV3[];\n}\n\nexport interface AmmPoolActivityRule {\n  market: string;\n  ruleType: RuleType;\n  rangeFrom: number;\n  rangeTo: number;\n  awardRules: TokenVolumeV3[];\n  maxSpread: number;\n  topK: number;\n\n  status: AmmPoolActivityStatus;\n}\n\nexport interface AmmPoolInProgressActivityRule {\n  market: string;\n  ruleType: RuleType[];\n  rangeFrom: number;\n  rangeTo: number;\n  awardRules: TokenVolumeV3[];\n  maxSpread: number;\n  topK: number;\n\n  status: AmmPoolActivityStatus;\n}\n\nexport interface AmmTrade {\n  accountId: number;\n  orderHash: string;\n  market: string;\n  side: string;\n  size: string;\n  price: number;\n  feeAmount: string;\n  createdAt: number;\n}\n\nexport interface AmmPoolInfoV3 {\n  name: string;\n  market: string;\n  address: string;\n  version: string;\n  tokens: {\n    pooled: string[];\n    lp: number;\n  };\n  feeBips: number;\n  precisions: {\n    price: number;\n    amount: number;\n  };\n  createdAt: string;\n  status: number;\n  domainSeparator: string;\n}\n\nexport interface TokenRelatedInfo {\n  tokenId: string;\n  tokenList: string[];\n}\n\nexport interface AmmPoolConfResponse {\n  ammpools: LoopringMap<AmmPoolInfoV3>;\n  pairs: LoopringMap<TokenRelatedInfo>;\n  raw_data: any;\n}\n\nexport interface PooledMap {\n  [key: number]: TokenVolumeV3;\n}\n\nexport interface AmmPoolBalance {\n  poolName: string;\n  poolAddress: string;\n  pooled: [TokenVolumeV3, TokenVolumeV3];\n  lp: any;\n  risky: boolean;\n  pooledMap: PooledMap;\n}\n\nexport interface AmmPoolBalancesResponse {\n  ammpoolsbalances: LoopringMap<FiatPriceInfo>;\n  raw_data: any;\n}\n\nexport interface TokensResponse {\n  tokenSymbolMap: LoopringMap<TokenInfo>;\n  tokenIdMap: LoopringMap<TokenInfo>;\n  tokenAddressMap: LoopringMap<TokenInfo>;\n\n  getTokenInfoBySymbol: any;\n  getTokenInfoById: any;\n\n  tokenSymbolArr: string[];\n  tokenSymbolArrStr: string;\n  tokenIdArr: string[];\n  tokenIdArrStr: string;\n  tokenAddressArr: string[];\n  tokenAddressArrStr: string;\n\n  raw_data: any;\n}\n\nexport interface MarketInfo {\n  baseTokenId: number;\n  enabled: boolean;\n  market: string;\n  orderbookAggLevels: number;\n  precisionForPrice: number;\n  quoteTokenId: number;\n  status?: MarketStatus;\n  isSwapEnabled?: boolean;\n  createdAt?: number;\n}\n\nexport enum DefiMarketStatus {\n  hide = 0,\n  show = 1,\n  depositOnly = 3,\n  depositAll = 7,\n  withdrawOnly = 9,\n  depositAllAndWithdraw = 15,\n  withdrawAll = 25,\n  WithdrawAllAndDeposit = 27,\n  depositAndWithdraw = 11,\n  all = 31,\n}\n\nexport interface DefiMarketInfo {\n  type: string;\n  market: string;\n  apy: string;\n  baseTokenId: number;\n  quoteTokenId: number;\n  precisionForPrice: number;\n  orderbookAggLevels: number;\n  enabled: boolean;\n  currency: string;\n  status: DefiMarketStatus;\n  accountId: number;\n  address: string;\n  depositFeeBips: number;\n  withdrawFeeBips: number;\n  depositPrice: string;\n  withdrawPrice: string;\n  baseVolume: string;\n  quoteVolume: string;\n  quoteLimitAmount: string;\n  baseLimitAmount: string;\n  quoteAlias: string;\n}\n\nexport interface MarketsResponse {\n  hasMarket: any;\n  getExistedMarket: any;\n  markets: LoopringMap<MarketInfo>;\n  pairs: LoopringMap<TokenRelatedInfo>;\n  tokenArr: string[];\n  tokenArrStr: string;\n  marketArr: string[];\n  marketArrStr: string;\n  raw_data: any;\n}\n\nexport interface TokenVolumeV3 {\n  /**\n   * The Loopring\\'s token identifier.\n   * @type {string}\n   * @memberof TokenVolumeV3\n   */\n  tokenId: string | number;\n  /**\n   * The volume of the token\n   * @type {string}\n   * @memberof TokenVolumeV3\n   */\n  volume: string;\n}\n\nexport interface TokenVolumeV5 {\n  /**\n   * The Loopring\\'s token identifier.\n   * @type {string}\n   * @memberof TokenVolumeV3\n   */\n  tokenId: string | number;\n  /**\n   * The volume of the token\n   * @type {string}\n   * @memberof TokenVolumeV3\n   */\n  amount: string;\n}\n\nexport interface TokenVolumeNFT {\n  /**\n   * The Loopring\\'s token identifier.\n   * @type {string}\n   * @memberof TokenVolumeV3\n   */\n  tokenId: string | number;\n  /**\n   * The amount of the token\n   * @type {string}\n   * @memberof TokenVolumeV3\n   */\n  amount: string;\n  /**\n   * The Loopring's NFTAction token data identifier which is a hash string of NFTAction token address and NFT_ID\n   * @type {string}\n   * @memberof The Loopring's NFTAction token data identifier which is a hash string of NFTAction token address and NFT_ID\n   */\n  nftData: NftData;\n}\n\nexport interface AmmPoolJoinTokens {\n  pooled: TokenVolumeV3[];\n  minimumLp: TokenVolumeV3;\n}\n\nexport interface AmmPoolExitTokens {\n  unPooled: TokenVolumeV3[];\n  burned: TokenVolumeV3;\n}\n\nexport interface GameRankInfo {\n  address: string;\n  volume: string;\n  rank: number;\n  rewards: TokenVolumeV3[];\n}\n\nexport interface SetReferrerRequest {\n  address: string;\n  referrer?: number;\n  promotionCode?: string;\n  publicKeyX: string;\n  publicKeyY: string;\n}\n\nexport interface GetAmmUserRewardsRequest {\n  owner: number; // accountId\n  ammPoolMarkets?: string; // pool-name list\n}\n\nexport interface AmmUserReward {\n  market: string;\n  feeRewards: string[];\n  extraRewards: TokenVolumeV3[];\n  currentRewards: TokenVolumeV3[];\n}\n\nexport interface AmmUserRewardMap {\n  [key: string]: {\n    current?: AmmUserReward;\n    lastDay?: AmmUserReward;\n  };\n}\n\nexport interface GetAmmPoolGameRankRequest {\n  ammPoolMarket: string; // symbol AMM-LRC-ETH\n}\n\nexport interface GetAmmAssetRequest {\n  poolAddress: string;\n  limit?: number;\n}\n\nexport interface GetAmmPoolGameUserRankRequest {\n  owner: string; // address\n  ammPoolMarket: string; // symbol AMM-LRC-ETH\n}\n\nexport interface GetAmmPoolSnapshotRequest {\n  poolAddress: string;\n}\n\nexport interface AmmPoolSnapshot {\n  poolName: string;\n  poolAddress: string;\n  pooled: [TokenVolumeV3, TokenVolumeV3];\n  lp: TokenVolumeV3;\n  risky: boolean;\n}\n\nexport interface AmmPoolRequestPatch {\n  chainId: ChainId;\n  ammName: string;\n  poolAddress: string;\n  eddsaKey: string;\n}\n\nexport interface JoinAmmPoolRequest {\n  owner: string;\n  poolAddress: string;\n  joinTokens: AmmPoolJoinTokens;\n  storageIds: number[];\n  fee: string;\n  validUntil?: number;\n  eddsaSignature?: string;\n  ecdsaSignature?: string;\n  domainSeparator?: string;\n}\n\nexport interface JoinAmmPoolResult {\n  hash: string;\n  status: TxStatus;\n  isIdempotent: boolean;\n}\n\nexport interface ExitAmmPoolRequest {\n  owner: string;\n  poolAddress: string;\n  exitTokens: AmmPoolExitTokens;\n  storageId: number;\n  maxFee: string;\n  validUntil?: number;\n  eddsaSignature?: string;\n  ecdsaSignature?: string;\n  domainSeparator?: string;\n}\n\nexport interface ExitAmmPoolResult {\n  hash: string;\n  status: TxStatus;\n  isIdempotent: boolean;\n}\n\nexport interface GetAmmPoolTradesRequest {\n  ammPoolAddress: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface AmmPoolTrade {\n  accountId: number;\n  orderHash: string;\n  market: string;\n  side: Side;\n  size: string;\n  price: number;\n  feeAmount: string;\n  createdAt: number;\n}\n\nexport interface GetAmmPoolTxsRequest {\n  poolAddress: string;\n  billType?: BillType;\n  start?: number;\n  end?: number;\n  limit?: number;\n  offset?: number;\n  tokenId?: number;\n  income?: boolean;\n  transferAddress?: string;\n  fromAddress?: string;\n}\n\nexport interface AmmPoolTxOld {\n  id: number;\n  from: string;\n  to: string;\n  token: string;\n  amount: string;\n  tokenF: string;\n  amountF: string;\n  status: TxStatus;\n  txHash: string;\n  billType: BillType;\n  income: boolean;\n  timestamp: number;\n  memo: string;\n  price: string;\n  transferType: TransferType;\n  label: string;\n}\n\nexport interface TokenVolumeV4 {\n  tokenId: number;\n  amount: string;\n  actualAmount: string;\n  feeAmount: string;\n}\n\nexport interface AmmPoolTx {\n  hash: string;\n  txType: AmmTxType;\n  txStatus: TxStatus;\n  ammPoolAddress: string;\n  ammLayerType: string;\n  poolTokens: [TokenVolumeV4, TokenVolumeV4];\n  lpToken: TokenVolumeV4;\n  createdAt: number;\n  updatedAt: number;\n}\n\nexport enum AMMtxTypes {\n  JOIN = 0,\n  EXIT = 1,\n}\n\nexport interface GetUserAmmPoolTxsRequest {\n  accountId: number;\n  start?: number;\n  end?: number;\n  limit?: number;\n  offset?: number;\n  txTypes?: AMMtxTypes; // combine of AmmTxType\n  txStatus?: TxStatus;\n  ammPoolAddress?: string;\n}\n\nexport interface PooledToken {\n  tokenId: number;\n  amount: string;\n  actualAmount: string;\n  feeAmount: string;\n}\n\nexport interface UserAmmPoolTx {\n  hash: string;\n  txType: AmmTxType;\n  txStatus: TxStatus;\n  ammPoolAddress: string;\n  ammLayerType: string;\n  poolTokens: [PooledToken, PooledToken];\n  lpToken: PooledToken;\n  createdAt: number;\n  updatedAt: number;\n}\n\nexport interface GetLiquidityMiningRequest {\n  accountId: number;\n  market: string;\n  size: number;\n}\n\nexport interface RewardItem {\n  startAt: number;\n  timeInterval: string;\n  accountId: number;\n  tokenId: number;\n  market: string;\n  score: number;\n  amount: string;\n}\n\nexport interface GetLiquidityMiningUserHistoryRequest {\n  accountId: number;\n  start?: number;\n  end?: number;\n}\n\nexport interface UserMiningInfo {\n  account_id: number;\n  market: string;\n  start: number;\n  end: number;\n  awards: TokenVolumeV3[];\n}\n\nexport interface GetFiatPriceRequest {\n  legal: string;\n}\n\nexport interface FiatPriceInfo {\n  symbol: string;\n  price: number;\n  updatedAt: number;\n}\n\nexport interface GetMarketTradesRequest {\n  market: string;\n  limit?: number;\n}\nexport enum OrderMakerType {\n  taker = \"taker\",\n  maker = \"maker\",\n}\n\nexport interface MarketTradeInfo {\n  tradeTime: number;\n  tradeId: string;\n  side: Side;\n  volume: string;\n  price: string;\n  market: string;\n  fee: string;\n  type: OrderMakerType;\n}\n\nexport interface GetWithdrawalAgentsRequest {\n  tokenId: number;\n  amount: string;\n}\n\nexport interface GetEthBalancesRequest {\n  owner: string;\n}\n\nexport type TokenAddress = string;\n\nexport interface GetTokenBalancesRequest {\n  owner: string;\n  token: TokenAddress[];\n}\nexport interface GetALLTokenBalancesRequest {\n  owner: string;\n}\n\nexport interface GetAllowancesRequest {\n  owner: string;\n  token: TokenAddress[]; // tokenAddress\n}\n\nexport interface GetDepthRequest {\n  market: string;\n  level?: number;\n  limit?: number;\n}\n\nexport interface GetTickerRequest {\n  market: string;\n}\n\nexport interface GetCandlestickRequest {\n  market: string;\n  interval: TradingInterval;\n  start?: number;\n  end?: number;\n  limit?: number;\n}\n\nexport type GetAccountRequest =\n  | {\n      owner: string;\n    }\n  | {\n      accountId: number;\n    };\n\nexport interface GetCounterFactualInfoRequest {\n  accountId: number;\n}\n\nexport interface GetAvailableBrokerRequest {\n  type: number;\n}\n\nexport interface GetEthNonceRequest {\n  owner: string;\n}\n\nexport interface GetUserApiKeyRequest {\n  accountId: number;\n}\n\nexport interface UpdateUserApiKeyRequest {\n  accountId: number;\n}\n\n// ORDER=0,\n// OFFCHAIN_WITHDRAWAL=1,\n// UPDATE_ACCOUNT=2,\n// TRANSFER=3,\n// FAST_OFFCHAIN_WITHDRAWAL=4,\n// OPEN_ACCOUNT=5,\n// AMM_EXIT=6,\n// DEPOSIT=7,\n// AMM_JOIN=8,\nexport type GetOffchainFeeAmtRequest =\n  | ({\n      accountId: number;\n      amount?: string;\n    } & {\n      requestType: Omit<\n        OffchainFeeReqType,\n        | OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n        | OffchainFeeReqType.AMM_JOIN\n        | OffchainFeeReqType.AMM_EXIT\n        | OffchainFeeReqType.ORDER\n        | OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL\n      >;\n    })\n  | {\n      requestType:\n        | OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n        | OffchainFeeReqType.AMM_JOIN\n        | OffchainFeeReqType.AMM_EXIT\n        | OffchainFeeReqType.ORDER;\n      tokenSymbol: string;\n    }\n  | {\n      requestType: OffchainFeeReqType.DEFI_EXIT | OffchainFeeReqType.DEFI_JOIN;\n      market: string;\n    }\n  | {\n      requestType: OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL;\n      tokenSymbol: string;\n      amount: string;\n    };\n\n/**\n * @methodOf OffchainNFTFeeReqType.NFT_MINT\n * @requires  tokenAddress\n *\n * @methodOf {} OffchainNFTFeeReqType.NFT_WITHDRAWAL\n * @param deployInWithdraw\n */\nexport type GetNFTOffchainFeeAmtRequest = {\n  accountId: number;\n  amount?: string;\n} & XOR<\n  {\n    requestType: Omit<OffchainNFTFeeReqType, 9 | 10>;\n  },\n  | {\n      requestType: 9;\n      tokenAddress: string;\n    }\n  | { requestType: 10; tokenAddress: string; deployInWithdraw?: boolean }\n>;\n\nexport interface OrderInfo {\n  minAmount: string;\n  makerRate: number;\n  takerRate: number;\n}\n\nexport interface TokenAmount {\n  tokenSymbol: string;\n  discount: number;\n  baseOrderInfo: OrderInfo;\n  userOrderInfo: OrderInfo;\n  tradeCost: string;\n}\n\nexport interface GetMinimumTokenAmtRequest {\n  accountId: number;\n  market: string;\n}\n\nexport interface OffchainFeeInfo {\n  token: string;\n  fee: string;\n  discount: number;\n}\n\nexport interface GetUserBalancesRequest {\n  accountId: number;\n  tokens: string;\n}\n\n// export interface GetUserBalancesRequest {\n// \taccountId: number;\n// \ttokens: string;\n// \t*accountId\t\t10106\n// \t*tokenId\t\t1\n// \t*status\t\t10106\n// \t*lockTag\t\tDUAL_CURRENCY,DUAL_BASE\n// \toffset\t\t3\n// \tlimit\n// \thash\n// \tdelegatorAccountId\n// \tstart\n// }\n\nexport interface UserBalanceInfo {\n  tokenId: number;\n  total: string;\n  locked: string;\n  pending: {\n    withdraw: string;\n    deposit: string;\n  };\n}\n\nexport interface GetOrderDetailsRequest {\n  accountId: number;\n  orderHash: string;\n}\n\nexport interface OrderDetail {\n  hash: string;\n  clientOrderId: string;\n  side: Side;\n  market: string;\n  price: string;\n  volumes: {\n    baseAmount: string;\n    quoteAmount: string;\n    baseFilled: string;\n    quoteFilled: string;\n    fee: string;\n  };\n  validity: { start: number; end: number };\n  orderType: OrderTypeResp;\n  tradeChannel: TradeChannel;\n  status: OrderStatus;\n}\n\nexport interface GetUserOrderFeeRateRequest {\n  accountId: number;\n  market: string;\n  tokenB: number;\n  amountB: string;\n}\n\nexport interface FeeRateInfo {\n  symbol: string;\n  makerRate: number;\n  takerRate: number;\n}\n\nexport interface GetUserFeeRateRequest {\n  accountId: number;\n  markets: string;\n}\n\nexport interface UserFeeRateInfo {\n  symbol: string;\n  makerRate: number;\n  takerRate: number;\n}\n\nexport interface GetNextStorageIdRequest {\n  accountId: number;\n  sellTokenId: number;\n}\n\n/**\n *\n * @export\n * @interface OffChainWithdrawalRequestV3\n */\nexport interface OffChainWithdrawalRequestV3 {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  exchange: string;\n  /**\n   * account ID\n   * @type {number}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  accountId: number;\n  /**\n   * account owner address\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  owner: string;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  token: TokenVolumeV3;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  maxFee: TokenVolumeV3;\n  /**\n   * offchain ID\n   * @type {number}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  storageId: number;\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  validUntil: number;\n  /**\n   * min gas for on-chain withdraw, Loopring exchange allocates gas for each distribution,\n   * but people can also assign this min gas,\n   * so Loopring has to allocate higher gas value for this specific distribution.\n   * Normally no need to take care of this value,\n   * 0 means let loopring choose the reasonable gas\n   * @type {number}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  minGas: number;\n  /**\n   * withdraw to address\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  to: string;\n  /**\n   * extra data for complex withdraw mode, normally none\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  extraData?: string;\n  /**\n   * is fast withdraw mode\n   * @type {boolean}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  fastWithdrawalMode?: boolean;\n  /**\n   * eddsa signature\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  eddsaSignature?: string;\n  /**\n   * ecdsa signature\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  ecdsaSignature?: string;\n  /**\n   * An approved hash string which was already submitted on eth mainnet\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  hashApproved?: string;\n  counterFactualInfo?: CounterFactualInfo;\n}\n\nexport interface GetOrdersRequest {\n  accountId: number;\n  market?: string;\n  start?: number;\n  end?: number;\n  side?: Side[];\n  status?: string[];\n  tradeChannels?: string[];\n  limit?: number;\n  offset?: number;\n  orderTypes?: OrderType;\n}\n\nexport interface GetUserRegTxsRequest {\n  accountId: number;\n  start?: number;\n  end?: number;\n  status?: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface UserRegTx {\n  id: number;\n  hash: string;\n  owner: string;\n  txHash: string;\n  feeTokenSymbol: string;\n  feeAmount: number;\n  status: TxStatus;\n  progress: string;\n  timestamp: number;\n  blockNum: number;\n  updatedAt: number;\n}\n\nexport interface GetUserPwdResetTxsRequest {\n  accountId: number;\n  start?: number;\n  end?: number;\n  status?: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport type UserPwdResetTx = UserRegTx;\n\nexport interface GetUserDepositHistoryRequest {\n  accountId?: number;\n  hashes?: string;\n  start?: number;\n  end?: number;\n  status?: string;\n  limit?: number;\n  tokenSymbol?: string;\n  offset?: number;\n}\n\nexport interface UserDepositHistoryTx {\n  id: number;\n  hash: string;\n  symbol: string;\n  amount: string;\n  txHash: string;\n  status: TxStatus;\n  progress: string;\n  timestamp: number;\n  blockNum: number;\n  updatedAt: number;\n}\n\nexport interface UserOnchainWithdrawalHistoryTx {\n  id: number;\n  txType: WithdrawalTypes;\n  hash: string;\n  symbol: string;\n  amount: string;\n  txHash: string;\n  feeTokenSymbol: string;\n  feeAmount: string;\n  status: TxStatus;\n  progress: string;\n  timestamp: number;\n  blockNum: number;\n  updatedAt: number;\n  distributeHash: string;\n  requestId: number;\n  fastStatus: string;\n}\n\nexport interface GetUserOnchainWithdrawalHistoryRequest {\n  accountId?: number;\n  hashes?: string;\n  start?: number;\n  end?: number;\n  status?: string;\n  limit?: number;\n  tokenSymbol?: string;\n  offset?: number;\n  withdrawalTypes?: string;\n}\n\nexport interface GetUserTransferListRequest {\n  accountId?: number;\n  hashes?: string;\n  start?: number;\n  end?: number;\n  status?: string;\n  limit?: number;\n  tokenSymbol?: string;\n  offset?: number;\n  transferTypes?: string; // transfer, transfer_red\n}\n\nexport interface UserTransferRecord {\n  id: number;\n  hash: string;\n  txType: TxType;\n  symbol: string;\n  amount: string;\n  senderAddress: string;\n  receiver: number;\n  receiverAddress: string;\n  feeTokenSymbol: string;\n  feeAmount: string;\n  status: TxStatus;\n  progress: string;\n  timestamp: number;\n  updatedAt: number;\n  memo: string;\n}\n\nexport interface UserAssetInfo {\n  amount: string;\n  createdAt: number;\n  createdAtStr: string;\n}\n\nexport interface GetUserAssetsRequest {\n  wallet: string;\n  assetType?: AssetType;\n  currency?: Currency;\n  limit?: number;\n  offset?: number;\n  network?: NetworkWallet;\n}\n\nexport interface GetUserTradeAmount {\n  accountId: number;\n  markets?: string;\n  limit?: number;\n}\n\nexport interface TokenPriceInfo {\n  price: string;\n  createdAt: number;\n}\n\nexport interface GetTokenPricesRequest {\n  token: string;\n  intervalType?: IntervalType;\n  currency?: Currency;\n  limit?: number;\n  network?: NetworkWallet;\n}\n\nexport interface getLatestTokenPricesRequest {\n  tokens?: string;\n  currency?: string;\n}\n\nexport interface GetUserTxsRequest {\n  accountId: number;\n  tokenSymbol?: string;\n  start?: number;\n  end?: number;\n  offset?: number;\n  limit?: number;\n  types?: UserTxTypes[] | string;\n}\nexport interface GetUserBillsRequest {\n  accountId: number;\n  fromAddress?: string;\n  transferAddress?: string;\n  start?: number;\n  end?: number;\n  offset?: number;\n  limit?: number;\n  billType?: UserBillTypes[];\n}\n\nexport interface GetUserNFTTxsRequest {\n  accountId: number;\n  // tokenSymbol?: string;\n  metadata?: boolean;\n  start?: number;\n  end?: number;\n  offset?: number;\n  limit?: number;\n  types?: UserNFTTxTypes[] | string;\n}\n\nexport declare enum NFT_TRADE {\n  SELL = \"SELL\",\n  BUY = \"BUY\",\n}\n\nexport interface GetUserNFTTradeRequest {\n  accountId: number;\n  nftData?: boolean;\n  orderHash?: string;\n  tradeHash?: string;\n  start?: number;\n  end?: number;\n  side: NFT_TRADE;\n  offset?: number;\n  limit?: number;\n  metadata?: boolean;\n}\n\nexport interface UserTx {\n  id: number;\n  txType: string;\n  hash: string;\n  symbol: string;\n  amount: string;\n  receiver: number;\n  txHash: string;\n  feeTokenSymbol: string;\n  feeAmount: string;\n  status: TxStatus;\n  progress: string;\n  timestamp: number;\n  blockNum: number;\n  updatedAt: number;\n  distributeHash: string;\n  receiverAddress: string;\n  senderAddress: string;\n  memo: string;\n  requestId: number;\n  fastStatus: string;\n  recipient: string;\n}\n\n/**\n * @param {string} guardian address\n */\nexport interface SendMetaTxRequest {\n  wallet: string;\n  module: string;\n  value: string;\n  data: string;\n  nonce: string;\n  validUntil: string;\n  gasToken: string;\n  gasPrice: string;\n  gasLimit: string;\n  gasOverhead: string;\n  feeRecipient: string;\n  signatures: string;\n  signers: string;\n  metaTxType: 0;\n  requestId: string;\n  securityId: string;\n  guardianType: string;\n  network?: NetworkWallet;\n}\n\n/**\n * @param {string} guardian address\n */\nexport interface GetGuardianApproveListRequest {\n  guardian: string;\n  network?: NetworkWallet;\n}\n\n/**\n * @param {string} owner address\n */\nexport interface GetEnsNameRequest {\n  owner: string;\n  network?: NetworkWallet;\n}\n\nexport interface GET_WALLET_TYPE {\n  wallet: string;\n  network?: NetworkWallet;\n}\n\n/**\n * @param {string} fullName ENSName\n */\nexport interface GetEnsAddressRequest {\n  fullName: string;\n  network?: NetworkWallet;\n}\n\nexport interface SubmitApproveSignatureRequestWithPatch {\n  request: ApproveSignatureRequest;\n  guardian: Guardian;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\n/**\n * @param {string} approveRecordId\n * @param {string} securityNumber\n * @param {string} txAwareHash\n * @param {string} signer\n * @param {string} wallet\n * @param {string} signature\n */\nexport interface ApproveSignatureRequest {\n  approveRecordId: string;\n  txAwareHash?: string; //currentRequest.messageHash,\n  securityNumber: string;\n  signer: string; //address,\n  signature: string;\n  network?: NetworkWallet;\n}\n\n/**\n * @param {string} guardian address\n * @param {string} protectAddress? address\n */\nexport interface GetProtectorRequest {\n  guardian: string;\n  protectAddress?: string;\n  network?: NetworkWallet;\n}\n\nexport enum TradesFillTypes {\n  dex = \"dex\",\n  amm = \"amm\",\n}\n\nexport interface GetUserTradesRequest {\n  accountId: number;\n  market?: string;\n  orderHash?: string;\n  offset?: number;\n  limit?: number;\n  fromId?: number;\n  fillTypes?: TradesFillTypes;\n}\n\nexport type UserTrade = MarketTradeInfo;\n\nexport interface UserTrades {\n  totalNum: number;\n  trades: UserTrade[];\n}\n\nexport interface CancelOrderRequest {\n  accountId: number;\n  clientOrderId?: string;\n  orderHash?: string;\n}\n\nexport interface CancelMultiOrdersByHashRequest {\n  accountId: number;\n  orderHash: string; // comma seprated string\n}\n\nexport interface CancelMultiOrdersByClientOrderIdRequest {\n  accountId: number;\n  clientOrderId: string; // comma seprated string\n}\n\nexport interface SubmitOrderRequestV3 {\n  /**\n   * The adderss of the exchange which has to process this order\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n  exchange: string;\n  /**\n   * Loopring\\'s account ID\n   * @type {number}\n   * @memberof SubmitOrderRequestV3\n   */\n  accountId: number;\n  /**\n   * The unique identifier of the L2 Merkle tree storage slot where the burn made in order to exit the pool will or has been stored.\n   * @type {number}\n   * @memberof SubmitOrderRequestV3\n   */\n  storageId: number;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof SubmitOrderRequestV3\n   */\n  sellToken: TokenVolumeV3;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof SubmitOrderRequestV3\n   */\n  buyToken: TokenVolumeV3;\n  /**\n   * Whether the order supports partial fills or not.Currently only supports false as a valid value\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n  allOrNone: boolean;\n  /**\n   * Fill size by buy token or by sell token\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n  fillAmountBOrS: boolean;\n  /**\n   * Order expiration time, accuracy is in seconds\n   * @type {number}\n   * @memberof SubmitOrderRequestV3\n   */\n  validUntil: number;\n  /**\n   * Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63\n   * @type {number}\n   * @memberof SubmitOrderRequestV3\n   */\n  maxFeeBips: number;\n  /**\n   * The orders EdDSA signature. The signature is a hexadecimal string obtained by signing the order itself and concatenating the resulting signature parts (Rx, Ry, and S). Used to authenticate and authorize the operation.\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n  eddsaSignature: string;\n  /**\n   * An arbitrary, client-set unique order identifier, max length is 120 bytes\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n  clientOrderId?: string;\n  /**\n   * Order types, can be AMM, LIMIT_ORDER, MAKER_ONLY, TAKER_ONLY\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n  orderType?: OrderType;\n  /**\n   * Used by the P2P order which user specify the taker, so far its 0x0000000000000000000000000000000000000000\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n\n  tradeChannel?: TradeChannel;\n\n  taker?: string;\n  /**\n   * The AMM pool address if order type is AMM\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n  poolAddress?: string;\n  /**\n   * Aux data to mark the order source\n   * @type {string}\n   * @memberof SubmitOrderRequestV3\n   */\n  channelId?: string;\n}\n\n/**\n * Submit internal transfer params\n * @export\n * @interface OriginTransferRequestV3\n */\nexport interface OriginTransferRequestV3 {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  exchange: string;\n  /**\n   * payer account ID\n   * @type {number}\n   * @memberof OriginTransferRequestV3\n   */\n  payerId: number;\n  /**\n   * payer account address\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  payerAddr: string;\n  /**\n   * payee account ID\n   * @type {number}\n   * @memberof OriginTransferRequestV3\n   */\n  payeeId: number;\n  /**\n   * payee account address\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  payeeAddr: string;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof OriginTransferRequestV3\n   */\n  token: TokenVolumeV3;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof OriginTransferRequestV3\n   */\n  maxFee: TokenVolumeV3;\n  /**\n   * offchain Id\n   * @type {number}\n   * @memberof OriginTransferRequestV3\n   */\n  storageId: number;\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof OriginTransferRequestV3\n   */\n  validUntil: number;\n  /**\n   * eddsa signature\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  eddsaSignature?: string;\n  /**\n   * ecdsa signature\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  ecdsaSignature?: string;\n  /**\n   * An approved hash string which was already submitted on eth mainnet\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  hashApproved?: string;\n  /**\n   * transfer memo\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  memo?: string;\n  /**\n   * A user-defined id\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  clientId?: string;\n\n  /**\n   * CounterFactualInfo\n   * @type {CounterFactualInfo}\n   * @memberof OriginTransferRequestV3\n   */\n  counterFactualInfo?: CounterFactualInfo;\n\n  /**\n   * If true, let the sender transferring to the receiver pay the receiver's account activation fee\n   * @type {boolean}\n   * @memberof OriginTransferRequestV3\n   */\n  payPayeeUpdateAccount?: boolean;\n}\n\n/**\n * Submit Forces Withdrawals params\n * @export\n * @interface OriginForcesWithdrawalsV3\n */\nexport interface OriginForcesWithdrawalsV3 {\n  /**\n   * requesterAddress account address\n   * @type {string}\n   * @memberof OriginForcesWithdrawalsV3\n   */\n  requesterAddress: string;\n  /**\n   * requester withdrawls tokenId\n   * @type {number}\n   * @memberof OriginForcesWithdrawalsV3\n   */\n  tokenId: number;\n  /**\n   * withdrawAddress account address\n   * @type {string}\n   * @memberof OriginForcesWithdrawalsV3\n   */\n  withdrawAddress: string;\n  /**\n   * Transfer Request\n   * @type {OriginTransferRequestV3}\n   * @memberof OriginForcesWithdrawalsV3\n   */\n  transfer: Omit<OriginTransferRequestV3, \"payeeId\" | \"maxFee\" | \"memo\"> & {\n    payeeId?: 0;\n    memo?: string;\n    maxFee?: {\n      volume: \"0\";\n      tokenId: number | string;\n    };\n  };\n}\n\n/**\n * Submit Deploy NFTAction params\n * @export\n * @interface OriginDeployNFTRequestV3\n */\nexport interface OriginDeployNFTRequestV3 {\n  /**\n   * Transfer\n   * @type {OriginTransferRequestV3}\n   * @memberof OriginDeployNFTRequestV3\n   */\n  transfer: Omit<OriginTransferRequestV3, \"payeeId\" | \"maxFee\" | \"memo\"> & {\n    payeeId?: 0;\n    memo?: string;\n    maxFee?: {\n      volume: \"0\";\n      tokenId: number | string;\n    };\n  };\n  /**\n   * nftData\n   * @type {string}\n   * @memberof OriginDeployNFTRequestV3\n   */\n  nftData: string;\n  /**\n   * NFTAction address\n   * @type {string}\n   * @memberof OriginDeployNFTRequestV3\n   */\n  tokenAddress: string;\n  counterFactualInfo?: CounterFactualInfo;\n}\n\nexport interface OriginDeployCollectionRequestV3 {\n  /**\n   * Transfer\n   * @type {OriginTransferRequestV3}\n   * @memberof OriginDeployNFTRequestV3\n   */\n  transfer: Omit<OriginTransferRequestV3, \"payeeId\" | \"maxFee\" | \"memo\"> & {\n    payeeId?: 0;\n    memo?: string;\n    maxFee?: {\n      volume: \"0\";\n      tokenId: number | string;\n    };\n  };\n  /**\n   * nftOwner\n   * @type {string}\n   * @memberof OriginDeployCollectionRequestV3\n   */\n  nftOwner: string;\n  /**\n   * nftBaseUri\n   * @type {string}\n   * @memberof OriginDeployCollectionRequestV3\n   */\n  nftBaseUri: string;\n  /**\n   * nftFactory\n   * @type {string}\n   * @memberof OriginDeployCollectionRequestV3\n   */\n  nftFactory: string;\n  /**\n   * tokenAddress\n   * @type {string}\n   * @memberof OriginDeployCollectionRequestV3\n   */\n  tokenAddress: string;\n  counterFactualInfo?: CounterFactualInfo;\n}\n\n/**\n * Submit internal transfer params\n * @export\n * @interface OriginNFTTransferRequestV3\n */\nexport interface OriginNFTTransferRequestV3 {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  exchange: string;\n  /**\n   * fromAccountId\n   * @type {number}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  fromAccountId: number;\n  /**\n   * payer account address\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  fromAddress: string;\n  /**\n   * to account ID\n   * @type {number}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  toAccountId: number;\n  /**\n   * toAddress address\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  toAddress: string;\n  /**\n   *\n   * @type {TokenVolumeNFT}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  token: TokenVolumeNFT;\n  /**\n   *\n   * @type { Pick<TokenVolumeV3,'tokenId'> & {amount:string}}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  maxFee: Pick<TokenVolumeV3, \"tokenId\"> & { amount: string };\n  /**\n   * offchain Id\n   * @type {number}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  storageId: number;\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  validUntil: number;\n  /**\n   * eddsa signature\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  eddsaSignature?: string;\n  /**\n   * ecdsa signature\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  ecdsaSignature?: string;\n  /**\n   * An approved hash string which was already submitted on eth mainnet\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  hashApproved?: string;\n  /**\n   * transfer memo\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  memo?: string;\n  /**\n   * A user-defined id\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  clientId?: string;\n\n  /**\n   * CounterFactualInfo\n   * @type {CounterFactualInfo}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  counterFactualInfo?: CounterFactualInfo;\n\n  /**\n   * If true, let the sender transferring to the receiver pay the receiver's account activation fee\n   * @type {boolean}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  payPayeeUpdateAccount?: boolean;\n}\n\n/**\n *\n * @export\n * @interface NFTWithdrawRequestV3\n */\nexport interface NFTWithdrawRequestV3 {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  exchange: string;\n  /**\n   * account ID\n   * @type {number}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  accountId: number;\n  /**\n   * account owner address\n   * @type {string}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  owner: string;\n  /**\n   *\n   * @type {TokenVolumeNFT}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  token: TokenVolumeNFT;\n  /**\n   *\n   * @type {Pick<TokenVolumeV3,'tokenId'> & {amount:string}};\n   * @memberof OriginNFTTransferRequestV3\n   */\n  maxFee: Pick<TokenVolumeV3, \"tokenId\"> & { amount: string };\n  /**\n   * offchain ID\n   * @type {number}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  storageId: number;\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  validUntil: number;\n  /**\n   * min gas for on-chain withdraw, Loopring exchange allocates gas for each distribution, but people can also assign this min gas, so Loopring have to allocate higher gas value for this specific distribution. Normally no need to take care of this value, 0 means let loopring choose the reasonable gas\n   * @type {number}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  minGas: number;\n  /**\n   * withdraw to address\n   * @type {string}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  to: string;\n  /**\n   * extra data for complex withdraw mode, normally none\n   * @type {string}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  extraData?: string;\n  // /**\n  //  * is fast withdraw mode\n  //  * @type {boolean}\n  //  * @memberof OriginNFTWithdrawRequestV3\n  //  */\n  // fastWithdrawalMode?: boolean;\n  /**\n   * eddsa signature\n   * @type {string}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  eddsaSignature?: string;\n  /**\n   * ecdsa signature\n   * @type {string}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  ecdsaSignature?: string;\n  /**\n   * An approved hash string which was already submitted on eth mainnet\n   * @type {string}\n   * @memberof OriginNFTWithdrawRequestV3\n   */\n  hashApproved?: string;\n  counterFactualInfo?: CounterFactualInfo;\n}\n\n/**\n *\n * @export\n * @interface NFTMintRequestV3\n */\nexport interface NFTMintRequestV3 {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof OriginNFTMintRequestV3\n   */\n  exchange: string;\n  /**\n   * account ID\n   * @type {number}\n   * @memberof OriginNFTMintRequestV3\n   */\n  minterId: number;\n  /**\n   * account owner address\n   * @type {string}\n   * @memberof OriginNFTMintRequestV3\n   */\n  minterAddress: string;\n  /**\n   * The account receive the minted NFTAction token, now should be minter himself.\n   * @type {number}\n   * @memberof OriginNFTMintRequestV3\n   */\n  toAccountId: number;\n  /**\n   * The account receive the minted NFTAction token, now should be minter himself.\n   * @type {string}\n   * @memberof OriginNFTMintRequestV3\n   */\n  toAddress?: string;\n  /**\n   * nftType: 0 for EIP1155, 1 for EIP712. EIP1155 by default.\n   * @type {number}\n   * @memberof OriginNFTMintRequestV3\n   */\n  nftType: 0 | 1;\n  /**\n   * Contract address\n   * @type{string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  tokenAddress: string;\n  /**\n   * NFT_ID url_id\n   * @type {string}   toString(16)\n   * @memberof OriginNFTTransferRequestV3\n   */\n  nftId: string;\n  /**\n   * The amount of the token\n   * @type {string}\n   * @memberof TokenVolumeV3\n   */\n  amount: string;\n\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof OriginNFTMintRequestV3\n   */\n  validUntil: number;\n  /**\n   * offchain ID\n   * @type {number}\n   * @memberof OriginNFTMintRequestV3\n   */\n  storageId: number;\n  /**\n   *\n   * @type { Pick<TokenVolumeV3,'tokenId'> & {amount:string}}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  maxFee: Pick<TokenVolumeV3, \"tokenId\"> & { amount: string };\n  /**\n   * 0-50\n   * @type number\n   * @memberof OriginNFTMintRequestV3\n   */\n  royaltyPercentage: number;\n  /**\n   * force to mint, regardless the previous mint record\n   * @type {boolean}\n   * @memberof OriginNFTMintRequestV3\n   */\n  forceToMint?: boolean;\n  /**\n   * eddsa signature\n   * @type {string}\n   * @memberof OriginNFTMintRequestV3\n   */\n  eddsaSignature?: string;\n  /**\n   * ecdsa signature\n   * @type {string}\n   * @memberof OriginNFTMintRequestV3\n   */\n  ecdsaSignature?: string;\n  /**\n   * An approved hash string which was already submitted on eth mainnet\n   * @type {string}\n   * @memberof OriginNFTMintRequestV3\n   */\n  hashApproved?: string;\n  counterFactualNftInfo?: NFTCounterFactualInfo | null;\n  counterFactualInfo?: CounterFactualInfo;\n}\n\n// /**\n//  *\n//  * @export\n//  * @interface NFTCollectionCreateRequestV3\n//  */\n// export interface NFTollectionCreateRequestV3 {\n//   /**\n//    * exchange address\n//    * @type {string}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   exchange: string;\n//   /**\n//    * account ID\n//    * @type {number}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   minterId: number;\n//   /**\n//    * account owner address\n//    * @type {string}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   minterAddress: string;\n//   /**\n//    * The account receive the minted NFTAction token, now should be minter himself.\n//    * @type {number}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   toAccountId: number;\n//   /**\n//    * The account receive the minted NFTAction token, now should be minter himself.\n//    * @type {string}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   toAddress?: string;\n//   /**\n//    * nftType: 0 for EIP1155, 1 for EIP712. EIP1155 by default.\n//    * @type {number}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   nftType: 0 | 1;\n//   /**\n//    * Contract address\n//    * @type{string}\n//    * @memberof OriginNFTTransferRequestV3\n//    */\n//   tokenAddress: string;\n//   /**\n//    * NFT_ID url_id\n//    * @type {string}   toString(16)\n//    * @memberof OriginNFTTransferRequestV3\n//    */\n//   nftId: string;\n//   /**\n//    * The amount of the token\n//    * @type {string}\n//    * @memberof TokenVolumeV3\n//    */\n//   amount: string;\n//\n//   /**\n//    * Timestamp for order to become invalid\n//    * @type {number}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   validUntil: number;\n//   /**\n//    * offchain ID\n//    * @type {number}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   storageId: number;\n//   /**\n//    *\n//    * @type { Pick<TokenVolumeV3,'tokenId'> & {amount:string}}\n//    * @memberof OriginNFTTransferRequestV3\n//    */\n//   maxFee: Pick<TokenVolumeV3, \"tokenId\"> & { amount: string };\n//   /**\n//    * 0-50\n//    * @type number\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   royaltyPercentage: number;\n//   /**\n//    * force to mint, regardless the previous mint record\n//    * @type {boolean}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   forceToMint?: boolean;\n//   /**\n//    * eddsa signature\n//    * @type {string}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   eddsaSignature?: string;\n//   /**\n//    * ecdsa signature\n//    * @type {string}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   ecdsaSignature?: string;\n//   /**\n//    * An approved hash string which was already submitted on eth mainnet\n//    * @type {string}\n//    * @memberof OriginNFTMintRequestV3\n//    */\n//   hashApproved?: string;\n//   counterFactualNftInfo?: NFTCounterFactualInfo | null;\n//   counterFactualInfo?: CounterFactualInfo;\n// }\n\n/**\n *\n * @export\n * @interface NFTOrderRequestV3\n */\nexport type NFTOrderRequestV3 = {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof NFTOrderRequestV3\n   */\n  exchange: string;\n  /**\n   * account ID\n   * @type {number}\n   * @memberof NFTOrderRequestV3\n   */\n  accountId: number;\n  /**\n   * storage ID\n   * @type {number}\n   * @memberof NFTOrderRequestV3\n   */\n  storageId: number;\n\n  /**\n   *\n   * @type {boolean}\n   * @memberof NFTOrderRequestV3\n   */\n  allOrNone: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof NFTOrderRequestV3\n   */\n  fillAmountBOrS: boolean;\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof NFTOrderRequestV3\n   */\n  validUntil: number;\n  /**\n   * max fee bips.\n   * @type {number | 0}\n   * @memberof NFTOrderRequestV3\n   */\n  maxFeeBips?: number | 0;\n  /**\n   * eddsa signature.\n   * @type {string}\n   * @memberof NFTOrderRequestV3\n   */\n  eddsaSignature?: string;\n  /**\n   * client order id.\n   * @type {string}\n   * @memberof NFTOrderRequestV3\n   */\n  clientOrderId?: string;\n  /**\n   * order type\n   * @type{string}\n   * @memberof NFTOrderRequestV3\n   */\n  orderType?: string;\n  /**\n   * trade channel\n   * @type {string}\n   * @memberof NFTOrderRequestV3\n   */\n  tradeChannel?: string;\n  /**\n   * taker address\n   * @type {string}\n   * @memberof NFTOrderRequestV3\n   */\n  taker?: string;\n  /**\n   * affiliate account id\n   * @type {string}\n   * @memberof NFTOrderRequestV3\n   */\n  affiliate?: string;\n} & XOR<\n  {\n    /**\n     * sell token info\n     * @type {NFTTokenAmountInfo}\n     * @memberof NFTOrderRequestV3\n     */\n    sellToken: NFTTokenAmountInfo;\n    /**\n     * buy token info\n     * @type {TokenVolumeV5}\n     * @memberof NFTOrderRequestV3\n     */\n    buyToken: TokenVolumeV5;\n  },\n  {\n    /**\n     * sell token info\n     * @type {TokenVolumeV5}\n     * @memberof NFTOrderRequestV3\n     */\n    sellToken: TokenVolumeV5;\n    /**\n     * buy token info\n     * @type {NFTTokenAmountInfo}\n     * @memberof NFTOrderRequestV3\n     */\n    buyToken: NFTTokenAmountInfo;\n  }\n>;\n\n/**\n *\n * @export\n * @interface NFTTradeRequestV3\n */\nexport interface NFTTradeRequestV3 {\n  /**\n   * maker order\n   * @type {NFTOrderRequestV3}\n   * @memberof NFTTradeRequestV3\n   */\n  maker: NFTOrderRequestV3;\n  /**\n   * maker fee bips\n   * @type {number}\n   * @memberof NFTOrderRequestV3\n   */\n  makerFeeBips: number;\n  /**\n   * taker order\n   * @type {NFTOrderRequestV3}\n   * @memberof NFTTradeRequestV3\n   */\n  taker: NFTOrderRequestV3;\n  /**\n   * taker fee bips\n   * @type {number}\n   * @memberof NFTTradeRequestV3\n   */\n  takerFeeBips: number;\n}\n\n/**\n *\n * @export\n * @interface OffChainWithdrawalRequestV3\n */\nexport interface OffChainWithdrawalRequestV3 {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  exchange: string;\n  /**\n   * account ID\n   * @type {number}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  accountId: number;\n  /**\n   * account owner address\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  owner: string;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  token: TokenVolumeV3;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  maxFee: TokenVolumeV3;\n  /**\n   * offchain ID\n   * @type {number}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  storageId: number;\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  validUntil: number;\n  /**\n   * min gas for on-chain withdraw, Loopring exchange allocates gas for each distribution, but people can also assign this min gas, so Loopring have to allocate higher gas value for this specific distribution. Normally no need to take care of this value, 0 means let loopring choose the reasonable gas\n   * @type {number}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  minGas: number;\n  /**\n   * withdraw to address\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  to: string;\n  /**\n   * extra data for complex withdraw mode, normally none\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  extraData?: string;\n  /**\n   * is fast withdraw mode\n   * @type {boolean}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  fastWithdrawalMode?: boolean;\n  /**\n   * eddsa signature\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  eddsaSignature?: string;\n  /**\n   * ecdsa signature\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  ecdsaSignature?: string;\n  /**\n   * An approved hash string which was already submitted on eth mainnet\n   * @type {string}\n   * @memberof OffChainWithdrawalRequestV3\n   */\n  hashApproved?: string;\n}\n\n/**\n * Describes the users public key which is a point of the selected eclipse curve.\n * @export\n * @interface PublicKey\n */\nexport interface PublicKey {\n  /**\n   * The public keys x part.\n   * @type {string}\n   * @memberof PublicKey\n   */\n  x: string;\n  /**\n   * The public keys y part.\n   * @type {string}\n   * @memberof PublicKey\n   */\n  y: string;\n}\n\nexport interface UpdateAccountRequestV3 {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof UpdateAccountRequestV3\n   */\n  exchange: string;\n  /**\n   * owner address\n   * @type {string}\n   * @memberof UpdateAccountRequestV3\n   */\n  owner: string;\n  /**\n   * user account ID\n   * @type {number}\n   * @memberof UpdateAccountRequestV3\n   */\n  accountId: number;\n  /**\n   *\n   * @type {PublicKey}\n   * @memberof UpdateAccountRequestV3\n   */\n  publicKey: PublicKey;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof UpdateAccountRequestV3\n   */\n  maxFee: TokenVolumeV3;\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof UpdateAccountRequestV3\n   */\n  validUntil: number;\n  /**\n   * Nonce of users exchange account that used in off-chain requests.\n   * @type {number}\n   * @memberof UpdateAccountRequestV3\n   */\n  nonce: number;\n  /**\n   * eddsa signature of this request\n   * @type {string}\n   * @memberof UpdateAccountRequestV3\n   */\n  eddsaSignature?: string;\n  /**\n   * ecdsa signature of this request\n   * @type {string}\n   * @memberof UpdateAccountRequestV3\n   */\n  ecdsaSignature?: string;\n  /**\n   * An approved hash string which was submitted on eth mainnet\n   * @type {string}\n   * @memberof UpdateAccountRequestV3\n   */\n  hashApproved?: string;\n\n  keySeed?: string;\n  counterFactualInfo?: CounterFactualInfo;\n}\n\nexport interface OffChainWithdrawalRequestV3WithPatch {\n  request: OffChainWithdrawalRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginTransferRequestV3WithPatch {\n  request: OriginTransferRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginForcesWithdrawalsRequestV3WithPatch {\n  request: OriginForcesWithdrawalsV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginDeployNFTRequestV3WithPatch {\n  request: OriginDeployNFTRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginDeployCollectionRequestV3WithPatch {\n  request: OriginDeployCollectionRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginNFTTransferRequestV3WithPatch {\n  request: OriginNFTTransferRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginNFTWithdrawRequestV3WithPatch {\n  request: NFTWithdrawRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginNFTMINTRequestV3WithPatch {\n  request: NFTMintRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginNFTCreateCollectionRequestV3WithPatch {\n  // request: NFTMintRequestV3;\n  // web3: Web3;\n  // chainId: ChainId;\n  // walletType: ConnectorNames;\n  // eddsaKey: string;\n  // apiKey: string;\n  // isHWAddr?: boolean;\n}\n\nexport interface OriginNFTValidateOrderRequestV3WithPatch {\n  request: NFTOrderRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginNFTTradeRequestV3WithPatch {\n  request: NFTTradeRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface UpdateAccountRequestV3WithPatch {\n  request: UpdateAccountRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  isHWAddr?: boolean;\n}\n\nexport interface GetAccountServicesRequest {\n  phone?: string;\n  email?: string;\n  wallet?: string;\n}\n\n// NFTAction\n\nexport interface GetUserNFTBalancesRequest {\n  accountId: number;\n  nftDatas?: string;\n  tokenAddrs?: string;\n  tokenIds?: string;\n  offset?: number;\n  limit?: number;\n  nonZero?: boolean;\n  metadata?: boolean;\n}\n\nexport interface GetUserNFTBalancesByCollectionRequest {\n  accountId: number;\n  tokenAddress: string;\n  collectionId: number;\n  offset?: number;\n  limit?: number;\n  nonZero?: boolean;\n  metadata?: boolean;\n  favourite?: boolean;\n  hidden?: boolean;\n}\n\nexport enum LegacyNFT {\n  inside = \"inside\",\n  outside = \"outside\",\n  undecided = \"undecided\",\n}\nexport interface GetUserNFTLegacyBalanceRequest {\n  accountId: number;\n  tokenAddress: string;\n  collectionId: number;\n  filter?: LegacyNFT;\n  offset?: number;\n  limit?: number;\n  metadata?: boolean;\n}\n\nexport enum DEPLOYMENT_STATUS {\n  NOT_DEPLOYED = \"NOT_DEPLOYED\",\n  DEPLOY_FAILED = \"DEPLOY_FAILED\",\n  DEPLOYING = \"DEPLOYING\",\n  DEPLOYED = \"DEPLOYED\",\n}\n\nexport enum NFT_IMAGE_SIZES {\n  small = \"240-240\",\n  large = \"332-332\",\n  original = \"original\",\n}\n\nexport type IPFS_METADATA = {\n  uri: string;\n  base: {\n    name: string;\n    decimals: number;\n    description: string;\n    image: string;\n    properties: string;\n    localization: string;\n  };\n\n  imageSize: { [P in NFT_IMAGE_SIZES]?: string };\n  extra: {\n    imageData: string;\n    externalUrl: string;\n    attributes: string;\n    backgroundColor: string;\n    animationUrl: string;\n    youtubeUrl: string;\n    minter: string;\n  };\n  nftId?: string;\n  nftType: NFTType;\n  network: 0;\n  tokenAddress: string;\n  tokenId: string;\n};\n\nexport interface UserNFTBalanceInfo<I = NFT_IMAGE_SIZES> extends NFTTokenInfo {\n  accountId: number;\n  tokenId: number;\n  total?: string;\n  locked?: string;\n  pending: {\n    withdraw: string;\n    deposit: string;\n  };\n  preference: {\n    favourite: boolean;\n    hide: boolean;\n  };\n  collectionInfo: CollectionMeta;\n  metadata?: IPFS_METADATA;\n  deploymentStatus: DEPLOYMENT_STATUS;\n  isCounterFactualNFT: boolean;\n}\n\nexport interface GetUserVIPInfoRequest {\n  userAddress: string;\n}\n\nexport interface getUserVIPAssetsRequest {\n  address: string;\n  currency?: string;\n  assetTypes?: string;\n  token?: string;\n  limit?: number;\n}\n\nexport type NftData = string;\n\nexport interface NFTTokenInfo {\n  nftData: string;\n  minter: string;\n  nftType: string;\n  tokenAddress: string;\n  nftId: string;\n  status: boolean;\n}\n\nexport interface NFTTokenAmountInfo {\n  tokenId: number;\n  nftData?: string;\n  amount: string;\n}\n\nexport type GetUserNFTTransferHistoryRequest = {\n  accountId: number;\n  nftData?: string;\n  start?: number;\n  end?: number;\n  hashes?: string;\n  txStatus?: string;\n  limit?: number;\n  // offset?: number\n  // transferTypes?: string // transfer, transfer_red\n};\n\nexport type GetUserNFTMintHistoryRequest = {\n  accountId: number;\n  nftData?: string;\n  start?: number;\n  startId?: number;\n  end?: number;\n  hashes?: string;\n  txStatus?: string;\n  limit?: number;\n  // offset?: number\n  // transferTypes?: string // transfer, transfer_red\n};\n\nexport type GetUserNFTDepositHistoryRequest = {\n  accountId: number;\n  nftData?: string;\n  start?: number;\n  end?: number;\n  startId?: number;\n  hashes?: string;\n  txStatus?: string;\n  limit?: number;\n};\n\nexport type GetUserNFTWithdrawalHistoryRequest = {\n  accountId: number;\n  nftData?: string;\n  start?: number;\n  end?: number;\n  startId?: number;\n  hashes?: string;\n  txStatus?: string;\n  limit?: number;\n};\n\nexport interface UserNFTDepositHistoryTx {\n  id: number;\n  requestId: number;\n  nftData: string;\n  amount: string;\n  hash: string;\n  txHash: string;\n  accountId: number;\n  owner: string;\n  status: TxStatus;\n  progress: string;\n  timestamp: number;\n  blockId: number;\n  indexInBlock: number;\n  createdAt: number;\n  updatedAt: number;\n  feeTokenSymbol: string;\n  feeAmount: string;\n  memo?: string;\n  depositFrom: string;\n  depositFromAccountId: string;\n}\n\nexport interface UserNFTWithdrawalHistoryTx {\n  id: number;\n  requestId: number;\n  hash: string;\n  txHash: string;\n  accountId: number;\n  owner: string;\n  status: string;\n  nftData?: string;\n  amount?: string;\n  feeTokenSymbol?: string;\n  feeAmount: string;\n  createdAt: number;\n  updatedAt: number;\n  memo?: string;\n  recipient: string;\n  distributeHash: string;\n  fastWithdrawStatus: string;\n  isFast: false;\n  blockIdInfo: {\n    blockId: number;\n    indexInBlock: number;\n  };\n  storageInfo: {\n    accountId: number;\n    tokenId: number;\n    storageId: number;\n  };\n}\n\nexport interface UserNFTTransferHistoryTx {\n  id: string;\n  requestId: number;\n  hash: string;\n  txHash: string;\n  accountId: number;\n  owner: string;\n  status: string;\n  nftData: string;\n  amount: string;\n  feeTokenSymbol: string;\n  feeAmount: string;\n  createdAt: number;\n  updatedAt: number;\n  memo: string;\n  payeeId: number;\n  payeeAddress: string;\n  blockIdInfo: {\n    blockId: number;\n    indexInBlock: number;\n  };\n  storageInfo: {\n    accountId: number;\n    tokenId: number;\n    storageId: number;\n  };\n}\n\nexport type UserNFTMintHistoryTx = {\n  id: string;\n  requestId: number;\n  hash: string;\n  txHash: string;\n  accountId: number;\n  owner: string;\n  status: string;\n  nftData: string;\n  amount: string;\n  feeTokenSymbol: string;\n  feeAmount: string;\n  createdAt: number;\n  updatedAt: number;\n  memo: string;\n  minterId: number;\n  minterAddress: string;\n  blockIdInfo: {\n    blockId: number;\n    indexInBlock: number;\n  };\n  storageInfo: {\n    accountId: number;\n    tokenId: number;\n    storageId: number;\n  };\n};\n\nexport interface UserNFTTxsHistory {\n  id: string;\n  requestId: number;\n  hash: string;\n  txHash: string;\n  accountId: number;\n  owner: string;\n  nftData: string;\n  amount: string;\n  feeTokenSymbol: string;\n  feeAmount: string;\n  createdAt: number;\n  updatedAt: number;\n  memo: string;\n  payeeId: number;\n  payeeAddress: string;\n  nftTxType: string;\n  symbol: string;\n  receiver: number;\n  status: TxStatus;\n  progress: string;\n  timestamp: number;\n  blockNum: number;\n  distributeHash: string;\n  receiverAddress: string;\n  senderAddress: string;\n  fastStatus: string;\n  recipient: string;\n  minterInfo: { accountId: number; minter: string; originalMinter: string };\n  nftStatusInfo: {};\n  withdrawalInfo: {\n    distributeHash: string;\n    fastStatus: boolean;\n    recipient: string;\n  };\n  metadata?: IPFS_METADATA;\n  storageInfo: {\n    accountId: number;\n    tokenId: number;\n    storageId: number;\n  };\n}\n\nexport declare type NFTOrderInfo = {\n  orderHash: string;\n  accountId: number;\n  feeAmount: string;\n  storageId: number;\n  address: string;\n};\n\nexport interface UserNFTTradeHistory {\n  fillId: number;\n  nftHash: string;\n  feeTokenId: number;\n  price: string;\n  nftAmount: string;\n  feeAmount: string;\n  feeTokenSymbol: string;\n  createdAt: number;\n  hash: string;\n  blockId: number;\n  indexInBlock: number;\n  tokenId: number;\n  counter: number;\n  tokenAddress: number;\n  sInfo: NFTOrderInfo;\n  bInfo: NFTOrderInfo;\n  metadata: IPFS_METADATA;\n}\n\nexport type Protector = {\n  ens: string;\n  address: string;\n  lockStatus: HEBAO_LOCK_STATUS;\n};\nexport type HebaoOperationLog = {\n  createdAt: number;\n  ens: string;\n  from: string;\n  hebaoTxType: HEBAO_META_TYPE;\n  id: number;\n  status: 0 | 1;\n  to: string;\n};\n\nexport type Guardian = {\n  ens: string;\n  address: string;\n  type: keyof typeof HEBAO_META_TYPE;\n  id: string;\n  messageHash: string;\n  businessDataJson: any;\n  signedRequest: any;\n  createAt: number;\n};\n\n/**\n *\n * @export\n * @interface ApproveHebaoRequest\n */\nexport type GuardiaContractAddress = string;\n\nexport interface ApproveHebaoRequestV3WithPatch {\n  request: Guardian & { code: string };\n  web3: Web3;\n  address: string;\n  chainId: ChainId;\n  guardiaContractAddress: GuardiaContractAddress;\n  walletType?: ConnectorNames;\n}\n\nexport interface RejectHebaoRequestV3WithPatch {\n  request: { approveRecordId: string; signer: string; network?: NetworkWallet };\n  web3: Web3;\n  address: string;\n  chainId: ChainId;\n  guardiaContractAddress: GuardiaContractAddress;\n  walletType?: ConnectorNames;\n}\n\nexport interface LockHebaoHebaoParam {\n  web3: Web3;\n  from: string;\n  wallet: string;\n  value?: string | number;\n  contractAddress: string;\n  gasPrice: number;\n  gasLimit: number;\n  chainId?: ChainId;\n  nonce: number;\n  isVersion1: boolean;\n  sendByMetaMask?: boolean;\n}\n\nexport interface HebaoOperationLogs {\n  from: string;\n  fromTime: number;\n  to?: string;\n  offset?: number;\n  statues?: string;\n  hebaoTxType?: string;\n  limit?: number;\n  network?: NetworkWallet;\n}\n\nexport interface WalletType {\n  isInCounterFactualStatus: boolean;\n  isContract: boolean;\n  loopringWalletContractVersion: string;\n}\n\nexport interface ContractType {\n  network: string;\n  contractVersion: string; //V1_x_x\"|V2_x_x\n  masterCopy?: string; // V2 only\n  walletFactory?: string; // V2 only\n  ens?: string;\n  walletStatus: number;\n  queueStatus: number;\n  walletType: number; // HEBAO = 0; EOA = 1;\n  isCounterFactual: boolean; //isCounterFactual\n}\n\nexport interface ModuleType {\n  moduleName: string; // FORWARDER_MODULE\n  moduleAddress: string;\n}\n\n/**\n * DefiOrderRequest\n */\nexport interface DefiOrderRequest {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  exchange: string;\n  /**\n   * storageId\n   * @type {number}\n   * @memberof DefiOrderRequest\n   */\n  storageId: number;\n  /**\n   * accountId\n   * @type {number}\n   * @memberof DefiOrderRequest\n   */\n  accountId: number;\n  /**\n   * sellToken\n   * @type TokenVolumeV3\n   * @memberof DefiOrderRequest\n   */\n  sellToken: TokenVolumeV3;\n  /**\n   * buyToken\n   * @type TokenVolumeV3\n   * @memberof DefiOrderRequest\n   */\n  buyToken: TokenVolumeV3;\n  /**\n   * Timestamp for order become invalid\n   * @type {number}\n   * @memberof DefiOrderRequest\n   */\n  validUntil: number;\n  /**\n   * fee\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  fee: string;\n  /**\n   * Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63\n   * @type {number}\n   * @memberof DefiOrderRequest\n   */\n  maxFeeBips: number;\n  /**\n   * fillAmountBOrS\n   * @type boolean\n   * @memberof DefiOrderRequest\n   */\n  fillAmountBOrS: boolean;\n  /**\n   * taker address\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  taker?: string;\n  /**\n   * The orders EdDSA signature. The signature is a hexadecimal string obtained by signing the order itself and concatenating the resulting signature parts (Rx, Ry, and S). Used to authenticate and authorize the operation.\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  eddsaSignature?: string;\n  /**\n   * type\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  type: string;\n  /**\n   * action\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  action: string;\n}\n\nexport interface DefiResult {\n  hash: string;\n  clientOrderId: string;\n  status: TxStatus;\n  isIdempotent: boolean;\n}\n\nexport const SEP = \",\";\n\nexport enum DefiAction {\n  Deposit = \"deposit\",\n  Withdraw = \"withdraw\",\n}\n\nexport interface UserDefiTxsHistory {\n  id: string;\n  txType: string;\n  action: DefiAction;\n  hash: string;\n  market: string;\n  sellToken: TokenVolumeV3;\n  buyToken: TokenVolumeV3;\n  fee: TokenVolumeV3;\n  status: TxStatus;\n  updatedAt: number;\n  storageInfo: {\n    accountId: number;\n    tokenId: number;\n    storageId: number;\n  };\n}\n\nexport interface GetDefiMarketRequest {\n  defiType?: string;\n}\n\nexport interface GetUserDefiRewardRequest {\n  accountId: number;\n}\n\nexport interface GetUserDefiTxRequest {\n  accountId: number;\n  offset: number;\n  start?: number;\n  end?: number;\n  limit: number;\n}\n\nexport type CollectionExtendsKey = {\n  thumbnail?: string;\n  cid?: string;\n  id?: string;\n  contractAddress: string;\n  collectionAddress: string;\n  deployStatus: DEPLOYMENT_STATUS;\n  updatedAt: number;\n  createdAt: number;\n  nftType: string;\n  baseUri: string;\n  collectionTitle?: string;\n  extra: {\n    mintChannel: string;\n    properties: {\n      isCounterFactualNFT: boolean;\n      isDeletable: boolean;\n      isEditable: boolean;\n      isLegacy: boolean;\n      isMintable: boolean;\n      isPublic: boolean;\n    };\n  };\n  cached: {\n    avatar: string;\n    banner: string;\n    thumbnail: string;\n    tileUri: string;\n  };\n  isCounterFactualNFT?: boolean;\n  isDeletable?: boolean;\n  isEditable?: boolean;\n  isLegacy?: boolean;\n  isMintable?: boolean;\n  isPublic?: boolean;\n};\n\nexport type CollectionBasicMeta = {\n  name: string;\n  tileUri: string;\n  nftFactory?: string;\n  description?: string;\n  avatar?: string;\n  banner?: string;\n  owner: string;\n};\nexport type CollectionDelete = {\n  accountId: number;\n  collectionId: number;\n};\n\nexport type CollectionLegacyMeta = Omit<CollectionBasicMeta, \"owner\"> & {\n  accountId: number;\n  tokenAddress: string;\n};\n\nexport enum NFT_PREFERENCE_TYPE {\n  fav = \"fav\",\n  hide = \"hide\",\n}\nexport type UpdateNFTLegacyCollectionRequest = {\n  accountId: number;\n  nftHashes: string[];\n  collectionId?: number;\n};\n\nexport type UpdateNFTGroupRequest = {\n  accountId: number;\n  nftHashes: string[];\n  collectionId?: number;\n  preferenceType: NFT_PREFERENCE_TYPE;\n  statusToUpdate: boolean;\n};\n/**\n * CollectionMeta\n * @property name string useToCreate Collection\n * @property name string\n * @property tileUri string option\n * @property owner? string option\n * @property nftFactory? string option\n * @property baseUri? string option\n * @property collectionTitle? string option\n * @property description? string option\n * @property avatar? string option\n * @property banner? string option\n * @property thumbnail? string option\n * @property cid? string option\n *\n */\nexport type CollectionMeta = CollectionExtendsKey & CollectionBasicMeta;\n\nexport interface GetUserOwnerCollectionRequest {\n  owner: string;\n  offset?: number;\n  limit?: number;\n  tokenAddress?: string;\n  isMintable?: boolean;\n}\n\nexport interface GetUserLegacyCollectionRequest {\n  accountId: string;\n  tokenAddress: string;\n  offset?: number;\n  limit?: number;\n}\nexport interface GetCollectionWholeNFTsRequest {\n  id: number;\n  metadata?: boolean;\n  offset?: number;\n  limit?: number;\n}\n\nexport interface GetUserNFTCollectionRequest {\n  accountId: string;\n  offset?: number;\n  limit?: number;\n  collectionId?: number;\n  tokenAddress?: string;\n}\n\nexport enum DUAL_TYPE {\n  DUAL_BASE = \"DUAL_BASE\",\n  DUAL_CURRENCY = \"DUAL_CURRENCY\",\n}\n\nexport type GetDualInfosRequest = {\n  baseSymbol: string;\n  quoteSymbol: string;\n  currency: string;\n  dualType: DUAL_TYPE;\n  minStrike?: string;\n  maxStrike?: string;\n  startTime?: number;\n  timeSpan?: number;\n  limit: number;\n};\nexport type GetDualPricesRequest = {\n  baseSymbol: string;\n  productIds: string;\n};\nexport type GetDualRuleRequest = { baseSymbol: string; currency?: string };\n\nexport type DualBid = {\n  baseProfit: string;\n  baseQty: string;\n};\nexport type DualPrice = {\n  productId: string;\n  cacheQty: string;\n  priceTime: number;\n  dualBid: DualBid[];\n};\nexport type DualIndex = {\n  index: string;\n  base: string;\n  quote: string;\n  indexTime: number;\n};\n\nexport type DualProductAndPrice = {\n  productId: string;\n  base: string;\n  quote: string;\n  currency: string;\n  createTime: number;\n  expireTime: number;\n  strike: string;\n  expired: boolean;\n  dualType: DUAL_TYPE;\n  ratio: number;\n  profit: string;\n  baseSize: string;\n};\n\nexport type DualRulesCoinsInfo = {\n  base: string;\n  quote: string;\n  currency: string;\n  basePrecision: number;\n  currencyPrecision: number;\n  baseMin: string;\n  currencyMin: string;\n  baseMax: string;\n  currencyMax: string;\n  granulation: number;\n  baseProfitStep: number;\n};\nexport type DualBalance = {\n  coin: string;\n  free: string;\n  frozen: string;\n};\n\nexport enum LABEL_INVESTMENT_STATUS {\n  // INVESTMENT_SUCCEEDED = \"INVESTMENT_SUCCEEDED\",\n  // INVESTMENT_FAILED = \"INVESTMENT_FAILED\",\n  // INVESTMENT_RECEIVED = \"INVESTMENT_RECEIVED\",\n  PROCESSED = \"processed\",\n  FAILED = \"failed\",\n  PROCESSING = \"processing\",\n  CANCELLED = \"cancelled\",\n}\n\nexport enum SETTLEMENT_STATUS {\n  UNSETTLED = \"UNSETTLED\",\n  SETTLED = \"SETTLED\",\n  PAID = \"PAID\",\n}\n\nexport interface GetUserDualTxRequest {\n  accountId: number;\n  dualTypes: DUAL_TYPE;\n  investmentStatuses?: LABEL_INVESTMENT_STATUS;\n  settlementStatuses?: SETTLEMENT_STATUS;\n  offset: number;\n  start: number;\n  end: number;\n  limit: number;\n}\n\nexport interface UserDualTxsHistory {\n  id: string;\n  hash: string;\n  productId: string;\n  dualType: DUAL_TYPE;\n  settleRatio: number;\n  filled: string;\n  dualFilled: string;\n  deliveryPrice: number;\n  strike: number;\n  market: string;\n  tokenInfoOrigin: {\n    base: string;\n    quote: string;\n    currency: string;\n    amountIn: string;\n    amountOut: string;\n    market: string;\n    tokenIn: number;\n    tokenOut: number;\n  };\n  timeOrigin: {\n    expireTime: number;\n    createTime: number;\n    updateTime: number;\n    settlementTime: number;\n  };\n  investmentStatus: LABEL_INVESTMENT_STATUS;\n  settlementStatus: SETTLEMENT_STATUS;\n  createdAt: number;\n  updatedAt: number;\n}\n\n/**\n * DualOrderRequest\n */\nexport interface DualOrderRequest {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  exchange: string;\n  /**\n   * storageId\n   * @type {number}\n   * @memberof DefiOrderRequest\n   */\n  storageId: number;\n  /**\n   * accountId\n   * @type {number}\n   * @memberof DefiOrderRequest\n   */\n  accountId: number;\n  /**\n   * sellToken\n   * @type TokenVolumeV3\n   * @memberof DefiOrderRequest\n   */\n  sellToken: TokenVolumeV3;\n  /**\n   * buyToken\n   * @type TokenVolumeV3\n   * @memberof DefiOrderRequest\n   */\n  buyToken: TokenVolumeV3;\n  /**\n   * Timestamp for order become invalid\n   * @type {number}\n   * @memberof DefiOrderRequest\n   */\n  validUntil: number;\n  /**\n   * fee\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  fee: string;\n  /**\n   * Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63\n   * @type {number}\n   * @memberof DefiOrderRequest\n   */\n  maxFeeBips: number;\n  /**\n   * fillAmountBOrS\n   * @type boolean\n   * @memberof DefiOrderRequest\n   */\n  fillAmountBOrS: boolean;\n  /**\n   * The orders EdDSA signature. The signature is a hexadecimal string obtained by signing the order itself and concatenating the resulting signature parts (Rx, Ry, and S). Used to authenticate and authorize the operation.\n   * @type {string}\n   * @memberof DefiOrderRequest\n   */\n  eddsaSignature?: string;\n\n  baseProfit: string;\n  clientOrderId: string;\n  productId: string;\n  settleRatio: string;\n  expireTime: number;\n}\n\nexport type CalDualResult = {\n  sellVol: string;\n  quota: string;\n  lessEarnVol: string;\n  lessEarnTokenSymbol: string;\n  greaterEarnVol: string;\n  greaterEarnTokenSymbol: string;\n  maxSellAmount: string;\n  miniSellVol: string;\n  feeVol: string | undefined;\n  feeTokenSymbol?: string;\n  maxFeeBips: number;\n  sellToken: TokenInfo;\n};\n\nexport interface DualUserLockedRequest {\n  accountId: number;\n  lockTag: DUAL_TYPE[];\n  status: string;\n}\n\nexport enum LuckyTokenItemStatusIndex {\n  SUBMITTING = 0,\n  NOT_EFFECTIVE = 1,\n  PENDING = 2,\n  COMPLETED = 3,\n  OVER_DUE = 4,\n  FAILED = 5,\n}\nexport enum LuckyTokenWithdrawStatus {\n  RECEIVED = 0,\n  PROCESSING = 1,\n  PROCESSED = 2,\n  WITHDRAW_FAILED = 3,\n  PREPARE_FAILED = 4,\n}\n\nexport enum LuckyTokenItemStatus {\n  SUBMITTING = \"SUBMITTING\",\n  NOT_EFFECTIVE = \"NOT_EFFECTIVE\",\n  PENDING = \"PENDING\",\n  COMPLETED = \"COMPLETED\",\n  OVER_DUE = \"OVER_DUE\",\n  FAILED = \"FAILED\",\n}\nexport enum LuckyTokenAmountType {\n  RANDOM = 0,\n  AVERAGE = 1,\n}\nexport enum LuckyTokenViewType {\n  PUBLIC = 0,\n  PRIVATE = 1,\n}\nexport enum LuckyTokenClaimType {\n  RELAY = 0,\n  COMMON = 1,\n  BLIND_BOX = 2,\n}\nexport enum ClaimRecordStatus {\n  WAITING_CLAIM = \"WAITING_CLAIM\",\n  CLAIMED = \"CLAIMED\",\n  EXPIRED = \"EXPIRED\",\n}\nexport enum BlindBoxStatus {\n  NOT_OPENED = \"NOT_OPENED\",\n  OPENED = \"OPENED\",\n  EXPIRED = \"EXPIRED\",\n}\nexport type LuckyTokenChampion = {\n  accountId: number;\n  address: string;\n  ens: string;\n  amount: number;\n};\nexport type LuckyTokenAmount = {\n  totalCount: number;\n  remainCount: number;\n  totalAmount: string;\n  remainAmount: string;\n  claimedBoxCount: number;\n  giftCount: number;\n};\nexport type LuckyTokenType = {\n  partition: LuckyTokenAmountType;\n  scope: LuckyTokenViewType;\n  mode: LuckyTokenClaimType;\n};\nexport type LuckyTokenInfo = {\n  memo: string;\n  signer: string;\n  signerUrl: string;\n  logoUrl: string;\n};\nexport type LuckyTokenSender = {\n  accountId: number;\n  address: string;\n  ens: string;\n};\nexport type LuckyTokenItemForReceive = {\n  hash: string;\n  sender: LuckyTokenSender;\n  champion: LuckyTokenChampion;\n  tokenId: number;\n  tokenAmount: LuckyTokenAmount;\n  type: LuckyTokenType;\n  status: LuckyTokenItemStatus;\n  validSince: number;\n  validUntil: number;\n  info: LuckyTokenInfo;\n  templateNo: number;\n  createdAt: number;\n  nftTokenInfo?: UserNFTBalanceInfo;\n  isNft?: boolean;\n};\nexport type BlindBoxClaimInfo = {\n  // 盲盒信息\n  id: number;\n  hash: string;\n  claimer: {\n    accountId: number;\n    address: string;\n    ens: string;\n  };\n  tokenId: number;\n  nftHash: string;\n  amount: string;\n  status: string;\n  openTime: string;\n  expireTime: string;\n  createdAt: number;\n};\nexport type LuckyTokenBlindBoxItemReceive = {\n  luckyToken: LuckyTokenItemForReceive;\n  claim: BlindBoxClaimInfo;\n};\nexport type LuckTokenClaim = {\n  hash: string;\n  claimer: {\n    accountId: number;\n    address: string;\n    ens: string;\n  };\n  referrer: {\n    accountId: number;\n    address: number;\n    ens: string;\n  };\n  helper: {\n    accountId: number;\n    address: number;\n    ens: number;\n  };\n  amount: number;\n  createdAt: number;\n  claimId: number;\n};\n\nexport type LuckyTokenSignerFlag = 0 | 1;\nexport type LuckTokenHistory = {\n  champion: LuckyTokenChampion;\n  claimAmount: number;\n  claim: {\n    id: number;\n  } & LuckTokenClaim;\n  tokenId: number;\n  hash: string;\n  helpers: {\n    accountId: number;\n    address: number;\n    ens: number;\n  }[];\n  luckyToken: {\n    id: number;\n  } & LuckyTokenItemForReceive;\n};\nexport type LuckTokenClaimDetail = {\n  champion: LuckyTokenChampion;\n  claimAmount: number;\n  claims: Array<\n    {\n      id: number;\n    } & LuckTokenClaim\n  >;\n  tokenId: number;\n  hash: string;\n  helpers: {\n    accountId: number;\n    address: number;\n    ens: number;\n    amount: number;\n  }[];\n  luckyToken: {\n    id: number;\n  } & LuckyTokenItemForReceive;\n};\n\nexport type LuckTokenWithdraw = {\n  id: number;\n  hash: string;\n  claimer: {\n    accountId: number;\n    address: number;\n    ens: string;\n  };\n  tokenId: number;\n  amount: string;\n  feeTokenId: number;\n  feeAmount: number;\n  status: 0 | 1 | 2; // PENDING:0 SUCCESS:1  FAIL:2\n  createdAt: number;\n  updatedAt: number;\n  isNft: boolean;\n  nftTokenInfo?: UserNFTBalanceInfo;\n};\n\nexport type TOKENMAPLIST = {\n  tokensMap: LoopringMap<TokenInfo>;\n  coinMap: LoopringMap<{\n    icon?: string;\n    name: string;\n    simpleName: string;\n    description?: string;\n    company: string;\n  }>;\n  totalCoinMap: LoopringMap<{\n    icon?: string;\n    name: string;\n    simpleName: string;\n    description?: string;\n    company: string;\n  }>;\n  idIndex: LoopringMap<string>;\n  addressIndex: LoopringMap<TokenAddress>;\n};\n\nexport interface OriginLuckTokenWithdrawsRequestV3 {\n  tokenId: number;\n  feeTokenId: number;\n  amount: string;\n  claimer: string;\n  transfer: Omit<OriginTransferRequestV3, \"payeeId\" | \"maxFee\" | \"memo\"> & {\n    payeeId?: 0;\n    memo?: string;\n    maxFee?: {\n      volume: \"0\";\n      tokenId: number | string;\n    };\n  };\n  nftData?: string;\n}\n\nexport interface OriginLuckTokenWithdrawsRequestV3WithPatch {\n  request: OriginLuckTokenWithdrawsRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\n/**\n * LuckyTokenItemForSend\n *\n */\nexport type LuckyTokenItemForSendV3 = {\n  type: LuckyTokenType;\n  /**\n   * numbers\n   * @type {number}  ERC20 [1,10000], NFT [1,20000]\n   * @memberof LuckyTokenItemForSend\n   */\n  numbers: number; // <10000\n  giftNumbers: number; // <10000\n  memo: string;\n  signerFlag: boolean;\n  templateId: number;\n  validSince: number;\n  validUntil: number;\n} & (\n  | {\n      luckyToken: OriginTransfer3RequestV3;\n      /**\n       * nftData\n       * @type {string}  NFT required\n       * @memberof LuckyTokenItemForSend\n       */\n      nftData: string;\n    }\n  | {\n      luckyToken: OriginTransfer3RequestV3;\n    }\n);\n\nexport interface OriginLuckTokenSendRequestV3WithPatch {\n  request: LuckyTokenItemForSendV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface OriginTransfer3RequestV3 {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  exchange: string;\n  /**\n   * payer account ID\n   * @type {number}\n   * @memberof OriginTransferRequestV3\n   */\n  payerId: number;\n  /**\n   * payer account address\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  payerAddr: string;\n  /**\n   * payee account ID\n   * @type {number}\n   * @memberof OriginTransferRequestV3\n   */\n  payeeId: number;\n  /**\n   * payee account address\n   * @type {string}\n   * @memberof OriginTransferRequestV3\n   */\n  payeeAddr: string;\n  /**\n   *\n   * @type {TokenVolumeV3}\n   * @memberof OriginTransferRequestV3\n   */\n  token: string;\n  amount: string;\n  /**\n   *\n   * @type { Pick<TokenVolumeV3,'tokenId'> & {amount:string}}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  feeToken: string;\n  maxFeeAmount: string; //Pick<TokenVolumeV3, \"tokenId\"> & { amount: string };\n  /**\n   * offchain Id\n   * @type {number}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  storageId: number;\n  /**\n   * Timestamp for order to become invalid\n   * @type {number}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  validUntil: number;\n  /**\n   * transfer memo\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  memo?: string;\n  /**\n   * eddsa signature\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  eddsaSig?: string;\n  /**\n   * ecdsa signature\n   * @type {string}\n   * @memberof OriginNFTTransferRequestV3\n   */\n  counterFactualInfo?: CounterFactualInfo;\n}\n\nexport type STACKING_PRODUCT = {\n  tokenId: number;\n  symbol: string;\n  address: string;\n  decimals: number;\n  status: number;\n  apr: string;\n  precision: number;\n  staked: string;\n  rewardPeriod: string;\n  minAmount: string;\n  maxAmount: string;\n};\nexport enum StakeStatus {\n  received = \"received\",\n  locked = \"locked\",\n  partial_unlocked = \"partial_unlocked\",\n  completely_unlocked = \"completely_unlocked\",\n  failed = \"failed\",\n}\nexport type StakeInfoOrigin = {\n  accountId: number;\n  tokenId: number;\n  stakeAt: number;\n  createdAt: number;\n  updatedAt: number;\n  claimableTime: number;\n  apr: string;\n  lastDayPendingRewards: string;\n  initialAmount: string;\n  remainAmount: string;\n  totalRewards: string;\n  productId: string;\n  hash: string;\n  status: StakeStatus;\n};\nexport type STACKING_SUMMARY = {\n  totalStaked: string;\n  totalLastDayPendingRewards: string;\n  totalStakedRewards: string;\n  totalClaimableRewards: string;\n  staking: StakeInfoOrigin[];\n};\nexport enum StakeTransactionType {\n  subscribe = \"subscribe\",\n  redeem = \"redeem\",\n  claim = \"claim\",\n}\nexport type STACKING_TRANSACTIONS = {\n  accountId: number;\n  tokenId: number;\n  amount: string;\n  productId: string;\n  hash: string;\n  type: StakeTransactionType;\n  createdAt: number;\n  updatedAt: number;\n};\nexport interface OriginStakeClaimRequestV3 {\n  accountId: number;\n  token: TokenVolumeV3;\n  transfer: Omit<OriginTransferRequestV3, \"payeeId\" | \"memo\"> & {\n    payeeId?: 0;\n    memo?: string;\n  };\n}\nexport interface OriginStakeClaimRequestV3WithPatch {\n  request: OriginStakeClaimRequestV3;\n  web3: Web3;\n  chainId: ChainId;\n  walletType: ConnectorNames;\n  eddsaKey: string;\n  apiKey: string;\n  isHWAddr?: boolean;\n}\n\nexport interface GetContactsRequest {\n  isHebao: boolean;\n  accountId: number;\n}\n\nexport enum AddressType {\n  UNKNOWN_ADDRESS = 0,\n  LOOPRING_HEBAO_CF = 100,\n  // hebao\n  LOOPRING_HEBAO_CONTRACT_1_1_6 = 2000,\n  LOOPRING_HEBAO_CONTRACT_1_2_0 = 2001,\n  LOOPRING_HEBAO_CONTRACT_2_0_0 = 2002,\n  LOOPRING_HEBAO_CONTRACT_2_1_0 = 2003,\n\n  LOOPRING_DEX_EOA = 300,\n  //exchange\n  EXCHANGE_OTHER = 4000,\n  EXCHANGE_BINANCE = 4001,\n  EXCHANGE_OKX = 4002,\n  EXCHANGE_HUOBI = 4003,\n  EXCHANGE_COINBASE = 4004,\n\n  EOA = 5000,\n  EOA_METAMASK = 5001,\n  EOA_COINBASE = 5002,\n  EOA_LEDGER = 5003,\n\n  CONTRACT = 600,\n}\n\nexport interface GetContactsResponse {\n  contacts: {\n    addressType: AddressType;\n    contactAddress: string;\n    contactMemo: string;\n    contactName: string;\n    isFavourite: boolean;\n    network: string;\n    ownerAccountId: number;\n  }[];\n  total: number;\n}\n\nexport interface CreateContactRequest {\n  accountId: number;\n  isHebao: boolean;\n  contactAddress: string;\n  contactName: string;\n  contactMemo?: string;\n}\n\nexport interface UpdateContactRequest {\n  contactAddress: string;\n  isHebao: boolean;\n  accountId: number;\n  contactName?: string;\n  contactMemo?: string;\n  addressType?: number;\n}\n\nexport interface DeleteContactRequest {\n  contactAddress: string;\n  isHebao: boolean;\n  accountId: number;\n  contactName?: string;\n  contactMemo?: string;\n}\n\nexport type CEX_MARKET = {\n  market: string;\n  baseTokenId: number;\n  quoteTokenId: number;\n  precisionForPrice: number;\n  orderbookAggLevels: number;\n  precisionForAmount: number;\n  precisionForTotal: number;\n  enabled: boolean;\n  feeBips: number;\n  cefiQuota: {\n    base: string | \"\";\n    quote: string | \"\";\n  };\n  l2Quota: {\n    base: string | \"\";\n    quote: string | \"\";\n  };\n};\n\nexport interface OriginCEXV3OrderRequest {\n  /**\n   * exchange address\n   * @type {string}\n   * @memberof OriginCEXV3OrderRequest\n   */\n  exchange: string;\n  /**\n   * storageId\n   * @type {number}\n   * @memberof OriginCEXV3OrderRequest\n   */\n  storageId: number;\n  /**\n   * accountId\n   * @type {number}\n   * @memberof OriginCEXV3OrderRequest\n   */\n  accountId: number;\n  /**\n   * sellToken\n   * @type TokenVolumeV3\n   * @memberof OriginCEXV3OrderRequest\n   */\n  sellToken: TokenVolumeV3;\n  /**\n   * buyToken\n   * @type TokenVolumeV3\n   * @memberof OriginCEXV3OrderRequest\n   */\n  buyToken: TokenVolumeV3;\n  /**\n   * allOrNone\n   * @description Whether the order supports partial fills or not.Currently only supports false as a valid value\n   * @type boolean\n   * @memberof OriginCEXV3OrderRequest\n   */\n  allOrNone: Boolean;\n  /**\n   * fillAmountBOrS\n   * @type boolean\n   * @memberof OriginCEXV3OrderRequest\n   */\n  fillAmountBOrS: boolean;\n  /**\n   * Timestamp for order become invalid\n   * @type {number}\n   * @memberof OriginCEXV3OrderRequest\n   */\n  validUntil: number;\n  /**\n   * fee\n   * @type {string}\n   * @memberof OriginCEXV3OrderRequest\n   */\n  maxFeeBips: number;\n  /**\n   * The orders EdDSA signature. The signature is a hexadecimal string obtained by signing the order itself and concatenating the resulting signature parts (Rx, Ry, and S). Used to authenticate and authorize the operation.\n   * @type {string}\n   * @memberof OriginCEXV3OrderRequest\n   */\n  eddsaSignature?: string;\n  clientOrderId: string;\n  orderType: OrderTypeResp;\n}\n\nexport type CexResult = {\n  exceedDepth: boolean;\n  isAtoB: boolean;\n  isReverse: boolean;\n  feeBips: string;\n  /**\n   *  with decimals\n   */\n  amountS: string | undefined;\n  /**\n   *  with decimals\n   */\n  amountB: string | undefined;\n  info: CEX_MARKET;\n  // view\n  sellVol: string | undefined;\n  // view\n  buyVol: string | undefined;\n};\n","import { AxiosResponse } from \"axios\";\n\nexport enum LoopringErrorCode {\n  Unknown_Error = 100000,\n  Invalid_Args = 100001,\n\n  Address_Not_Found = 101001,\n  User_Not_Found = 101002,\n\n  ExchangeId_Incorrect = 102001,\n  Unsupported_TokenId = 102002,\n  Invalid_AccountId = 102003, //dup\n  Invalid_OrderId = 102004,\n  Market_Not_Supported = 102005, //dup\n  Illegal_Rate = 102006,\n  Order_Already_Existed = 102007,\n  Order_Already_Expired = 102008,\n  Order_Missing_Sig = 102010,\n  Invalid_User_Balance = 102011,\n  Order_Amount_Too_Small = 102012,\n  Failed_To_Freeze_Amt = 102014,\n  Exceed_Max_Order_Amt = 102020,\n  Invalid_Nonce = 102021,\n  Invalid_Transfer_Sender = 102022,\n  Invalid_Transfer_Receiver = 102023,\n  Unsuported_Fee_Token = 102024,\n  Transfer_Token_Is_Not_Consistent_With_Fee_Token = 102025,\n\n  Sumbit_Order_Failed = 102027,\n  No_Order_To_Cancel = 102117,\n  Fail_To_Cancel_Order = 102118,\n  Order_Is_Not_Valid = 102120,\n\n  Empty_Apikey = 104001,\n  Invalid_Apikey = 104002,\n  Invalid_AccountID = 104003, //dup\n  No_Sig_Provided = 104004,\n  Wrong_Sig = 104005,\n\n  User_Cannot_Be_Empty = 107001,\n  Orderhash_Cannot_Be_Empty = 107002,\n  Order_Not_Exist = 107003,\n\n  Unsupported_Market = 108000, //dup\n  Unsupported_Depth_Level = 108001,\n  SKD_UNKNOW = 500000,\n  CONTRACTNFT_URI = 500001,\n  CONTRACTNFT_BALANCE = 500002,\n  CONTRACTNFT_IS_APPROVE = 500003,\n  CONTRACTNFT_SET_APPROVE = 500004,\n  NOT_SUPPORT_ERROR = 500005,\n  USER_DENIED = 500006,\n  USER_DENIED_2 = 500007,\n  NO_EDDSA_KEY = 500008,\n  HTTP_ERROR = 500009,\n  CEX_NO_DEPTH_ERROR = 500010,\n  CEX_NO_PRODUCT = 500011,\n}\n\nexport enum ConnectorError {\n  NOT_SUPPORT_ERROR = \"Not supported on this device\",\n  USER_DENIED = \"User denied message signature\",\n  USER_DENIED_2 = \"personalSign err before Validate\",\n  CONTRACTNFT_URI = \"contract nft uri Error\",\n  CONTRACTNFT_BALANCE = \"contract nft balance error\",\n  CONTRACTNFT_IS_APPROVE = \"ContractNFT is Approve error\",\n  CONTRACTNFT_SET_APPROVE = \"ContractNFT set Approve error\",\n  NO_EDDSA_KEY = \"No EDDSA KEY\",\n  HTTP_ERROR = \"HTTP Request Failed!\",\n  CEX_NO_DEPTH_ERROR = \"NO Depth for CEX\",\n  CEX_NO_PRODUCT = \"NO Market for CEX\",\n}\n\nexport interface RESULT_INFO {\n  code?: number;\n  msg?: string;\n  message?: string;\n}\nexport type ERROR_INFO = {\n  resultInfo: RESULT_INFO;\n};\n\nexport const checkErrorInfo = (\n  errorInfo: RESULT_INFO,\n  isFirstTime?: boolean\n) => {\n  const message = errorInfo.message;\n  if (isFirstTime && message === \"NOT_SUPPORT_ERROR\") {\n    return ConnectorError.NOT_SUPPORT_ERROR;\n  } else if (message === \"USER_DENIED\" || message === \"USER_DENIED_2\") {\n    return ConnectorError.USER_DENIED;\n  } else if (\n    message &&\n    (message.startsWith(\"personalSign last\") ||\n      message.indexOf(\"User denied transaction\") > 0)\n  ) {\n    return ConnectorError.USER_DENIED;\n  }\n  return message;\n};\n","export * from \"./account_defs\";\nexport * from \"./web3_defs\";\nexport * from \"./ws_defs\";\nexport * from \"./url_defs\";\nexport * from \"./loopring_constants\";\nexport * from \"./loopring_enums\";\nexport * from \"./loopring_defs\";\nexport * from \"./error_codes\";\n\nexport const IsMobile = {\n  Android: function () {\n    return navigator.userAgent.match(/Android/i);\n  },\n  BlackBerry: function () {\n    return navigator.userAgent.match(/BlackBerry/i);\n  },\n  iOS: function () {\n    return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n  },\n  Opera: function () {\n    return navigator.userAgent.match(/Opera Mini/i);\n  },\n  Windows: function () {\n    return (\n      navigator.userAgent.match(/IEMobile/i) ||\n      navigator.userAgent.match(/WPDesktop/i)\n    );\n  },\n  Ethereum: function () {\n    return window?.ethereum && window?.ethereum.isImToken;\n  },\n\n  any: function () {\n    if (typeof global.navigator === 'undefined' || typeof navigator === 'undefined') {\n      console.log(\"IsMobile any navigator is undefined\")\n      return false;\n    }\n    return (\n      IsMobile.Android() ||\n      IsMobile.BlackBerry() ||\n      IsMobile.iOS() ||\n      IsMobile.Opera() ||\n      IsMobile.Windows() ||\n      IsMobile.Ethereum()\n    );\n  },\n};\n\ntype Ethereum = any;\ndeclare global {\n  interface Window {\n    ethereum?: Ethereum;\n    // socketEventMap: {[key:string]:any\n    // imageConfig:{[key:string]:any}|undefined\n  }\n}\n","import * as ethUtil from \"ethereumjs-util\";\nimport BN from \"bn.js\";\nimport BigNumber from \"bignumber.js\";\nimport {\n  AmmPoolInfoV3,\n  LOOPRING_URLs,\n  LoopringMap,\n  MarketInfo,\n  MarketStatus,\n  SEP,\n  SoursURL,\n  TokenAddress,\n  TokenInfo,\n  TOKENMAPLIST,\n  TokenRelatedInfo,\n} from \"../defs\";\n\nBigNumber.config({\n  EXPONENTIAL_AT: 100,\n  RANGE: [-100000, 10000000],\n  ROUNDING_MODE: 1,\n});\n\n/**\n * Returns hex string with '0x' prefix\n * @param input\n * @returns {string}\n */\nexport function addHexPrefix(input: any) {\n  if (typeof input === \"string\") {\n    return input.startsWith(\"0x\") ? input : \"0x\" + input;\n  }\n  throw new Error(\"Unsupported type\");\n}\n\n/**\n *\n * @param mixed Buffer|number|string (hex string must be with '0x' prefix)\n * @returns {Buffer}\n */\nexport function toBuffer(mixed: any) {\n  if (mixed instanceof Buffer) {\n    return mixed;\n  } else {\n    return ethUtil.toBuffer(mixed);\n  }\n}\n\n/**\n *\n * @param num number|string (hex string must be with '0x' prefix)\n * @param places number of zeros to pad\n * @returns {Buffer}\n */\nexport function zeroPad(num: any, places: any) {\n  return toBuffer(String(num).padStart(places, \"0\"));\n}\n\n/**\n *\n * @param mixed number | BigNumber |  BN  | Buffer | string | Uint8Array\n * @returns {string}\n */\nexport function toHex(\n  mixed: number | BigNumber | BN | Buffer | string | Uint8Array\n) {\n  if (\n    typeof mixed === \"number\" ||\n    mixed instanceof BigNumber ||\n    mixed instanceof BN\n  ) {\n    return addHexPrefix(mixed.toString(16));\n  }\n\n  if (mixed instanceof Buffer || mixed instanceof Uint8Array) {\n    return addHexPrefix(mixed.toString(\"hex\"));\n  }\n\n  if (typeof mixed === \"string\") {\n    const regex = new RegExp(/^0x[0-9a-fA-F]*$/);\n    return regex.test(mixed)\n      ? mixed\n      : addHexPrefix(toBuffer(mixed).toString(\"hex\"));\n  }\n  throw new Error(\"Unsupported type\");\n}\n\n/**\n *\n * @param mixed number | BigNumber |  BN  | Buffer | string | Uint8Array\n * @returns {number}\n */\nexport function toNumber(\n  mixed: number | BigNumber | BN | Buffer | string | Uint8Array\n) {\n  if (typeof mixed === \"number\") {\n    return mixed;\n  }\n\n  if (mixed instanceof BigNumber || mixed instanceof BN) {\n    return mixed.toNumber();\n  }\n\n  if (typeof mixed === \"string\") {\n    return Number(mixed);\n  }\n\n  if (mixed instanceof Buffer || mixed instanceof Uint8Array) {\n    return Number(mixed.toString(\"hex\"));\n  }\n\n  throw new Error(\"Unsupported type\");\n}\n\n/**\n *\n * @param mixed number | BigNumber |  BN  | Buffer | string | Uint8Array\n * @returns {BigNumber}\n */\nexport function toBig(\n  mixed: number | BigNumber | BN | Buffer | string | Uint8Array\n) {\n  if (mixed instanceof BigNumber) {\n    return mixed;\n  }\n\n  if (typeof mixed === \"number\") {\n    return new BigNumber(mixed.toString());\n  }\n\n  if (typeof mixed === \"string\") {\n    return new BigNumber(mixed);\n  }\n  if (mixed instanceof Buffer || mixed instanceof Uint8Array) {\n    return new BigNumber(mixed.toString(\"hex\"));\n  }\n\n  throw new Error(\"Unsupported type\");\n}\n\n/**\n *\n * @param mixed number | BigNumber |  BN  | Buffer | string\n * @returns {BN}\n */\nexport function toBN(mixed: any) {\n  return mixed instanceof BN ? mixed : new BN(toBig(mixed).toString(10), 10);\n}\n\n/**\n *\n * @param value number | BigNumber | Buffer | string\n * @returns {BN}\n */\nexport function fromGWEI(value: any) {\n  return new BigNumber(toBig(value).times(1e9).toFixed(0));\n}\n\n/**\n *\n * @param value number | BigNumber | Buffer | string\n * @returns {BN}\n */\nexport function toGWEI(value: any) {\n  return toBig(value).div(1e9);\n}\n\n/**\n * Returns formatted hex string of a given private key\n * @param mixed Buffer | string | Uint8Array\n * @returns {string}\n */\nexport function formatKey(mixed: Buffer | string | Uint8Array) {\n  if (mixed instanceof Buffer || mixed instanceof Uint8Array) {\n    return mixed.toString(\"hex\");\n  }\n\n  if (typeof mixed === \"string\") {\n    return mixed.startsWith(\"0x\") ? mixed.slice(2) : mixed;\n  }\n  throw new Error(\"Unsupported type\");\n}\n\n/**\n * Returns hex string of a given address\n * @param mixed Buffer | string |Uint8Array\n * @returns {string}\n */\nexport function formatAddress(mixed: Buffer | string | Uint8Array) {\n  if (mixed instanceof Buffer || mixed instanceof Uint8Array) {\n    return ethUtil.toChecksumAddress(\"0x\" + mixed.toString(\"hex\"));\n  }\n\n  if (typeof mixed === \"string\") {\n    return ethUtil.toChecksumAddress(\n      mixed.startsWith(\"0x\") ? mixed : \"0x\" + mixed\n    );\n  }\n  throw new Error(\"Unsupported type\");\n}\n\n/**\n * Returns hex string without '0x' prefix\n * @param input string\n * @returns {string}\n */\nexport function clearHexPrefix(input: any) {\n  if (typeof input === \"string\") {\n    return input.startsWith(\"0x\") ? input.slice(2) : input;\n  }\n  throw new Error(\"Unsupported type\");\n}\n\n/**\n *\n * @param hex\n * @returns {string}\n */\nexport function padLeftEven(hex: any) {\n  return hex.length % 2 !== 0 ? `0${hex}` : hex;\n}\n\n/**\n * Returns symbol of a given kind of currency\n * @param settingsCurrency\n * @returns {*}\n */\nexport function getDisplaySymbol(settingsCurrency: any) {\n  switch (settingsCurrency) {\n    case \"CNY\":\n      return \"￥\";\n    case \"USD\":\n      return \"$\";\n    default:\n      return \"\";\n  }\n}\n\n/**\n * Returns number in string with a given precision\n * @param number number | BigNumber\n * @param precision number\n * @param ceil bool  round up\n * @returns {string}\n */\nexport function toFixed(number: any, precision: any, ceil: any) {\n  precision = precision || 0;\n  if (number instanceof BigNumber) {\n    const rm = ceil ? 0 : 1;\n    return number.toFixed(precision, rm);\n  }\n\n  if (typeof number === \"number\") {\n    return ceil\n      ? (\n          Math.ceil(number * Number(\"1e\" + precision)) /\n          Number(\"1e\" + precision)\n        ).toFixed(precision)\n      : (\n          Math.floor(number * Number(\"1e\" + precision)) /\n          Number(\"1e\" + precision)\n        ).toFixed(precision);\n  }\n\n  throw new Error(\"Unsupported type\");\n}\n\nexport function formatEddsaKey(key: any) {\n  const hexKey = clearHexPrefix(key);\n  return addHexPrefix(String(hexKey).padStart(64, \"0\"));\n}\n\n/**\n * Returns a number with commas as thousands separators\n * @param number number\n * @returns {*}\n */\nexport function numberWithCommas(number: any) {\n  if (number) {\n    number = number.toString().replace(/,/g, \"\");\n    if (isNaN(Number(number))) {\n      return \"-\";\n    }\n    try {\n      const parts = number.toString().split(\".\");\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      return parts.join(\".\");\n    } catch (err) {\n      return \"-\";\n    }\n  } else {\n    return number;\n  }\n}\n\nexport function sortObjDictionary(obj: {\n  [key: string]: any;\n}): Map<string, any> {\n  const dataToSig: Map<string, any> = new Map();\n  if (obj) {\n    Reflect.ownKeys(obj)\n      .sort((a, b) => a.toString().localeCompare(b.toString()))\n      .forEach((key) => {\n        dataToSig.set(key.toString(), obj[key.toString()]);\n      });\n  }\n  return dataToSig;\n}\nexport function makeMarket<R>(raw_data: TokenInfo[]): TOKENMAPLIST {\n  const coinMap: LoopringMap<{\n    icon?: string;\n    name: string;\n    simpleName: string;\n    description?: string;\n    company: string;\n  }> = {};\n  const totalCoinMap: LoopringMap<{\n    icon?: string;\n    name: string;\n    simpleName: string;\n    description?: string;\n    company: string;\n  }> = {};\n  const addressIndex: LoopringMap<TokenAddress> = {};\n  const idIndex: LoopringMap<string> = {};\n  const tokensMap: LoopringMap<TokenInfo> = {};\n  if (raw_data instanceof Array) {\n    raw_data.forEach((item: TokenInfo) => {\n      if (item.symbol.startsWith(\"LP-\")) {\n        item.isLpToken = true;\n      } else {\n        item.isLpToken = false;\n      }\n      tokensMap[item.symbol] = item;\n\n      const coinInfo = {\n        icon: SoursURL + `ethereum/assets/${item.address}/logo.png`,\n        name: item.name,\n        simpleName: item.symbol,\n        description: item.type,\n        company: item.name,\n      };\n      if (!item.symbol.startsWith(\"LP-\")) {\n        coinMap[item.symbol] = coinInfo;\n      }\n      totalCoinMap[item.symbol] = coinInfo;\n      addressIndex[item.address.toLowerCase()] = item.symbol;\n      idIndex[item.tokenId] = item.symbol;\n    });\n  }\n  return {\n    tokensMap,\n    coinMap,\n    totalCoinMap,\n    idIndex,\n    addressIndex,\n  };\n}\nexport function makeAmmPool<R>(raw_data: any): {\n  ammpools: LoopringMap<AmmPoolInfoV3>;\n  pairs: LoopringMap<TokenRelatedInfo>;\n} {\n  const ammpools: LoopringMap<AmmPoolInfoV3> = {};\n  const pairs: LoopringMap<TokenRelatedInfo> = {};\n  if (raw_data?.pools instanceof Array) {\n    raw_data.pools.forEach((item: any) => {\n      const market: string = item.market;\n      ammpools[market] = item;\n      let base = \"\",\n        quote = \"\";\n      const ind = market.indexOf(\"-\");\n      const ind2 = market.lastIndexOf(\"-\");\n      base = market.substring(ind + 1, ind2);\n      quote = market.substring(ind2 + 1, market.length);\n\n      if (!pairs[base]) {\n        pairs[base] = {\n          tokenId: item.tokens.pooled[0],\n          tokenList: [quote],\n        };\n      } else {\n        pairs[base].tokenList = [...pairs[base].tokenList, quote];\n      }\n\n      if (!pairs[quote]) {\n        pairs[quote] = {\n          tokenId: item.tokens.pooled[1],\n          tokenList: [base],\n        };\n      } else {\n        pairs[quote].tokenList = [...pairs[quote].tokenList, base];\n      }\n    });\n  }\n  return {\n    ammpools,\n    pairs,\n  };\n}\n\nexport function makeMarkets<R>(\n  raw_data: any,\n  url: string = LOOPRING_URLs.GET_MARKETS\n): {\n  markets: LoopringMap<MarketInfo>;\n  pairs: LoopringMap<TokenRelatedInfo>;\n  tokenArr: string[];\n  tokenArrStr: string;\n  marketArr: string[];\n  marketArrStr: string;\n} {\n  const markets: LoopringMap<MarketInfo> = {};\n\n  const pairs: LoopringMap<TokenRelatedInfo> = {};\n\n  const isMix = url === LOOPRING_URLs.GET_MIX_MARKETS;\n\n  if (raw_data?.markets instanceof Array) {\n    raw_data.markets.forEach((item: any) => {\n      const marketInfo: MarketInfo = {\n        baseTokenId: item.baseTokenId,\n        enabled: item.enabled,\n        market: item.market,\n        orderbookAggLevels: item.orderbookAggLevels,\n        precisionForPrice: item.precisionForPrice,\n        quoteTokenId: item.quoteTokenId,\n      };\n\n      if (isMix) {\n        marketInfo.status = item.status as MarketStatus;\n        marketInfo.isSwapEnabled =\n          marketInfo.status === MarketStatus.ALL ||\n          marketInfo.status === MarketStatus.AMM;\n        marketInfo.createdAt = parseInt(item.createdAt);\n      }\n\n      markets[item.market] = marketInfo;\n\n      if (item.enabled) {\n        const market: string = item.market;\n        const ind = market.indexOf(\"-\");\n        const base = market.substring(0, ind);\n        const quote = market.substring(ind + 1, market.length);\n\n        if (!pairs[base]) {\n          pairs[base] = {\n            tokenId: item.baseTokenId,\n            tokenList: [quote],\n          };\n        } else {\n          pairs[base].tokenList = [...pairs[base].tokenList, quote];\n        }\n\n        if (!pairs[quote]) {\n          pairs[quote] = {\n            tokenId: item.quoteTokenId,\n            tokenList: [base],\n          };\n        } else {\n          pairs[quote].tokenList = [...pairs[quote].tokenList, base];\n        }\n      }\n    });\n  }\n\n  const marketArr: string[] = Reflect.ownKeys(markets) as string[];\n\n  const tokenArr: string[] = Reflect.ownKeys(pairs) as string[];\n\n  return {\n    markets,\n    pairs,\n    tokenArr,\n    tokenArrStr: tokenArr.join(SEP),\n    marketArr,\n    marketArrStr: marketArr.join(SEP),\n  };\n}\n","/* eslint-disable no-console, @typescript-eslint/ban-ts-comment */\nlet _myLog;\n\nif (\n  process.env.NODE_ENV !== \"production\" ||\n  // @ts-ignore\n  (typeof window !== \"undefined\" && window?.___OhTrustDebugger___)\n) {\n  _myLog = console.log;\n} else {\n  _myLog = function (message?: any, ...optionalParams: any[]) {\n    return \"\";\n  };\n}\nlet _myError;\nif (\n  process.env.NODE_ENV !== \"production\" ||\n  // @ts-ignore\n  (typeof window !== \"undefined\" && window?.___OhTrustDebugger___)\n) {\n  _myError = console.error;\n} else {\n  _myError = function (message?: any, ...optionalParams: any[]) {\n    return \"\";\n  };\n}\nexport const myLog = _myLog;\nexport const myError = _myError;\n","import * as fm from \"./formatter\";\nimport { toBig } from \"./formatter\";\n\nimport {\n  ABInfo,\n  AmmPoolSnapshot,\n  CalDualResult,\n  CEX_MARKET,\n  CexResult,\n  ConnectorError,\n  DefiMarketInfo,\n  DepthData,\n  DUAL_TYPE,\n  DualBalance,\n  DualIndex,\n  DualProductAndPrice,\n  DualRulesCoinsInfo,\n  ExitAmmPoolRequest,\n  JoinAmmPoolRequest,\n  LoopringErrorCode,\n  LoopringMap,\n  MarketInfo,\n  OffchainFeeInfo,\n  TokenInfo,\n  TokenVolumeV3,\n  XOR,\n} from \"../defs\";\n\nimport { getExistedMarket, getTokenInfoBySymbol } from \"./symbol_tools\";\nimport BigNumber from \"bignumber.js\";\nimport { myLog } from \"./log_tools\";\n\nconst BIG0 = fm.toBig(0);\n\nconst BIG1 = fm.toBig(1);\n\nconst BIG10 = fm.toBig(10);\n\nconst BIG10K = fm.toBig(10000);\n\nexport const getToken = (tokens: any, token: any) => {\n  if (!tokens) {\n    throw Error(\"no tokens list!\");\n  }\n  return tokens[token];\n};\n\nexport const getTokenInfoByToken = (\n  ammBalance: any,\n  tokens: any,\n  token: any\n) => {\n  const tokenInfo = getToken(tokens, token);\n\n  const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume;\n  const reserve = fm.toBig(tokenVol);\n\n  return {\n    tokenInfo,\n    tokenVol,\n    reserve,\n  };\n};\n\nexport function fromWEI(\n  tokens: any,\n  symbol: any,\n  valueInWEI: any,\n  precision?: any,\n  ceil?: any\n) {\n  try {\n    const tokenInfo = getToken(tokens, symbol);\n    const precisionToFixed = precision ? precision : tokenInfo.precision;\n    const value = fm.toBig(valueInWEI).div(\"1e\" + tokenInfo.decimals);\n    return fm.toFixed(value, precisionToFixed, ceil);\n  } catch (err) {\n    return undefined;\n  }\n  return \"0\";\n}\n\nexport function toWEI(\n  tokens: any,\n  symbol: any,\n  value: any,\n  rm: any = undefined\n) {\n  const tokenInfo = getToken(tokens, symbol);\n  if (typeof tokenInfo === \"undefined\") {\n    return \"0\";\n  }\n\n  const bigN = fm.toBig(value).times(\"1e\" + tokenInfo.decimals);\n\n  return rm === undefined ? bigN.toString() : bigN.toFixed(0, rm);\n}\n\nexport function isEmpty(input: any) {\n  if (!input || input.trim() === \"\") {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getAmountOutWithFeeBips(\n  amountIn: string,\n  feeBips: string,\n  reserveIn: string,\n  reserveOut: string\n) {\n  const amountInBig = fm.toBig(amountIn);\n  const reserveInBig = fm.toBig(reserveIn);\n  const reserveOutBig = fm.toBig(reserveOut);\n\n  if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n    return BIG0;\n  }\n\n  const feeBipsBig = fm.toBig(feeBips);\n\n  const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig));\n  const numerator = amountInWithFee.times(reserveOutBig);\n  const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee);\n\n  return numerator.div(denominator);\n}\n\nfunction getAmountInWithFeeBips(\n  amountOut: string,\n  feeBips: string,\n  reserveIn: string,\n  reserveOut: string\n) {\n  const amountOutBig = fm.toBig(amountOut);\n  const reserveInBig = fm.toBig(reserveIn);\n  const reserveOutBig = fm.toBig(reserveOut);\n\n  if (\n    amountOutBig.lt(BIG0) ||\n    reserveInBig.lt(BIG0) ||\n    reserveOutBig.lt(BIG0)\n  ) {\n    return BIG0;\n  }\n\n  const feeBipsBig = fm.toBig(feeBips);\n\n  const numerator = reserveInBig.times(amountOutBig).times(BIG10K);\n  const denominator = reserveOutBig\n    .minus(amountOutBig)\n    .times(BIG10K.minus(feeBipsBig));\n\n  return numerator.div(denominator).plus(BIG1);\n}\n\nfunction getOutputOrderbook(\n  input: string,\n  baseToken: TokenInfo | undefined,\n  quoteToken: TokenInfo | undefined,\n  feeBips: string,\n  isAtoB: boolean,\n  isReverse: boolean,\n  depth: DepthData\n) {\n  let output = \"0\";\n  let remain: string = input;\n\n  const bids = depth.bids; // .reverse()\n\n  // console.log('bids:', bids[0])\n  // console.log('bids last:', bids[bids.length - 1])\n  // console.log('asks:', depth.asks[0])\n  // console.log('asks last:', depth.asks[depth.asks.length - 1])\n\n  // console.log(`isAtoB:${isAtoB} isReverse:${isReverse}`)\n\n  if (!baseToken || !quoteToken) {\n    return output;\n  }\n  // myLog(baseToken, ' ', quoteToken)\n\n  //amt is size(base ETH). vol is volume(quote USDT)\n\n  if (isAtoB) {\n    if (!isReverse) {\n      //ETH -> USDT\n\n      remain = fm\n        .toBig(remain)\n        .times(\"1e\" + baseToken.decimals)\n        .toString();\n\n      for (let i = bids.length - 1; i >= 0; i--) {\n        const abInfo: ABInfo = bids[i];\n\n        // console.log(`i:${i} abInfo:`, abInfo, `decimals:${baseToken.decimals} ${quoteToken.decimals}`)\n\n        const consume: string = fm.toBig(remain).gte(fm.toBig(abInfo.amt))\n          ? abInfo.amt\n          : remain;\n\n        if (fm.toBig(consume).lte(BIG0)) {\n          break;\n        }\n\n        const volValue = fm.toBig(abInfo.vol).div(\"1e\" + quoteToken.decimals);\n\n        if (fm.toBig(consume).eq(fm.toBig(abInfo.amt))) {\n          output = fm.toBig(output).plus(volValue).toString();\n        } else {\n          const ratio = fm.toBig(consume).div(fm.toBig(abInfo.amt));\n          // myLog('got ratio:', ratio.toString(), consume, abInfo.amt)\n          output = fm.toBig(output).plus(ratio.times(volValue)).toString();\n        }\n\n        // myLog('1__ ', i, ' output:', output, ' remain:', remain, ' abInfo.amt:', abInfo.amt, ' abInfo.vol:', abInfo.vol, ' volValue:', volValue.toString())\n\n        remain = fm.toBig(remain).minus(fm.toBig(consume)).toString();\n      }\n    } else {\n      // USDT -> ETH\n      // isAtoB = true, isReverse = false\n\n      remain = fm.toBig(remain).times(BIG10.pow(baseToken.decimals)).toString();\n\n      for (let i = 0; i < depth.asks.length; i++) {\n        const abInfo: ABInfo = depth.asks[i];\n        // const placed: string = fm.toBig(abInfo.vol).div(BIG10.pow(quoteToken.decimals)).toString()\n        const consume: string = fm.toBig(remain).gte(fm.toBig(abInfo.vol))\n          ? abInfo.vol\n          : remain;\n\n        if (fm.toBig(consume).lte(BIG0)) {\n          // console.log('return 22222')\n          break;\n        }\n\n        // console.log(`i:${i} abInfo:`, abInfo, `decimals:${baseToken.decimals} ${quoteToken.decimals}`)\n\n        // console.log('remain:', remain, ' abInfo.vol:', abInfo.vol, ' consume:', consume)\n\n        const amtValue = fm.toBig(abInfo.amt).div(\"1e\" + quoteToken.decimals);\n\n        if (fm.toBig(consume).eq(fm.toBig(abInfo.vol))) {\n          output = fm.toBig(output).plus(amtValue).toString();\n        } else {\n          const ratio = fm.toBig(consume).div(fm.toBig(abInfo.vol));\n          output = fm.toBig(output).plus(ratio.times(amtValue)).toString();\n        }\n\n        remain = fm.toBig(remain).minus(fm.toBig(consume)).toString();\n\n        // myLog('2__ ', i, ' output:', output, ' abInfo.vol:', abInfo.vol, ' remain:', remain)\n      }\n    }\n  } else {\n    if (!isReverse) {\n      // ETH <- USDT\n\n      remain = fm\n        .toBig(remain)\n        .times(BIG10.pow(quoteToken.decimals))\n        .toString();\n\n      for (let i = bids.length - 1; i >= 0; i--) {\n        const abInfo: ABInfo = bids[i];\n        // const placed: string = fm.toBig(abInfo.vol).div(BIG10.pow(quoteToken.decimals)).toString()\n\n        const consume: string = fm.toBig(remain).gte(fm.toBig(abInfo.vol))\n          ? abInfo.vol\n          : remain;\n\n        if (fm.toBig(consume).lte(BIG0)) {\n          break;\n        }\n\n        // myLog(`i:${i} abInfo:`, abInfo, `decimals:${baseToken.decimals} ${quoteToken.decimals}`)\n\n        // myLog('remain:', remain, 'abInfo.vol:', abInfo.vol, ' consume:', consume)\n\n        const amtValue = fm\n          .toBig(abInfo.amt)\n          .div(BIG10.pow(baseToken.decimals));\n\n        if (fm.toBig(consume).eq(abInfo.vol)) {\n          output = fm.toBig(output).plus(fm.toBig(amtValue)).toString();\n        } else {\n          const ratio = fm.toBig(consume).div(fm.toBig(abInfo.vol));\n          output = fm.toBig(output).plus(ratio.times(amtValue)).toString();\n        }\n\n        remain = fm.toBig(remain).minus(fm.toBig(consume)).toString();\n\n        // myLog('3__', i, ' output:', output, ' abInfo.vol:', abInfo.vol, ' remain:', remain)\n      }\n    } else {\n      // USDT <- ETH\n\n      remain = fm\n        .toBig(remain)\n        .times(BIG10.pow(quoteToken.decimals))\n        .toString();\n\n      for (let i = 0; i < depth.asks.length; i++) {\n        const abInfo: ABInfo = depth.asks[i];\n\n        // myLog(`i:${i} abInfo:`, abInfo, `decimals:${baseToken.decimals} ${quoteToken.decimals}`)\n\n        const consume: string = fm.toBig(remain).gte(fm.toBig(abInfo.amt))\n          ? abInfo.amt\n          : remain;\n\n        if (fm.toBig(consume).lte(BIG0)) {\n          break;\n        }\n\n        const volValue = fm\n          .toBig(abInfo.vol)\n          .div(BIG10.pow(baseToken.decimals));\n\n        if (fm.toBig(consume).eq(fm.toBig(abInfo.amt))) {\n          output = fm.toBig(output).plus(volValue).toString();\n        } else {\n          const ratio = fm.toBig(consume).div(fm.toBig(abInfo.amt));\n          output = fm.toBig(output).plus(ratio.times(volValue)).toString();\n        }\n\n        // myLog('4__', i, ' output:', output, ' abInfo.vol:', abInfo.vol, ' volValue:', volValue.toString())\n\n        remain = fm.toBig(remain).minus(fm.toBig(consume)).toString();\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function getReserveInfo(\n  sell: string,\n  buy: string,\n  marketArr: string[],\n  tokenMap: LoopringMap<TokenInfo>,\n  marketMap: LoopringMap<MarketInfo>,\n  ammPoolSnapshot: AmmPoolSnapshot | undefined = undefined\n) {\n  const { market, amm, baseShow, quoteShow } = getExistedMarket(\n    marketArr,\n    sell,\n    buy\n  );\n\n  if (\n    isEmpty(market) ||\n    isEmpty(amm) ||\n    Object.keys(marketMap).indexOf(market) < 0\n  ) {\n    return undefined;\n  }\n\n  const marketInfo: MarketInfo = marketMap[market];\n\n  const sellToken = getTokenInfoBySymbol(tokenMap, sell);\n  const buyToken = getTokenInfoBySymbol(tokenMap, buy);\n\n  let isReverse = false;\n\n  const coinA = ammPoolSnapshot?.pooled[0];\n\n  const coinB = ammPoolSnapshot?.pooled[1];\n\n  let reserveIn = \"0\";\n  let reserveOut = \"0\";\n\n  if (\n    sellToken?.tokenId !== undefined &&\n    buyToken?.tokenId !== undefined &&\n    coinA?.tokenId !== undefined &&\n    coinB?.tokenId !== undefined\n  ) {\n    if (sellToken?.tokenId === coinA?.tokenId) {\n      reserveIn = coinA.volume;\n      reserveOut = coinB.volume;\n    } else {\n      reserveIn = coinB.volume;\n      reserveOut = coinA.volume;\n      isReverse = true;\n    }\n  } else {\n    if (market === `${buy}-${sell}`) {\n      isReverse = true;\n    }\n  }\n\n  return {\n    reserveIn,\n    reserveOut,\n    sellToken,\n    buyToken,\n    coinA,\n    coinB,\n    isReverse,\n    marketInfo,\n  };\n}\n\nfunction getPriceImpactStr(curPrice: string, toPrice: string) {\n  if (!curPrice || !toPrice) {\n    return \"0\";\n  }\n\n  const toPriceBig = fm.toBig(toPrice);\n\n  if (toPriceBig.eq(BIG0)) {\n    return \"0\";\n  }\n\n  const percent = fm.toBig(toPriceBig).div(curPrice);\n\n  return BIG1.minus(percent).abs().toString();\n}\n\nexport function getCurPrice(reserveIn: string, reserveOut: string) {\n  if (!reserveIn || !reserveOut) {\n    return \"0\";\n  }\n\n  reserveIn = reserveIn.trim();\n  reserveOut = reserveOut.trim();\n\n  const reserveInBig = fm.toBig(reserveIn);\n  const reserveOutBig = fm.toBig(reserveOut);\n\n  if (reserveInBig.eq(BIG0)) {\n    return \"0\";\n  }\n\n  return reserveOutBig.div(reserveInBig).toString();\n}\n\nexport function getToPrice(amountS: string, amountB: string) {\n  if (!amountS || !amountB) {\n    return \"0\";\n  }\n\n  amountS = amountS.trim();\n  amountB = amountB.trim();\n\n  const amountSBig = fm.toBig(amountS);\n  const amountBBig = fm.toBig(amountB);\n\n  if (amountSBig.eq(BIG0)) {\n    return \"0\";\n  }\n\n  return amountBBig.div(amountSBig).toString();\n}\n\nexport function getPriceImpact(\n  reserveIn: string,\n  reserveOut: string,\n  amountS: string,\n  feeBips: string,\n  takerFee: string\n) {\n  let amountB: BigNumber = getAmountOutWithFeeBips(\n    amountS,\n    feeBips,\n    reserveIn,\n    reserveOut\n  );\n  amountB = amountB.times(BIG10K.minus(fm.toBig(takerFee))).div(BIG10K);\n  const curPrice = getCurPrice(reserveIn, reserveOut);\n  const toPrice = getToPrice(amountS, amountB.toString());\n\n  return getPriceImpactStr(curPrice, toPrice);\n}\n\nexport function updatePriceImpact_new(\n  reverseIn: string,\n  reverseOut: string,\n  amountS: string,\n  sellDecimal: number,\n  amountBOut: string,\n  buyDecimal: number,\n  feeBips: string,\n  takerFee: string,\n  isAtoB: boolean,\n  isReversed: boolean,\n  exceedDepth: boolean,\n  depth: DepthData\n) {\n  let priceImpact = \"0\";\n\n  if (isEmpty(reverseIn) || isEmpty(reverseOut) || isEmpty(feeBips)) {\n    return \"0\";\n  }\n\n  if (exceedDepth) {\n    priceImpact = getPriceImpact(reverseIn, reverseOut, amountS, feeBips, \"0\");\n  } else {\n    if (!depth.mid_price) {\n      return \"0\";\n    }\n\n    // LRC / ETH !isReversed isAtoB\n    const coinADecimal = !isReversed ? sellDecimal : buyDecimal;\n    const coinBDecimal = !isReversed ? buyDecimal : sellDecimal;\n    const curPrice = fm\n      .toBig(depth.mid_price)\n      .times(\"1e\" + coinBDecimal)\n      .div(\"1e\" + coinADecimal)\n      .toString();\n    const toPrice = !isReversed\n      ? getToPrice(amountS, amountBOut)\n      : getToPrice(amountBOut, amountS);\n    // console.log('updatePriceImpact_new isReversed:', isReversed, ' amountS:', amountS, ' amountBOut:', amountBOut)\n    // console.log('updatePriceImpact_new toPrice:', toPrice, ' curPrice:', curPrice)\n\n    priceImpact = getPriceImpactStr(curPrice, toPrice);\n  }\n\n  return priceImpact;\n}\n\nexport function getMinReceived(\n  amountBOut: string,\n  minimumDecimal: number,\n  slipBips: string\n) {\n  const minReceived = fm\n    .toBig(amountBOut)\n    .times(BIG10K.minus(fm.toBig(slipBips)))\n    .div(BIG10K);\n  return {\n    minReceived: minReceived.toFixed(0, 0),\n    minReceivedVal: minReceived.div(\"1e\" + minimumDecimal).toString(),\n    minimumDecimal,\n  };\n}\n\nexport function getOutputAmount({\n  input,\n  sell,\n  buy,\n  isAtoB,\n  marketArr,\n  tokenMap,\n  marketMap,\n  depth,\n  ammPoolSnapshot,\n  feeBips,\n  takerRate,\n  slipBips,\n}: {\n  input: string;\n  sell: string;\n  buy: string;\n  isAtoB: boolean;\n  marketArr: string[];\n  tokenMap: LoopringMap<TokenInfo>;\n  marketMap: LoopringMap<MarketInfo>;\n  depth: DepthData;\n  ammPoolSnapshot: AmmPoolSnapshot | undefined;\n  feeBips: string;\n  takerRate: string;\n  slipBips: string;\n}):\n  | {\n      exceedDepth: boolean;\n      isReverse: boolean;\n      isAtoB: boolean;\n      slipBips: string;\n      takerRate: string;\n      feeBips: string;\n      output: any;\n      sellAmt: string;\n      buyAmt: string;\n      amountS: string;\n      amountBOut: string;\n      amountBOutWithoutFee: string;\n      amountBOutSlip: {\n        minReceived: string;\n        minReceivedVal: string;\n        minimumDecimal: number;\n      };\n      priceImpact: string;\n    }\n  | undefined {\n  // console.log('enter getOutputAmount:', input, base, quote, isAtoB, marketArr, tokenMap, marketMap, depth, ammPoolSnapshot, feeBips, takerRate, slipBips)\n\n  // console.log(`getOutputAmount market: ${base} / ${quote}`)\n\n  // console.log('ammPoolSnapshot:', ammPoolSnapshot)\n\n  const reserveInfo = getReserveInfo(\n    sell,\n    buy,\n    marketArr,\n    tokenMap,\n    marketMap,\n    ammPoolSnapshot\n  );\n\n  if (!reserveInfo) {\n    return undefined;\n  }\n\n  const { reserveIn, reserveOut, sellToken, buyToken, isReverse, marketInfo } =\n    reserveInfo;\n\n  if (!sellToken || !buyToken) {\n    return undefined;\n  }\n\n  input = input.trim();\n\n  let exceedDepth = false;\n\n  let output: any = \"0\";\n\n  let amountS = \"0\";\n\n  let amountBOutWithoutFee = \"0\";\n\n  let amountBOut = \"0\";\n\n  let sellAmt = \"0\";\n  let buyAmt = \"0\";\n\n  let minimumDecimal = 0;\n\n  if (isAtoB) {\n    // bids_amtTotal -> bidsSizeShown\n    // asks_volTotal -> asksQuoteSizeShown\n    const amountInWei = toWEI(tokenMap, sell, input, 0);\n\n    // console.log('isAtoB amountInWei:', amountInWei)\n\n    if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n      exceedDepth = true;\n    } else {\n      if (!isReverse) {\n        exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_amtTotal));\n        // console.log('3 amountInWei:', amountInWei, ' bids_amtTotal:', depth.bids_amtTotal)\n      } else {\n        exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_volTotal));\n        // console.log('4 amountInWei:', amountInWei, ' asks_volTotal:', depth.asks_volTotal)\n      }\n    }\n\n    // console.log(`a2b(input:${input})  exceedDepth:`, exceedDepth, ' isSwapEnabled:', marketInfo.isSwapEnabled)\n\n    if (exceedDepth) {\n      if (marketInfo.isSwapEnabled) {\n        const amountB = getAmountOutWithFeeBips(\n          amountInWei,\n          feeBips,\n          reserveIn,\n          reserveOut\n        );\n        output = fromWEI(tokenMap, buy, amountB.toFixed(0, 0));\n      }\n    } else {\n      output = getOutputOrderbook(\n        input,\n        sellToken,\n        buyToken,\n        feeBips,\n        isAtoB,\n        isReverse,\n        depth\n      );\n    }\n\n    amountBOutWithoutFee = toWEI(tokenMap, buy, output, 0);\n\n    const leftRatio = BIG10K.minus(fm.toBig(takerRate)).div(BIG10K);\n\n    // console.log('amountBOutWithoutFee:', amountBOutWithoutFee, ' leftRatio:', leftRatio.toString())\n\n    amountBOut = toWEI(\n      tokenMap,\n      buy,\n      fm.toBig(output).times(leftRatio).toString(),\n      0\n    );\n\n    amountS = toWEI(tokenMap, sell, input, 0);\n\n    sellAmt = input;\n    buyAmt = output;\n  } else {\n    // asks_amtTotal -> asksSizeShown\n    // bids_volTotal -> bidsQuoteSizeShown\n\n    if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n      exceedDepth = true;\n    } else {\n      const amountInWei = toWEI(tokenMap, buy, input, 0);\n\n      if (!isReverse) {\n        exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal));\n      } else {\n        exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal));\n      }\n    }\n\n    let amountSBint = BIG0;\n\n    const amountB: string = toWEI(tokenMap, buy, input, 0);\n\n    // console.log(`b2a(input:${input}) exceedDepth:${exceedDepth} amountB:${amountB}`)\n\n    if (exceedDepth) {\n      if (marketInfo.isSwapEnabled) {\n        amountSBint = getAmountInWithFeeBips(\n          amountB,\n          feeBips,\n          reserveIn,\n          reserveOut\n        );\n      }\n    } else {\n      const outputOrderbook = getOutputOrderbook(\n        input,\n        sellToken,\n        buyToken,\n        feeBips,\n        isAtoB,\n        isReverse,\n        depth\n      );\n      amountSBint = fm.toBig(toWEI(tokenMap, sell, outputOrderbook));\n    }\n\n    if (amountSBint.gt(BIG0)) {\n      output = fromWEI(tokenMap, sell, amountSBint.toString());\n\n      amountBOutWithoutFee = fm.toBig(amountB).toFixed(0, 0);\n      // amountBOutWithoutFee = amountB\n      const leftRatio = BIG10K.minus(fm.toBig(takerRate)).div(BIG10K);\n      amountBOut = fm.toBig(amountB).times(leftRatio).toFixed(0, 0);\n    }\n\n    amountS = amountSBint.toFixed(0, 0);\n\n    // console.log('got amountSBint:', amountSBint.toString(), amountSBint.gt(BIG0), ' amountBOut:', amountBOut.toString())\n\n    sellAmt = output;\n    buyAmt = input;\n  }\n\n  minimumDecimal = buyToken.decimals;\n\n  const amountBOutSlip = getMinReceived(amountBOut, minimumDecimal, slipBips);\n\n  const priceImpact = updatePriceImpact_new(\n    reserveIn,\n    reserveOut,\n    amountS,\n    sellToken.decimals,\n    amountBOut,\n    buyToken.decimals,\n    feeBips,\n    takerRate,\n    isAtoB,\n    isReverse,\n    exceedDepth,\n    depth\n  );\n\n  return {\n    exceedDepth,\n    isReverse,\n    isAtoB,\n\n    slipBips,\n    takerRate,\n    feeBips,\n\n    output,\n\n    sellAmt,\n    buyAmt,\n\n    amountS,\n\n    amountBOut,\n    amountBOutWithoutFee,\n\n    amountBOutSlip,\n\n    priceImpact,\n  };\n}\n\nexport function ammPoolCalc(\n  rawVal: string,\n  isAtoB: boolean,\n  coinA: TokenVolumeV3,\n  coinB: TokenVolumeV3\n) {\n  const coinA_Vol_BIG = fm.toBig(coinA.volume);\n  const coinB_Vol_BIG = fm.toBig(coinB.volume);\n\n  let output = BIG0;\n\n  let ratio = BIG0;\n\n  if (isAtoB) {\n    if (!coinA_Vol_BIG.eq(BIG0)) {\n      ratio = fm.toBig(rawVal).div(coinA_Vol_BIG);\n      output = ratio.times(coinB_Vol_BIG);\n    }\n  } else {\n    if (!coinB_Vol_BIG.eq(BIG0)) {\n      ratio = fm.toBig(rawVal).div(coinB_Vol_BIG);\n      output = ratio.times(coinA_Vol_BIG);\n    }\n  }\n\n  return {\n    output: output.toFixed(0, 0),\n    ratio,\n  };\n}\n\n/**\n *\n * @param rawVal\n * @param isAtoB\n * @param slippageTolerance\n * @param owner\n * @param fees\n * @param ammPoolSnapshot\n * @param tokenMap\n * @param idIdx\n * @param coinAOffchainId\n * @param coinBOffchainId\n * @param rawValMatchForRawVal first time add to pool\n */\nexport function makeJoinAmmPoolRequest(\n  rawVal: string,\n  isAtoB: boolean,\n  slippageTolerance: string,\n  owner: string,\n  fees: LoopringMap<OffchainFeeInfo>,\n  ammPoolSnapshot: AmmPoolSnapshot,\n  tokenMap: LoopringMap<TokenInfo>,\n  idIdx: LoopringMap<string>,\n  coinAOffchainId = 0,\n  coinBOffchainId = 0,\n  rawValMatchForRawVal?: string\n) {\n  const coinA: TokenVolumeV3 = ammPoolSnapshot.pooled[0];\n  const coinB: TokenVolumeV3 = ammPoolSnapshot.pooled[1];\n\n  const baseToken: TokenInfo = tokenMap[idIdx[coinA.tokenId]];\n  const quoteToken: TokenInfo = tokenMap[idIdx[coinB.tokenId]];\n\n  const fee =\n    fees && fees[quoteToken.symbol] && fees[quoteToken.symbol].fee\n      ? fees[quoteToken.symbol].fee\n      : \"0\";\n\n  rawVal = fm\n    .toBig(rawVal)\n    .times(BIG10.pow(isAtoB ? baseToken.decimals : quoteToken.decimals))\n    .toFixed(0, 0);\n\n  // eslint-disable-next-line prefer-const\n  let { output, ratio } = ammPoolCalc(rawVal, isAtoB, coinA, coinB);\n  let volLp;\n  if (output === \"0\" && rawValMatchForRawVal) {\n    output = fm\n      .toBig(rawValMatchForRawVal)\n      .times(BIG10.pow(isAtoB ? quoteToken.decimals : baseToken.decimals))\n      .toFixed(0, 0);\n    // ratio = fm.toBig(\"1\");\n    volLp = \"1\";\n  } else {\n    const rest = BIG1.minus(fm.toBig(slippageTolerance));\n    volLp = fm\n      .toBig(ammPoolSnapshot.lp.volume)\n      .times(ratio)\n      .times(rest)\n      .toFixed(0, 0);\n  }\n  const volA = isAtoB ? rawVal : output;\n  const volB = isAtoB ? output : rawVal;\n\n  const request: JoinAmmPoolRequest = {\n    owner,\n    poolAddress: ammPoolSnapshot.poolAddress,\n    joinTokens: {\n      pooled: [\n        { tokenId: coinA.tokenId, volume: volA },\n        { tokenId: coinB.tokenId, volume: volB },\n      ],\n      minimumLp: { tokenId: ammPoolSnapshot.lp.tokenId, volume: volLp },\n    },\n    storageIds: [coinAOffchainId, coinBOffchainId],\n    fee,\n  };\n\n  return {\n    request,\n  };\n}\nexport function makeExitAmmPoolMini(\n  rawVal: string,\n  ammPoolSnapshot: AmmPoolSnapshot,\n  tokenMap: LoopringMap<TokenInfo>,\n  idIdx: LoopringMap<string>,\n  RatioDecimal = 10\n) {\n  const lpTokenVol: TokenVolumeV3 = ammPoolSnapshot.lp;\n  const lpToken: TokenInfo = tokenMap[idIdx[lpTokenVol.tokenId]];\n  const miniLpVol = fm //minLP Volume big number\n    .toBig(lpTokenVol.volume)\n    .times(2)\n    .div(\"1e\" + RatioDecimal);\n  return {\n    miniLpVol: miniLpVol.toString(),\n    miniLpVal: fm\n      .toBig(miniLpVol)\n      .div(\"1e\" + lpToken.decimals)\n      .toString(),\n  };\n}\nexport function makeExitAmmCoverFeeLP(\n  fees: LoopringMap<OffchainFeeInfo>,\n  ammPoolSnapshot: AmmPoolSnapshot,\n  tokenMap: LoopringMap<TokenInfo>,\n  idIdx: LoopringMap<string>,\n  slippageTolerance = \"0.001\"\n) {\n  const lpTokenVol: TokenVolumeV3 = ammPoolSnapshot.lp;\n  const lpToken: TokenInfo = tokenMap[idIdx[lpTokenVol.tokenId]];\n  const quote: TokenVolumeV3 = ammPoolSnapshot.pooled[1];\n  const quoteToken: TokenInfo = tokenMap[idIdx[quote.tokenId]];\n  const quoteVolume = quote.volume;\n\n  const maxFee =\n    fees && fees[quoteToken.symbol] ? fees[quoteToken.symbol].fee : \"0\";\n  // feeLp = fee /snap.quote*snap.lp\n  const feeLp = fm\n    .toBig(maxFee)\n    .times(lpTokenVol.volume)\n    .div(quoteVolume)\n    .plus(1);\n  // feeLp = feeLp / (1-slippageTolerance)  slippageTolerance default is 0.001\n  const feeLpWithSlippage = feeLp.div(BIG1.minus(fm.toBig(slippageTolerance)));\n  return {\n    feeLp: feeLp.toString(),\n    feeLpWithSlippage: feeLpWithSlippage.toString(),\n    miniFeeLpWithSlippageVal: fm\n      .toBig(feeLpWithSlippage)\n      .div(\"1e\" + lpToken.decimals)\n      .toString(),\n    feeLpVal: fm\n      .toBig(feeLp)\n      .div(\"1e\" + lpToken.decimals)\n      .toString(),\n  };\n}\n\nexport function makeExitAmmPoolRequest2(\n  rawVal: string,\n  slippageTolerance: string,\n  owner: string,\n  fees: LoopringMap<OffchainFeeInfo>,\n  ammPoolSnapshot: AmmPoolSnapshot,\n  tokenMap: LoopringMap<TokenInfo>,\n  idIdx: LoopringMap<string>,\n  offchainId = 0,\n  minDecimal = 10\n) {\n  const lpTokenVol: TokenVolumeV3 = ammPoolSnapshot.lp;\n  const lpToken: TokenInfo = tokenMap[idIdx[lpTokenVol.tokenId]];\n\n  const burnedVol = fm\n    .toBig(rawVal)\n    .times(\"1e\" + lpToken.decimals)\n    .toFixed(0, 0);\n\n  const ratio = fm\n    .toBig(burnedVol)\n    .times(\"1e\" + minDecimal)\n    .div(lpTokenVol.volume)\n    .toFixed(0, 1);\n\n  const coinA: TokenVolumeV3 = ammPoolSnapshot.pooled[0];\n  const coinB: TokenVolumeV3 = ammPoolSnapshot.pooled[1];\n\n  const rest = BIG1.minus(fm.toBig(slippageTolerance));\n\n  const volA = toBig(ratio)\n    .times(coinA.volume)\n    .div(\"1e\" + minDecimal)\n    .times(rest)\n    .toFixed(0, 0);\n\n  const volB = toBig(ratio)\n    .times(coinB.volume)\n    .div(\"1e\" + minDecimal)\n    .times(rest)\n    .toFixed(0, 0);\n\n  const baseToken: TokenInfo = tokenMap[idIdx[coinA.tokenId]];\n  const quoteToken: TokenInfo = tokenMap[idIdx[coinB.tokenId]];\n\n  const maxFee =\n    fees && fees[quoteToken.symbol] ? fees[quoteToken.symbol].fee : \"0\";\n\n  const request: ExitAmmPoolRequest = {\n    owner,\n    poolAddress: ammPoolSnapshot.poolAddress,\n    exitTokens: {\n      unPooled: [\n        { tokenId: coinA.tokenId, volume: volA },\n        { tokenId: coinB.tokenId, volume: volB },\n      ],\n      burned: { tokenId: ammPoolSnapshot.lp.tokenId, volume: burnedVol },\n    },\n    storageId: offchainId,\n    maxFee,\n  };\n\n  return {\n    ratio,\n    volA,\n    volB,\n    volA_show: fm\n      .toBig(volA)\n      .div(\"1e\" + baseToken.decimals)\n      .toString(),\n    volB_show: fm\n      .toBig(volB)\n      .div(\"1e\" + quoteToken.decimals)\n      .toString(),\n    request,\n  };\n}\n\n/**\n * calcDefi\n * @param isJoin {boolean} true is join, false is exit\n * @param isInputSell {boolean} user input sell of buy\n * @param XOR<sellAmount,buyAmount> user input sell amount number (without decimals)\n * @param feeVol fee Volume from server-side (decimals)\n * @param marketInfo {DefiMarketInfo} DefiMarketInfo from sever-side\n * @param tokenSell {TokenInfo} token Config information\n * @param tokenBuy {TokenInfo} token Config information\n * @param buyTokenBalanceVol   buy Token Balance server-side (decimals)\n * @return {sellVol} sell Volume (decimals);\n * @return {buyVol} buy Volume (decimals);\n * @return {maxSellVol} max Sell Volume (decimals); please use ceil for view\n * @return {miniSellVol} min Sell Volume (decimals); please use round for view\n * @return {maxFeeBips} number maxFeeBips;\n * @return {isJoin} boolean;\n * @return {isInputSell} boolean;\n */\nexport function calcDefi({\n  isJoin,\n  isInputSell,\n  sellAmount,\n  buyAmount,\n  feeVol,\n  marketInfo,\n  tokenSell,\n  tokenBuy,\n  buyTokenBalanceVol,\n}: {\n  isJoin: boolean;\n  isInputSell: boolean;\n  feeVol: string;\n  marketInfo: DefiMarketInfo;\n  tokenSell: TokenInfo;\n  tokenBuy: TokenInfo;\n  buyTokenBalanceVol: string;\n} & XOR<{ sellAmount: string }, { buyAmount: string }>): {\n  sellVol: string;\n  buyVol: string;\n  maxSellVol: string;\n  maxFeeBips: number;\n  miniSellVol: string;\n  isJoin: boolean;\n  isInputSell: boolean;\n} {\n  /** isDeposit calc sellPrice & buyPrice */\n  const [sellPrice] = isJoin\n    ? [marketInfo.depositPrice]\n    : [marketInfo.withdrawPrice];\n\n  /** calc MiniSellVol & MaxSellVol**/\n  const dustToken = tokenBuy;\n\n  const minVolBuy = BigNumber.max(\n    fm.toBig(feeVol).times(2),\n    dustToken.orderAmounts.dust\n  );\n\n  const miniSellVol = BigNumber.max(\n    minVolBuy.div(sellPrice),\n    tokenSell.orderAmounts.dust\n  );\n  const maxSellVol = fm.toBig(buyTokenBalanceVol).div(sellPrice);\n  /** calc MiniSellVol & MaxSellVol END**/\n  // debugger;\n  /** View input calc sellVol & buyVol */\n  let sellVol, buyVol;\n  if (isInputSell) {\n    sellVol = fm\n      .toBig(sellAmount ? sellAmount : 0)\n      .times(\"1e\" + tokenSell.decimals);\n    buyVol = sellVol.times(sellPrice);\n  } else {\n    buyVol = fm\n      .toBig(buyAmount ? buyAmount : 0)\n      .times(\"1e\" + tokenBuy.decimals);\n    sellVol = buyVol.div(sellPrice);\n  }\n  /** View input calc sellVol & buyVol END */\n\n  /** calc current maxFeeBips **/\n  const maxFeeBips = Math.ceil(\n    fm.toBig(feeVol).times(10000).div(buyVol).toNumber()\n  );\n\n  return {\n    sellVol: sellVol.toString(),\n    buyVol: buyVol.toString(),\n    maxSellVol: maxSellVol.toString(),\n    isJoin,\n    isInputSell,\n    maxFeeBips,\n    miniSellVol: miniSellVol.toString(),\n  };\n}\n\n/**\n *\n * @param info\n * @param index\n * @param rule\n * @param balance\n * @param feeVol\n * @param sellToken\n * @param buyToken\n * @param sellAmount\n * @param currentPrice\n */\nexport function calcDual({\n  info,\n  index,\n  rule,\n  balance,\n  feeVol,\n  sellToken,\n  // dualViewInfo,\n  buyToken,\n  sellAmount,\n  dualMarket,\n}: {\n  sellAmount: string | undefined;\n  info: DualProductAndPrice;\n  index: DualIndex;\n  rule: DualRulesCoinsInfo;\n  balance: { [key: string]: DualBalance };\n  sellToken: TokenInfo;\n  buyToken: TokenInfo;\n\n  // dualViewInfo:R\n  feeVol?: string | undefined;\n  dualMarket: DefiMarketInfo;\n}): CalDualResult {\n  const sellVol = fm\n    .toBig(sellAmount ? sellAmount : 0)\n    .times(\"1e\" + sellToken.decimals);\n  let lessEarnVol,\n    lessEarnTokenSymbol,\n    greaterEarnVol,\n    greaterEarnTokenSymbol,\n    maxSellAmount,\n    miniSellVol,\n    feeTokenSymbol,\n    quota,\n    maxFeeBips;\n  const { base, currency } = info;\n  const settleRatio = fm\n    .toBig(info.profit)\n    .times(info.ratio)\n    .toFixed(6, BigNumber.ROUND_DOWN);\n  if (info.dualType === DUAL_TYPE.DUAL_BASE) {\n    lessEarnVol = toBig(settleRatio).plus(1).times(sellVol); //dualViewInfo.strike);\n    lessEarnTokenSymbol = sellToken.symbol;\n    greaterEarnVol = toBig(\n      toBig(settleRatio)\n        .plus(1)\n        .times(sellAmount ? sellAmount : 0)\n        .times(info.strike)\n        .toFixed(buyToken.precision, BigNumber.ROUND_CEIL)\n    ).times(\"1e\" + buyToken.decimals);\n    // myLog('greaterEarnVol',toBig(settleRatio).plus(1).times(sellAmount ?sellAmount: 0)\n    // \t.times(info.strike).toFixed(buyToken.precision,BigNumber.ROUND_CEIL).toString(), greaterEarnVol.toString())\n    greaterEarnTokenSymbol = buyToken.symbol;\n    miniSellVol = BigNumber.max(\n      dualMarket.baseLimitAmount,\n      toBig(rule.baseMin).times(\"1e\" + sellToken.decimals)\n    ); // rule.baseMin;\n    quota = BigNumber.min(info.baseSize, balance ? balance[base]?.free : 0);\n    // quota = BigNumber.min(100, balance ? balance[ base ]?.free : 0)\n    maxSellAmount = BigNumber.min(rule.baseMax ? rule.baseMax : 0, quota);\n    feeTokenSymbol = buyToken.symbol;\n    maxFeeBips = 5;\n    //info.dualPrice.dualBid[ 0 ].baseQty;\n  } else {\n    lessEarnVol = toBig(\n      toBig(settleRatio)\n        .plus(1)\n        .times(sellAmount ? sellAmount : 0)\n        // .times(1 + info.ratio)\n        .div(info.strike)\n        .toFixed(buyToken.precision, BigNumber.ROUND_CEIL)\n    ).times(\"1e\" + buyToken.decimals);\n\n    // sellVol.times(1 + info.ratio).div(dualViewInfo.strike); //.times(1 + dualViewInfo.settleRatio);\n    lessEarnTokenSymbol = buyToken.symbol;\n    greaterEarnVol = toBig(settleRatio).plus(1).times(sellVol);\n    //.div(dualViewInfo.strike);\n    greaterEarnTokenSymbol = sellToken.symbol;\n    miniSellVol = BigNumber.max(\n      dualMarket.quoteLimitAmount,\n      toBig(rule.currencyMin).times(\"1e\" + sellToken.decimals)\n    ); // rule.baseMin;\n    quota = BigNumber.min(\n      toBig(info.baseSize).times(info.strike).toString(),\n      balance[currency].free\n    );\n    maxSellAmount = BigNumber.min(rule.currencyMax, quota);\n    /** calc current maxFeeBips **/\n    feeTokenSymbol = buyToken.symbol;\n    maxFeeBips = 5;\n  }\n  myLog(\n    \"settleRatio\",\n    settleRatio,\n    lessEarnVol.toString(),\n    greaterEarnVol.toString(),\n    \"strike\",\n    info.strike\n  );\n  return {\n    quota: quota.toString(),\n    sellVol: sellVol.toString(),\n    lessEarnVol: lessEarnVol.toString(),\n    lessEarnTokenSymbol,\n    greaterEarnVol: greaterEarnVol.toString(),\n    greaterEarnTokenSymbol,\n    miniSellVol: miniSellVol.toString(),\n    sellToken,\n    maxSellAmount: maxSellAmount ? maxSellAmount?.toString() : \"\",\n    maxFeeBips: maxFeeBips,\n    // dualViewInfo: dualViewInfo as unknown as R,\n    feeVol,\n    feeTokenSymbol,\n  };\n}\n\n/**\n *\n * @param info  CEX_MARKET\n * @param index\n * @param rule\n * @param balance\n * @param feeVol\n * @param sellToken\n * @param buyToken\n * @param sellAmount\n * @param currentPrice\n */\nexport function calcDex({\n  info,\n  input,\n  sell,\n  buy,\n  isAtoB,\n  marketArr,\n  tokenMap,\n  marketMap,\n  depth,\n  feeBips,\n}: {\n  info: CEX_MARKET;\n  input: string;\n  sell: string;\n  buy: string;\n  isAtoB: boolean;\n  marketArr: string[];\n  tokenMap: LoopringMap<TokenInfo>;\n  marketMap: LoopringMap<MarketInfo>;\n  depth: DepthData;\n  feeBips: string;\n}): CexResult | undefined {\n  const sellToken = tokenMap[sell];\n  const buyToken = tokenMap[buy];\n  const reserveInfo = getReserveInfo(sell, buy, marketArr, tokenMap, marketMap);\n  if (!reserveInfo) {\n    throw {\n      message: ConnectorError.CEX_NO_PRODUCT,\n      msg: ConnectorError.CEX_NO_PRODUCT,\n      code: LoopringErrorCode.CEX_NO_PRODUCT,\n    };\n  }\n  const { isReverse } = reserveInfo;\n  let sellVol, buyVol, amountB, amountS, exceedDepth;\n  if (isAtoB) {\n    sellVol = input;\n    amountS = fm.toBig(input ? input : 0).times(\"1e\" + sellToken.decimals);\n    const amountInWei = amountS;\n    if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n      throw {\n        message: ConnectorError.CEX_NO_DEPTH_ERROR,\n        msg: ConnectorError.CEX_NO_DEPTH_ERROR,\n        code: LoopringErrorCode.CEX_NO_DEPTH_ERROR,\n      };\n    } else {\n      if (!isReverse) {\n        exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_amtTotal));\n        // console.log('3 amountInWei:', amountInWei, ' bids_amtTotal:', depth.bids_amtTotal)\n      } else {\n        exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_volTotal));\n        // console.log('4 amountInWei:', amountInWei, ' asks_volTotal:', depth.asks_volTotal)\n      }\n      if (exceedDepth) {\n        buyVol = undefined;\n        amountB = undefined;\n      } else {\n        buyVol = getOutputOrderbook(\n          input,\n          sellToken,\n          buyToken,\n          feeBips,\n          isAtoB,\n          isReverse,\n          depth\n        ).toString();\n        amountB = fm.toBig(buyVol ?? 0).times(\"1e\" + buyToken.decimals);\n      }\n    }\n  } else {\n    buyVol = input;\n    amountB = fm.toBig(input ? input : 0).times(\"1e\" + buyToken.decimals);\n\n    if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n      throw {\n        message: ConnectorError.CEX_NO_DEPTH_ERROR,\n        msg: ConnectorError.CEX_NO_DEPTH_ERROR,\n        code: LoopringErrorCode.CEX_NO_DEPTH_ERROR,\n      };\n    } else {\n      // const amountInWei = amountB;\n      if (!isReverse) {\n        exceedDepth = amountB.gt(fm.toBig(depth.bids_volTotal));\n      } else {\n        exceedDepth = amountB.gt(fm.toBig(depth.asks_amtTotal));\n      }\n      if (exceedDepth) {\n        sellVol = undefined;\n        amountS = undefined;\n      } else {\n        const outputOrderbook = getOutputOrderbook(\n          input,\n          sellToken,\n          buyToken,\n          feeBips,\n          isAtoB,\n          isReverse,\n          depth\n        );\n        sellVol = fm.toBig(toWEI(tokenMap, sell, outputOrderbook)).toString();\n        amountS = fm.toBig(sellVol ?? 0).times(\"1e\" + sellToken.decimals);\n      }\n    } // console.log(`b2a(input:${input}) exceedDepth:${exceedDepth} amountB:${amountB}`)\n  }\n  return {\n    feeBips,\n    info,\n    isAtoB,\n    isReverse,\n    sellVol,\n    buyVol,\n    amountB: amountB?.toString(),\n    amountS: amountS?.toString(),\n    exceedDepth,\n  };\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { BigNumber } from \"ethers\";\nimport { BigInteger } from \"jsbn\";\n\nexport class field {\n  // Fq is the base field of Jubjub\n  static SNARK_SCALAR_FIELD = BigNumber.from(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\")\n\n  // Fr is the scalar field of Jubjub\n  static FR_ORDER = BigNumber.from(\"21888242871839275222246405745257275088614511777268538073601725287587578984328\")\n}\n\n// A class for field elements in FQ. Wrap a number in this class,\n// and it becomes a field element.\nexport class FQ {\n  public m: BigNumber;\n  public n: BigNumber;\n\n  constructor(n: BigNumber, field_modulus = field.SNARK_SCALAR_FIELD) {\n    this.m = field_modulus;\n    this.n = n.mod(this.m);\n  }\n\n  //\n  // Use this.n as other\n  //\n\n  add(other: BigNumber) {\n    const on = other\n    const n = (this.n.add(on)).mod(this.m)\n    return new FQ(n, this.m)\n  }\n\n  mul(other: BigNumber) {\n    const on = other\n    const n = this.n.mul(on).mod(this.m)\n    return new FQ(n, this.m)\n  }\n\n  sub(other: BigNumber) {\n    const on = other\n    let new_n: BigNumber;\n    if (this.n.gte(on)) {\n      new_n = (this.n.sub(on)).mod(this.m)\n    } else {\n      new_n = (this.n.sub(on).add(this.m)).mod(this.m)\n    }\n    return new FQ(new_n, this.m)\n  }\n\n  div(other: BigNumber) {\n    const on_c = other\n    const m_c = this.m\n    const two_c = BigNumber.from(\"2\")\n    const on_power_c = modulo(on_c, m_c.sub(two_c), m_c)\n    const n_on_power_remainder = this.n.mul(on_power_c).mod(this.m)\n\n    return new FQ(n_on_power_remainder, this.m)\n  }\n\n  static one(modulus: BigNumber = field.SNARK_SCALAR_FIELD) {\n    return new FQ(BigNumber.from(\"1\"), modulus)\n  }\n\n  static zero(modulus: BigNumber = field.SNARK_SCALAR_FIELD) {\n    return new FQ(BigNumber.from(\"0\"), modulus)\n  }\n\n}\n\nexport function modulo(n: BigNumber, p: BigNumber, m: BigNumber) {\n  const n_ = new BigInteger(n.toString())\n  const p_ = new BigInteger(p.toString())\n  const m_ = new BigInteger(m.toString())\n\n  // console.log(\"modulo\", n_.toString(), p_.toString(), m_.toString());\n  const result = n_.modPow(p_, m_)\n  // console.log(n_.toString(), p_.toString(), m_.toString(), result.toString())\n  return BigNumber.from(result.toString())\n}","/*\nThis module implements the extended twisted edwards and extended affine coordinates\ndescribed in the paper \"Twisted Edwards Curves Revisited\":\n\n - https://iacr.org/archive/asiacrypt2008/53500329/53500329.pdf\n   Huseyin Hisil, Kenneth Koon-Ho Wong, Gary Carter, and Ed Dawson\n\n        Information Security Institute,\n        Queensland University of Technology, QLD, 4000, Australia\n        {h.hisil, kk.wong, g.carter, e.dawson}@qut.edu.au\n\nBy using the extended coordinate system we can avoid expensive modular exponentiation\ncalls, for example - a scalar multiplication call (or multiple...) may perform only\none 3d->2d projection at the point where affine coordinates are necessary, and every\nintermediate uses a much faster form.\n\n# XXX: none of these functions are constant time, they should not be used interactively!\n*/\nimport { BigNumber } from \"ethers\";\nimport { field, FQ } from \"./field\";\n\nexport class jubjub {\n  static JUBJUB_Q = field.SNARK_SCALAR_FIELD\n  static JUBJUB_E = BigNumber.from(\"21888242871839275222246405745257275088614511777268538073601725287587578984328\")\n  static JUBJUB_C = BigNumber.from(\"8\")  // Cofactor\n\n  static JUBJUB_L = jubjub.JUBJUB_E.div(jubjub.JUBJUB_C)  // L*B = 0, and (2^C)*L == #E\n  static JUBJUB_A = BigNumber.from(\"168700\") // Coefficient A\n  static JUBJUB_D = BigNumber.from(\"168696\") // Coefficient D\n}\n\nexport class Point {\n  public x: FQ\n  public y: FQ\n\n  constructor(x: FQ, y: FQ) {\n    this.x = x\n    this.y = y\n  }\n\n  static generate() {\n    const xBigInt = BigNumber.from(\"16540640123574156134436876038791482806971768689494387082833631921987005038935\")\n    const yBigInt = BigNumber.from(\"20819045374670962167435360035096875258406992893633759881276124905556507972311\")\n    const point = new Point(new FQ(xBigInt), new FQ(yBigInt))\n    return point\n  }\n\n  mul(scaler: BigNumber) {\n    let p = new Point(this.x, this.y)\n    let a = Point.infinity()\n    let i = 0\n\n    while (!scaler.eq(BigNumber.from(\"0\"))) {\n      const bitwiseAnd = scaler.and(BigNumber.from(\"1\"))\n      if (!bitwiseAnd.eq(BigNumber.from(\"0\"))) {\n        a = a.add(p)\n      }\n      let copyP1 = new Point(p.x, p.y)\n      let copyP2 = new Point(p.x, p.y)\n      p = copyP1.add(copyP2)\n      scaler = scaler.div(BigNumber.from(\"2\"))\n      // console.log(i + \" scaler\", scaler.toString())\n      i = i + 1\n    }\n    return a\n  }\n\n  add(other: Point) {\n    if (this.x.n.eq(BigNumber.from(\"0\")) && this.y.n.eq(BigNumber.from(\"0\"))) {\n      return other\n    }\n    const u1 = this.x\n    const v1 = this.y\n    const u2 = other.x\n    const v2 = other.y\n\n    const u3_tmp0 = (u1.mul(v2.n)).add(v1.mul(u2.n).n)\n    const u3_tmp1 = u1.mul(u2.n).mul(v1.n).mul(v2.n).mul(jubjub.JUBJUB_D)\n    const u3_tmp2 = FQ.one().add(u3_tmp1.n)\n\n    const u3 = u3_tmp0.div(u3_tmp2.n)\n\n    const v3_tmp0 = v1.mul(v2.n)\n    const v3_tmp1 = u1.mul(u2.n).mul(jubjub.JUBJUB_A)\n    const v3_tmp3 = v3_tmp0.sub(v3_tmp1.n)  \n    const v3_tmp5 = FQ.one().sub(u3_tmp1.n)\n\n    const v3 = v3_tmp3.div(v3_tmp5.n)\n\n    return new Point(u3, v3)\n  }\n\n  static infinity() {\n    return new Point(new FQ(BigNumber.from(\"0\")), new FQ(BigNumber.from(\"1\")))\n  }\n}\n","/*\n Implements the Poseidon permutation:\n\n Starkad and Poseidon: New Hash Functions for Zero Knowledge Proof Systems\n  - Lorenzo Grassi, Daniel Kales, Dmitry Khovratovich, Arnab Roy, Christian Rechberger, and Markus Schofnegger\n  - https://eprint.iacr.org/2019/458.pdf\n\n Other implementations:\n\n  - https://github.com/shamatar/PoseidonTree/\n  - https://github.com/iden3/circomlib/blob/master/src/poseidon.js\n  - https://github.com/dusk-network/poseidon252\n */\n\nimport { BigNumber } from \"ethers\";\nimport { SignatureScheme } from \"./eddsa\";\nimport { modulo } from './field';\n\nimport { TextEncoder } from \"web-encoding\";\n\n// @ts-ignore\nvar blake2b = require('blake2b')\n\nexport class PoseidonParams {\n  public p: BigNumber;\n  public t: number;\n  public nRoundsF: number;\n  public nRoundsP: number;\n  public seed: string;\n  public e: BigNumber;\n  public constants_C: [BigNumber]\n  public constants_M: [[BigNumber]]\n  public security_target: number\n\n  constructor(p: BigNumber, t: number, nRoundsF: number, nRoundsP: number, seed: string, e: BigNumber, constants_C: [BigNumber] | null, constants_M: [[BigNumber]] | null, security_target: number) {\n    this.p = p\n    this.t = t\n    this.nRoundsF = nRoundsF\n    this.nRoundsP = nRoundsP\n    this.seed = seed\n    this.e = e\n\n    if (constants_C == null) {\n      this.constants_C = permunation.poseidon_constants(p, `${seed}_constants`, nRoundsF + nRoundsP)\n    } else {\n      this.constants_C = constants_C\n    }\n\n    if (constants_M == null) {\n      this.constants_M = permunation.poseidon_matrix(p, `${seed}_matrix_0000`, t)\n    } else {\n      this.constants_M = constants_M\n    }\n\n    this.security_target = security_target\n  }\n\n}\n\nexport class permunation {\n\n  static H(arg: string) {\n    const outputLength = 32\n\n    const enc = new TextEncoder();    \n    const message = enc.encode(arg)\n    // console.log(`message ${message}`)\n\n    const buf = Buffer.alloc(outputLength)\n    // console.log(`hashOfSize32Bytes ${buf.toString()}`)    \n    // console.log(`message ${message}`)    \n    blake2b(buf.length, null).update(message).final(buf)\n    const items = buf.toJSON().data\n    // console.log(`H items ${items}`)\n\n    let sum = BigNumber.from(\"0\")\n    var i = 0\n    for (var i = 0; i < items.length; i++) {\n      const itemBigInt = BigNumber.from(items[i])\n      const tmp = itemBigInt.mul((BigNumber.from(\"256\").pow(BigNumber.from(i))))\n      sum = sum.add(tmp)\n    }\n    // console.log(`sum ${sum}`)\n    return sum\n  }\n\n  static H_Bigint(arg: BigNumber) {\n    const outputLength = 32\n\n    const message = new Uint8Array(SignatureScheme.to_bytes(arg))\n    // console.log(`message ${message}`)\n\n    const buf = Buffer.alloc(outputLength)\n    // console.log(`hashOfSize32Bytes ${buf.toString()}`)    \n    blake2b(buf.length, null).update(message).final(buf)\n    const items = buf.toJSON().data\n    // console.log(`H_Bigint items ${items}`)\n\n    let sum = BigNumber.from(\"0\")\n    var i = 0\n    for (var i = 0; i < items.length; i++) {\n      const itemBigInt = BigNumber.from(items[i])\n      const tmp = itemBigInt.mul((BigNumber.from(\"256\").pow(BigNumber.from(i))))\n      sum = sum.add(tmp)\n    }\n    // console.log(`sum ${sum}`)\n    return sum\n  }\n\n\n  static poseidon_constants(p: BigNumber, seed: string, n: number) {\n    let c: any\n    c = []\n    let seedBigInt = this.H(seed)\n    const result = seedBigInt.mod(p)\n    c.push(result)\n    for (let i = 0; i < n-1; i++) {\n      seedBigInt = this.H_Bigint(seedBigInt)\n      const result = seedBigInt.mod(p)\n      c.push(result)\n    }\n    return c\n  }\n\n  static poseidon_matrix(p: BigNumber, seed: string, t: number) {\n    const c = this.poseidon_constants(p, seed, t*2)\n    let matrix: any\n    matrix = []\n    for (let i = 0; i < t; i++) {\n      let row: any\n      row = []\n      for (let j = 0; j < t; j++) {\n        const c_i = c[i]\n        const c_t_j = c[t+j]\n        const p_c = p\n        const c_t_j_p = c_t_j.mod(p_c)\n        const left = c_i.sub(c_t_j_p)\n        const p_2 = p_c.sub(2)\n        const item_c = modulo(left, p_2, p_c)\n        row.push(item_c)\n      }\n      matrix.push(row)\n    }\n    return matrix\n  }\n\n  static poseidon_sbox(state: [BigNumber], i: number, params: PoseidonParams) {\n    /*\n    iacr.org/2019/458 § 2.2 The Hades Strategy (pg 6)\n\n    In more details, assume R_F = 2 · R_f is an even number. Then\n    - the first R_f rounds have a full S-Box layer,\n    - the middle R_P rounds have a partial S-Box layer (i.e., 1 S-Box layer),\n    - the last R_f rounds have a full S-Box layer\n    */\n    const half_F = params.nRoundsF / 2\n\n    if (i < half_F || i >= (half_F + params.nRoundsP)) {\n      for (let j = 0; j < state.length; j++) {\n        const element_c = state[j]\n        const e_c = params.e\n        const p_c = params.p\n        const item = modulo(element_c, e_c, p_c)\n        state[j] = item\n      }\n    } else {\n      const element_c = state[0]\n      const e_c = params.e\n      const p_c = params.p\n      const item = modulo(element_c, e_c, p_c)\n      state[0] = item\n    }\n    return state\n  }\n\n  static poseidon_mix(state: [BigNumber], M: [[BigNumber]], p: BigNumber) {\n    /*\n    The mixing layer is a matrix vector product of the state with the mixing matrix\n      - https://mathinsight.org/matrix_vector_multiplication\n    */\n    let newState: any\n    newState = []\n    for (let i = 0; i < M.length; i++) {\n      let sum = BigNumber.from(0)\n      for (let j = 0; j < state.length; j++) {\n        const element = state[j]\n        sum = sum.add((M[i][j].mul(element)))\n      }\n      newState.push(sum.mod(p))\n    }\n    return newState\n  }\n\n\n  // poseidon\n  /*\n    Main instansiation of the Poseidon permutation\n\n    The state is `t` elements wide, there are `F` full-rounds\n    followed by `P` partial rounds, then `F` full rounds again.\n\n        [    ARK    ]    --,\n          | | | | | |       |\n        [    SBOX   ]       -  Full Round\n          | | | | | |       |\n        [    MIX    ]    --`\n\n\n        [    ARK    ]    --,\n          | | | | | |       |\n        [    SBOX   ]       -  Partial Round\n                    |       |   Only 1 element is substituted in partial round\n        [    MIX    ]    --`\n\n    There are F+P rounds for the full permutation.\n\n    You can provide `r = N - 2s` bits of input per round, where `s` is the desired\n    security level, in most cases this means you can provide `t-1` inputs with\n    appropriately chosen parameters. The permutation can be 'chained' together\n    to form a sponge construct.\n  */\n  static poseidon(inputs: [BigNumber], params: PoseidonParams) {\n    let state: any\n    state = []\n    state = state.concat(inputs)\n    // console.log(`state ${state}`)\n    for (var i = 0; i < params.t - inputs.length; i++) {\n      state.push(BigNumber.from(0))\n    }\n\n    // console.log(`state ${state}`)\n    // console.log(`params.constants_C.length ${params.constants_C.length}`)\n\n    for (var i = 0; i < params.constants_C.length; i++) {\n      const C_i = params.constants_C[i]\n\n      for (let index = 0; index < state.length; index++) {\n        const element = state[index]\n        state[index] = element.add(C_i)\n      }\n\n      state = this.poseidon_sbox(state, i, params)\n      // console.log(`after poseidon_sbox ${state}`)\n\n      state = this.poseidon_mix(state, params.constants_M, params.p)\n      // console.log(`after poseidon_mix ${state}`)\n    }\n    // console.log(`hash is ${state[0]}`)\n    return state[0]\n  }\n\n}\n","/*\nImplements Pure-EdDSA and Hash-EdDSA\n\nThe signer has two secret values:\n\n    * k = Secret key\n    * r = Per-(message,key) nonce\n\nThe signer provides a signature consiting of two values:\n\n    * R = Point, image of `r*B`\n    * s = Image of `r + (k*t)`\n\nThe signer provides the verifier with their public key:\n\n    * A = k*B\n\nBoth the verifier and the signer calculate the common reference string:\n\n    * t = H(R, A, M)\n\nThe nonce `r` is secret, and protects the value `s` from revealing the\nsigners secret key.\n\nFor Hash-EdDSA, the message `M` is compressed before H(R,A,M)\n\nFor further information see: https://ed2519.cr.yp.to/eddsa-20150704.pdf\n*/\n\nimport { BigNumber } from \"ethers\";\nimport { field, FQ } from \"./field\";\nimport { jubjub, Point } from \"./jubjub\";\nimport { sha512 } from \"js-sha512\";\nimport { permunation, PoseidonParams } from \"./permutation\";\n\nexport class Signature {\n  public R: Point;\n  public s: FQ;\n\n  constructor(R: Point, s: FQ) {\n    this.R = R;\n    this.s = s;\n  }\n\n  toStr() {\n    return `${this.R.x.n} ${this.R.y.n} ${this.s.n}`;\n  }\n}\n\nexport class SignedMessage {\n  public A: Point;\n  public sig: Signature;\n  public msg: BigNumber;\n\n  constructor(A: Point, sig: Signature, msg: BigNumber) {\n    this.A = A;\n    this.sig = sig;\n    this.msg = msg;\n  }\n\n  toStr() {\n    return `${this.A.x.n} ${\n      this.A.y.n\n    } ${this.sig.toStr()} ${this.msg.toString()}`;\n  }\n}\n\nexport class SignatureScheme {\n  static to_bytes(arg: BigNumber) {\n    const outputLength = 32;\n\n    // console.log(`input ${arg.toString()}`)\n\n    let bitIntDataItems = bnToBuf(arg.toString());\n    // console.log(`bigIntData ${bitIntDataItems}`)\n\n    const more = outputLength - bitIntDataItems.length;\n    // console.log('more', more)\n    if (more > 0) {\n      for (let i = 0; i < more; i++) {\n        bitIntDataItems = [0].concat(bitIntDataItems);\n      }\n    } else {\n      bitIntDataItems = bitIntDataItems.slice(0, outputLength);\n    }\n\n    bitIntDataItems = bitIntDataItems.reverse();\n    // console.log(`bigIntData return ${bitIntDataItems}`)\n    return bitIntDataItems;\n  }\n\n  /*\n  Identity function for message\n\n  Can be used to truncate the message before hashing it\n  as part of the public parameters.\n  */\n  static prehash_message(M: BigNumber) {\n    return M;\n  }\n\n  /*\n  Hash the key and message to create `r`, the blinding factor for this signature.\n\n  If the same `r` value is used more than once, the key for the signature is revealed.\n\n  From: https://eprint.iacr.org/2015/677.pdf (EdDSA for more curves)\n\n  Page 3:\n\n      (Implementation detail: To save time in the computation of `rB`, the signer\n      can replace `r` with `r mod L` before computing `rB`.)\n  */\n  static hash_secret_python(k: FQ, arg: BigNumber) {\n    const byteArray0 = this.to_bytes(k.n);\n    const byteArray1 = this.to_bytes(arg);\n\n    const sum = byteArray0.concat(byteArray1);\n    // console.log(\"sum\", sum)\n\n    // let byteArrayHexStr = bytesToHexString(sum)\n    // console.log(\"byteArrayHexStr\", byteArrayHexStr)\n\n    const digest1 = sha512.array(new Uint8Array(sum).buffer);\n\n    // let digest1 = createHash('sha512').update .digest(\"SHA-512\", new Uint8Array(sum).buffer)\n    let sha512StrItems: any;\n    // console.log('digest1', digest1);\n    for (let i = 0; i < digest1.length; i++) {\n      const itemInt = digest1[i];\n      let st = itemInt.toString(16);\n      if (st.length == 1) {\n        st = \"0\" + st;\n      }\n      sha512StrItems = [st].concat(sha512StrItems);\n    }\n    const sha512MessageHexStr = sha512StrItems.join(\"\");\n    // console.log(`sha512MessageHexStr ${sha512MessageHexStr}`)\n    const sha512MessageHexStrBigInt = BigNumber.from(\n      \"0x\" + sha512MessageHexStr\n    );\n    // console.log(`sha512MessageHexStrBigInt ${sha512MessageHexStrBigInt}`)\n    const hashed = sha512MessageHexStrBigInt.mod(jubjub.JUBJUB_L);\n    // console.log(`hashed ${hashed.toString()}`)\n    return hashed;\n  }\n\n  static B() {\n    return Point.generate();\n  }\n\n  static sign(msg: BigNumber, key: FQ, B: Point) {\n    // console.log(\"B \", B.x.n.toString(), B.y.n.toString())\n\n    const copyKey = new FQ(key.n, key.m);\n    const A = B.mul(copyKey.n);\n\n    // console.log(\"A.x \", A.x.n.toString(), A.x.m.toString())\n    // console.log(\"A.y \", B.y.n.toString(), A.y.m.toString())\n\n    const M = this.prehash_message(msg);\n    // console.log(\"M \", M.toString())\n\n    const r = this.hash_secret_python(key, M);\n    // console.log(\"r \", r.toString())\n\n    const copy_r = BigNumber.from(r.toString());\n\n    const R = B.mul(copy_r);\n\n    // console.log(\"R.x \", R.x.n.toString(), R.x.m.toString())\n    // console.log(\"R.y \", R.y.n.toString(), R.y.m.toString())\n\n    const t = this.hash_public(R, A, M);\n    // console.log(\"hello world\")\n    // console.log(\"t \", t.toString())\n\n    const t_c = t;\n    const key_n_t = key.n.mul(t_c);\n    const left = r.add(key_n_t);\n    const S = left.mod(jubjub.JUBJUB_E);\n\n    // console.log(\"S \", S.toString())\n\n    const signatureResult = new Signature(R, new FQ(S));\n    // console.log(\"signatureResult\", signatureResult.toStr())\n\n    const signedMessage = new SignedMessage(A, signatureResult, msg);\n    // console.log(\"signedMessage\", signedMessage.toStr())\n\n    return signedMessage;\n  }\n\n  static as_scalar(point: Point) {\n    // console.log(`as_scalar ${point.x.n.toString()}`)\n    return [point.x.n, point.y.n];\n  }\n\n  static hash_public(R: Point, A: Point, M: BigNumber) {\n    let inputMsg: any;\n    inputMsg = this.as_scalar(R).concat(this.as_scalar(A)).concat([M]);\n    // console.log(`inputMsg ${inputMsg}`)\n    const params = new PoseidonParams(\n      field.SNARK_SCALAR_FIELD,\n      6,\n      6,\n      52,\n      \"poseidon\",\n      BigNumber.from(5),\n      null,\n      null,\n      128\n    );\n    const result = permunation.poseidon(inputMsg, params);\n    return result;\n  }\n}\n\nexport function bnToBuf(bn: string) {\n  let hex = BigInt(bn).toString(16);\n  if (hex.length % 2) {\n    hex = \"0\" + hex;\n  }\n  const len = hex.length / 2;\n  // console.log(\"length\", len);\n\n  const u8 = new Uint8Array(len);\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    u8[i] = parseInt(hex.slice(j, j + 2), 16);\n    i += 1;\n    j += 2;\n  }\n  return Array.from(u8);\n}\n\nexport function bnToBufWithFixedLength(bn: string, outputLength: number) {\n  let hex = BigInt(bn).toString(16);\n  if (hex.length % 2) {\n    hex = \"0\" + hex;\n  }\n  const len = hex.length / 2;\n\n  // console.log(\"len\", len);\n\n  const u8 = new Uint8Array(len);\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    u8[i] = parseInt(hex.slice(j, j + 2), 16);\n    i += 1;\n    j += 2;\n  }\n\n  let bitIntDataItems = Array.from(u8);\n\n  const more = outputLength - bitIntDataItems.length;\n  // console.log('diff len', more)\n  if (more > 0) {\n    for (let i = 0; i < more; i++) {\n      bitIntDataItems = [0].concat(bitIntDataItems);\n    }\n  } else {\n    bitIntDataItems = bitIntDataItems.slice(0, outputLength);\n  }\n\n  return bitIntDataItems;\n}\n\nexport function bufToBn(buf: any) {\n  let hex: any;\n  hex = [];\n  const u8 = Uint8Array.from(buf);\n\n  u8.forEach(function (i) {\n    let h = i.toString(16);\n    if (h.length % 2) {\n      h = \"0\" + h;\n    }\n    hex.push(h);\n  });\n\n  return BigInt(\"0x\" + hex.join(\"\"));\n}\n\nexport function bytesToHexString(bytes: any) {\n  let strItems: any;\n  strItems = [];\n  for (let i = 0; i < bytes.length; i++) {\n    const item = bytes[i];\n    let st = item.toString(16);\n    if (st.length == 1) {\n      st = \"0\" + st;\n    }\n    // st = st.toUpperCase()\n    strItems.push(st);\n  }\n  const strItemsJoined = strItems.join(\"\");\n  return strItemsJoined;\n}\n","import { BigNumber } from \"ethers\";\nimport { SignatureScheme, bytesToHexString } from \"./eddsa\";\nimport { field } from \"./field\";\n\n\nexport class babyJub {\n  \n  static packPoint(P0: BigNumber, P1: BigNumber) {\n    const packed = SignatureScheme.to_bytes(P1).reverse()\n    // console.log(\"packed\", packed)\n    if (babyJub.lt(P0, BigNumber.from(\"0\"))) {\n      // console.log(\"Update .... lt \")\n      packed[0] = packed[0] | 0x80\n    }\n    const hexStr = bytesToHexString(packed)\n    // console.log(\"hexStr\", hexStr)\n    return hexStr\n  }\n\n  static lt(a: BigNumber, b: BigNumber) {\n    const half = field.SNARK_SCALAR_FIELD.div(BigNumber.from(\"2\"))\n    const p = field.SNARK_SCALAR_FIELD\n    let aa: BigNumber\n    let bb: BigNumber\n    if (a.gt(half)) {\n      aa = a.sub(p)\n    } else {\n      aa = a\n    }\n    if (b.gt(half)) {\n      bb = b.sub(p)\n    } else {\n      bb = b\n    }\n    // console.log(\"lt\", a.toString(), b.toString(), aa.toString(), bb.toString());\n    return aa.lt(bb)\n  }\n\n  static gt(a: BigNumber, b: BigNumber) {\n    const half = field.SNARK_SCALAR_FIELD.div(BigNumber.from(\"2\"))\n    const p = field.SNARK_SCALAR_FIELD\n    let aa: BigNumber\n    let bb: BigNumber\n    if (a.gt(half)) {\n      aa = a.sub(p)\n    } else {\n      aa = a\n    }\n    if (b.gt(half)) {\n      bb = b.sub(p)\n    } else {\n      bb = b\n    }\n    // console.log(\"gt\", a.toString(), b.toString(), aa.toString(), bb.toString());\n    return aa.gt(bb)\n  }\n\n}\n","import { BigNumber } from \"ethers\";\nimport { SignatureScheme } from \"./eddsa\";\nimport { FQ } from \"./field\";\nimport { jubjub } from \"./jubjub\";\nimport { babyJub } from \"./babyJub\";\n\nexport class EDDSAUtil {\n  \n  static sign(PrivateKey: string | undefined, hash: any) {\n    const strKey = BigNumber.from(PrivateKey)\n    const msg = BigNumber.from(hash)\n\n    // console.log(\"strKey\", strKey.toString())\n    // console.log(\"msg\", msg.toString())\n    const copyKey = new FQ(strKey)\n    const B = SignatureScheme.B()\n    const signed = SignatureScheme.sign(msg, copyKey, B)\n    // console.log(\"signed\", signed.toStr())\n    const x = EDDSAUtil.formatted(signed.sig.R.x.n.toHexString().slice(2))\n    const y = EDDSAUtil.formatted(signed.sig.R.y.n.toHexString().slice(2))\n    const s = EDDSAUtil.formatted(signed.sig.s.n.toHexString().slice(2))\n    const result = `0x${x}${y}${s}`\n    // console.log(\"result\", result)\n    return {\n      \"Rx\": signed.sig.R.x.n.toString(),\n      \"Ry\": signed.sig.R.y.n.toString(),\n      \"s\": signed.sig.s.n.toString()\n    }\n  }\n\n  static formatted(hexString: string) {\n    const outputLength = 32 * 2\n    const more = outputLength - hexString.length\n    if (more > 0) {\n      for (let i = 0; i < more; i++) {\n        hexString = \"0\" + (hexString)\n      }\n    } else {\n      hexString = hexString.slice(0, outputLength)\n    }\n    return hexString\n  }\n\n  static generateKeyPair(seed: any) {\n    let bigInt = BigNumber.from(0)\n    for (let i = 0; i < seed.length; i++) {\n      const item = seed[i]\n      const itemBigInt = BigNumber.from(item)\n      const tmp = BigNumber.from(\"256\").pow(BigNumber.from(i))\n      bigInt = bigInt.add(itemBigInt.mul(tmp))\n    }\n    // console.log(\"sum\", bigInt.toString())\n    const secretKey = bigInt.mod(jubjub.JUBJUB_L)\n    // console.log(\"secretKey\", secretKey.toString())\n\n    const copySecretKey = BigNumber.from(secretKey.toString())\n    // console.log(\"copySecretKey\", copySecretKey.toString())\n\n    const B = SignatureScheme.B()\n    // console.log(\"B\", B.toString())\n\n    const publicKey = B.mul(copySecretKey)\n    // console.log(\"publicKey\", publicKey.x.n.toString(), publicKey.y.n.toString())\n\n    const keyPair = {\n      \"publicKeyX\": publicKey.x.n.toString(),\n      \"publicKeyY\": publicKey.y.n.toString(),\n      \"secretKey\": secretKey.toString()\n    }\n\n    return keyPair\n  }\n\n  static pack(publicKeyX: string, publicKeyY: string) {\n    const P0 = BigNumber.from(publicKeyX)\n    const P1 = BigNumber.from(publicKeyY)\n    const newPack = babyJub.packPoint(P0, P1)\n    return newPack\n  }\n\n}\n","import sha256 from \"crypto-js/sha256\";\nimport * as abi from \"ethereumjs-abi\";\nimport * as sigUtil from \"eth-sig-util\";\nimport { EIP712Message, EIP712TypedData, EIP712Types } from \"eth-sig-util\";\n\nimport * as ethUtil from \"ethereumjs-util\";\n\nimport BN from \"bn.js\";\n\nimport BigInteger from \"bignumber.js\";\nimport { BigNumber } from \"ethers\";\n\nimport { bnToBufWithFixedLength } from \"./poseidon/eddsa\";\nimport { EDDSAUtil } from \"./poseidon/EDDSAUtil\";\nimport { field } from \"./poseidon/field\";\nimport { permunation, PoseidonParams } from \"./poseidon/permutation\";\n\nimport * as fm from \"../../utils/formatter\";\nimport { toBig, toHex } from \"../../utils/formatter\";\n\nimport { ChainId, ConnectorNames } from \"../../defs/web3_defs\";\n\nimport {\n  AmmPoolRequestPatch,\n  ExitAmmPoolRequest,\n  JoinAmmPoolRequest,\n  NFTMintRequestV3,\n  NFTWithdrawRequestV3,\n  OffChainWithdrawalRequestV3,\n  OriginNFTTransferRequestV3,\n  OriginTransferRequestV3,\n  PublicKey,\n  UpdateAccountRequestV3,\n  NFTOrderRequestV3,\n  NFTTokenAmountInfo,\n  NFTTradeRequestV3,\n  SubmitOrderRequestV3,\n  DualOrderRequest,\n} from \"../../defs/loopring_defs\";\n\nimport Web3 from \"web3\";\nimport { myLog } from \"../../utils/log_tools\";\nimport { personalSign } from \"../base_api\";\nimport { CounterFactualInfo, IsMobile } from \"../../defs\";\n\nexport enum GetEcDSASigType {\n  HasDataStruct,\n  WithoutDataStruct,\n  Contract,\n}\n\nconst MIN_NFT_TOKENID = 32768;\n\nconst SNARK_SCALAR_FIELD = new BigInteger(\n  \"21888242871839275222246405745257275088548364400416034343698204186575808495617\",\n  10\n);\n\nexport interface KeyPairParams {\n  web3: any;\n  address: string;\n  walletType: ConnectorNames;\n  keySeed: string;\n  chainId: ChainId;\n  accountId?: number;\n  counterFactualInfo?: CounterFactualInfo;\n  isMobile?: boolean;\n}\nexport function generatePrivateKey(result: {\n  sig: string;\n  counterFactualInfo: any;\n  error: any;\n}) {\n  if (!result.error) {\n    // myLog(\"sig:\", result.sig);\n    const seedBuff = ethUtil.sha256(fm.toBuffer(result.sig));\n    // myLog(`seedBuff.toString('hex') ${seedBuff.toString('hex')}`)\n    const seed = BigNumber.from(\"0x\" + seedBuff.toString(\"hex\"));\n    // myLog(`seed ${seed.toString()}`)\n    const bitIntDataItems = bnToBufWithFixedLength(seed.toString(), 32);\n    // myLog(`bigIntData ${bitIntDataItems}`)\n    const keyPair = EDDSAUtil.generateKeyPair(bitIntDataItems);\n    // myLog(\"keyPair\", keyPair)\n\n    const formatedPx = fm.formatEddsaKey(\n      fm.toHex(fm.toBig(keyPair.publicKeyX))\n    );\n    const formatedPy = fm.formatEddsaKey(\n      fm.toHex(fm.toBig(keyPair.publicKeyY))\n    );\n    const sk = toHex(toBig(keyPair.secretKey));\n\n    return {\n      keyPair,\n      formatedPx,\n      formatedPy,\n      sk,\n      counterFactualInfo: result.counterFactualInfo,\n    };\n  } else {\n    console.log(\"generateKeyPair personalSign error\", result.error);\n    throw Error(result.error);\n  }\n}\nexport async function generateKeyPair(\n  {\n    web3,\n    address,\n    walletType,\n    keySeed,\n    chainId,\n    accountId,\n    counterFactualInfo,\n    isMobile,\n  }: KeyPairParams,\n  publicKey: { x: string; y: string } | undefined = undefined\n) {\n  // LOG: for signature\n  // console.log(\n  //   \"personalSign ->\",\n  //   \"counterFactualInfo\",\n  //   counterFactualInfo,\n  //   \"keySeed\",\n  //   keySeed,\n  //   \"walletType\",\n  //   walletType,\n  //   \"publicKey from sever side \",\n  //   publicKey\n  // );\n  const result: any = await personalSign(\n    web3,\n    address,\n    \"\",\n    keySeed,\n    walletType,\n    chainId,\n    accountId,\n    counterFactualInfo,\n    isMobile === undefined ? IsMobile.any() : isMobile\n  );\n  try {\n    let { keyPair, formatedPx, formatedPy, sk, counterFactualInfo } =\n      generatePrivateKey(result);\n\n    if (\n      publicKey &&\n      result.sig.length > 3 &&\n      publicKey.x &&\n      publicKey.y &&\n      (!fm.toBig(formatedPx).eq(fm.toBig(publicKey.x)) ||\n        !fm.toBig(formatedPy).eq(fm.toBig(publicKey.y)))\n    ) {\n      let value = result.sig.split(\"\");\n      let end = value.splice(result.sig.length - 2, 2).join(\"\");\n      end = end == \"1c\" ? \"01\" : \"1c\";\n      result.sig = value.concat(end.split(\"\")).join(\"\");\n      let newValue = generatePrivateKey(result);\n      // LOG: for signature\n      console.log(\n        \"personalSign ->\",\n        \"publicKey calc by sign\",\n        \"x\",\n        formatedPx,\n        \"y\",\n        formatedPy,\n        \"publicKey from server\",\n        publicKey,\n        \"personalSign again->\",\n        \"publicKey calc by sign\",\n        \"x\",\n        end,\n        newValue.formatedPx,\n        \"y\",\n        newValue.formatedPy\n      );\n      return {\n        keyPair: newValue.keyPair,\n        formatedPx: newValue.formatedPx,\n        formatedPy: newValue.formatedPy,\n        sk: newValue.sk,\n        counterFactualInfo,\n      };\n    } else {\n      return { keyPair, formatedPx, formatedPy, sk, counterFactualInfo };\n    }\n  } catch (error) {\n    throw Error(error as any);\n  }\n}\n\nconst makeRequestParamStr = (request: Map<string, any>) => {\n  const arrObj = Array.from(request);\n  arrObj.sort(function (a, b) {\n    return a[0].localeCompare(b[0]);\n  });\n  const orderedMap = new Map(arrObj.map((i) => [i[0], i[1]]));\n\n  const paramlist: Array<string> = [];\n\n  const keys = Object.keys(Object.fromEntries(orderedMap));\n\n  if (keys) {\n    keys.forEach((key: string) => {\n      const value = request.get(key);\n      if (value !== undefined && value !== \"\")\n        paramlist.push(`${key}=${value}`);\n    });\n  }\n\n  // force to change encode ',' due to different encode rules between server and client\n  return encodeURIComponent(paramlist.join(\"&\")).replace(/%2C/g, \"%252C\");\n};\n\n//submitOrderV3\nconst genSigWithPadding = (PrivateKey: string | undefined, hash: any) => {\n  const signature = EDDSAUtil.sign(PrivateKey, hash);\n\n  let signatureRx_Hex = fm.clearHexPrefix(fm.toHex(fm.toBN(signature.Rx)));\n  if (signatureRx_Hex.length < 64) {\n    const padding = new Array(64 - signatureRx_Hex.length).fill(0);\n    signatureRx_Hex = padding.join(\"\").toString() + signatureRx_Hex;\n  }\n\n  let signatureRy_Hex = fm.clearHexPrefix(fm.toHex(fm.toBN(signature.Ry)));\n  if (signatureRy_Hex.length < 64) {\n    const padding = new Array(64 - signatureRy_Hex.length).fill(0);\n    signatureRy_Hex = padding.join(\"\").toString() + signatureRy_Hex;\n  }\n\n  let signatureS_Hex = fm.clearHexPrefix(fm.toHex(fm.toBN(signature.s)));\n  if (signatureS_Hex.length < 64) {\n    const padding = new Array(64 - signatureS_Hex.length).fill(0);\n    signatureS_Hex = padding.join(\"\").toString() + signatureS_Hex;\n  }\n\n  const result = \"0x\" + signatureRx_Hex + signatureRy_Hex + signatureS_Hex;\n  // myLog(\"signature result\", result)\n  return result;\n};\n\nconst makeObjectStr = (request: Map<string, any>) => {\n  const jsonTxt = JSON.stringify(Object.fromEntries(request));\n  return encodeURIComponent(jsonTxt).replace(/[!'()]/g, escape); //replace(/'/ig, \"%27\")\n};\n\nexport function getEdDSASig(\n  method: string,\n  basePath: string,\n  api_url: string,\n  requestInfo: any,\n  PrivateKey: string | undefined\n) {\n  let params = undefined;\n\n  method = method.toUpperCase().trim();\n\n  if (method === \"GET\" || method === \"DELETE\") {\n    params = makeRequestParamStr(requestInfo);\n  } else if (method === \"POST\" || method === \"PUT\") {\n    params = makeObjectStr(requestInfo);\n  } else {\n    throw new Error(`${method} is not supported yet!`);\n  }\n\n  const uri = encodeURIComponent(`${basePath}${api_url}`);\n\n  const message = `${method}&${uri}&${params}`;\n  // LOG: for signature\n  myLog(\"getEdDSASig\", message);\n  let _hash: any = new BigInteger(sha256(message).toString(), 16);\n\n  let hash = _hash.mod(SNARK_SCALAR_FIELD).toFormat(0, 0, {});\n  // LOG: for signature\n  myLog(\"getEdDSASig hash\", message, \"_hash\", _hash, \"hash\", hash);\n\n  const sig = genSigWithPadding(PrivateKey, hash);\n\n  return sig;\n}\n\nexport function verifyEdDSASig(\n  hash: string,\n  input: { Rx: string; Ry: string; s: string }\n): Boolean {\n  return true;\n}\nexport const getEdDSASigWithPoseidon = (\n  inputs: any,\n  PrivateKey: string | undefined\n) => {\n  const p = field.SNARK_SCALAR_FIELD;\n  const poseidonParams = new PoseidonParams(\n    p,\n    inputs.length + 1,\n    6,\n    53,\n    \"poseidon\",\n    BigNumber.from(5),\n    null,\n    null,\n    128\n  );\n  let bigIntInputs: any;\n  bigIntInputs = [];\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i];\n    bigIntInputs.push(BigNumber.from(input));\n  }\n  const hash = permunation.poseidon(bigIntInputs, poseidonParams);\n  // myLog(\"getEdDSASigWithPoseidon\", hash.toHexString(), bigIntInputs);\n  return {\n    hash,\n    result: genSigWithPadding(PrivateKey, hash),\n  };\n};\n\n/**\n * @description sign EIP712\n * @param web3\n * @param account\n * @param method\n * @param params\n * @returns {Promise.<*>}\n */\nexport async function signEip712(\n  web3: any,\n  account: string,\n  method: string,\n  params: any\n) {\n  const response: any = await new Promise((resolve) => {\n    web3.currentProvider?.sendAsync(\n      {\n        method,\n        params,\n        account,\n      },\n      function (err: any, result: any) {\n        if (err) {\n          resolve({ error: { message: err.message } });\n          return;\n        }\n\n        if (result.error) {\n          resolve({ error: { message: result.error.message } });\n          return;\n        }\n\n        resolve({ result: result.result });\n      }\n    );\n  });\n\n  if (response[\"result\"]) {\n    return response;\n  } else {\n    throw new Error(response[\"error\"][\"message\"]);\n  }\n}\n\nexport async function signEip712WalletConnect(\n  web3: any,\n  account: string,\n  typedData: any\n) {\n  try {\n    const response: any = await web3.currentProvider?.send(\n      \"eth_signTypedData\",\n      [account, typedData]\n    );\n\n    return response;\n  } catch (err) {\n    return { error: err as any };\n  }\n}\n\nexport async function getEcDSASig(\n  web3: any,\n  typedData: any,\n  address: string | undefined,\n  type: GetEcDSASigType,\n  chainId: ChainId,\n  accountId?: number,\n  pwd = \"\",\n  walletType?: ConnectorNames,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const msgParams = JSON.stringify(typedData);\n  const params = [address, msgParams];\n\n  let response: any,\n    hash: Buffer | string,\n    signEip712Result: any,\n    signature: any;\n  switch (type) {\n    case GetEcDSASigType.HasDataStruct:\n      response = await new Promise((resolve) => {\n        web3.currentProvider.send(\n          {\n            method: \"eth_signTypedData_v4\",\n            params,\n            address,\n          },\n          function (err: any, result: any) {\n            if (err) {\n              resolve({ error: { message: err.message } });\n            } else if (result?.error) {\n              resolve({ error: { message: result.error.message } });\n            } else {\n              resolve({ result: result.result });\n            }\n          }\n        );\n      });\n\n      if (!response[\"result\"]) {\n        throw new Error(response[\"error\"][\"message\"]);\n      }\n\n      return {\n        ecdsaSig: response.result,\n      };\n\n    case GetEcDSASigType.WithoutDataStruct:\n      hash = sigUtil.TypedDataUtils.sign(typedData);\n      hash = fm.toHex(hash);\n\n      // myLog('WithoutDataStruct hash:', hash)\n\n      if (!walletType) {\n        throw Error(\"no walletType set!\");\n      }\n\n      signature = await personalSign(\n        web3,\n        address,\n        pwd,\n        hash,\n        walletType,\n        chainId,\n        counterFactualInfo ? counterFactualInfo.accountId : undefined,\n        counterFactualInfo,\n        IsMobile.any()\n      );\n\n      if (signature?.sig) {\n        return {\n          ecdsaSig: signature.sig,\n          counterFactualInfo: signature.counterFactualInfo,\n        };\n      }\n      throw new Error(signature.error);\n    case GetEcDSASigType.Contract:\n      // TODO:\n      hash = sigUtil.TypedDataUtils.sign(typedData);\n      hash = fm.toHex(hash);\n      myLog(\"Contract Contract hash\", hash);\n\n      signEip712Result = await signEip712WalletConnect(\n        web3,\n        address as string,\n        msgParams\n      );\n\n      if (signEip712Result.error) {\n        throw Error(\"Contract sig error\");\n      }\n\n      return {\n        ecdsaSig: signEip712Result,\n      };\n    default:\n      break;\n  }\n  throw Error(\"getEcDSASig unsupported switch case:\" + type);\n}\n\nexport function convertPublicKey2(pk: PublicKey) {\n  // return new BN(EdDSA.pack(pk.x, pk.y), 16);\n  return new BN(EDDSAUtil.pack(pk.x, pk.y), 16);\n}\n\nexport function convertPublicKey(pk: PublicKey) {\n  const publicKeyX = fm.formatEddsaKey(fm.toHex(fm.toBig(pk.x)));\n  const publicKeyY = fm.formatEddsaKey(fm.toHex(fm.toBig(pk.y)));\n\n  // return new BN(EdDSA.pack(publicKeyX, publicKeyY), 16);\n  return new BN(EDDSAUtil.pack(publicKeyX, publicKeyY), 16);\n}\n\nexport function getUpdateAccountEcdsaTypedData(\n  data: UpdateAccountRequestV3,\n  chainId: ChainId\n) {\n  const message: any = {\n    owner: data.owner,\n    accountID: data.accountId,\n    feeTokenID: data.maxFee.tokenId,\n    maxFee: data.maxFee.volume,\n    publicKey: fm.addHexPrefix(convertPublicKey2(data.publicKey).toString(16)),\n    validUntil: data.validUntil,\n    nonce: data.nonce,\n  };\n\n  const typedData: EIP712TypedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      AccountUpdate: [\n        { name: \"owner\", type: \"address\" },\n        { name: \"accountID\", type: \"uint32\" },\n        { name: \"feeTokenID\", type: \"uint16\" },\n        { name: \"maxFee\", type: \"uint96\" },\n        { name: \"publicKey\", type: \"uint256\" },\n        { name: \"validUntil\", type: \"uint32\" },\n        { name: \"nonce\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"AccountUpdate\",\n    domain: {\n      name: \"Loopring Protocol\",\n      version: \"3.6.0\",\n      chainId,\n      verifyingContract: data.exchange,\n    },\n    message: message,\n  };\n\n  return typedData;\n}\n\nexport async function signUpdateAccountWithDataStructure(\n  web3: Web3,\n  bodyParams: UpdateAccountRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getUpdateAccountEcdsaTypedData(bodyParams, chainId);\n  // myLog('typedData:', typedData)\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    bodyParams.owner,\n    GetEcDSASigType.HasDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signUpdateAccountWithoutDataStructure(\n  web3: Web3,\n  bodyParams: UpdateAccountRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData: any = getUpdateAccountEcdsaTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    bodyParams.owner,\n    GetEcDSASigType.WithoutDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    walletType,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signUpdateAccountWithDataStructureForContract(\n  web3: Web3,\n  bodyParams: UpdateAccountRequestV3,\n  chainId: ChainId,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getUpdateAccountEcdsaTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    bodyParams.owner,\n    GetEcDSASigType.Contract,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\n// withdraw\nexport function get_EddsaSig_OffChainWithdraw(\n  request: OffChainWithdrawalRequestV3,\n  eddsaKey: string\n) {\n  const onchainDataHash = abi\n    .soliditySHA3(\n      [\"uint256\", \"address\", \"bytes\"],\n      [\n        request.minGas,\n        new BN(fm.clearHexPrefix(request.to), 16),\n        ethUtil.toBuffer(request.extraData),\n      ]\n    )\n    .slice(0, 20);\n\n  const orderHashStr = fm.addHexPrefix(onchainDataHash.toString(\"hex\"));\n\n  const inputs = [\n    new BN(ethUtil.toBuffer(request.exchange)).toString(),\n    request.accountId,\n    request.token.tokenId,\n    request.token.volume,\n    request.maxFee.tokenId,\n    request.maxFee.volume,\n    orderHashStr,\n    request.validUntil,\n    request.storageId,\n  ];\n\n  return getEdDSASigWithPoseidon(inputs, eddsaKey);\n}\n\nexport function getOrderHash(request: SubmitOrderRequestV3) {\n  const p = field.SNARK_SCALAR_FIELD;\n  const poseidonParams = new PoseidonParams(\n    p,\n    12,\n    6,\n    53,\n    \"poseidon\",\n    BigNumber.from(5),\n    null,\n    null,\n    128\n  );\n\n  const inputs = [\n    new BN(ethUtil.toBuffer(request.exchange)).toString(),\n    request.storageId,\n    request.accountId,\n    request.sellToken.tokenId,\n    request.buyToken.tokenId,\n    request.sellToken.volume,\n    request.buyToken.volume,\n    request.validUntil,\n    request.maxFeeBips,\n    request.fillAmountBOrS ? 1 : 0,\n    new BN(ethUtil.toBuffer(request.taker)).toString(),\n  ];\n  let bigIntInputs: any;\n  bigIntInputs = [];\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i];\n    bigIntInputs.push(BigNumber.from(input));\n  }\n  const hash = permunation.poseidon(bigIntInputs, poseidonParams);\n  let hashInHex = hash.toHexString();\n  return hashInHex;\n}\n\nexport function getWithdrawTypedData(\n  data: OffChainWithdrawalRequestV3,\n  chainId: ChainId\n): EIP712TypedData {\n  const message = {\n    owner: data.owner,\n    accountID: data.accountId,\n    tokenID: data.token.tokenId,\n    amount: data.token.volume,\n    feeTokenID: data.maxFee.tokenId,\n    maxFee: data.maxFee.volume,\n    to: data.to,\n    extraData: data.extraData ? data.extraData : \"\",\n    minGas: data.minGas,\n    validUntil: data.validUntil,\n    storageID: data.storageId,\n  };\n\n  const typedData: EIP712TypedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      Withdrawal: [\n        { name: \"owner\", type: \"address\" },\n        { name: \"accountID\", type: \"uint32\" },\n        { name: \"tokenID\", type: \"uint16\" },\n        { name: \"amount\", type: \"uint96\" },\n        { name: \"feeTokenID\", type: \"uint16\" },\n        { name: \"maxFee\", type: \"uint96\" },\n        { name: \"to\", type: \"address\" },\n        { name: \"extraData\", type: \"bytes\" },\n        { name: \"minGas\", type: \"uint256\" },\n        { name: \"validUntil\", type: \"uint32\" },\n        { name: \"storageID\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"Withdrawal\",\n    domain: {\n      name: \"Loopring Protocol\",\n      version: \"3.6.0\",\n      chainId: chainId,\n      verifyingContract: data.exchange,\n    },\n    message: message,\n  };\n  return typedData;\n}\n\nexport async function signOffchainWithdrawWithDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: OffChainWithdrawalRequestV3,\n  chainId: ChainId,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getWithdrawTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.HasDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signOffchainWithdrawWithoutDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: OffChainWithdrawalRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData: any = getWithdrawTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.WithoutDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    walletType,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signOffchainWithdrawWithDataStructureForContract(\n  web3: Web3,\n  owner: string,\n  bodyParams: OffChainWithdrawalRequestV3,\n  chainId: ChainId,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getWithdrawTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.Contract,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\n//NFT Withdraw\nexport function get_EddsaSig_NFT_Withdraw(\n  request: NFTWithdrawRequestV3,\n  eddsaKey: string\n) {\n  const onchainDataHash = abi\n    .soliditySHA3(\n      [\"uint256\", \"address\", \"bytes\"],\n      [\n        request.minGas,\n        new BN(fm.clearHexPrefix(request.to), 16),\n        ethUtil.toBuffer(request.extraData),\n      ]\n    )\n    .slice(0, 20);\n\n  const orderHashStr = fm.addHexPrefix(onchainDataHash.toString(\"hex\"));\n\n  const inputs = [\n    new BN(ethUtil.toBuffer(request.exchange)).toString(),\n    request.accountId,\n    request.token.tokenId,\n    request.token.amount,\n    request.maxFee.tokenId,\n    request.maxFee.amount,\n    orderHashStr,\n    request.validUntil,\n    request.storageId,\n  ];\n\n  return getEdDSASigWithPoseidon(inputs, eddsaKey);\n}\n\nexport function getNftData(request: NFTMintRequestV3) {\n  const p = field.SNARK_SCALAR_FIELD;\n  const poseidonParams = new PoseidonParams(\n    p,\n    7,\n    6,\n    52,\n    \"poseidon\",\n    BigNumber.from(5),\n    null,\n    null,\n    128\n  );\n  const idNo0x = fm.clearHexPrefix(request.nftId);\n  let nftIdLo, nftIdHi;\n  if (idNo0x.length > 32) {\n    nftIdLo = new BN(idNo0x.substr(idNo0x.length - 32, 32), 16).toString(10);\n    nftIdHi = new BN(idNo0x.substr(0, idNo0x.length - 32), 16).toString(10);\n  } else {\n    nftIdLo = new BN(idNo0x.substr(0, idNo0x.length), 16).toString(10);\n    nftIdHi = 0;\n  }\n  myLog(\"nftIdLo\", nftIdLo, \"nftIdHi\", nftIdHi);\n\n  const inputs = [\n    request.minterAddress,\n    request.nftType,\n    request.tokenAddress,\n    nftIdLo,\n    nftIdHi,\n    request.royaltyPercentage,\n  ];\n\n  let bigIntInputs: any;\n  bigIntInputs = [];\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i];\n    bigIntInputs.push(BigNumber.from(input));\n  }\n  const hash = permunation.poseidon(bigIntInputs, poseidonParams);\n  // myLog(\"get hasher *16 hash:\", hash);\n  return hash;\n}\n\nexport function getNFTMintTypedData(\n  data: NFTMintRequestV3,\n  chainId: ChainId,\n  web3: Web3\n): EIP712TypedData {\n  let nftId = data.nftId;\n  if (data.nftId.startsWith(\"0x\")) {\n    nftId = web3.utils.hexToNumberString(data.nftId);\n  }\n  const message = {\n    minterAddress: data.minterAddress,\n    toAccountId: data.toAccountId,\n    nftType: data.nftType.toString(),\n    amount: data.amount,\n    nftId: nftId,\n    nftAddress: data.tokenAddress,\n    feeTokenID: data.maxFee.tokenId,\n    maxFee: data.maxFee.amount,\n    validUntil: data.validUntil,\n    storageID: data.storageId,\n  };\n\n  const typedData: EIP712TypedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      Mint: [\n        { name: \"minterAddress\", type: \"address\" },\n        { name: \"toAccountId\", type: \"uint32\" },\n        { name: \"nftType\", type: \"string\" },\n        { name: \"amount\", type: \"uint96\" },\n        { name: \"nftId\", type: \"uint256\" },\n        { name: \"nftAddress\", type: \"address\" },\n        { name: \"feeTokenID\", type: \"uint16\" },\n        { name: \"maxFee\", type: \"uint96\" },\n        { name: \"validUntil\", type: \"uint32\" },\n        { name: \"storageID\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"Mint\",\n    domain: {\n      name: \"Loopring Protocol\",\n      version: \"3.6.0\",\n      chainId: chainId,\n      verifyingContract: data.exchange,\n    },\n    message: message,\n  };\n  return typedData;\n}\n\nexport function getNFTWithdrawTypedData(\n  data: NFTWithdrawRequestV3,\n  chainId: ChainId\n): EIP712TypedData {\n  const message = {\n    owner: data.owner,\n    accountID: data.accountId,\n    tokenID: data.token.tokenId,\n    amount: data.token.amount,\n    feeTokenID: data.maxFee.tokenId,\n    maxFee: data.maxFee.amount,\n    to: data.to,\n    extraData: data.extraData ? data.extraData : \"\",\n    minGas: data.minGas,\n    validUntil: data.validUntil,\n    storageID: data.storageId,\n  };\n\n  const typedData: EIP712TypedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      Withdrawal: [\n        { name: \"owner\", type: \"address\" },\n        { name: \"accountID\", type: \"uint32\" },\n        { name: \"tokenID\", type: \"uint16\" },\n        { name: \"amount\", type: \"uint96\" },\n        { name: \"feeTokenID\", type: \"uint16\" },\n        { name: \"maxFee\", type: \"uint96\" },\n        { name: \"to\", type: \"address\" },\n        { name: \"extraData\", type: \"bytes\" },\n        { name: \"minGas\", type: \"uint256\" },\n        { name: \"validUntil\", type: \"uint32\" },\n        { name: \"storageID\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"Withdrawal\",\n    domain: {\n      name: \"Loopring Protocol\",\n      version: \"3.6.0\",\n      chainId: chainId,\n      verifyingContract: data.exchange,\n    },\n    message: message,\n  };\n  return typedData;\n}\n\nexport async function signNFTWithdrawWithDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: NFTWithdrawRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getNFTWithdrawTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.HasDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signNFTWithdrawWithoutDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: NFTWithdrawRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData: any = getNFTWithdrawTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.WithoutDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    walletType,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signNFTWithdrawWithDataStructureForContract(\n  web3: Web3,\n  owner: string,\n  bodyParams: NFTWithdrawRequestV3,\n  chainId: ChainId,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getNFTWithdrawTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.Contract,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\n//NFT Mint\nexport function get_EddsaSig_NFT_Mint(\n  request: NFTMintRequestV3,\n  eddsaKey: string\n) {\n  const inputs = [\n    new BN(ethUtil.toBuffer(request.exchange)).toString(),\n    request.minterId,\n    request.toAccountId,\n    getNftData(request),\n    request.amount,\n    request.maxFee.tokenId,\n    request.maxFee.amount,\n    request.validUntil,\n    request.storageId,\n  ];\n  return getEdDSASigWithPoseidon(inputs, eddsaKey);\n}\n\nexport function get_Is_Nft_Token(tokenId: number) {\n  return tokenId >= MIN_NFT_TOKENID;\n}\n\n// NFT Order\nexport function get_EddsaSig_NFT_Order(\n  request: NFTOrderRequestV3,\n  eddsaKey: string\n) {\n  let fillAmountBOrS = 0;\n  if (request.fillAmountBOrS) {\n    fillAmountBOrS = 1;\n  }\n  const inputs = [\n    new BN(ethUtil.toBuffer(request.exchange)).toString(),\n    request.storageId,\n    request.accountId,\n    request.sellToken?.tokenId ? request.sellToken.tokenId : \"\",\n    (request.buyToken as any)?.nftData\n      ? (request.buyToken as NFTTokenAmountInfo).nftData\n      : request.buyToken.tokenId,\n    request.sellToken?.amount ? request.sellToken.amount : 0,\n    request.buyToken?.amount ? request.buyToken.amount : 0,\n    request.validUntil,\n    request.maxFeeBips,\n    fillAmountBOrS,\n    new BN(ethUtil.toBuffer(request.taker)).toString(),\n  ];\n  return getEdDSASigWithPoseidon(inputs, eddsaKey);\n}\n\nexport function get_EddsaSig_Dual_Order(\n  request: DualOrderRequest,\n  eddsaKey: string\n) {\n  const inputs = [\n    new BN(ethUtil.toBuffer(request.exchange)).toString(),\n    request.storageId,\n    request.accountId,\n    request.sellToken.tokenId,\n    request.buyToken.tokenId,\n    request.sellToken.volume,\n    request.buyToken.volume,\n    request.validUntil,\n    request.maxFeeBips,\n    request.fillAmountBOrS ? 1 : 0,\n    0,\n  ];\n\n  return getEdDSASigWithPoseidon(inputs, eddsaKey);\n}\n\nexport async function signNFTMintWithDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: NFTMintRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getNFTMintTypedData(bodyParams, chainId, web3);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.HasDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signNFTMintWithoutDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: NFTMintRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData: any = getNFTMintTypedData(bodyParams, chainId, web3);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.WithoutDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    walletType,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signNFTMintWithDataStructureForContract(\n  web3: Web3,\n  owner: string,\n  bodyParams: NFTMintRequestV3,\n  chainId: ChainId,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getNFTMintTypedData(bodyParams, chainId, web3);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.Contract,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\n// transfer\nexport function get_EddsaSig_Transfer(\n  request: OriginTransferRequestV3,\n  eddsaKey: string\n) {\n  const inputs = [\n    new BN(ethUtil.toBuffer(request.exchange)).toString(),\n    request.payerId,\n    request.payeeId,\n    request.token.tokenId,\n    request.token.volume,\n    request.maxFee.tokenId,\n    request.maxFee.volume,\n    new BN(ethUtil.toBuffer(request.payeeAddr)).toString(),\n    0,\n    0,\n    request.validUntil,\n    request.storageId,\n  ];\n  return getEdDSASigWithPoseidon(inputs, eddsaKey);\n}\nexport function getTransferOldTypedData(\n  data: OriginTransferRequestV3,\n  chainId: ChainId\n): EIP712TypedData {\n  const message = {\n    from: data.payerAddr,\n    to: data.payeeAddr,\n    tokenID: data.token.tokenId,\n    amount: data.token.volume,\n    feeTokenID: data.maxFee.tokenId,\n    maxFee: data.maxFee.volume,\n    validUntil: data.validUntil,\n    storageID: data.storageId,\n  };\n  const typedData: EIP712TypedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      Transfer: [\n        { name: \"from\", type: \"address\" },\n        { name: \"to\", type: \"address\" },\n        { name: \"tokenID\", type: \"uint16\" },\n        { name: \"amount\", type: \"uint96\" },\n        { name: \"feeTokenID\", type: \"uint16\" },\n        { name: \"maxFee\", type: \"uint96\" },\n        { name: \"validUntil\", type: \"uint32\" },\n        { name: \"storageID\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"Transfer\",\n    domain: {\n      name: \"Loopring Protocol\",\n      version: \"3.6.0\",\n      chainId: chainId,\n      verifyingContract: data.exchange,\n    },\n    message: message,\n  };\n  return typedData;\n}\n\nexport function getTransferTypedData(\n  data: OriginTransferRequestV3,\n  chainId: ChainId\n): EIP712TypedData {\n  const message = {\n    from: data.payerAddr,\n    to: data.payeeAddr,\n    tokenID: data.token.tokenId,\n    amount: data.token.volume,\n    feeTokenID: data.maxFee.tokenId,\n    maxFee: data.maxFee.volume,\n    validUntil: data.validUntil,\n    storageID: data.storageId,\n  };\n  const typedData: EIP712TypedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      Transfer: [\n        { name: \"from\", type: \"address\" },\n        { name: \"to\", type: \"address\" },\n        { name: \"tokenID\", type: \"uint16\" },\n        { name: \"amount\", type: \"uint96\" },\n        { name: \"feeTokenID\", type: \"uint16\" },\n        { name: \"maxFee\", type: \"uint96\" },\n        { name: \"validUntil\", type: \"uint32\" },\n        { name: \"storageID\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"Transfer\",\n    domain: {\n      name: \"Loopring Protocol\",\n      version: \"3.6.0\",\n      chainId: chainId,\n      verifyingContract: data.exchange,\n    },\n    message: message,\n  };\n  return typedData;\n}\n\nexport async function signTransferWithDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: OriginTransferRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getTransferTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.HasDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signTransferWithoutDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: OriginTransferRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData: any = getTransferTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.WithoutDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    walletType,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signTransferWithDataStructureForContract(\n  web3: Web3,\n  owner: string,\n  bodyParams: OriginTransferRequestV3,\n  chainId: ChainId,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getTransferTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.Contract,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport function get_EddsaSig_NFT_Transfer(\n  request: OriginNFTTransferRequestV3,\n  eddsaKey: string\n) {\n  const inputs = [\n    new BN(ethUtil.toBuffer(request.exchange)).toString(),\n    request.fromAccountId,\n    request.toAccountId,\n    request.token.tokenId,\n    request.token.amount,\n    request.maxFee.tokenId,\n    request.maxFee.amount,\n    new BN(ethUtil.toBuffer(request.toAddress)).toString(),\n    0,\n    0,\n    request.validUntil,\n    request.storageId,\n  ];\n  return getEdDSASigWithPoseidon(inputs, eddsaKey);\n}\n\nexport function getNftTradeHash(request: NFTTradeRequestV3) {\n  const p = field.SNARK_SCALAR_FIELD;\n  const poseidonParams = new PoseidonParams(\n    p,\n    7,\n    6,\n    52,\n    \"poseidon\",\n    BigNumber.from(5),\n    null,\n    null,\n    128\n  );\n\n  const inputs = [\n    request.taker.accountId,\n    request.taker.sellToken.tokenId,\n    request.taker.storageId,\n    request.maker.accountId,\n    request.maker.sellToken.tokenId,\n    request.maker.storageId,\n  ];\n  let bigIntInputs: any;\n  bigIntInputs = [];\n  for (let i = 0; i < inputs.length; i++) {\n    const input = inputs[i];\n    bigIntInputs.push(BigNumber.from(input));\n  }\n  const hash = permunation.poseidon(bigIntInputs, poseidonParams);\n  let hashInHex = hash.toHexString();\n  return hashInHex;\n}\n\nexport function getNFTTransferTypedData(\n  data: OriginNFTTransferRequestV3,\n  chainId: ChainId\n): EIP712TypedData {\n  const message = {\n    from: data.fromAddress,\n    to: data.toAddress,\n    tokenID: data.token.tokenId,\n    amount: data.token.amount,\n    feeTokenID: data.maxFee.tokenId,\n    maxFee: data.maxFee.amount,\n    validUntil: data.validUntil,\n    storageID: data.storageId,\n  };\n  const typedData: EIP712TypedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      Transfer: [\n        { name: \"from\", type: \"address\" },\n        { name: \"to\", type: \"address\" },\n        { name: \"tokenID\", type: \"uint16\" },\n        { name: \"amount\", type: \"uint96\" },\n        { name: \"feeTokenID\", type: \"uint16\" },\n        { name: \"maxFee\", type: \"uint96\" },\n        { name: \"validUntil\", type: \"uint32\" },\n        { name: \"storageID\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"Transfer\",\n    domain: {\n      name: \"Loopring Protocol\",\n      version: \"3.6.0\",\n      chainId: chainId,\n      verifyingContract: data.exchange,\n    },\n    message: message,\n  };\n  return typedData;\n}\n\nexport async function signTNFTransferWithDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: OriginNFTTransferRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getNFTTransferTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.HasDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport async function signNFTTransferWithoutDataStructure(\n  web3: Web3,\n  owner: string,\n  bodyParams: OriginNFTTransferRequestV3,\n  chainId: ChainId,\n  walletType: ConnectorNames,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData: any = getNFTTransferTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.WithoutDataStruct,\n    chainId,\n    accountId,\n    \"\",\n    walletType,\n    counterFactualInfo\n  );\n  return result;\n}\n\n// export async function signNFTTransferWithoutDataStructure(web3: Web3, owner: string, bodyParams: OriginTransferRequestV3,\n//                                                        chainId: ChainId, walletType: ConnectorNames) {\n//   const typedData: any = getTransferTypedData(bodyParams, chainId)\n//   const result = await getEcDSASig(web3, typedData, owner, GetEcDSASigType.WithoutDataStruct, '', walletType)\n//   return result\n// }\n\nexport async function signNFTTransferWithDataStructureForContract(\n  web3: Web3,\n  owner: string,\n  bodyParams: OriginNFTTransferRequestV3,\n  chainId: ChainId,\n  accountId: number,\n  counterFactualInfo?: CounterFactualInfo\n) {\n  const typedData = getNFTTransferTypedData(bodyParams, chainId);\n  const result = await getEcDSASig(\n    web3,\n    typedData,\n    owner,\n    GetEcDSASigType.Contract,\n    chainId,\n    accountId,\n    \"\",\n    ConnectorNames.Unknown,\n    counterFactualInfo\n  );\n  return result;\n}\n\nexport function eddsaSign(typedData: any, eddsaKey: string) {\n  const hash = fm.toHex(sigUtil.TypedDataUtils.sign(typedData));\n  myLog(\"eddsaSign\", hash);\n  const sigHash = fm.toHex(new BigInteger(hash, 16).idiv(8));\n  const signature = EDDSAUtil.sign(eddsaKey, sigHash);\n  return {\n    eddsaSig:\n      fm.formatEddsaKey(fm.toHex(fm.toBig(signature.Rx))) +\n      fm.clearHexPrefix(fm.formatEddsaKey(fm.toHex(fm.toBig(signature.Ry)))) +\n      fm.clearHexPrefix(fm.formatEddsaKey(fm.toHex(fm.toBig(signature.s)))),\n  };\n}\n\nexport function eddsaSignWithDomain(\n  domainHax: string,\n  primaryType: string,\n  message: EIP712Message,\n  types: EIP712Types,\n  eddsaKey: string\n) {\n  const parts = [Buffer.from(\"1901\", \"hex\")];\n  parts.push(Buffer.from(domainHax.slice(2), \"hex\"));\n  parts.push(sigUtil.TypedDataUtils.hashStruct(primaryType, message, types));\n  const hash = fm.toHex(ethUtil.sha3(Buffer.concat(parts)));\n  const sigHash = fm.toHex(new BigInteger(hash, 16).idiv(8));\n  const signature = EDDSAUtil.sign(eddsaKey, sigHash);\n  return {\n    eddsaSig:\n      fm.formatEddsaKey(fm.toHex(fm.toBig(signature.Rx))) +\n      fm.clearHexPrefix(fm.formatEddsaKey(fm.toHex(fm.toBig(signature.Ry)))) +\n      fm.clearHexPrefix(fm.formatEddsaKey(fm.toHex(fm.toBig(signature.s)))),\n  };\n}\n\nexport function getAmmJoinEcdsaTypedData(\n  data: JoinAmmPoolRequest,\n  patch: AmmPoolRequestPatch\n) {\n  const message = {\n    owner: data.owner,\n    joinAmounts: [\n      data.joinTokens.pooled[0].volume,\n      data.joinTokens.pooled[1].volume,\n    ],\n    joinStorageIDs: data.storageIds,\n    mintMinAmount: data.joinTokens.minimumLp.volume,\n    fee: data.fee,\n    validUntil: data.validUntil,\n  };\n\n  // myLog('message:', message)\n  const typedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      PoolJoin: [\n        { name: \"owner\", type: \"address\" },\n        { name: \"joinAmounts\", type: \"uint96[]\" },\n        { name: \"joinStorageIDs\", type: \"uint32[]\" },\n        { name: \"mintMinAmount\", type: \"uint96\" },\n        { name: \"fee\", type: \"uint96\" },\n        { name: \"validUntil\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"PoolJoin\",\n    domain: {\n      name: patch.ammName,\n      version: \"1.0.0\",\n      chainId: patch.chainId,\n      verifyingContract: patch.poolAddress,\n    },\n    message: message,\n  };\n  return typedData;\n}\n\n// ammpool join\nexport function get_EddsaSig_JoinAmmPool(\n  data: JoinAmmPoolRequest,\n  patch: AmmPoolRequestPatch\n) {\n  if (data.domainSeparator) {\n    const typedData = getAmmJoinEcdsaTypedData(data, patch);\n    return eddsaSignWithDomain(\n      data.domainSeparator,\n      typedData.primaryType,\n      typedData.message,\n      typedData.types,\n      patch.eddsaKey\n    );\n  } else {\n    const typedData = getAmmJoinEcdsaTypedData(data, patch);\n    return eddsaSign(typedData, patch.eddsaKey);\n  }\n}\n\nexport function getAmmExitEcdsaTypedData(\n  data: ExitAmmPoolRequest,\n  patch: AmmPoolRequestPatch\n) {\n  const message: any = {\n    owner: data.owner,\n    burnAmount: data.exitTokens.burned.volume,\n    burnStorageID: data.storageId,\n    exitMinAmounts: [\n      data.exitTokens.unPooled[0].volume,\n      data.exitTokens.unPooled[1].volume,\n    ],\n    fee: data.maxFee,\n    validUntil: data.validUntil,\n  };\n  const typedData: EIP712TypedData = {\n    types: {\n      EIP712Domain: [\n        { name: \"name\", type: \"string\" },\n        { name: \"version\", type: \"string\" },\n        { name: \"chainId\", type: \"uint256\" },\n        { name: \"verifyingContract\", type: \"address\" },\n      ],\n      PoolExit: [\n        { name: \"owner\", type: \"address\" },\n        { name: \"burnAmount\", type: \"uint96\" },\n        { name: \"burnStorageID\", type: \"uint32\" },\n        { name: \"exitMinAmounts\", type: \"uint96[]\" },\n        { name: \"fee\", type: \"uint96\" },\n        { name: \"validUntil\", type: \"uint32\" },\n      ],\n    },\n    primaryType: \"PoolExit\",\n    domain: {\n      name: patch.ammName,\n      version: \"1.0.0\",\n      chainId: patch.chainId,\n      verifyingContract: patch.poolAddress,\n    },\n    message: message,\n  };\n  return typedData;\n}\n\n// ammpool exit\nexport function get_EddsaSig_ExitAmmPool(\n  data: ExitAmmPoolRequest,\n  patch: AmmPoolRequestPatch\n) {\n  if (data.domainSeparator) {\n    const typedData = getAmmExitEcdsaTypedData(data, patch);\n    return eddsaSignWithDomain(\n      data.domainSeparator,\n      typedData.primaryType,\n      typedData.message,\n      typedData.types,\n      patch.eddsaKey\n    );\n  } else {\n    const typedData = getAmmExitEcdsaTypedData(data, patch);\n    return eddsaSign(typedData, patch.eddsaKey);\n  }\n}\n\n// export function getDefiEcdsaTypedData(\n//   data: DefiOrderRequest,\n//   patch: DefiRequestPatch\n// ) {\n//   const message: any = {\n//     owner: data.owner,\n//     burnAmount: data.exitTokens.burned.volume,\n//     burnStorageID: data.storageId,\n//     exitMinAmounts: [\n//       data.exitTokens.unPooled[0].volume,\n//       data.exitTokens.unPooled[1].volume,\n//     ],\n//     fee: data.maxFee,\n//     validUntil: data.validUntil,\n//   };\n//\n//   const typedData: EIP712TypedData = {\n//     types: {\n//       EIP712Domain: [\n//         { name: \"name\", type: \"string\" },\n//         { name: \"version\", type: \"string\" },\n//         { name: \"chainId\", type: \"uint256\" },\n//         { name: \"verifyingContract\", type: \"address\" },\n//       ],\n//       DefiOrder: [\n//         { name: \"exchange\", type: \"address\" },\n//         { name: \"storageId\", type: \"uint96\" },\n//         { name: \"accountId\", type: \"uint32\" },\n//         { name: \"sellToken.tokenId\", type: \"uint16\" },\n//         { name: \"buyToken.tokenId\", type: \"uint16\" },\n//         { name: \"sellToken.volume\", type: \"uint96\" },\n//         { name: \"buyToken.volume\", type: \"uint96\" },\n//         { name: \"validUntil\", type: \"uint32\" },\n//         { name: \"maxFeeBips\", type: \"uint32\" },\n//         { name: \"fillAmountBOrS\", type: \"uint32\" },\n//         { nane: \"taker\", type: \"uint32\" },\n//       ],\n//     },\n//     primaryType: \"DefiOrder\",\n//     domain: {\n//       name: patch.ammName,\n//       version: \"1.0.0\",\n//       chainId: patch.chainId,\n//       verifyingContract: patch.poolAddress,\n//     },\n//     message: message,\n//   };\n//   return typedData;\n// }\n// export function get_EddsaSig_Defi(request: DefiOrderRequest, eddsaKey: string) {\n//\n//   myLog('get_EddsaSig_Defi input',inputs)\n//   return getEdDSASigWithPoseidon(inputs, eddsaKey);\n//   // return eddsaSign(typedData, patch.eddsaKey);\n// }\n","export const sortObject = (o: any) =>\n  Object.keys(o)\n    .sort()\n    .reduce((r: any, k) => ((r[k] = o[k]), r), {});\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { ReqParams, ReqOptions } from \"../defs/loopring_defs\";\n\nimport { SIG_FLAG } from \"../defs/loopring_enums\";\n\nimport { getEdDSASig, getEdDSASigWithPoseidon } from \"./sign/sign_tools\";\nimport { sortObject } from \"../utils/obj_tools\";\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n\n  for (const object of objects) {\n    if (object) {\n      const objectTmp = sortObject(object);\n      for (const key in objectTmp) {\n        if (objectTmp[key] != undefined) searchParams.set(key, objectTmp[key]);\n      }\n    }\n  }\n\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded_For_SetReffer = function (value: any) {\n  return JSON.stringify(value, Object.keys(value).sort());\n};\n\nexport const serializeDataIfNeeded = function (value: any) {\n  const nonString = typeof value !== \"string\";\n\n  return nonString\n    ? JSON.stringify(value !== undefined ? sortObject(value) : {})\n    : value || \"\";\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\nexport class Request {\n  private _axios: AxiosInstance;\n\n  private baseOptions: any = {};\n\n  public getIns() {\n    return this._axios;\n  }\n\n  constructor(baseUrl: string, timeout: number) {\n\n    this.baseOptions = {\n      baseURL: baseUrl,\n      timeout: timeout,\n\n      headers: {\n        // 'Accept': '*/*',\n        // 'Accept-Encoding': 'gzip, deflate, br',\n        feeVersion: \"v2\",\n        \"Content-Type\": \"application/json\",\n        pf: \"web\", // tag for recognizing source\n      },\n\n      validateStatus: function (status: any) {\n        if ((status >= 200 && status < 300) || status === 400) {\n          return true;\n        }\n        return false;\n        // return true // always true, handle exception in each bussiness logic\n      },\n\n      insecure: true,\n    };\n\n    this._axios = axios.create(this.baseOptions);\n  }\n\n  public async request(params: ReqParams, options: any = {}) {\n    const localUrl = new URL(params.url, this.baseOptions.baseURL);\n\n    const localVarRequestOptions = { method: params.method, ...options };\n\n    setSearchParams(localUrl, params?.queryParams);\n\n    const urlPathStr = toPathString(localUrl);\n\n    let headers: any = {};\n\n    if (params?.apiKey) {\n      headers[\"X-API-KEY\"] = params?.apiKey;\n    }\n\n    let sig: any = params.sigObj?.sig;\n\n    if (params.sigFlag !== SIG_FLAG.NO_SIG && !params?.sigObj?.dataToSig) {\n      throw Error(\"no dataToSig field!\");\n    }\n\n    switch (params.sigFlag) {\n      case SIG_FLAG.NO_SIG:\n        break;\n      case SIG_FLAG.EDDSA_SIG_POSEIDON:\n        sig = getEdDSASigWithPoseidon(\n          params.sigObj?.dataToSig,\n          params.sigObj?.PrivateKey\n        ).result;\n        break;\n      case SIG_FLAG.EDDSA_SIG:\n        sig = getEdDSASig(\n          params.method,\n          this.baseOptions.baseURL,\n          params.url,\n          params.sigObj?.dataToSig,\n          params.sigObj?.PrivateKey\n        );\n        break;\n      default:\n        break;\n    }\n\n    if (sig) {\n      headers[\"X-API-SIG\"] = sig;\n    } else if (params?.ecdsaSignature) {\n      headers[\"X-API-SIG\"] = params?.ecdsaSignature;\n    } else if (params?.eddsaSignature) {\n      headers[\"X-API-SIG\"] = params?.eddsaSignature;\n    }\n    // myLog('headers[\"X-API-SIG\"]', headers[\"X-API-SIG\"]);\n    if (params?.bodyParams) {\n      const bodyParams = params?.bodyParams;\n      if (sig && params.sigObj?.sigPatch) {\n        bodyParams[params.sigObj?.sigPatch] = sig;\n      }\n\n      if (params?.ecdsaSignature) {\n        bodyParams.ecdsaSignature = params?.ecdsaSignature;\n      }\n\n      if (params?.eddsaSignature) {\n        bodyParams.eddsaSignature = params?.eddsaSignature;\n      }\n\n      localVarRequestOptions.data = serializeDataIfNeeded(bodyParams);\n    }\n\n    headers = { ...this.baseOptions.headers, ...headers };\n\n    const optInOne = {\n      ...this.baseOptions,\n      ...{ headers },\n      ...localVarRequestOptions,\n      url: this.baseOptions.baseURL + urlPathStr,\n    };\n    \n\n    // myLog(optInOne);\n    // myLog(\"headers config\", optInOne);\n    return await this._axios.request(optInOne);\n  }\n\n  public updateOpt(reqOpt: ReqOptions) {\n    this._axios.interceptors.request.use((req: AxiosRequestConfig) => {\n      if (reqOpt?.baseUrl) {\n        req.baseURL = reqOpt?.baseUrl;\n      }\n      if (reqOpt?.url) {\n        req.url = reqOpt?.url;\n      }\n      if (reqOpt?.apiKey) {\n        req.headers[\"X-API-KEY\"] = reqOpt?.apiKey;\n      }\n      if (reqOpt?.signature) {\n        req.headers[\"X-API-SIG\"] = reqOpt?.signature;\n      }\n      return req;\n    });\n    return this;\n  }\n\n  public addApiKey(apiKey: string) {\n    return this.updateOpt({ apiKey });\n  }\n\n  public addSig(signature: string) {\n    return this.updateOpt({ signature });\n  }\n\n  public updateBaseUrl(baseUrl: string) {\n    return this.updateOpt({ baseUrl });\n  }\n\n  public handle400(callback: any = undefined) {\n    this._axios.interceptors.response.use((res: AxiosResponse) => {\n      if (res.status == 400) {\n        // eslint-disable-next-line no-console\n        console.log(res.request + \" got \" + res.statusText);\n      }\n\n      if (callback) {\n        callback();\n      }\n\n      return res;\n    });\n  }\n}\n","import {\n  addHexPrefix,\n  clearHexPrefix,\n  toBuffer,\n  toHex,\n} from \"../../../utils/formatter\";\nimport { methodID, rawDecode, rawEncode } from \"ethereumjs-abi\";\nimport BN from \"bn.js\";\n\nexport default class AbiFunction {\n  constructor({ inputs, name, outputs, constant }) {\n    this.name = name;\n    this.inputTypes = inputs.map(({ type }) => type);\n    this.inputs = inputs;\n    this.outputTypes = outputs.map(({ type }) => type);\n    this.outputs = outputs;\n    this.constant = constant;\n    this.methodAbiHash = toHex(methodID(name, this.inputTypes));\n  }\n\n  /**\n   * @description Returns encoded methodId and inputs\n   * @param inputs Object, examples {owner:'0x000...}\n   * @returns {string}\n   */\n  encodeInputs(inputs) {\n    const abiInputs = this.parseInputs(inputs);\n    return (\n      this.methodAbiHash +\n      clearHexPrefix(toHex(rawEncode(this.inputTypes, abiInputs)))\n    );\n  }\n\n  /**\n   * @description decode ethereum jsonrpc response result\n   * @param outputs\n   * @returns {*}\n   */\n  decodeOutputs(outputs) {\n    return this.parseOutputs(rawDecode(this.outputTypes, toBuffer(outputs)));\n  }\n\n  /**\n   * @description decode encoded inputs\n   * @param encoded\n   * @returns {*}\n   */\n  decodeEncodedInputs(encoded) {\n    return this.parseOutputs(\n      rawDecode(this.inputTypes, toBuffer(addHexPrefix(encoded)))\n    );\n  }\n\n  parseInputs(inputs = {}) {\n    return this.inputs.map(({ name, type }) => {\n      if (inputs[name] === undefined) {\n        throw new Error(`Parameter ${name} of type ${type} is required!`);\n      }\n      return inputs[name];\n    });\n  }\n\n  parseOutputs(outputs) {\n    return outputs.map((output) => {\n      if (output instanceof BN) {\n        return toHex(output);\n      }\n      return output;\n    });\n  }\n}\n","import { methodID } from \"ethereumjs-abi\";\nimport { toHex } from \"../../../utils/formatter\";\nimport AbiFunction from \"./AbiFunction\";\n\nexport default class Contract {\n  constructor(abi) {\n    const funAbi = abi.filter(({ type }) => type === \"function\");\n    this.abiFunctions = funAbi.reduce((acc, item) => {\n      const inputTypes = item.inputs.map(({ type }) => type);\n      const key = `${item.name}(${inputTypes.toString()})`;\n      const methodHash = methodID(item.name, inputTypes);\n      return {\n        ...acc,\n        [item.name]: new AbiFunction(item),\n        [key]: new AbiFunction(item),\n        [methodHash]: new AbiFunction(item),\n      };\n    }, {});\n  }\n\n  /**\n   * @description Encodes inputs data according to  ethereum abi\n   * @param method string can be full method or just method name, examples: 'balanceOf' or balanceOf(address)\n   * @param inputs array\n   * @returns {*|string}\n   */\n  encodeInputs(method, inputs) {\n    const abiFunction = this.abiFunctions[method];\n    if (abiFunction) {\n      return abiFunction.encodeInputs(inputs);\n    } else {\n      throw new Error(`No  ${method} method according to abi `);\n    }\n  }\n\n  /**\n   * @description Decodes outputs\n   * @param method string can be full method or just method name, examples: 'balanceOf' or balanceOf(address)\n   * @param outputs string\n   * @returns {*}\n   */\n  decodeOutputs(method, outputs) {\n    const abiFunction = this.abiFunctions[method];\n    if (abiFunction) {\n      return abiFunction.decodeOutputs(outputs);\n    } else {\n      throw new Error(`No  ${method} method according to abi `);\n    }\n  }\n\n  /**\n   * @description Decode encoded method and inputs\n   * @param encode string | Buffer\n   * @returns {*}\n   */\n  decodeEncodeInputs(encode) {\n    encode = toHex(encode);\n    const methodId = encode.slice(0, 10);\n    const abiFunction = this.abiFunctions[methodId];\n    if (abiFunction) {\n      return abiFunction.decodeEncodedInputs(encode.slice(10));\n    } else {\n      throw new Error(`No corresponding method according to abi `);\n    }\n  }\n}\n","/* eslint-disable */\nimport Contract from \"./Contract\";\n\nconst erc20Abi = require(\"../../config/abis/erc20.json\");\nconst exchange36Abi = require(\"../../config/abis/exchange_3_6.json\");\nconst contractWalletAbi = require(\"../../config/abis/contractWallet.json\");\nconst erc721Abi = require(\"../../config/abis/erc721.json\");\nconst erc1155Abi = require(\"../../config/abis/erc1155.json\");\nconst hebao = require(\"../../config/abis/hebao.json\");\nconst ERC20Token = new Contract(erc20Abi);\nconst ExchangeContract = new Contract(exchange36Abi);\nconst ContractWallet = new Contract(contractWalletAbi);\nconst ERC1155 = new Contract(erc1155Abi);\nconst ERC721 = new Contract(erc721Abi);\nconst HeBao = new Contract(hebao);\n\nexport default {\n  ERC20Token,\n  ERC1155,\n  ERC721,\n  ExchangeContract,\n  ContractWallet,\n  erc721Abi: erc721Abi,\n  erc1155Abi: erc1155Abi,\n  HeBao,\n};\n","import AbiFunction from \"./AbiFunction\";\nimport Contract from \"./Contract\";\nimport Contracts from \"./Contracts\";\n\nexport default {\n  AbiFunction,\n  Contract,\n  Contracts,\n};\n","import {\n  ChainId,\n  ConnectorError,\n  ConnectorNames,\n  CounterFactualInfo,\n  GetAvailableBrokerRequest,\n  GetCounterFactualInfoRequest,\n  LOOPRING_URLs,\n  LoopringErrorCode,\n  ReqMethod,\n  ReqParams,\n  RESULT_INFO,\n  SIG_FLAG,\n  TX_HASH_API,\n} from \"../defs\";\nimport { Request } from \"./request\";\nimport {\n  ecrecover,\n  fromRpcSig,\n  hashPersonalMessage,\n  keccak,\n  keccak256,\n  pubToAddress,\n  toRpcSig,\n} from \"ethereumjs-util\";\nimport { addHexPrefix, toBuffer, toHex } from \"../utils\";\nimport Web3 from \"web3\";\nimport { myLog } from \"../utils/log_tools\";\nimport ABI from \"./ethereum/contracts\";\nimport { AxiosResponse } from \"axios\";\n\nexport const KEY_MESSAGE =\n  \"Sign this message to access Loopring Exchange: \" +\n  \"${exchangeAddress}\" +\n  \" with key nonce: \" +\n  \"${nonce}\";\nexport class BaseAPI {\n  static KEY_MESSAGE: string = KEY_MESSAGE;\n  protected baseUrl = \"\";\n  protected chainId: ChainId = ChainId.MAINNET;\n  public genErr(err: Error | (AxiosResponse & Error)): RESULT_INFO {\n    if (err.hasOwnProperty(\"request\")) {\n      // const axiosError = errorInfo as AxiosResponse;\n      return {\n        // @ts-ignore;\n        message: ConnectorError.HTTP_ERROR,\n        ...err,\n        msg: ConnectorError.HTTP_ERROR,\n        code: LoopringErrorCode.HTTP_ERROR,\n      };\n      err?.message;\n    } else if (!err || !err?.message) {\n      return {\n        message: \"unKnown\",\n        code: LoopringErrorCode.SKD_UNKNOW,\n      };\n    } else {\n      const key = Reflect.ownKeys(ConnectorError).find(\n        (key) =>\n          err?.message.search(\n            ConnectorError[key as keyof typeof ConnectorError]\n          ) !== -1\n      );\n      if (key) {\n        return {\n          ...err,\n          message: key as keyof typeof ConnectorError,\n          code: LoopringErrorCode[key as keyof typeof ConnectorError],\n        };\n      }\n      return {\n        ...(err instanceof Error\n          ? Reflect.ownKeys(err).reduce((prev, item) => {\n              // @ts-ignore\n              return { ...prev, [item]: err[item.toString()] };\n            }, {})\n          : err),\n        code: LoopringErrorCode.SKD_UNKNOW,\n      };\n    }\n  }\n  protected returnTxHash<T extends TX_HASH_API>(\n    raw_data: T\n  ):\n    | (Omit<T, \"resultInfo\"> & { raw_data: Omit<T, \"resultInfo\"> })\n    | RESULT_INFO {\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data.resultInfo,\n        message: raw_data.resultInfo?.msg\n          ? raw_data.resultInfo?.msg\n          : raw_data?.resultInfo.message,\n      };\n    }\n    return {\n      ...raw_data,\n      raw_data,\n    };\n  }\n\n  private timeout: number;\n  private baseUrlMap: { [key: number]: string } | undefined;\n\n  public constructor(\n    param: InitParam,\n    timeout: number = 6000,\n    baseUrlMap = {\n      [ChainId.MAINNET]: \"https://api3.loopring.io\",\n      [ChainId.GOERLI]: \"https://uat2.loopring.io\",\n    }\n  ) {\n    if (param.baseUrl) {\n      this.baseUrl = param.baseUrl;\n    } else if (param.chainId !== undefined) {\n      this.setChainId(param.chainId);\n    } else {\n      this.setChainId(ChainId.GOERLI);\n    }\n    this.baseUrlMap = baseUrlMap;\n    this.timeout = timeout;\n  }\n\n  public async getAvailableBroker(\n    request: GetAvailableBrokerRequest\n  ): Promise<{ broker: string }> {\n    const reqParams: ReqParams = {\n      sigFlag: SIG_FLAG.NO_SIG,\n      queryParams: request,\n      url: LOOPRING_URLs.GET_AVAILABLE_BROKER,\n      method: ReqMethod.GET,\n    };\n    const result = (await this.makeReq().request(reqParams)).data;\n    return result;\n  }\n\n  public async getCounterFactualInfo<T extends any>(\n    request: GetCounterFactualInfoRequest\n  ): Promise<{\n    raw_data: T;\n    counterFactualInfo: CounterFactualInfo | undefined;\n    error?: RESULT_INFO;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.COUNTER_FACTUAL_INFO,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    let counterFactualInfo: CounterFactualInfo | undefined;\n    let error: RESULT_INFO | undefined = undefined;\n\n    if (raw_data && raw_data?.resultInfo) {\n      error = raw_data?.resultInfo;\n    } else {\n      counterFactualInfo = {\n        ...raw_data,\n      } as CounterFactualInfo;\n    }\n\n    return {\n      counterFactualInfo,\n      error,\n      raw_data,\n    };\n  }\n\n  public setChainId(chainId: ChainId) {\n    this.baseUrl =\n      this.baseUrlMap && this.baseUrlMap[0]\n        ? getBaseUrlByChainId(chainId, this.baseUrlMap as any)\n        : getBaseUrlByChainId(chainId);\n    this.chainId = chainId;\n  }\n\n  public setBaseUrl(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  protected makeReq(): Request {\n    return new Request(this.baseUrl, this.timeout);\n  }\n}\n\nexport async function ecRecover(\n  web3: Web3,\n  account: string,\n  msg: string,\n  sig: any\n) {\n  return new Promise((resolve) => {\n    try {\n      web3.eth.personal.ecRecover(\n        msg,\n        sig,\n        function (err: any, address: string) {\n          if (!err && address) {\n            resolve({\n              result: address.toLowerCase() === account.toLowerCase(),\n            });\n          } else {\n            resolve({\n              error: \"ecRecover 1:\" + err + \"or no address:\" + address,\n            });\n            myLog(\"ecRecover error\", err);\n          }\n        }\n      );\n    } catch (err) {\n      myLog(\"ecRecover error\", err);\n      resolve({ error: (\"ecRecover 2:\" + err) as any });\n    }\n  });\n}\n\nexport async function contractWalletValidate32(\n  web3: any,\n  account: string,\n  msg: string,\n  sig: any\n) {\n  return new Promise((resolve) => {\n    const hash = hashPersonalMessage(toBuffer(msg));\n    const data = ABI.Contracts.ContractWallet.encodeInputs(\n      \"isValidSignature(bytes32,bytes)\",\n      {\n        _data: hash,\n        _signature: toBuffer(sig),\n      }\n    );\n\n    web3.eth.call(\n      {\n        to: account, // contract addr\n        data: data,\n      },\n      function (err: any, result: any) {\n        if (!err) {\n          const valid = ABI.Contracts.ContractWallet.decodeOutputs(\n            \"isValidSignature(bytes32,bytes)\",\n            result\n          );\n          resolve({\n            result: toHex(toBuffer(valid[0])) === data.slice(0, 10),\n          });\n        } else resolve({ error: err });\n      }\n    );\n  });\n}\n\nexport async function mykeyWalletValid(\n  web3: any,\n  account: string,\n  msg: string,\n  sig: any\n) {\n  const myKeyContract = \"0xADc92d1fD878580579716d944eF3460E241604b7\";\n  return new Promise((resolve) => {\n    web3.eth.call(\n      {\n        to: myKeyContract,\n        data: ABI.Contracts.ContractWallet.encodeInputs(\"getKeyData\", {\n          _account: account,\n          _index: 3,\n        }),\n      },\n      function (err: any, res: any) {\n        if (!err) {\n          const signature = fromRpcSig(sig);\n          const hash = hashPersonalMessage(keccak256(toBuffer(msg)));\n          const address = addHexPrefix(\n            ABI.Contracts.ContractWallet.decodeOutputs(\"getKeyData\", res)[0]\n          );\n          const recAddress = toHex(\n            pubToAddress(ecrecover(hash, signature.v, signature.r, signature.s))\n          );\n          resolve({\n            result: recAddress.toLowerCase() === address.toLowerCase(),\n          });\n        } else {\n          resolve({ error: err });\n        }\n      }\n    );\n  });\n}\n\nexport async function ecRecover2(\n  account: string,\n  message: string,\n  signature: any\n) {\n  const messageBuffer = Buffer.from(message, \"utf8\");\n\n  // myLog('message:', message)\n  // myLog('signature raw:', signature)\n\n  signature = signature.split(\"x\")[1];\n\n  const parts = [\n    Buffer.from(\n      `\\x19Ethereum Signed Message:\\n${messageBuffer.length}`,\n      \"utf8\"\n    ),\n    messageBuffer,\n  ];\n\n  const totalHash = keccak(Buffer.concat(parts));\n\n  const r = Buffer.from(signature.substring(0, 64), \"hex\");\n  const s = Buffer.from(signature.substring(64, 128), \"hex\");\n\n  const old_v = Number(addHexPrefix(signature.substring(128, 130)));\n\n  let v = old_v;\n\n  if (v <= 1) v += 27;\n\n  const pub = ecrecover(totalHash, v, r, s);\n\n  const recoveredAddress = \"0x\" + pubToAddress(pub).toString(\"hex\");\n\n  if (account.toLowerCase() !== recoveredAddress.toLowerCase()) {\n    myLog(\"v:\", v, \"old_v:\", old_v, \" recoveredAddress:\", recoveredAddress);\n  }\n\n  return new Promise((resolve) =>\n    resolve({\n      result: account.toLowerCase() === recoveredAddress.toLowerCase(),\n    })\n  );\n}\n\nconst getBaseUrlByChainId = (\n  id: ChainId,\n  baseUrlMap = {\n    [ChainId.MAINNET]: \"https://api3.loopring.io\",\n    [ChainId.GOERLI]: \"https://uat2.loopring.io\",\n  }\n) => {\n  let baseUrl = \"\";\n  switch (id) {\n    case ChainId.MAINNET:\n      baseUrl = baseUrlMap[ChainId.MAINNET];\n      break;\n    default:\n      baseUrl = baseUrlMap[ChainId.GOERLI];\n      break;\n  }\n  return baseUrl;\n};\n/**\n * @default chainId 1\n * @default keySeed `Sign this message to access Loopring exchange: ${exchangeAddress} with key nonce: ${nonce}`\n */\nexport interface InitParam {\n  chainId?: ChainId;\n  baseUrl?: string;\n}\n\nexport function formatSig(rpcSig: string) {\n  const sig = fromRpcSig(rpcSig);\n  return toRpcSig(sig.v, sig.r, sig.s);\n}\nexport function recoverSignType(\n  web3: any,\n  account: string,\n  msg: string,\n  sig: string\n) {\n  const ethRecover: any = ecRecover(web3, account, msg, sig);\n\n  if (ethRecover.result) {\n    return \"03\";\n  } else {\n    return \"\";\n  }\n}\n\nexport async function personalSign(\n  web3: any,\n  account: string | undefined,\n  pwd: string,\n  msg: string,\n  walletType: ConnectorNames,\n  chainId: ChainId,\n  accountId?: number,\n  counterFactualInfo?: CounterFactualInfo,\n  isMobile?: boolean\n) {\n  if (!account) {\n    return { error: \"personalSign got no account\" };\n  }\n  return new Promise((resolve) => {\n    try {\n      web3.eth.personal.sign(\n        msg,\n        account,\n        pwd,\n        async function (err: any, result: any) {\n          if (!err) {\n            // LOG: for signature\n            myLog(\n              \"ecRecover before\",\n              \"msg\",\n              msg,\n              \"result\",\n              result,\n              counterFactualInfo\n            );\n            // Valid:1. counter Factual signature Valid\n            if (counterFactualInfo && accountId) {\n              myLog(\"fcWalletValid counterFactualInfo accountId:\");\n              const fcValid = await fcWalletValid(\n                web3,\n                account,\n                msg,\n                result,\n                accountId,\n                chainId,\n                counterFactualInfo\n              );\n              if (fcValid.result) {\n                resolve({\n                  sig: result,\n                  counterFactualInfo: fcValid.counterFactualInfo,\n                });\n                return;\n              }\n            }\n\n            // Valid: 2. webview directory signature Valid\n            if (\n              typeof window !== \"undefined\" &&\n              (window?.ethereum?.isImToken || window?.ethereum?.isMetaMask) &&\n              isMobile &&\n              // Mobile directory connect will sign ConnectorNames as MetaMask only\n              walletType === ConnectorNames.MetaMask\n            ) {\n              const address: string[] = await window.ethereum?.request({\n                method: \"eth_requestAccounts\",\n              });\n              if (\n                address?.find(\n                  (item) => item.toLowerCase() === account.toLowerCase()\n                )\n              ) {\n                return resolve({ sig: result });\n              }\n            }\n\n            // Valid: 3. EOA signature Valid by ecRecover\n            if (\n              web3?.currentProvider?.isWalletLink &&\n              web3?.currentProvider?.isConnected\n            ) {\n              account === web3.currentProvider?.selectedAddress;\n              return resolve({ sig: result });\n            } else {\n              const valid: any = await ecRecover(web3, account, msg, result);\n              myLog(\"ecRecover after\", valid.result);\n              if (valid.result) {\n                return resolve({ sig: result });\n              }\n            }\n\n            // Valid: 5. contractWallet signature Valid `isValidSignature(bytes32,bytes)`\n            const walletValid2: any = await contractWalletValidate32(\n              web3,\n              account,\n              msg,\n              result\n            );\n\n            if (walletValid2.result) {\n              return resolve({ sig: result });\n            }\n\n            // Valid: 6. counter Factual signature Valid when no counterFactualInfo\n            if (accountId) {\n              const fcValid = await fcWalletValid(\n                web3,\n                account,\n                msg,\n                result,\n                accountId,\n                chainId\n              );\n              if (fcValid.result) {\n                return resolve({\n                  sig: result,\n                  counterFactualInfo: fcValid.counterFactualInfo,\n                });\n              }\n            }\n\n            // Valid: 7. myKeyValid Valid again\n            const myKeyValid: any = await mykeyWalletValid(\n              web3,\n              account,\n              msg,\n              result\n            );\n\n            if (myKeyValid.result) {\n              return resolve({ sig: result });\n            }\n\n            // Valid: Error cannot pass personalSign Valid\n            // eslint-disable-next-line no-console\n            console.log(\n              \"web3.eth.personal.sign Valid, valid 5 ways, all failed!\"\n            );\n            return resolve({\n              error: \"web3.eth.personal.sign Valid, valid 5 ways, all failed!\",\n            });\n          } else {\n            return resolve({\n              error: \"personalSign err before Validate:\" + err,\n            });\n          }\n        }\n      );\n    } catch (err) {\n      resolve({ error: err as any });\n    }\n  });\n}\n\nexport async function fcWalletValid(\n  web3: any,\n  account: string,\n  msg: string,\n  result: any,\n  accountId: number,\n  chainId: ChainId,\n  counterFactualInfo?: CounterFactualInfo\n): Promise<{\n  counterFactualInfo?: CounterFactualInfo;\n  error?: any;\n  result?: boolean;\n}> {\n  const api = new BaseAPI({ chainId });\n  if (counterFactualInfo === undefined || !counterFactualInfo.walletOwner) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    counterFactualInfo = (await api.getCounterFactualInfo({ accountId }))\n      .counterFactualInfo;\n  }\n\n  if (counterFactualInfo && counterFactualInfo.walletOwner) {\n    let _result: string;\n    if (result.startsWith(\"0x\")) {\n      _result = result.slice(0, 132);\n    } else {\n      _result = result;\n    }\n    const valid: any = await ecRecover(\n      web3,\n      counterFactualInfo.walletOwner,\n      msg,\n      _result\n    );\n    if (valid.result) {\n      myLog(\"fcWalletValid e:\", result, counterFactualInfo);\n      return { result, counterFactualInfo };\n    } else {\n      return { error: \"valid walletOwner failed\" };\n    }\n  } else {\n    return { error: \"valid walletOwner failed\" };\n  }\n}\n","import { BaseAPI } from \"./base_api\";\n\nimport { ReqParams } from \"../defs/loopring_defs\";\n\nimport { SIG_FLAG, ReqMethod } from \"../defs/loopring_enums\";\n\nimport { LOOPRING_URLs } from \"../defs/url_defs\";\n\nexport class WsAPI extends BaseAPI {\n  /*\n   * Get wsApiKey by access REST path \"/v3/ws/key\"\n   */\n  public async getWsKey() {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_WS_KEY,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const wsKey = raw_data.key;\n    return {\n      wsKey,\n      raw_data,\n    };\n  }\n}\n","/* eslint-disable camelcase  */\n\nimport { BaseAPI } from \"./base_api\";\n\nimport {\n  LOOPRING_URLs,\n  SIG_FLAG,\n  ReqMethod,\n  Side,\n  MarketStatus,\n  VipCatergory,\n  TradingInterval,\n  ReqParams,\n  TokenInfo,\n  MarketTradeInfo,\n  FiatPriceInfo,\n  LoopringMap,\n  GetAccountRequest,\n  GetCandlestickRequest,\n  GetDepthRequest,\n  GetTickerRequest,\n  GetMarketTradesRequest,\n  GetFiatPriceRequest,\n  GetTokenBalancesRequest,\n  GetAllowancesRequest,\n  MarketInfo,\n  ExchangeInfo,\n  TickerData,\n  DepthData,\n  Candlestick,\n  TokenRelatedInfo,\n  ABInfo,\n  GetEthBalancesRequest,\n  GetEthNonceRequest,\n  GetWithdrawalAgentsRequest,\n  GetAccountServicesRequest,\n  VipFeeRateInfoMap,\n  AccountInfo,\n  TokenAddress,\n  SoursURL,\n  SEP,\n  GetALLTokenBalancesRequest,\n  TOKENMAPLIST,\n} from \"../defs\";\n\nimport BigNumber from \"bignumber.js\";\nimport { getBaseQuote, makeMarket, makeMarkets } from \"../utils\";\n\nconst checkAmt = (rawStr: string) => {\n  if (rawStr.trim() === \"\") {\n    return \"0\";\n  }\n  return rawStr;\n};\n\nfunction getFeeMap(feeArr: any[], type = 0) {\n  const feesMap: any = {};\n\n  if (feeArr instanceof Array) {\n    feeArr.forEach((item: any, index: number, array: any) => {\n      let key = \"\";\n      switch (type) {\n        case 1:\n          key = item.type;\n          break;\n        default:\n          key = item.token;\n      }\n      // feesMap[key] = new BigNumber(item.fee)\n      feesMap[key] = item.fee;\n    });\n  }\n\n  return feesMap;\n}\n\nfunction genAB(data: any[], isReverse = false) {\n  const ab_arr: ABInfo[] = [];\n  let amtTotal: BigNumber = new BigNumber(0);\n  let volTotal: BigNumber = new BigNumber(0);\n\n  const ab_prices: number[] = [];\n  const ab_amtTotals: string[] = [];\n  const ab_volTotals: string[] = [];\n\n  const best = 0;\n\n  if (data instanceof Array) {\n    data.forEach((item: any) => {\n      const price = parseFloat(item[0]);\n      const amt = new BigNumber(item[1]); // base amt\n      const vol = new BigNumber(item[2]); // quote vol\n      amtTotal = amtTotal.plus(amt);\n      volTotal = volTotal.plus(vol);\n      ab_arr.push({\n        price: price,\n        amt: amt.toString(),\n        vol: vol.toString(),\n        amtTotal: amtTotal.toString(),\n        volTotal: volTotal.toString(),\n      });\n      ab_prices.push(price);\n      ab_amtTotals.push(amtTotal.toString());\n      ab_volTotals.push(volTotal.toString());\n    });\n  }\n\n  if (isReverse) {\n    ab_arr.reverse();\n    ab_prices.reverse();\n    ab_amtTotals.reverse();\n    ab_volTotals.reverse();\n  }\n\n  return {\n    ab_arr,\n    ab_prices,\n    amtTotal,\n    volTotal,\n    ab_amtTotals,\n    ab_volTotals,\n    best,\n  };\n}\n\nexport function getMidPrice({\n  _asks,\n  askReverse,\n  _bids,\n  bidReverse,\n}: {\n  _asks: any;\n  askReverse?: boolean;\n  _bids: any;\n  bidReverse?: boolean;\n}) {\n  if (askReverse === undefined) {\n    askReverse = false;\n  }\n\n  if (bidReverse === undefined) {\n    bidReverse = true;\n  }\n\n  const bids = genAB(_bids, bidReverse);\n  const asks = genAB(_asks, askReverse);\n\n  const mid_price =\n    (bids.ab_prices[bids.ab_prices.length - 1] + asks.ab_prices[0]) / 2;\n\n  return {\n    bids,\n    asks,\n    mid_price,\n  };\n}\n\nexport class ExchangeAPI extends BaseAPI {\n  /*\n   * Returns the relayer's current time in millisecond\n   */\n  public async getRelayerCurrentTime<R>(): Promise<\n    {\n      raw_data: R;\n    } & R\n  > {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_RELAYER_CURRENT_TIME,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      ...raw_data,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns Protocol Portrait\n   */\n  public async getProtocolPortrait<R>(): Promise<\n    {\n      raw_data: R;\n    } & R\n  > {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_PROTOCOL_PORTRAIT,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      ...raw_data,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns exchange fee info\n   */\n  public async getExchangeFeeInfo<R>(): Promise<{\n    raw_data: R;\n    orderbookTradingFeesStablecoin: VipFeeRateInfoMap;\n    orderbookTradingFees: VipFeeRateInfoMap;\n    ammTradingFees: VipFeeRateInfoMap;\n    otherFees: { [key: string]: string };\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_EXCHANGE_FEEINFO,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      orderbookTradingFeesStablecoin: raw_data[\n        VipCatergory.ORDERBOOK_TRADING_FEES_STABLECOIN\n      ] as VipFeeRateInfoMap,\n      orderbookTradingFees: raw_data[\n        VipCatergory.ORDERBOOK_TRADING_FEES\n      ] as VipFeeRateInfoMap,\n      ammTradingFees: raw_data[\n        VipCatergory.AMM_TRADING_FEES\n      ] as VipFeeRateInfoMap,\n      otherFees: raw_data[VipCatergory.OTHER_FEES] as { [key: string]: string },\n      raw_data,\n    };\n  }\n\n  public async getWithdrawalAgents<R>(\n    request: GetWithdrawalAgentsRequest\n  ): Promise<{\n    raw_data: R;\n    supportTokenMap: { [key: string]: any };\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_WITHDRAWAL_AGENTS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const supportTokenMap: { [key: string]: any } = {};\n\n    if (raw_data && raw_data.length > 0) {\n      raw_data.forEach((item: any) => {\n        if (item.symbol) {\n          supportTokenMap[item.symbol] = item;\n        }\n      });\n    }\n\n    return {\n      supportTokenMap,\n      raw_data,\n    };\n  }\n\n  public async getRecommendedMarkets<R>(): Promise<{\n    raw_data: R;\n    recommended: string[];\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_RECOMENDED_MARKETS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    let recommended = [];\n\n    if (raw_data?.recommended) {\n      if (typeof raw_data.recommended === \"string\") {\n        recommended = raw_data.recommended.split(\",\");\n      } else {\n        recommended = raw_data.recommended;\n      }\n    }\n\n    return {\n      recommended,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns the configurations of all supported markets (trading pairs)\n   */\n  public async getMarkets<R>(url: string = LOOPRING_URLs.GET_MARKETS): Promise<{\n    markets: LoopringMap<MarketInfo>;\n    pairs: LoopringMap<TokenRelatedInfo>;\n    tokenArr: string[];\n    tokenArrStr: string;\n    marketArr: string[];\n    marketArrStr: string;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const { markets, pairs, tokenArr, tokenArrStr, marketArr, marketArrStr } =\n      makeMarkets(raw_data, url);\n\n    return {\n      markets,\n      pairs,\n      tokenArr,\n      tokenArrStr,\n      // tokenArrStr: tokenArr.join(SEP),\n      marketArr,\n      marketArrStr,\n      // marketArrStr: marketArr.join(SEP),\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns the configurations of all supported markets (trading pairs)\n   */\n  public async getMixMarkets<R>(): Promise<{\n    markets: LoopringMap<MarketInfo>;\n    pairs: LoopringMap<TokenRelatedInfo>;\n    tokenArr: string[];\n    tokenArrStr: string;\n    marketArr: string[];\n    marketArrStr: string;\n    raw_data: R;\n  }> {\n    return await this.getMarkets(LOOPRING_URLs.GET_MIX_MARKETS);\n  }\n\n  /*\n   * Returns the configurations of all supported tokens, including Ether.\n   */\n  public async getTokens<R>(): Promise<\n    TOKENMAPLIST & {\n      raw_data: R;\n    }\n  > {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_TOKENS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    // raw_data\n    // const coinMap: LoopringMap<{\n    //   icon?: string;\n    //   name: string;                   makeMarket\n    //   simpleName: string;\n    //   description?: string;\n    //   company: string;\n    // }> = {};\n    // const totalCoinMap: LoopringMap<{\n    //   icon?: string;\n    //   name: string;\n    //   simpleName: string;\n    //   description?: string;\n    //   company: string;\n    // }> = {};\n    // const addressIndex: LoopringMap<TokenAddress> = {};\n    // const idIndex: LoopringMap<string> = {};\n    // const tokensMap: LoopringMap<TokenInfo> = {};\n    // if (raw_data instanceof Array) {\n    //   raw_data.forEach((item: TokenInfo) => {\n    //     if (item.symbol.startsWith(\"LP-\")) {\n    //       item.isLpToken = true;\n    //     } else {\n    //       item.isLpToken = false;\n    //     }\n    //     tokensMap[item.symbol] = item;\n    //\n    //     const coinInfo = {\n    //       icon: SoursURL + `ethereum/assets/${item.address}/logo.png`,\n    //       name: item.symbol,\n    //       simpleName: item.symbol,\n    //       description: item.type,\n    //       company: \"\",\n    //     };\n    //     if (!item.symbol.startsWith(\"LP-\")) {\n    //       coinMap[item.symbol] = coinInfo;\n    //     }\n    //     totalCoinMap[item.symbol] = coinInfo;\n    //     addressIndex[item.address.toLowerCase()] = item.symbol;\n    //     idIndex[item.tokenId] = item.symbol;\n    //   });\n    // }\n    // raw_data: R;\n    return {\n      ...makeMarket(raw_data),\n      // tokensMap,\n      // coinMap,\n      // totalCoinMap,\n      // idIndex,\n      // addressIndex,\n      raw_data,\n    };\n  }\n\n  // private splitTokens(token: string, tokens: LoopringMap<TokenInfo>) {\n  //   let tokenArray: any = [];\n  //   const tokenAddrArr: string[] = [];\n  //\n  //   if (tokens) {\n  //     if (token) {\n  //       tokenArray = token.split(SEP);\n  //     }\n  //\n  //     if (\n  //       tokenArray.length <= 0 ||\n  //       (tokenArray.length === 1 && tokenArray[0] === \"\")\n  //     ) {\n  //       tokenArray = Reflect.ownKeys(tokens);\n  //     }\n  //\n  //     tokenArray.forEach((item: string) => {\n  //       tokenAddrArr.push(tokens[item].address);\n  //     });\n  //\n  //     token = tokenAddrArr.join(SEP);\n  //   }\n  //\n  //   return {\n  //     tokenArray,\n  //     token,\n  //   };\n  // }\n\n  /*\n   * Returns the balances of all supported tokens, including Ether.\n   */\n  public async getEthBalances<R>(request: GetEthBalancesRequest): Promise<{\n    raw_data: R;\n    ethBalance: string;\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_ETH_BALANCES,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const ethBalance = raw_data.amount;\n\n    return {\n      ethBalance,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns the balances of all supported tokens, including Ether.\n   */\n  public async getTokenBalances<R, T = TokenAddress>(\n    request: GetTokenBalancesRequest\n  ): Promise<{\n    tokenBalances: Map<T, string>;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: { ...request, token: request.token.join(SEP) },\n      url: LOOPRING_URLs.GET_TOKEN_BALANCES,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const tokenBalances: Map<T, string> = new Map<T, string>();\n\n    if (raw_data?.amount instanceof Array) {\n      raw_data.amount.forEach((value: any, index: number) => {\n        // tokenBalances[tokenArray[index]] = raw_data.amount[index];\n        tokenBalances.set(request.token[index] as unknown as T, value);\n      });\n    }\n\n    return {\n      tokenBalances,\n      raw_data,\n    };\n  }\n  public async getAllTokenBalances<R, T = TokenAddress>(\n    request: GetALLTokenBalancesRequest\n  ): Promise<{\n    tokenBalances: LoopringMap<string>;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: { ...request },\n      url: LOOPRING_URLs.GET_AKK_TOKEN_BALANCES,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      tokenBalances: raw_data,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns the allowances of all supported tokens\n   */\n  public async getAllowances<R, T = TokenAddress>(\n    request: GetAllowancesRequest\n    // tokens: any\n  ): Promise<{\n    raw_data: R;\n    tokenAllowances: Map<T, string>;\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: {\n        ...request,\n        token: request.token.join(SEP),\n      },\n      url: LOOPRING_URLs.GET_ALLOWANCES,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const tokenAllowances: Map<T, string> = new Map<T, string>();\n\n    if (raw_data?.allowances instanceof Array) {\n      raw_data.allowances.forEach((value: any, index: number) => {\n        tokenAllowances.set(request.token[index] as unknown as T, value);\n      });\n    }\n\n    return {\n      tokenAllowances,\n      raw_data,\n    };\n  }\n\n  /*\n   * Return various configurations of Loopring.io\n   */\n  public async getExchangeInfo<R>(): Promise<{\n    exchangeInfo: ExchangeInfo;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_EXCHANGE_INFO,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const exchangeInfo: ExchangeInfo = {\n      ammExitFees: getFeeMap(raw_data.ammExitFees),\n      chainId: raw_data.chainId,\n      depositAddress: raw_data.depositAddress,\n      exchangeAddress: raw_data.exchangeAddress,\n      fastWithdrawalFees: getFeeMap(raw_data.fastWithdrawalFees),\n      onchainFees: getFeeMap(raw_data.onchainFees, 1),\n      openAccountFees: getFeeMap(raw_data.openAccountFees),\n      transferFees: getFeeMap(raw_data.transferFees),\n      updateFees: getFeeMap(raw_data.updateFees),\n      withdrawalFees: getFeeMap(raw_data.withdrawalFees),\n    };\n\n    return {\n      exchangeInfo,\n      raw_data,\n    };\n  }\n\n  public async getMixDepth<R>(request: GetDepthRequest) {\n    return await this.getDepth<R>(request, LOOPRING_URLs.GET_MIX_DEPTH);\n  }\n\n  /*\n   * Returns the order book of a given trading pair.\n   */\n  public async getDepth<R>(\n    request: GetDepthRequest,\n    url: string = LOOPRING_URLs.GET_DEPTH\n  ): Promise<{\n    depth: DepthData;\n    raw_data: R;\n  }> {\n    if (request?.level === undefined) {\n      request.level = 0;\n    }\n\n    if (request?.limit === undefined) {\n      request.limit = 50;\n    }\n\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const timestamp = raw_data[\"timestamp\"];\n\n    const { asks, bids, mid_price } = getMidPrice({\n      _asks: raw_data[\"asks\"],\n      _bids: raw_data[\"bids\"],\n    });\n\n    const depth: DepthData = {\n      symbol: raw_data.market,\n      version: parseInt(raw_data.version),\n      timestamp,\n      mid_price,\n      bids: bids.ab_arr,\n      bids_prices: bids.ab_prices,\n      bids_amtTotals: bids.ab_amtTotals,\n      bids_volTotals: bids.ab_volTotals,\n      bids_amtTotal: bids.amtTotal.toString(),\n      bids_volTotal: bids.volTotal.toString(),\n      asks: asks.ab_arr,\n      asks_prices: asks.ab_prices,\n      asks_amtTotals: asks.ab_amtTotals,\n      asks_volTotals: asks.ab_volTotals,\n      asks_amtTotal: asks.amtTotal.toString(),\n      asks_volTotal: asks.volTotal.toString(),\n    };\n\n    return {\n      depth,\n      raw_data,\n    };\n  }\n\n  public async getMixTicker<R>(request: GetTickerRequest): Promise<{\n    tickMap: LoopringMap<TickerData>;\n    tickList: TickerData[];\n    raw_data: R;\n  }> {\n    return await this.getTicker<R>(request, LOOPRING_URLs.GET_MIX_TICKER);\n  }\n\n  /*\n   * Gets a markets ticker.\n   * Generally speaking, a ticker in Loopring consists in data from the market taken last 24Hours.\n   */\n  public async getTicker<R>(\n    request: GetTickerRequest,\n    url: string = LOOPRING_URLs.GET_TICKER\n  ): Promise<{\n    tickMap: LoopringMap<TickerData>;\n    tickList: TickerData[];\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const tickers = raw_data.tickers;\n    const tickMap: LoopringMap<TickerData> = {};\n    const tickList: TickerData[] = [];\n\n    if (tickers && tickers.length) {\n      tickers.forEach((item: any, ind: number, arr: any) => {\n        const open = parseFloat(item[4]);\n        const close = parseFloat(item[7]);\n\n        const symbol = item[0].replace(\"COMBINE-\", \"\");\n\n        const { base, quote } = getBaseQuote(symbol);\n\n        let change = 0;\n        if (!isNaN(open) && !isNaN(close)) {\n          change = (close - open) / open;\n        }\n\n        const timestamp = parseInt(item[1]);\n\n        const tick: TickerData = {\n          symbol,\n          base,\n          quote,\n          timestamp,\n          base_token_volume: item[2],\n          quote_token_volume: item[3],\n          open,\n          high: parseFloat(item[5]),\n          low: parseFloat(item[6]),\n          close,\n          count: parseInt(item[8]),\n          bid: parseFloat(item[9]),\n          ask: parseFloat(item[10]),\n          base_fee_amt: checkAmt(item[11]),\n          quote_fee_amt: checkAmt(item[12]),\n          change,\n        };\n\n        tickMap[symbol] = tick;\n        tickList.push(tick);\n      });\n    }\n\n    return {\n      tickMap,\n      tickList,\n      raw_data,\n    };\n  }\n\n  public async getAllMixTickers(markets: string | undefined = undefined) {\n    let request: GetTickerRequest;\n    if (!markets) {\n      const result = await this.getMixMarkets();\n      if (result.marketArrStr) {\n        request = {\n          market: result.marketArrStr,\n        };\n      } else {\n        return result;\n      }\n    } else {\n      request = {\n        market: markets,\n      };\n    }\n\n    return await this.getMixTicker(request);\n  }\n\n  public async getAllTickers(markets: string | undefined = undefined) {\n    let request: GetTickerRequest;\n    if (!markets) {\n      const result = await this.getMarkets();\n      if (result.marketArrStr) {\n        request = {\n          market: result.marketArrStr,\n        };\n      } else {\n        return result;\n      }\n    } else {\n      request = {\n        market: markets,\n      };\n    }\n\n    return await this.getTicker(request);\n  }\n\n  public async getMixCandlestick<R>(request: GetCandlestickRequest) {\n    return await this.getCandlestick<R>(\n      request,\n      LOOPRING_URLs.GET_MIX_CANDLESTICK\n    );\n  }\n\n  /*\n   * Gets candlesticks.\n   */\n  public async getCandlestick<R>(\n    request: GetCandlestickRequest,\n    url: string = LOOPRING_URLs.GET_CANDLESTICK\n  ): Promise<{\n    candlesticks: Candlestick[];\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    let tsStep = 60000;\n\n    switch (request.interval) {\n      case TradingInterval.min1:\n        break;\n      case TradingInterval.min5:\n        tsStep = 300000;\n        break;\n      case TradingInterval.min15:\n        tsStep = 900000;\n        break;\n      case TradingInterval.min30:\n        tsStep = 1800000;\n        break;\n      case TradingInterval.hr1:\n        tsStep = 3600000;\n        break;\n      case TradingInterval.hr2:\n        tsStep = 7200000;\n        break;\n      case TradingInterval.hr4:\n        tsStep = 14400000;\n        break;\n      case TradingInterval.hr12:\n        tsStep = 43200000;\n        break;\n      case TradingInterval.d1:\n        tsStep = 86400000;\n        break;\n      case TradingInterval.w1:\n        tsStep = 604800000;\n        break;\n      default:\n        break;\n    }\n\n    let candlesticks: Candlestick[] = [];\n\n    if (raw_data?.candlesticks instanceof Array) {\n      const rawCandlesticks = raw_data.candlesticks.reverse();\n\n      let lastCandlestick: Candlestick | undefined = undefined;\n      let lastTs = -1;\n\n      rawCandlesticks.forEach((item: any) => {\n        const curTs = parseInt(item[0]);\n\n        if (lastCandlestick === undefined) {\n          lastTs = curTs;\n\n          const candlestick: Candlestick = {\n            timestamp: curTs,\n            txs: parseInt(item[1]),\n            open: parseFloat(item[2]),\n            close: parseFloat(item[3]),\n            high: parseFloat(item[4]),\n            low: parseFloat(item[5]),\n            baseVol: item[6],\n            quoteVol: item[7],\n          };\n\n          lastCandlestick = candlestick;\n\n          candlesticks.push(candlestick);\n        } else {\n          const counter = (curTs - lastTs) / tsStep;\n\n          // myLog('counter:', curTs, lastTs, counter)\n\n          for (let i = 1; i <= counter; i++) {\n            let candlestick: Candlestick;\n\n            if (i === counter) {\n              candlestick = {\n                timestamp: lastTs + i * tsStep,\n                txs: parseInt(item[1]),\n                open: parseFloat(item[2]),\n                close: parseFloat(item[3]),\n                high: parseFloat(item[4]),\n                low: parseFloat(item[5]),\n                baseVol: item[6],\n                quoteVol: item[7],\n              };\n\n              lastTs = curTs;\n              lastCandlestick = candlestick;\n            } else {\n              candlestick = {\n                timestamp: lastTs + i * tsStep,\n                txs: 0,\n                open: lastCandlestick.close,\n                close: lastCandlestick.close,\n                high: lastCandlestick.close,\n                low: lastCandlestick.close,\n                baseVol: \"0\",\n                quoteVol: \"0\",\n              };\n            }\n\n            candlesticks.push(candlestick);\n          }\n        }\n      });\n    }\n\n    candlesticks = candlesticks.reverse();\n\n    return {\n      candlesticks,\n      raw_data,\n    };\n  }\n\n  /*\n   * Fetches, for all the tokens supported by Loopring, their fiat price.\n   */\n  public async getFiatPrice<R>(request: GetFiatPriceRequest) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_FIAT_PRICE,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const fiatPrices: LoopringMap<FiatPriceInfo> = {};\n\n    if (raw_data?.prices instanceof Array) {\n      raw_data.prices.forEach((item: FiatPriceInfo) => {\n        fiatPrices[item.symbol] = item;\n      });\n    }\n\n    return {\n      fiatPrices,\n      raw_data,\n    };\n  }\n\n  /*\n   * Fetches, for all the tokens supported by Loopring, their fiat price.\n   */\n  public async disableWithdrawTokenList<R>(): Promise<{\n    raw_data: R;\n    disableWithdrawTokenList: any[];\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_IGNORE_WITHDRAW,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const disableWithdrawTokenList = [...raw_data];\n    return {\n      disableWithdrawTokenList,\n      raw_data,\n    };\n  }\n\n  /*\n   * Query trades with specified market\n   */\n  public async getMarketTrades<R>(request: GetMarketTradesRequest): Promise<{\n    totalNum: number;\n    marketTrades: MarketTradeInfo[];\n    raw_data: R;\n  }> {\n    if (request.limit === undefined) {\n      request.limit = 20;\n    }\n\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_TRADES,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const marketTrades: MarketTradeInfo[] = [];\n\n    if (raw_data?.trades instanceof Array) {\n      raw_data.trades.forEach((item: any) => {\n        marketTrades.push({\n          tradeTime: parseInt(item[0]),\n          tradeId: item[1],\n          side: item[2] as Side,\n          volume: item[3],\n          price: item[4],\n          market: item[5],\n          fee: item[6],\n          type: item[13],\n        });\n      });\n    }\n\n    return {\n      totalNum: raw_data.totalNum,\n      marketTrades,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns data associated with the user's exchange account.\n   */\n  public async getAccount<R>(request: GetAccountRequest): Promise<{\n    accInfo: AccountInfo;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.ACCOUNT_ACTION,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const accInfo: AccountInfo = raw_data as AccountInfo;\n    return {\n      accInfo,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getEthNonce<R>(\n    request: GetEthNonceRequest\n  ): Promise<{ nonce: number; raw_data: R }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_ETH_NONCE,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      nonce: raw_data?.nonce,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getGasPrice<R>(): Promise<{\n    gasPrice: number;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_GAS_PRICE,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    const gasPrice = raw_data?.price;\n\n    return {\n      gasPrice,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getGasPriceRange<R>(): Promise<{\n    gasPriceRanges: any;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_GAS_PRICE_RANGE,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const gasPriceRanges = raw_data?.ranges;\n\n    return {\n      gasPriceRanges,\n      raw_data,\n    };\n  }\n\n  public async getAccountServices<R>(\n    request: GetAccountServicesRequest\n  ): Promise<{\n    register: any;\n    order: any;\n    joinAmm: any;\n    dAppTrade: any;\n    legal: any;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_ACCOUNT_SERVICES,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      ...raw_data,\n      register: raw_data?.register,\n      order: raw_data?.order,\n      joinAmm: raw_data?.joinAmm,\n      dAppTrade: raw_data?.dAppTrade,\n      legal: raw_data?.dAppTrade,\n      raw_data,\n    };\n  }\n}\n","/* eslint-disable camelcase  */\nimport { BaseAPI } from \"./base_api\";\nimport {\n  AmmPoolActivityRule,\n  AmmPoolBalance,\n  AmmPoolInfoV3,\n  AmmPoolInProgressActivityRule,\n  AmmPoolRequestPatch,\n  AmmPoolSnapshot,\n  AmmPoolStat,\n  AmmPoolTrade,\n  AmmPoolTx,\n  AmmUserReward,\n  AmmUserRewardMap,\n  ExitAmmPoolRequest,\n  ExitAmmPoolResult,\n  GameRankInfo,\n  GetAmmAssetRequest,\n  GetAmmPoolGameRankRequest,\n  GetAmmPoolGameUserRankRequest,\n  GetAmmPoolSnapshotRequest,\n  GetAmmPoolTradesRequest,\n  GetAmmPoolTxsRequest,\n  GetAmmUserRewardsRequest,\n  GetLiquidityMiningRequest,\n  GetLiquidityMiningUserHistoryRequest,\n  GetUserAmmPoolTxsRequest,\n  JoinAmmPoolRequest,\n  JoinAmmPoolResult,\n  LoopringMap,\n  ReqParams,\n  RewardItem,\n  TokenRelatedInfo,\n  TokenVolumeV3,\n  UserAmmPoolTx,\n  UserMiningInfo,\n} from \"../defs\";\n\nimport { AmmPoolActivityStatus, ReqMethod, SIG_FLAG, SortOrder } from \"../defs\";\n\nimport { LOOPRING_URLs } from \"../defs\";\n\nimport * as sign_tools from \"./sign/sign_tools\";\nimport { makeAmmPool } from \"../utils\";\n\nexport class AmmpoolAPI extends BaseAPI {\n  /*\n   * Returns the fee rate of users placing orders in specific markets\n   */\n  public async getAmmPoolConf<R>(): Promise<{\n    raw_data: R;\n    ammpools: LoopringMap<AmmPoolInfoV3>;\n    pairs: LoopringMap<TokenRelatedInfo>;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_AMM_POOLS_CONF,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    const { ammpools, pairs } = makeAmmPool(raw_data);\n    // if (raw_data.code) {\n    //   return {\n    //     ...raw_data,\n    //   };\n    // }\n\n    return {\n      ammpools,\n      pairs,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmPoolUserRewards<R>(\n    request: GetAmmUserRewardsRequest\n  ): Promise<{\n    raw_data: R;\n    ammUserRewardMap: AmmUserRewardMap;\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_AMMPOOL_REWARDS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    const ammUserRewardMap: AmmUserRewardMap = {};\n\n    if (raw_data?.current) {\n      raw_data?.current.forEach((item: AmmUserReward) => {\n        ammUserRewardMap[item.market] = {\n          current: item,\n          lastDay: undefined,\n        };\n      });\n    }\n    if (raw_data?.lastDay) {\n      raw_data?.lastDay.forEach((item: AmmUserReward) => {\n        ammUserRewardMap[item.market] = {\n          ...ammUserRewardMap[item.market],\n          lastDay: item,\n        };\n      });\n    }\n\n    return {\n      ammUserRewardMap,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmPoolGameRank<R>(\n    request: GetAmmPoolGameRankRequest\n  ): Promise<{\n    raw_data: R;\n    totalRewards: TokenVolumeV3[];\n    userRankList: GameRankInfo[];\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_AMMPOOL_GAME_RANK,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const totalRewards: TokenVolumeV3[] = raw_data?.totalRewards\n      ? raw_data.totalRewards\n      : [];\n\n    const userRankList: GameRankInfo[] = raw_data?.userRankList\n      ? raw_data.userRankList\n      : [];\n\n    return {\n      totalRewards,\n      userRankList,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmPoolGameUserRank<R>(\n    request: GetAmmPoolGameUserRankRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    userRank: GameRankInfo;\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      apiKey,\n      url: LOOPRING_URLs.GET_AMMPOOL_GAME_USER_RANK,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n    const userRank: GameRankInfo = raw_data.data;\n\n    return {\n      userRank,\n      raw_data: raw_data.data,\n    };\n  }\n\n  private getOrderList(lst: AmmPoolActivityRule[], order: SortOrder) {\n    return lst.sort((a: AmmPoolActivityRule, b: AmmPoolActivityRule) => {\n      if (order === SortOrder.ASC) {\n        return a.rangeFrom < b.rangeFrom ? 1 : 0;\n      }\n\n      return a.rangeFrom > b.rangeFrom ? 1 : 0;\n    });\n  }\n\n  /*\n   */\n  public async getAmmPoolActivityRules<R>(): Promise<{\n    raw_data: R;\n    activityInProgressRules: LoopringMap<AmmPoolInProgressActivityRule>;\n    activityDateMap: LoopringMap<{\n      AMM_MINING?: LoopringMap<AmmPoolActivityRule>;\n      ORDERBOOK_MINING?: LoopringMap<AmmPoolActivityRule>;\n      SWAP_VOLUME_RANKING?: LoopringMap<AmmPoolActivityRule>;\n    }>;\n    groupByRuleType: LoopringMap<AmmPoolActivityRule[]>;\n    groupByActivityStatus: LoopringMap<AmmPoolActivityRule[]>;\n    groupByRuleTypeAndStatus: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_AMM_ACTIVITY_RULES,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    let activityInProgressRules: LoopringMap<AmmPoolInProgressActivityRule> =\n      {};\n    const activityDateMap: LoopringMap<{\n      AMM_MINING?: LoopringMap<AmmPoolActivityRule>;\n      ORDERBOOK_MINING?: LoopringMap<AmmPoolActivityRule>;\n      SWAP_VOLUME_RANKING?: LoopringMap<AmmPoolActivityRule>;\n    }> = {};\n    //{AMM_MINING:{},ORDERBOOK_MINING:{},SWAP_VOLUME_RANKING:{}}\n\n    const groupByRuleType: LoopringMap<AmmPoolActivityRule[]> = {};\n\n    let groupByRuleTypeAndStatus: LoopringMap<\n      LoopringMap<AmmPoolActivityRule[]>\n    > = {};\n\n    const groupByActivityStatus: LoopringMap<AmmPoolActivityRule[]> = {};\n\n    const currentTs = new Date().getTime();\n\n    if (raw_data instanceof Array) {\n      raw_data.forEach((item: AmmPoolActivityRule) => {\n        const status =\n          currentTs < item.rangeFrom\n            ? AmmPoolActivityStatus.NotStarted\n            : currentTs >= item.rangeFrom && currentTs <= item.rangeTo\n            ? AmmPoolActivityStatus.InProgress\n            : AmmPoolActivityStatus.EndOfGame;\n\n        item.status = status;\n        if (status === AmmPoolActivityStatus.InProgress) {\n          const ruleType = activityInProgressRules[item.market]\n            ? [...activityInProgressRules[item.market].ruleType, item.ruleType]\n            : [item.ruleType];\n          activityInProgressRules = {\n            ...activityInProgressRules,\n            [item.market]: { ...item, ruleType },\n          };\n        }\n        groupByRuleType[item.ruleType] = [\n          ...(groupByRuleType[item.ruleType]\n            ? groupByRuleType[item.ruleType]\n            : []),\n          item,\n        ];\n        groupByActivityStatus[status] = [\n          ...(groupByActivityStatus[status]\n            ? groupByActivityStatus[status]\n            : []),\n          item,\n        ];\n        activityDateMap[item.rangeFrom] = {\n          ...(activityDateMap[item.rangeFrom]\n            ? activityDateMap[item.rangeFrom]\n            : {}),\n          [item.ruleType]: {\n            ...(activityDateMap[item.rangeFrom]\n              ? activityDateMap[item.rangeFrom][item.ruleType]\n                ? activityDateMap[item.rangeFrom][item.ruleType]\n                : {}\n              : {}),\n            [item.market]: item,\n          },\n        };\n        groupByRuleTypeAndStatus = {\n          ...groupByRuleTypeAndStatus,\n          [item.ruleType]: {\n            ...(groupByRuleTypeAndStatus[item.ruleType]\n              ? groupByRuleTypeAndStatus[item.ruleType]\n              : {}),\n            [status]: [\n              ...(groupByRuleTypeAndStatus[item.ruleType]\n                ? groupByRuleTypeAndStatus[item.ruleType][status]\n                  ? groupByRuleTypeAndStatus[item.ruleType][status]\n                  : []\n                : []),\n              item,\n            ],\n          },\n        };\n      });\n    }\n\n    return {\n      activityInProgressRules,\n      activityDateMap,\n      groupByRuleType,\n      groupByActivityStatus,\n      groupByRuleTypeAndStatus,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmAssetHistory<R>(request: GetAmmAssetRequest): Promise<{\n    raw_data: R;\n    poolAddress: string;\n    market: string;\n    dataSeries: any;\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_AMM_ASSET_HISTORY,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const poolAddress = raw_data.poolAddress;\n    const market = raw_data.market;\n    const dataSeries = raw_data.data;\n\n    return {\n      poolAddress,\n      market,\n      dataSeries,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmPoolStats<R>(): Promise<{\n    raw_data: R;\n    ammPoolStats: LoopringMap<AmmPoolStat>;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_AMM_POOL_STATS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n    const ammPoolStats: LoopringMap<AmmPoolStat> = {};\n\n    if (raw_data instanceof Array) {\n      raw_data.forEach((item: AmmPoolStat) => {\n        ammPoolStats[item.market] = item;\n      });\n    }\n\n    return {\n      ammPoolStats,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmPoolSnapshot<R>(\n    request: GetAmmPoolSnapshotRequest\n  ): Promise<{\n    raw_data: R;\n    ammPoolSnapshot: AmmPoolSnapshot;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_AMM_POOLS_SNAPSHOT,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const ammPoolSnapshot: AmmPoolSnapshot = raw_data;\n\n    return {\n      ammPoolSnapshot,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmPoolBalances<R>(): Promise<{\n    raw_data: R;\n    ammpoolsbalances: LoopringMap<AmmPoolBalance>;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_AMM_POOLS_BALANCES,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const ammpoolsbalances: LoopringMap<AmmPoolBalance> = {};\n\n    if (raw_data instanceof Array) {\n      raw_data.forEach((item: any) => {\n        const tempPooled: any = {};\n\n        if (item?.pooled instanceof Array) {\n          item.pooled.forEach((item2: any) => {\n            tempPooled[item2.tokenId] = item2;\n          });\n        }\n\n        item.pooledMap = tempPooled;\n\n        let poolName = item.poolName;\n        if (poolName.indexOf(\"LRCETH\") >= 0) {\n          poolName = \"AMM-LRC-ETH\";\n        }\n\n        ammpoolsbalances[poolName] = item;\n      });\n    }\n\n    return {\n      ammpoolsbalances,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getLiquidityMining<R>(\n    request: GetLiquidityMiningRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    rewards: RewardItem[];\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      apiKey,\n      url: LOOPRING_URLs.GET_LIQUIDITY_MINING,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      rewards: raw_data?.data ? (raw_data.data as RewardItem[]) : [],\n\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getLiquidityMiningUserHistory<R>(\n    request: GetLiquidityMiningUserHistoryRequest\n  ): Promise<{\n    raw_data: R;\n    userMiningInfos: UserMiningInfo[];\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n\n      url: LOOPRING_URLs.GET_LIQUIDITY_MINING_USER_HISTORY,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    return {\n      userMiningInfos: raw_data.data as UserMiningInfo[],\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getUserAmmPoolTxs<R>(\n    request: GetUserAmmPoolTxsRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userAmmPoolTxs: UserAmmPoolTx[];\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      apiKey,\n      url: LOOPRING_URLs.GET_USER_AMM_POOL_TXS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    return {\n      totalNum: raw_data.totalNum,\n      userAmmPoolTxs: raw_data.transactions as UserAmmPoolTx[],\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmPoolTxs<R>(request: GetAmmPoolTxsRequest): Promise<{\n    raw_data: R;\n    totalNum: number;\n    transactions: AmmPoolTx[];\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_AMM_POOL_TXS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    let transactions = undefined;\n\n    if (raw_data?.transactions) {\n      transactions = raw_data?.transactions;\n    }\n\n    return {\n      totalNum: raw_data.totalNum,\n      transactions: transactions as AmmPoolTx[],\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async getAmmPoolTrades<R>(request: GetAmmPoolTradesRequest): Promise<{\n    raw_data: R;\n    totalNum: number;\n    ammPoolTrades: AmmPoolTrade[];\n  }> {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_AMM_POOL_TRADE_TXS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data.totalNum,\n      ammPoolTrades: raw_data.transactions as AmmPoolTrade[],\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async joinAmmPool<R>(\n    request: JoinAmmPoolRequest,\n    patch: AmmPoolRequestPatch,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    joinAmmPoolResult: JoinAmmPoolResult;\n  }> {\n    if (!request?.validUntil) request.validUntil = Date.now();\n\n    const reqParams: ReqParams = {\n      bodyParams: request,\n      apiKey,\n      url: LOOPRING_URLs.POST_JOIN_AMM_POOL,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const { eddsaSig } = sign_tools.get_EddsaSig_JoinAmmPool(request, patch);\n\n    request.eddsaSignature = eddsaSig;\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      joinAmmPoolResult: raw_data as JoinAmmPoolResult,\n      raw_data,\n    };\n  }\n\n  /*\n   */\n  public async exitAmmPool<R>(\n    request: ExitAmmPoolRequest,\n    patch: AmmPoolRequestPatch,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    exitAmmPoolResult: ExitAmmPoolResult;\n  }> {\n    if (!request?.validUntil) request.validUntil = Date.now();\n\n    const reqParams: ReqParams = {\n      bodyParams: request,\n      apiKey,\n      url: LOOPRING_URLs.POST_EXIT_AMM_POOL,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const { eddsaSig } = sign_tools.get_EddsaSig_ExitAmmPool(request, patch);\n\n    request.eddsaSignature = eddsaSig;\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      exitAmmPoolResult: raw_data as ExitAmmPoolResult,\n      raw_data,\n    };\n  }\n}\n","import Web3 from \"web3\";\nimport { Transaction } from \"@ethereumjs/tx\";\n\nimport { ChainId } from \"../defs/web3_defs\";\n\nimport { TokenInfo } from \"../defs/loopring_defs\";\n\nimport * as fm from \"../utils/formatter\";\n\nimport Contracts from \"./ethereum/contracts/Contracts\";\n\nimport { addHexPrefix, toHex, toNumber } from \"../utils/formatter\";\n\nexport enum ERC20Method {\n  Approve = \"approve\",\n  Deposit = \"deposit\",\n  ForceWithdraw = \"forceWithdraw\",\n}\n\nexport const ApproveVal = {\n  Zero: \"0x0\",\n  Max: \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n};\n\nfunction checkWeb3(web3: any) {\n  if (!web3) throw new Error(\"got undefined web3\");\n}\n\n/**\n * @description sign hash\n * @param web3\n * @param account\n * @param hash\n * @returns {Promise.<*>}\n */\nexport async function sign(\n  web3: any,\n  account: string,\n  pwd: string,\n  hash: string\n) {\n  checkWeb3(web3);\n  return new Promise((resolve) => {\n    web3.eth.sign(hash, account, pwd, function (err: any, result: any) {\n      if (!err) {\n        const r = result.slice(0, 66);\n        const s = addHexPrefix(result.slice(66, 130));\n        let v = toNumber(addHexPrefix(result.slice(130, 132)));\n        if (v === 0 || v === 1) v = v + 27; // 修复ledger的签名\n        resolve({ result: { r, s, v } });\n      } else {\n        const errorMsg = err.message.substring(0, err.message.indexOf(\" at \"));\n        resolve({ error: { message: errorMsg } });\n      }\n    });\n  });\n}\n\n/**\n * @description Signs ethereum tx\n * @param web3\n * @param account\n * @param rawTx\n * @returns {Promise.<*>}\n */\nexport async function signEthereumTx(\n  web3: any,\n  account: string,\n  rawTx: any,\n  chainId: ChainId\n) {\n  const ethTx = Transaction.fromSerializedTx(rawTx);\n  const hash = toHex(ethTx.hash());\n  try {\n    const response: any = await sign(web3, account, \"\", hash);\n    if (!response.error) {\n      const signature = response[\"result\"];\n      signature.v += chainId * 2 + 8;\n\n      const jsonTx = Object.assign(ethTx.toJSON(), signature);\n\n      jsonTx.from = rawTx.from;\n\n      return { result: fm.toHex(JSON.stringify(jsonTx)), rawTx: jsonTx };\n    } else {\n      return { error: response.error };\n      // throw new Error(response[\"error\"][\"message\"]);\n    }\n  } catch (err) {\n    return { error: err };\n  }\n}\n\nexport async function getNonce(web3: Web3, addr: string) {\n  if (web3) return await web3.eth.getTransactionCount(addr);\n  return -1;\n}\n\nexport async function sendRawTx(\n  web3: any,\n  from: string,\n  to: string,\n  value: any,\n  data: any,\n  chainId: ChainId,\n  nonce: number | undefined | null,\n  gasPrice: any,\n  gasLimit: number | undefined,\n  sendByMetaMask = true\n) {\n  checkWeb3(web3);\n\n  gasPrice = fm.fromGWEI(gasPrice).toNumber();\n  const rawTx = {\n    from,\n    to,\n    value,\n    data,\n    chainId,\n    nonce,\n    gasPrice,\n    gasLimit,\n  };\n\n  if (sendByMetaMask) {\n    return await sendTransaction(web3, rawTx);\n  }\n\n  const res = await signEthereumTx(web3, from, rawTx, chainId);\n\n  if (res?.rawTx) {\n    return await sendTransaction(web3, res.rawTx);\n  }\n\n  return res;\n}\n\nfunction _genContractData(Contract: any, method: string, data: any) {\n  return Contract.encodeInputs(method, data);\n}\n\nfunction genERC20Data(method: string, data: any) {\n  return _genContractData(Contracts.ERC20Token, method, data);\n}\n\nexport function genExchangeData(method: string, data: any) {\n  return _genContractData(Contracts.ExchangeContract, method, data);\n}\n\nexport async function approve(\n  web3: Web3,\n  from: string,\n  to: string,\n  depositAddress: string,\n  _value: string,\n  chainId: ChainId,\n  nonce: number,\n  gasPrice: number,\n  gasLimit: number,\n  sendByMetaMask: boolean\n) {\n  const data = genERC20Data(ERC20Method.Approve, {\n    _spender: depositAddress,\n    _value,\n  });\n\n  return await sendRawTx(\n    web3,\n    from,\n    to,\n    \"0\",\n    data,\n    chainId,\n    nonce,\n    gasPrice,\n    gasLimit,\n    sendByMetaMask\n  );\n}\n\n// 3.6\n/**\n * Approve Zero\n * @param tokenAddress: approve token symbol to zero\n * @param nonce: Ethereum nonce of this address\n * @param gasPrice: gas price in gwei\n * @param sendByMetaMask\n */\nexport async function approveZero(\n  web3: any,\n  owner: string,\n  tokenAddress: string,\n  depositAddress: string,\n  gasPrice: number,\n  gasLimit: number,\n  chainId: ChainId = ChainId.GOERLI,\n  nonce: number,\n  sendByMetaMask = false\n) {\n  return await approve(\n    web3,\n    owner,\n    tokenAddress,\n    depositAddress,\n    ApproveVal.Zero,\n    chainId,\n    nonce,\n    gasPrice,\n    gasLimit,\n    sendByMetaMask\n  );\n}\n\n// 3.6\n/**\n * Approve Max\n * @param tokenAddress: approve token symbol to max\n * @param nonce: Ethereum nonce of this address\n * @param gasPrice: gas price in gwei\n * @param sendByMetaMask\n */\nexport async function approveMax(\n  web3: any,\n  owner: string,\n  tokenAddress: string,\n  depositAddress: string,\n  gasPrice: number,\n  gasLimit: number,\n  chainId: ChainId = ChainId.GOERLI,\n  nonce: number,\n  sendByMetaMask = false\n) {\n  return await approve(\n    web3,\n    owner,\n    tokenAddress,\n    depositAddress,\n    ApproveVal.Max,\n    chainId,\n    nonce,\n    gasPrice,\n    gasLimit,\n    sendByMetaMask\n  );\n}\n\n// 3.6\n/**\n * deposit\n */\nexport async function deposit(\n  web3: any,\n  from: string,\n  exchangeAddress: string,\n  token: TokenInfo,\n  value: number,\n  fee: number,\n  gasPrice: number,\n  gasLimit: number,\n  chainId: ChainId = ChainId.GOERLI,\n  nonce: number,\n  sendByMetaMask = true,\n  to?: string\n) {\n  let valueC = fm.toBig(value).times(\"1e\" + token.decimals);\n\n  const amount = fm.toHex(valueC);\n\n  const data = genExchangeData(ERC20Method.Deposit, {\n    tokenAddress: token.address,\n    amount,\n    from,\n    to: to ? to : from,\n    extraData: \"\",\n  });\n\n  if (token.type === \"ETH\") {\n    valueC = valueC.plus(fee);\n  } else {\n    valueC = fm.toBig(fee);\n  }\n\n  return await sendRawTx(\n    web3,\n    from,\n    exchangeAddress,\n    valueC.toFixed(),\n    data,\n    chainId,\n    nonce,\n    gasPrice,\n    gasLimit,\n    sendByMetaMask\n  );\n}\n\n/**\n * forceWithdrawal\n */\nexport async function forceWithdrawal(\n  web3: any,\n  from: string,\n  accountID: number,\n  exchangeAddress: string,\n  token: TokenInfo,\n  fee: number,\n  gasPrice: number,\n  gasLimit: number,\n  chainId: ChainId = ChainId.GOERLI,\n  nonce: number,\n  sendByMetaMask = false\n) {\n  const valueC = fm.toBig(fee);\n  const data = genExchangeData(ERC20Method.ForceWithdraw, {\n    owner: from,\n    tokenAddress: token.address,\n    accountID,\n  });\n  return await sendRawTx(\n    web3,\n    from,\n    exchangeAddress,\n    valueC.toFixed(),\n    data,\n    chainId,\n    nonce,\n    gasPrice,\n    gasLimit,\n    sendByMetaMask\n  );\n}\n\n/**\n * @description Sends ethereum tx through MetaMask\n * @param web3\n * @param tx\n * @returns {*}\n */\nexport async function sendTransaction(web3: any, tx: any) {\n  delete tx.gasPrice;\n  // delete tx.gas;\n  const response: any = await new Promise((resolve) => {\n    web3.eth.sendTransaction(tx, function (err: any, transactionHash: string) {\n      if (!err) {\n        resolve({ result: transactionHash });\n      } else {\n        resolve({ error: { message: err.message } });\n      }\n    });\n  });\n\n  if (response[\"result\"]) {\n    return response;\n  } else {\n    throw new Error(response[\"error\"][\"message\"]);\n  }\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address);\n  return code && code.length > 2;\n}\n","/* eslint-disable camelcase  */\n\nimport { BaseAPI } from \"./base_api\";\n\nimport {\n  RESULT_INFO,\n  ReqMethod,\n  SIG_FLAG,\n  SigPatchField,\n  TradeChannel,\n  LOOPRING_URLs,\n  ConnectorNames,\n  SigSuffix,\n  NFTFactory,\n  ChainId,\n  NFTFactory_Collection,\n  LoopringErrorCode,\n  ConnectorError,\n  CounterFactualInfo,\n} from \"../defs\";\n\nimport * as loopring_defs from \"../defs/loopring_defs\";\n\nimport * as sign_tools from \"./sign/sign_tools\";\nimport { isContract } from \"./contract_api\";\nimport BN from \"bn.js\";\nimport { sortObjDictionary } from \"../utils\";\nimport { generateKeyPair, KeyPairParams } from \"./sign/sign_tools\";\nimport { AxiosResponse } from \"axios\";\n\nexport class UserAPI extends BaseAPI {\n  /*\n   * Change the ApiKey associated with the user's account.\n   * The current ApiKey must be provided as the value of the X-API-KEY HTTP header.\n   */\n  public async updateUserApiKey<R>(\n    request: loopring_defs.UpdateUserApiKeyRequest,\n    apiKey: string,\n    eddsaKey: string\n  ): Promise<{ raw_data: R }> {\n    const dataToSig: Map<string, any> = new Map();\n\n    dataToSig.set(\"accountId\", request.accountId);\n\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.API_KEY_ACTION,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n    };\n  }\n\n  /*\n   * Fetches the next order id for a given sold token.\n   * If the need arises to repeatedly place orders in a short span of time,\n   * the order id can be initially fetched through the API and then managed locally.\n   * Each new order id can be derived from adding 2 to the last one\n   */\n  public async getNextStorageId<R>(\n    request: loopring_defs.GetNextStorageIdRequest,\n    apiKey: string\n  ): Promise<{ raw_data: R; orderId: number; offchainId: number }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_NEXT_STORAGE_ID,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const { orderId, offchainId } = raw_data;\n    return {\n      orderId,\n      offchainId,\n      raw_data,\n    };\n  }\n\n  /*\n   * Get the details of an order based on order hash.\n   */\n  public async getOrderDetails<R>(\n    request: loopring_defs.GetOrderDetailsRequest,\n    apiKey: string\n  ): Promise<{ raw_data: R; orderDetail: loopring_defs.OrderDetail }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.ORDER_ACTION,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      orderDetail: raw_data,\n      raw_data,\n    };\n  }\n\n  public async getOrders<R>(\n    request: loopring_defs.GetOrdersRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    orders: loopring_defs.OrderDetail[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_MULTI_ORDERS,\n      queryParams: {\n        ...request,\n        status: request.status ? request.status.join(\",\") : \"\",\n      },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const totalNum: number = raw_data.totalNum;\n    const orders: loopring_defs.OrderDetail[] = raw_data.orders;\n\n    return {\n      totalNum,\n      orders,\n      raw_data,\n    };\n  }\n\n  /*\n   * Submit an order\n   */\n  public async submitOrder(\n    orderRequest: loopring_defs.SubmitOrderRequestV3,\n    privateKey: string,\n    apiKey: string\n  ) {\n    if (!orderRequest.tradeChannel) {\n      orderRequest.tradeChannel = TradeChannel.MIXED;\n    }\n\n    const dataToSig = [\n      orderRequest.exchange,\n      orderRequest.storageId,\n      orderRequest.accountId,\n      orderRequest.sellToken.tokenId,\n      orderRequest.buyToken.tokenId,\n      orderRequest.sellToken.volume,\n      orderRequest.buyToken.volume,\n      orderRequest.validUntil,\n      orderRequest.maxFeeBips,\n      orderRequest.fillAmountBOrS ? 1 : 0,\n      0,\n    ];\n\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.ORDER_ACTION,\n      bodyParams: orderRequest,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG_POSEIDON,\n      sigObj: {\n        dataToSig,\n        sigPatch: SigPatchField.EddsaSignature,\n        PrivateKey: privateKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    return this.returnTxHash(raw_data);\n  }\n\n  /*\n   * Cancel order using order hash or client-side ID.\n   */\n  public async cancelOrder<R>(\n    request: loopring_defs.CancelOrderRequest,\n    PrivateKey: string,\n    apiKey: string\n  ): Promise<{ raw_data: R }> {\n    const dataToSig: Map<string, any> = new Map();\n\n    dataToSig.set(\"accountId\", request.accountId);\n    if (request.orderHash) dataToSig.set(\"orderHash\", request.orderHash);\n    if (request.clientOrderId)\n      dataToSig.set(\"clientOrderId\", request.clientOrderId);\n\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.ORDER_ACTION,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.DELETE,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n    };\n  }\n\n  /*\n   * Cancel multiple orders using order hashes\n   */\n  public async cancelMultiOrdersByHash<R>(\n    request: loopring_defs.CancelMultiOrdersByHashRequest,\n    PrivateKey: string,\n    apiKey: string\n  ): Promise<{ raw_data: R }> {\n    const dataToSig: Map<string, any> = new Map();\n    dataToSig.set(\"accountId\", request.accountId);\n    dataToSig.set(\"orderHash\", request.orderHash);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.ORDER_CANCEL_HASH_LIST,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.DELETE,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n    };\n  }\n\n  /*\n   * Cancel multiple orders using clientOrderIds\n   */\n  public async cancelMultiOrdersByCreditOrderId<R>(\n    request: loopring_defs.CancelMultiOrdersByClientOrderIdRequest,\n    PrivateKey: string,\n    apiKey: string\n  ): Promise<{ raw_data: R }> {\n    const dataToSig: Map<string, any> = new Map();\n    dataToSig.set(\"accountId\", request.accountId);\n    dataToSig.set(\"clientOrderId\", request.clientOrderId);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.ORDER_CANCEL_CLIENT_ORDER_ID_LIST,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.DELETE,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns a list Ethereum transactions from users for exchange account registration.\n   */\n  public async getUserRegTxs<R>(\n    request: loopring_defs.GetUserRegTxsRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userRegTxs: loopring_defs.UserRegTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_REG_TXS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const userRegTxs: loopring_defs.UserRegTx[] = raw_data.transactions;\n    return {\n      totalNum: raw_data.totalNum,\n      userRegTxs,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns a list Ethereum transactions from users for resetting exchange passwords.\n   */\n  public async getUserPwdResetTxs<R>(\n    request: loopring_defs.GetUserPwdResetTxsRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userPwdResetTxs: loopring_defs.UserPwdResetTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_PWD_RESET_TXS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const userPwdResetTxs: loopring_defs.UserPwdResetTx[] =\n      raw_data.transactions;\n    return {\n      totalNum: raw_data.totalNum,\n      userPwdResetTxs,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns user's Ether and token balances on exchange.\n   */\n  public async getUserBalances<R>(\n    request: loopring_defs.GetUserBalancesRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    userBalances: loopring_defs.LoopringMap<loopring_defs.UserBalanceInfo>;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_EXCHANGE_BALANCES,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const userBalances: loopring_defs.LoopringMap<loopring_defs.UserBalanceInfo> =\n      {};\n\n    if (raw_data instanceof Array) {\n      raw_data.forEach((item: loopring_defs.UserBalanceInfo) => {\n        userBalances[item.tokenId] = item;\n      });\n    }\n\n    return {\n      userBalances,\n      raw_data,\n    };\n  }\n\n  public async getAssetLookRecords<R>(\n    request: loopring_defs.GetUserBalancesRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    userBalances: loopring_defs.LoopringMap<loopring_defs.UserBalanceInfo>;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_ASSET_LOCK_RECORDS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const userBalances: loopring_defs.LoopringMap<loopring_defs.UserBalanceInfo> =\n      {};\n\n    if (raw_data instanceof Array) {\n      raw_data.forEach((item: loopring_defs.UserBalanceInfo) => {\n        userBalances[item.tokenId] = item;\n      });\n    }\n\n    return {\n      userBalances,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns user's deposit records.\n   */\n  public async getUserDepositHistory<R>(\n    request: loopring_defs.GetUserDepositHistoryRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userDepositHistory: loopring_defs.UserDepositHistoryTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_DEPOSITS_HISTORY,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userDepositHistory:\n        raw_data.transactions as loopring_defs.UserDepositHistoryTx[],\n      raw_data,\n    };\n  }\n\n  /*\n   * Get user onchain withdrawal history.\n   */\n  public async getUserOnchainWithdrawalHistory<R>(\n    request: loopring_defs.GetUserOnchainWithdrawalHistoryRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userOnchainWithdrawalHistory: loopring_defs.UserOnchainWithdrawalHistoryTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.WITHDRAWALS_ACTION,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userOnchainWithdrawalHistory:\n        raw_data.transactions as loopring_defs.UserOnchainWithdrawalHistoryTx[],\n      raw_data,\n    };\n  }\n\n  /*\n   * Get user transfer list.\n   */\n  public async getUserTransferList<R>(\n    request: loopring_defs.GetUserTransferListRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userTransfers: loopring_defs.UserTransferRecord[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_TRANSFERS_LIST,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userTransfers:\n        raw_data.transactions as loopring_defs.UserTransferRecord[],\n      raw_data,\n    };\n  }\n\n  /*\n   * Get user txs\n   */\n  public async getUserTxs<R>(\n    request: loopring_defs.GetUserTxsRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userTxs: loopring_defs.UserTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_TXS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const userTxs: loopring_defs.UserTx[] = [];\n\n    if (raw_data?.transactions instanceof Array) {\n      raw_data.transactions.forEach((item: loopring_defs.UserTx) => {\n        userTxs.push(item);\n      });\n    }\n\n    return {\n      totalNum: raw_data?.totalNum,\n      userTxs,\n      raw_data,\n    };\n  }\n\n  /*\n   * Get user trade history\n   */\n  public async getUserTrades<R>(\n    request: loopring_defs.GetUserTradesRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userTrades: loopring_defs.UserTrade[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_TRADE_HISTORY,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const userTrades: loopring_defs.UserTrade[] = [];\n\n    if (raw_data?.trades instanceof Array) {\n      raw_data.trades.forEach((item: any[]) => {\n        userTrades.push({\n          tradeTime: item[0],\n          tradeId: item[1],\n          side: item[2],\n          volume: item[3],\n          price: item[4],\n          market: item[5],\n          fee: item[6],\n          type: item[13],\n        });\n      });\n    }\n\n    return {\n      totalNum: raw_data.totalNum,\n      userTrades,\n      raw_data,\n    };\n  }\n\n  /*\n   * deprecated\n   * Returns the fee rate of users placing orders in specific markets\n   */\n  public async getUserFeeRate<R>(\n    request: loopring_defs.GetUserFeeRateRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    userFreeRateMap: loopring_defs.LoopringMap<loopring_defs.UserFeeRateInfo>;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_FEE_RATE,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    const userFreeRateMap: loopring_defs.LoopringMap<loopring_defs.UserFeeRateInfo> =\n      {};\n\n    if (raw_data instanceof Array) {\n      raw_data.forEach((item: loopring_defs.UserFeeRateInfo) => {\n        userFreeRateMap[item.symbol] = item;\n      });\n    }\n\n    return {\n      userFreeRateMap,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns the user order fee rate of users placing orders in specific markets\n   */\n  public async getUserOrderFeeRate<R>(\n    request: loopring_defs.GetUserOrderFeeRateRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    feeRate: loopring_defs.FeeRateInfo;\n    gasPrice: number;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_ORDER_FEE_RATE,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const gasPrice = parseInt(raw_data.gasPrice);\n\n    return {\n      feeRate: raw_data.feeRate as loopring_defs.FeeRateInfo,\n      gasPrice,\n      raw_data,\n    };\n  }\n\n  /*\n   * Query current token minimum amount to place order based on users VIP level and max fee bips\n   */\n  public async getMinimumTokenAmt<R>(\n    request: loopring_defs.GetMinimumTokenAmtRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    amounts: [loopring_defs.TokenAmount, loopring_defs.TokenAmount];\n    amountMap: loopring_defs.LoopringMap<loopring_defs.TokenAmount>;\n    gasPrice: number;\n    cacheOverdueAt: any;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_MINIMUM_TOKEN_AMT,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const gasPrice = parseInt(raw_data.gasPrice);\n\n    const amounts: [loopring_defs.TokenAmount, loopring_defs.TokenAmount] =\n      raw_data?.amounts;\n\n    const amountMap: loopring_defs.LoopringMap<loopring_defs.TokenAmount> = {};\n\n    if (amounts instanceof Array) {\n      amounts.forEach((item: loopring_defs.TokenAmount) => {\n        amountMap[item.tokenSymbol] = item;\n      });\n    }\n\n    return {\n      amounts,\n      amountMap,\n      gasPrice,\n      cacheOverdueAt: raw_data.cacheOverdueAt,\n      raw_data,\n    };\n  }\n\n  /*\n   * Query current fee amount\n   */\n  public async getOffchainFeeAmt<R>(\n    request: loopring_defs.GetOffchainFeeAmtRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    fees: loopring_defs.LoopringMap<loopring_defs.OffchainFeeInfo>;\n    gasPrice: number;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_OFFCHAIN_FEE_AMT,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const gasPrice = parseInt(raw_data.gasPrice);\n\n    const fees: loopring_defs.LoopringMap<loopring_defs.OffchainFeeInfo> = {};\n\n    if (raw_data?.fees instanceof Array) {\n      raw_data.fees.forEach((item: loopring_defs.OffchainFeeInfo) => {\n        fees[item.token] = item;\n      });\n    }\n\n    return {\n      fees,\n      gasPrice,\n      raw_data,\n    };\n  }\n\n  /*\n   * Query current NFTAction fee amount\n   */\n  public async getNFTOffchainFeeAmt<R>(\n    request: loopring_defs.GetNFTOffchainFeeAmtRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    fees: loopring_defs.LoopringMap<loopring_defs.OffchainFeeInfo>;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_NFT_OFFCHAIN_FEE_AMT,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    const fees: loopring_defs.LoopringMap<loopring_defs.OffchainFeeInfo> = {};\n    if (raw_data?.fees instanceof Array) {\n      raw_data.fees.forEach((item: loopring_defs.OffchainFeeInfo) => {\n        fees[item.token] = item;\n      });\n    }\n\n    return {\n      fees,\n      raw_data,\n    };\n  }\n\n  /*\n   * Submit NFTAction Validate Order request\n   */\n  public async submitNFTValidateOrder<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginNFTValidateOrderRequestV3WithPatch\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const { request, eddsaKey, apiKey } = req;\n\n    request.eddsaSignature = sign_tools.get_EddsaSig_NFT_Order(\n      request,\n      eddsaKey\n    ).result;\n\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_NFT_VALIDATE_ORDER,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    // myLog(\"NFTAction Validate Order request\", request);\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    return this.returnTxHash(raw_data);\n  }\n\n  /*\n   * Submit NFTAction Trade request\n   */\n  public async submitNFTTrade<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginNFTTradeRequestV3WithPatch\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const { request, apiKey, eddsaKey } = req;\n\n    const dataToSig: Map<string, any> = new Map();\n    dataToSig.set(\"maker\", request.maker);\n    dataToSig.set(\"makerFeeBips\", request.makerFeeBips);\n    dataToSig.set(\"taker\", request.taker);\n    dataToSig.set(\"takerFeeBips\", request.takerFeeBips);\n    // request.eddsaSignature = sign_tools.get_EddsaSig_Transfer(\n    //   request,\n    //   eddsaKey\n    // );\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_NFT_TRADE,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        // sigPatch: SigPatchField.EddsaSignature,\n        PrivateKey: eddsaKey,\n      },\n    };\n    // myLog(\"NFTAction Trade request\", request);\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    return this.returnTxHash(raw_data);\n  }\n\n  async getUserOwenCollection<R>(\n    request: loopring_defs.GetUserOwnerCollectionRequest,\n    apiKey: string\n  ) {\n    const reqParams = {\n      url: LOOPRING_URLs.GET_NFT_COLLECTION,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      totalNum: raw_data == null ? void 0 : raw_data.totalNum,\n      collections: raw_data.collections.map(({ collection, ...rest }: any) => {\n        return {\n          ...collection,\n          extends: {\n            ...rest,\n          },\n        };\n      }) as loopring_defs.CollectionMeta & { extends: { [a: string]: any } }[],\n      raw_data,\n    };\n  }\n\n  async getUserLegacyCollection<R>(\n    request: loopring_defs.GetUserLegacyCollectionRequest,\n    apiKey: string\n  ) {\n    const reqParams = {\n      url: LOOPRING_URLs.GET_NFT_LEGACY_COLLECTION,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      totalNum: raw_data == null ? void 0 : raw_data.totalNum,\n      collections: raw_data.collections.map(({ collection, ...rest }: any) => {\n        return {\n          ...collection,\n          extends: {\n            ...rest,\n          },\n        };\n      }) as loopring_defs.CollectionMeta & { extends: { [a: string]: any } }[],\n      raw_data,\n    };\n  }\n\n  async getUserNFTCollection(\n    request: loopring_defs.GetUserNFTCollectionRequest,\n    apiKey: string\n  ) {\n    const reqParams = {\n      url: LOOPRING_URLs.GET_NFT_COLLECTION_HASNFT,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      totalNum: raw_data == null ? void 0 : raw_data.totalNum,\n      collections: raw_data.collections.map(({ collection, ...rest }: any) => {\n        return {\n          ...collection,\n          extends: {\n            ...rest,\n          },\n        };\n      }) as loopring_defs.CollectionMeta & { extends: { [a: string]: any } }[],\n      raw_data,\n    };\n  }\n\n  async getUserNFTLegacyTokenAddress(\n    request: { accountId: number },\n    apiKey: string\n  ) {\n    const reqParams = {\n      url: LOOPRING_URLs.GET_NFT_LEGACY_TOKENADDRESS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      result: raw_data.addresses,\n      raw_data,\n    };\n  }\n\n  /*\n   * Returns User NFTAction deposit records.\n   */\n  public async getUserNFTDepositHistory<R>(\n    request: loopring_defs.GetUserNFTDepositHistoryRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userNFTDepositHistory: loopring_defs.UserNFTDepositHistoryTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_NFT_DEPOSIT_HISTORY,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTDepositHistory:\n        raw_data.deposits as loopring_defs.UserNFTDepositHistoryTx[],\n      raw_data,\n    };\n  }\n\n  /*\n   * Get User NFTAction Withdrawal History.\n   */\n  public async getUserNFTWithdrawalHistory<R>(\n    request: loopring_defs.GetUserNFTWithdrawalHistoryRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userNFTWithdrawalHistory: loopring_defs.UserNFTWithdrawalHistoryTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_NFT_WITHDRAW_HISTORY,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTWithdrawalHistory:\n        raw_data.withdrawals as loopring_defs.UserNFTWithdrawalHistoryTx[],\n      raw_data,\n    };\n  }\n\n  /*\n   * Get user NFTAction transfer list.\n   */\n  public async getUserNFTTransferHistory<R>(\n    request: loopring_defs.GetUserNFTTransferHistoryRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userNFTTransfers: loopring_defs.UserNFTTransferHistoryTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_NFT_TRANSFER_HISTORY,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTTransfers:\n        raw_data.transfers as loopring_defs.UserNFTTransferHistoryTx[],\n      raw_data,\n    };\n  }\n\n  /**\n   * Get user NFTAction Mint list.\n   * @param request\n   * @param apiKey\n   */\n  public async getUserNFTMintHistory<R>(\n    request: loopring_defs.GetUserNFTMintHistoryRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userNFTMints: loopring_defs.UserNFTMintHistoryTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_NFT_MINT_HISTORY,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTMints: raw_data.transfers as loopring_defs.UserNFTMintHistoryTx[],\n      raw_data,\n    };\n  }\n\n  /*\n   * Get user All NFTAction Transaction list.\n   *\n   */\n  public async getUserNFTTransactionHistory<R>(\n    request: loopring_defs.GetUserNFTTxsRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userNFTTxs: loopring_defs.UserNFTTxsHistory[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_NFT_TRANSACTION_HISTORY,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    if (\n      request.metadata === true &&\n      raw_data.transactions.length\n      // raw_data.transactions.metadata &&\n      // raw_data.transactions.metadata.nftId &&\n      // raw_data.transactions.metadata.nftId.startsWith(\"0x\")\n    ) {\n      raw_data.transactions = raw_data.transactions.reduce(\n        (\n          prev: loopring_defs.UserNFTTxsHistory[],\n          item: loopring_defs.UserNFTTxsHistory\n        ) => {\n          if (\n            item.metadata &&\n            item.metadata.nftId &&\n            item.metadata.nftId.startsWith(\"0x\")\n          ) {\n            const hashBN = new BN(item.metadata.nftId.replace(\"0x\", \"\"), 16);\n            item.metadata.nftId =\n              \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n          }\n\n          return [...prev, item];\n        },\n        []\n      );\n      // const hashBN = new BN(raw_data.transactions.metadata.nftId.replace(\"0x\", \"\"), 16);\n      // raw_data.transactions.metadata.nftId= \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTTxs: raw_data.transactions as loopring_defs.UserNFTTxsHistory[],\n      raw_data,\n    };\n  }\n  public async getUserNFTTradeHistory<R>(\n    request: loopring_defs.GetUserNFTTradeRequest,\n    apiKey: string\n  ): Promise<\n    | {\n        raw_data: R;\n        totalNum: number;\n        trades: loopring_defs.UserNFTTradeHistory[];\n      }\n    | RESULT_INFO\n  > {\n    const reqParams = {\n      url: LOOPRING_URLs.GET_USER_NFT_TRADE_HISTORY,\n      queryParams: { ...request },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data != null && raw_data.resultInfo) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    let trades = raw_data.trades;\n    return {\n      totalNum: raw_data?.totalNum,\n      trades,\n      raw_data,\n    };\n  }\n\n  public async SetReferrer<R>(\n    request: loopring_defs.SetReferrerRequest,\n    eddsaKey: string\n  ): Promise<{ raw_data: R; result: any }> {\n    const dataToSig: Map<string, any> = new Map();\n\n    dataToSig.set(\"address\", request.address);\n    dataToSig.set(\"promotionCode\", request.promotionCode);\n    dataToSig.set(\"publicKeyX\", request.publicKeyX);\n    dataToSig.set(\"publicKeyY\", request.publicKeyY);\n    dataToSig.set(\"referrer\", request.referrer);\n\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.SET_REFERRER,\n      bodyParams: request,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      result: raw_data?.result,\n      raw_data,\n    };\n  }\n\n  // Get users NFTAction balance, besides amount, it also includes tokenId and nftData\n\n  public async getUserNFTBalances<R>(\n    request: loopring_defs.GetUserNFTBalancesRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userNFTBalances: loopring_defs.UserNFTBalanceInfo[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_NFT_BALANCES,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    if (raw_data.data.length) {\n      raw_data.data = raw_data.data.reduce(\n        (\n          prev: loopring_defs.UserNFTBalanceInfo[],\n          item: loopring_defs.UserNFTBalanceInfo\n        ) => {\n          if (item.nftId && item.nftId.startsWith(\"0x\")) {\n            const hashBN = new BN(item.nftId.replace(\"0x\", \"\"), 16);\n            item.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n            if (\n              request.metadata === true &&\n              item.metadata &&\n              item.metadata.nftId &&\n              item.metadata.nftId.startsWith(\"0x\")\n            ) {\n              // const hashBN = new BN(item.metadata.nftId.replace(\"0x\", \"\"), 16);\n              item.metadata.nftId =\n                \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n            }\n          }\n          return [...prev, item];\n        },\n        []\n      );\n      // const hashBN = new BN(raw_data.transactions.metadata.nftId.replace(\"0x\", \"\"), 16);\n      // raw_data.transactions.metadata.nftId= \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n    }\n    // if (raw_data.data.nftId && raw_data.data.nftId.startsWith(\"0x\")) {\n    //   const hashBN = new BN(raw_data.data.nftId.replace(\"0x\", \"\"), 16);\n    //   raw_data.data.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n    // }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTBalances: raw_data.data as loopring_defs.UserNFTBalanceInfo[],\n      raw_data,\n    };\n  }\n\n  public async getUserNFTBalancesByCollection<R>(\n    request: loopring_defs.GetUserNFTBalancesByCollectionRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userNFTBalances: loopring_defs.UserNFTBalanceInfo[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_NFT_BALANCES_BY_COLLECTION,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    if (raw_data.data.length) {\n      raw_data.data = raw_data.data.reduce(\n        (\n          prev: loopring_defs.UserNFTBalanceInfo[],\n          item: loopring_defs.UserNFTBalanceInfo\n        ) => {\n          if (item.nftId && item.nftId.startsWith(\"0x\")) {\n            const hashBN = new BN(item.nftId.replace(\"0x\", \"\"), 16);\n            item.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n            if (\n              request.metadata === true &&\n              item.metadata &&\n              item.metadata.nftId &&\n              item.metadata.nftId.startsWith(\"0x\")\n            ) {\n              // const hashBN = new BN(item.metadata.nftId.replace(\"0x\", \"\"), 16);\n              item.metadata.nftId =\n                \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n            }\n          }\n          return [...prev, item];\n        },\n        []\n      );\n      // const hashBN = new BN(raw_data.transactions.metadata.nftId.replace(\"0x\", \"\"), 16);\n      // raw_data.transactions.metadata.nftId= \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n    }\n    // if (raw_data.data.nftId && raw_data.data.nftId.startsWith(\"0x\")) {\n    //   const hashBN = new BN(raw_data.data.nftId.replace(\"0x\", \"\"), 16);\n    //   raw_data.data.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n    // }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTBalances: raw_data.data as loopring_defs.UserNFTBalanceInfo[],\n      raw_data,\n    };\n  }\n\n  public async getUserNFTLegacyBalance<R>(\n    request: loopring_defs.GetUserNFTLegacyBalanceRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userNFTBalances: loopring_defs.UserNFTBalanceInfo[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_NFT_LEGACY_BALANCE,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    if (raw_data.data.length) {\n      raw_data.data = raw_data.data.reduce(\n        (\n          prev: loopring_defs.UserNFTBalanceInfo[],\n          item: loopring_defs.UserNFTBalanceInfo\n        ) => {\n          if (item.nftId && item.nftId.startsWith(\"0x\")) {\n            const hashBN = new BN(item.nftId.replace(\"0x\", \"\"), 16);\n            item.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n            if (\n              request.metadata === true &&\n              item.metadata &&\n              item.metadata.nftId &&\n              item.metadata.nftId.startsWith(\"0x\")\n            ) {\n              // const hashBN = new BN(item.metadata.nftId.replace(\"0x\", \"\"), 16);\n              item.metadata.nftId =\n                \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n            }\n          }\n          return [...prev, item];\n        },\n        []\n      );\n      // const hashBN = new BN(raw_data.transactions.metadata.nftId.replace(\"0x\", \"\"), 16);\n      // raw_data.transactions.metadata.nftId= \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n    }\n    // if (raw_data.data.nftId && raw_data.data.nftId.startsWith(\"0x\")) {\n    //   const hashBN = new BN(raw_data.data.nftId.replace(\"0x\", \"\"), 16);\n    //   raw_data.data.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n    // }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTBalances: raw_data.data as loopring_defs.UserNFTBalanceInfo[],\n      raw_data,\n    };\n  }\n  public async getUserVIPAssets<R>(\n    request: loopring_defs.getUserVIPAssetsRequest\n  ): Promise<{ raw_data: { data: R }; vipAsset: R }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_VIP_ASSETS,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      vipAsset: raw_data.data ? raw_data.data : raw_data,\n      raw_data,\n    };\n  }\n\n  public async getUserVIPInfo<R>(\n    request: loopring_defs.GetUserVIPInfoRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    vipInfo: {\n      createdAt: number;\n      validTo: string;\n      org: any;\n      vipTag: any;\n    };\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_VIP_INFO,\n      queryParams: request,\n      method: ReqMethod.GET,\n      apiKey: apiKey,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const vipInfo = {\n      createdAt: raw_data.created_at,\n      validTo: raw_data.valid_to,\n      org: raw_data.org,\n      vipTag: raw_data.vip_tag,\n    };\n\n    return {\n      vipInfo,\n      raw_data,\n    };\n  }\n\n  public async unLockAccount<R>(\n    {\n      keyPair,\n      request,\n    }: {\n      keyPair: KeyPairParams;\n      request: loopring_defs.GetUserApiKeyRequest;\n    },\n    publicKey: { x: string; y: string } | undefined = undefined\n  ): Promise<\n    | AxiosResponse\n    | RESULT_INFO\n    | {\n        raw_data: R;\n        eddsaKey: {\n          keyPair: object;\n          formatedPx: string;\n          formatedPy: string;\n          sk: string;\n          counterFactualInfo: CounterFactualInfo;\n        };\n        apiKey: string;\n      }\n  > {\n    let eddsaKey;\n    try {\n      eddsaKey = await generateKeyPair(keyPair, publicKey);\n    } catch (error) {\n      throw error;\n    }\n    if (eddsaKey) {\n      const dataToSig: Map<string, any> = sortObjDictionary(request);\n      const reqParams: loopring_defs.ReqParams = {\n        url: LOOPRING_URLs.API_KEY_ACTION,\n        queryParams: request,\n        bodyParams: request,\n        method: ReqMethod.GET,\n        sigFlag: SIG_FLAG.EDDSA_SIG,\n        sigObj: {\n          dataToSig,\n          PrivateKey: eddsaKey.sk,\n        },\n      };\n      let raw_data;\n      try {\n        raw_data = (await this.makeReq().request(reqParams)).data;\n      } catch (error) {\n        throw error as AxiosResponse;\n      }\n      if (raw_data?.resultInfo) {\n        throw {\n          ...raw_data?.resultInfo,\n        };\n      } else {\n        return {\n          apiKey: raw_data.apiKey,\n          raw_data,\n          eddsaKey,\n        };\n      }\n    } else {\n      throw {\n        code: LoopringErrorCode.NO_EDDSA_KEY,\n        message: ConnectorError.NO_EDDSA_KEY,\n      };\n    }\n  }\n\n  /*\n   * Submit offchain withdraw request\n   */\n  public async submitOffchainWithdraw<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OffChainWithdrawalRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | AxiosResponse | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n\n    const sigHW = async () => {\n      const result = await sign_tools.signOffchainWithdrawWithoutDataStructure(\n        web3,\n        request.owner,\n        request,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n\n    // metamask not import hw appWallet.\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          const result = await sign_tools.signOffchainWithdrawWithDataStructure(\n            web3,\n            request.owner,\n            request,\n            chainId,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, request.owner);\n      try {\n        if (isContractCheck) {\n          const result =\n            await sign_tools.signOffchainWithdrawWithDataStructureForContract(\n              web3,\n              request.owner,\n              request,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signOffchainWithdrawWithDataStructureForContract(\n              web3,\n              request.owner,\n              request,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"OffchainWithdraw ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    request.eddsaSignature = sign_tools.get_EddsaSig_OffChainWithdraw(\n      request,\n      eddsaKey\n    ).result;\n\n    if (counterFactualInfo) {\n      request.counterFactualInfo = counterFactualInfo;\n    }\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.WITHDRAWALS_ACTION,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      ecdsaSignature,\n    };\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n\n  /*\n   * Submit Internal Transfer request\n   */\n  public async submitInternalTransfer<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginTransferRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | AxiosResponse | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n\n    const sigHW = async () => {\n      const result = await sign_tools.signTransferWithoutDataStructure(\n        web3,\n        request.payerAddr,\n        request,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      // myLog(\"submitInternalTransfer iConnectorNames.MetaMask:\", walletType);\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          // myLog(\"submitInternalTransfer notHWAddr:\", isHWAddr);\n          const result = await sign_tools.signTransferWithDataStructure(\n            web3,\n            request.payerAddr,\n            request,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, request.payerAddr);\n      try {\n        if (isContractCheck) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              request.payerAddr,\n              request,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              request.payerAddr,\n              request,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"Transfer ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    request.eddsaSignature = sign_tools.get_EddsaSig_Transfer(\n      request,\n      eddsaKey\n    ).result;\n    if (counterFactualInfo) {\n      request.counterFactualInfo = counterFactualInfo;\n    }\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_INTERNAL_TRANSFER,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      ecdsaSignature,\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n\n  /*\n   * Submit NFTAction Deploy request\n   */\n  public async submitForceWithdrawals<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginForcesWithdrawalsRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n    const { transfer } = request;\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n    transfer.payeeId = 0;\n    transfer.memo = `ForceWithdrawalBy${request.requesterAddress}`;\n    transfer.maxFee = {\n      volume: \"0\",\n      tokenId: transfer.token.tokenId,\n    };\n\n    const sigHW = async () => {\n      const result = await sign_tools.signTransferWithoutDataStructure(\n        web3,\n        transfer.payerAddr,\n        transfer as loopring_defs.OriginTransferRequestV3,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      // myLog(\"submitDeployNFT iConnectorNames.MetaMask:\", walletType);\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          // myLog(\"submitDeployNFT notHWAddr:\", isHWAddr);\n          const result = await sign_tools.signTransferWithDataStructure(\n            web3,\n            transfer.payerAddr,\n            transfer as loopring_defs.OriginTransferRequestV3,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, transfer.payerAddr);\n      try {\n        if (isContractCheck) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"Transfer ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    if (counterFactualInfo) {\n      transfer.counterFactualInfo = counterFactualInfo;\n    }\n    transfer.eddsaSignature = sign_tools.get_EddsaSig_Transfer(\n      transfer as loopring_defs.OriginTransferRequestV3,\n      eddsaKey\n    ).result;\n    transfer.ecdsaSignature = ecdsaSignature;\n    const dataToSig: Map<string, any> = new Map();\n    dataToSig.set(\"requesterAddress\", request.requesterAddress);\n    dataToSig.set(\"tokenId\", request.tokenId);\n    dataToSig.set(\"transfer\", request.transfer);\n    dataToSig.set(\"withdrawAddress\", request.withdrawAddress);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_FORCE_WITHDRAWALS,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n\n  /*\n   * Submit NFTAction Deploy request\n   */\n  public async submitDeployNFT<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginDeployNFTRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n    const { transfer } = request;\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n    transfer.payeeId = 0;\n    transfer.memo = `NFT-DEPLOY-CONTRACT->${request.tokenAddress}`;\n    transfer.maxFee = {\n      volume: \"0\",\n      tokenId: transfer.token.tokenId,\n    };\n\n    const sigHW = async () => {\n      const result = await sign_tools.signTransferWithoutDataStructure(\n        web3,\n        transfer.payerAddr,\n        transfer as loopring_defs.OriginTransferRequestV3,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      // myLog(\"submitDeployNFT iConnectorNames.MetaMask:\", walletType);\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          // myLog(\"submitDeployNFT notHWAddr:\", isHWAddr);\n          const result = await sign_tools.signTransferWithDataStructure(\n            web3,\n            transfer.payerAddr,\n            transfer as loopring_defs.OriginTransferRequestV3,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, transfer.payerAddr);\n      try {\n        if (isContractCheck) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"Transfer ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    if (counterFactualInfo) {\n      transfer.counterFactualInfo = counterFactualInfo;\n    }\n    transfer.eddsaSignature = sign_tools.get_EddsaSig_Transfer(\n      transfer as loopring_defs.OriginTransferRequestV3,\n      eddsaKey\n    ).result;\n    transfer.ecdsaSignature = ecdsaSignature;\n    const dataToSig: Map<string, any> = new Map();\n    dataToSig.set(\"nftData\", request.nftData);\n    dataToSig.set(\"tokenAddress\", request.tokenAddress);\n    dataToSig.set(\"transfer\", request.transfer);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DEPLOY_TOKEN_ADDRESS,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n  /*\n   * Submit NFTAction Transfer request\n   */\n  public async submitNFTInTransfer<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginNFTTransferRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n\n    const sigHW = async () => {\n      const result = await sign_tools.signNFTTransferWithoutDataStructure(\n        web3,\n        request.fromAddress,\n        request,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          const result = await sign_tools.signTNFTransferWithDataStructure(\n            web3,\n            request.fromAddress,\n            request,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, request.fromAddress);\n      try {\n        if (isContractCheck) {\n          // signOffchainWithdrawWithDataStructureForContract\n          const result =\n            await sign_tools.signNFTTransferWithDataStructureForContract(\n              web3,\n              request.fromAddress,\n              request,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signNFTTransferWithDataStructureForContract(\n              web3,\n              request.fromAddress,\n              request,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"NFTransfer ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    request.eddsaSignature = sign_tools.get_EddsaSig_NFT_Transfer(\n      request,\n      eddsaKey\n    ).result;\n    if (counterFactualInfo) {\n      request.counterFactualInfo = counterFactualInfo;\n    }\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_NFT_INTERNAL_TRANSFER,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      ecdsaSignature,\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n\n  /*\n   * Submit NFTAction Withdraw request\n   */\n  public async submitNFTWithdraw<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginNFTWithdrawRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n\n    const sigHW = async () => {\n      const result = await sign_tools.signNFTWithdrawWithoutDataStructure(\n        web3,\n        request.owner,\n        request,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n\n    // metamask not import hw appWallet.\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          const result = await sign_tools.signNFTWithdrawWithDataStructure(\n            web3,\n            request.owner,\n            request,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, request.owner);\n\n      try {\n        if (isContractCheck) {\n          // signNFTWithdrawWithDataStructureForContract\n          // myLog('signNFTWithdrawWithDataStructureForContract')\n          const result =\n            await sign_tools.signNFTWithdrawWithDataStructureForContract(\n              web3,\n              request.owner,\n              request,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signNFTWithdrawWithDataStructureForContract(\n              web3,\n              request.owner,\n              request,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"NFTWithdraw ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    request.eddsaSignature = sign_tools.get_EddsaSig_NFT_Withdraw(\n      request,\n      eddsaKey\n    ).result;\n    if (counterFactualInfo) {\n      request.counterFactualInfo = counterFactualInfo;\n    }\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_NFT_WITHDRAWALS,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      ecdsaSignature,\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n  /*\n   * Submit NFTAction\n   */\n  public async submitNFTMint<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginNFTMINTRequestV3WithPatch,\n    options?: {\n      accountId?: number;\n      counterFactualInfo?: any;\n      _noEcdsa?: boolean;\n    }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo, _noEcdsa }: any = options\n      ? options\n      : { accountId: 0 };\n    if (request.counterFactualNftInfo === undefined) {\n      request.counterFactualNftInfo = {\n        nftFactory: NFTFactory[chainId],\n        nftOwner: request.minterAddress,\n        nftBaseUri: \"\",\n      };\n    }\n\n    request.royaltyPercentage = request.royaltyPercentage\n      ? request.royaltyPercentage\n      : 0;\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n\n    const sigHW = async () => {\n      const result = await sign_tools.signNFTMintWithoutDataStructure(\n        web3,\n        request.minterAddress,\n        request,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n\n    // metamask not import hw appWallet.\n    if (!_noEcdsa) {\n      if (\n        walletType === ConnectorNames.MetaMask ||\n        walletType === ConnectorNames.Gamestop ||\n        walletType === ConnectorNames.OtherExtension\n      ) {\n        try {\n          if (isHWAddr) {\n            await sigHW();\n          } else {\n            const result = await sign_tools.signNFTMintWithDataStructure(\n              web3,\n              request.minterAddress,\n              request,\n              chainId,\n              walletType,\n              accountId,\n              counterFactualInfo\n            );\n            ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n          }\n        } catch (err) {\n          throw {\n            ...this.genErr(err as any),\n          };\n        }\n      } else {\n        try {\n          const isContractCheck = await isContract(web3, request.minterAddress);\n\n          if (isContractCheck) {\n            // signNFTMintWithDataStructureForContract\n            // myLog('signNFTMintWithDataStructureForContract')\n            const result =\n              await sign_tools.signNFTMintWithDataStructureForContract(\n                web3,\n                request.minterAddress,\n                request,\n                chainId,\n                accountId\n              );\n            ecdsaSignature = result.ecdsaSig;\n          } else if (counterFactualInfo) {\n            const result =\n              await sign_tools.signNFTMintWithDataStructureForContract(\n                web3,\n                request.minterAddress,\n                request,\n                chainId,\n                accountId,\n                counterFactualInfo\n              );\n            ecdsaSignature = result.ecdsaSig;\n            // myLog(\"NFTMintWithData ecdsaSignature:\", ecdsaSignature);\n          } else {\n            await sigHW();\n          }\n        } catch (err) {\n          throw {\n            ...this.genErr(err as any),\n          };\n        }\n      }\n    }\n\n    request.eddsaSignature = sign_tools.get_EddsaSig_NFT_Mint(\n      request,\n      eddsaKey\n    ).result;\n    if (counterFactualInfo) {\n      request.counterFactualInfo = counterFactualInfo;\n    }\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_NFT_MINT,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      ecdsaSignature,\n    };\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n\n  async submitNFTCollection<R>(\n    req: loopring_defs.CollectionBasicMeta,\n    chainId: ChainId,\n    apiKey: string,\n    eddsaKey: string\n  ): Promise<RESULT_INFO | { raw_data: R; contractAddress: string }> {\n    const _req = req.nftFactory\n      ? req\n      : { ...req, nftFactory: NFTFactory_Collection[chainId] };\n    const dataToSig: Map<string, any> = sortObjDictionary(_req);\n    const reqParams = {\n      url: LOOPRING_URLs.POST_NFT_CREATE_COLLECTION,\n      bodyParams: Object.fromEntries(dataToSig),\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      raw_data,\n      contractAddress: raw_data == null ? void 0 : raw_data.contractAddress,\n    };\n  }\n\n  async deleteNFTCollection<R>(\n    req: loopring_defs.CollectionDelete,\n    chainId: ChainId,\n    apiKey: string,\n    eddsaKey: string\n  ): Promise<{ raw_data: R }> {\n    const dataToSig: Map<string, any> = sortObjDictionary(req);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.DELETE_NFT_CREATE_COLLECTION,\n      queryParams: req,\n      apiKey,\n      method: ReqMethod.DELETE,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n    };\n  }\n\n  async submitNFTLegacyCollection<R>(\n    req: loopring_defs.CollectionLegacyMeta,\n    chainId: ChainId,\n    apiKey: string,\n    eddsaKey: string\n  ): Promise<RESULT_INFO | { raw_data: R; result: boolean }> {\n    // const _req = req.nftFactory\n    //   ? req\n    //   : { ...req, nftFactory: NFTFactory_Collection[chainId] };\n    const dataToSig: Map<string, any> = sortObjDictionary(req);\n    const reqParams = {\n      url: LOOPRING_URLs.POST_NFT_CREATE_LEGACY_COLLECTION,\n      bodyParams: Object.fromEntries(dataToSig),\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      raw_data,\n      result: raw_data.result,\n    };\n  }\n\n  async submitEditNFTCollection<R>(\n    req: Omit<loopring_defs.CollectionBasicMeta, \"nftFactory\" | \"owner\"> & {\n      collectionId: string;\n      accountId: number;\n    },\n    chainId: ChainId,\n    apiKey: string,\n    eddsaKey: string\n  ): Promise<RESULT_INFO | { raw_data: R; contractAddress: string }> {\n    // const _req = req.nftFactory ? req : {...req, nftFactory: NFTFactory_Collection[ chainId ]}\n    const dataToSig: Map<string, any> = sortObjDictionary(req);\n    const reqParams = {\n      url: LOOPRING_URLs.POST_NFT_EDIT_COLLECTION,\n      bodyParams: Object.fromEntries(dataToSig),\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      raw_data,\n      contractAddress: raw_data == null ? void 0 : raw_data.contractAddress,\n    };\n  }\n\n  async submitUpdateNFTLegacyCollection<R>(\n    req: loopring_defs.UpdateNFTLegacyCollectionRequest,\n    chainId: ChainId,\n    apiKey: string,\n    eddsaKey: string\n  ): Promise<RESULT_INFO | { raw_data: R; result: boolean }> {\n    const _req = { ...req, nftHashes: req.nftHashes.join(\",\") };\n    const dataToSig: Map<string, any> = sortObjDictionary(_req);\n    const reqParams = {\n      url: LOOPRING_URLs.POST_NFT_LEGACY_UPDATE_COLLECTION,\n      bodyParams: Object.fromEntries(dataToSig),\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      raw_data,\n      result: raw_data.result,\n    };\n  }\n\n  async submitUpdateNFTGroup<R>(\n    req: loopring_defs.UpdateNFTGroupRequest,\n    chainId: ChainId,\n    apiKey: string,\n    eddsaKey: string\n  ): Promise<RESULT_INFO | { raw_data: R; result: boolean }> {\n    const _req = { ...req, nftHashes: req.nftHashes.join(\",\") };\n    const dataToSig: Map<string, any> = sortObjDictionary(_req);\n    const reqParams = {\n      url: LOOPRING_URLs.POST_NFT_UPDATE_NFT_GROUP,\n      bodyParams: Object.fromEntries(dataToSig),\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (\n      raw_data != null &&\n      raw_data.resultInfo &&\n      raw_data != null &&\n      raw_data.resultInfo.code\n    ) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n\n    return {\n      raw_data,\n      result: raw_data.result,\n    };\n  }\n\n  /*\n   * Submit NFTAction Deploy request\n   */\n  public async submitDeployCollection<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.OriginDeployCollectionRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n    const { transfer } = request;\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n    transfer.payeeId = 0;\n    transfer.memo = `NFT-DEPLOY-CONTRACT->${request.tokenAddress}`;\n    transfer.maxFee = {\n      volume: \"0\",\n      tokenId: transfer.token.tokenId,\n    };\n\n    const sigHW = async () => {\n      const result = await sign_tools.signTransferWithoutDataStructure(\n        web3,\n        transfer.payerAddr,\n        transfer as loopring_defs.OriginTransferRequestV3,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      // myLog(\"submitDeployNFT iConnectorNames.MetaMask:\", walletType);\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          // myLog(\"submitDeployNFT notHWAddr:\", isHWAddr);\n          const result = await sign_tools.signTransferWithDataStructure(\n            web3,\n            transfer.payerAddr,\n            transfer as loopring_defs.OriginTransferRequestV3,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, transfer.payerAddr);\n      try {\n        if (isContractCheck) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"Transfer ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    if (counterFactualInfo) {\n      transfer.counterFactualInfo = counterFactualInfo;\n    }\n    transfer.eddsaSignature = sign_tools.get_EddsaSig_Transfer(\n      transfer as loopring_defs.OriginTransferRequestV3,\n      eddsaKey\n    ).result;\n    transfer.ecdsaSignature = ecdsaSignature;\n    const dataToSig: Map<string, any> = sortObjDictionary(request);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_DEPLOY_COLLECTION,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n\n  /*\n   * Updates the EDDSA key associated with the specified account, making the previous one invalid in the process.\n   */\n  public async updateAccount<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.UpdateAccountRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const { request, web3, chainId, walletType, isHWAddr: isHWAddrOld } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n\n    const sigHW = async () => {\n      const result = await sign_tools.signUpdateAccountWithoutDataStructure(\n        web3,\n        request,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          const result = await sign_tools.signUpdateAccountWithDataStructure(\n            web3,\n            request,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, request.owner);\n      try {\n        if (isContractCheck) {\n          // myLog('signUpdateAccountWithDataStructureForContract')\n          const result =\n            await sign_tools.signUpdateAccountWithDataStructureForContract(\n              web3,\n              request,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog('ecdsaSignature:', ecdsaSignature)\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signUpdateAccountWithDataStructureForContract(\n              web3,\n              request,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"UpdateAccount ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n    if (counterFactualInfo) {\n      request.counterFactualInfo = counterFactualInfo;\n    }\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.ACCOUNT_ACTION,\n      bodyParams: request,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      ecdsaSignature,\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n  /*\n   * Get the ApiKey associated with the user's account.\n   */\n  public async getUserApiKey<R>(\n    request: loopring_defs.GetUserApiKeyRequest,\n    eddsaKey: string\n  ): Promise<{ raw_data: R; apiKey: string }> {\n    const dataToSig: Map<string, any> = new Map();\n\n    dataToSig.set(\"accountId\", request.accountId);\n\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.API_KEY_ACTION,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    if (raw_data?.resultInfo) {\n      throw {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      return {\n        apiKey: raw_data.apiKey,\n        raw_data,\n      };\n    }\n  }\n\n  /*\n   * Get user txs\n   */\n  public async getUserBills<R>(\n    request: loopring_defs.GetUserBillsRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    userTxs: loopring_defs.UserTx[];\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_BILLS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const userTxs: loopring_defs.UserTx[] = [];\n\n    if (raw_data?.transactions instanceof Array) {\n      raw_data.transactions.forEach((item: loopring_defs.UserTx) => {\n        userTxs.push(item);\n      });\n    }\n\n    return {\n      totalNum: raw_data?.totalNum,\n      userTxs,\n      raw_data,\n    };\n  }\n}\n","import { BaseAPI, personalSign } from \"./base_api\";\nimport { isContract } from \"./contract_api\";\nimport * as loopring_defs from \"../defs/loopring_defs\";\nimport {\n  ContractType,\n  GetUserTradesRequest,\n  Guardian,\n  HebaoOperationLog,\n  LockHebaoHebaoParam,\n  ModuleType,\n  NetworkWallet,\n  Protector,\n  ReqParams,\n  WalletType,\n} from \"../defs/loopring_defs\";\n\nimport { ReqMethod, SIG_FLAG } from \"../defs/loopring_enums\";\nimport api from \"./ethereum/contracts\";\n\nimport { LOOPRING_URLs } from \"../defs/url_defs\";\nimport {\n  ChainId,\n  ConnectorNames,\n  HEBAO_META_TYPE,\n  RESULT_INFO,\n  SigSuffix,\n} from \"../defs\";\nimport { getEcDSASig, GetEcDSASigType } from \"./sign/sign_tools\";\nimport { sha256 } from \"ethereumjs-util\";\nimport { toHex } from \"../utils\";\nimport { sendRawTx } from \"./contract_api\";\nimport Web3 from \"web3\";\nimport { myLog } from \"../utils/log_tools\";\nimport * as ethUtil from \"ethereumjs-util\";\nimport { LoopringAPI } from \"../tests/MockData\";\nimport { AxiosResponse } from \"axios\";\n\nexport class WalletAPI extends BaseAPI {\n  /*\n   * Get user assets\n   */\n  public async getUserAssets(request: loopring_defs.GetUserAssetsRequest) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_USER_ASSETS,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    const assetSeries: string[] = [];\n    const timestampSeries: number[] = [];\n    const dateSeries: string[] = [];\n\n    if (raw_data?.data instanceof Array) {\n      raw_data.data.forEach((item: loopring_defs.UserAssetInfo) => {\n        assetSeries.push(item.amount);\n        timestampSeries.push(item.createdAt);\n        dateSeries.push(item.createdAtStr);\n      });\n    }\n\n    return {\n      assetSeries,\n      timestampSeries,\n      dateSeries,\n      userAssets: raw_data.data as loopring_defs.UserAssetInfo[],\n      raw_data,\n    };\n  }\n\n  // 1.x\n\n  // 2.0\n  // const TYPE_STR =\n  //   \"recover(address wallet,uint256 validUntil,address newOwner,address[] newGuardians)\";\n  // const RECOVER_TYPEHASH = ethUtil.keccak(Buffer.from(TYPE_STR));\n  //\n  // const guardiansBs = encodeAddressesPacked(guardians);\n  // const guardiansHash = ethUtil.keccak(guardiansBs);\n  //\n  // const encodedRequest = ethAbi.encodeParameters(\n  //   [\"bytes32\", \"address\", \"uint256\", \"address\", \"bytes32\"],\n  //   [RECOVER_TYPEHASH, walletAddress, validUntil, newOwner, guardiansHash]\n  // );\n  //\n  //   const encodedRequest = web3.eth.abi.encodeParameters(\n  //     [\"bytes32\", \"address\", \"uint256\", \"address\"],\n  //     [RECOVER_TYPEHASH, request.wallet, request.validUntil, newOwner]\n  //   );\n  private getApproveRecoverTypedData(\n    chainId: ChainId,\n    guardiaContractAddress: any,\n    wallet: any,\n    validUntil: any,\n    newOwner: any\n  ) {\n    const typedData = {\n      types: {\n        EIP712Domain: [\n          { name: \"name\", type: \"string\" },\n          { name: \"version\", type: \"string\" },\n          { name: \"chainId\", type: \"uint256\" },\n          { name: \"verifyingContract\", type: \"address\" },\n        ],\n        recover: [\n          { name: \"wallet\", type: \"address\" },\n          { name: \"validUntil\", type: \"uint256\" },\n          { name: \"newOwner\", type: \"address\" },\n        ],\n      },\n      domain: {\n        name: \"GuardianModule\",\n        version: \"1.2.0\",\n        chainId: chainId,\n        verifyingContract: guardiaContractAddress,\n      },\n      primaryType: \"recover\",\n      message: {\n        wallet: wallet,\n        validUntil: validUntil,\n        newOwner: newOwner,\n      },\n    };\n    return typedData;\n  }\n  public getApproveRecoverV2TypedData(\n    chainId: ChainId,\n    guardiaContractAddress: any,\n    wallet: any,\n    validUntil: any,\n    newOwner: any,\n    newGuardians: Buffer | any\n  ) {\n    const typedData = {\n      types: {\n        EIP712Domain: [\n          { name: \"name\", type: \"string\" },\n          { name: \"version\", type: \"string\" },\n          { name: \"chainId\", type: \"uint256\" },\n          { name: \"verifyingContract\", type: \"address\" },\n        ],\n        recover: [\n          { name: \"wallet\", type: \"address\" },\n          { name: \"validUntil\", type: \"uint256\" },\n          { name: \"newOwner\", type: \"address\" },\n          { name: \"newGuardians\", type: \"string\" },\n        ],\n      },\n      domain: {\n        name: \"GuardianModule\",\n        version: \"1.2.0\",\n        chainId: chainId,\n        verifyingContract: guardiaContractAddress,\n      },\n      primaryType: \"recover\",\n      message: {\n        wallet: wallet,\n        validUntil: validUntil,\n        newOwner: newOwner,\n        newGuardians: newGuardians,\n      },\n    };\n    return typedData;\n  }\n\n  public rejectApproveHash(request: { approveRecordId: any; signer: any }) {\n    const uri = encodeURIComponent(\n      `${this.baseUrl + LOOPRING_URLs.REJECT_APPROVE_SIGNATURE}`\n    );\n    const params = encodeURIComponent(\n      JSON.stringify({\n        approveRecordId: request.approveRecordId,\n        signer: request.signer,\n      })\n    );\n    const message = `${ReqMethod.POST}&${uri}&${params}`;\n    myLog(\"rejectApproveHash\", message);\n    myLog(\"rejectApproveHash hash\", toHex(sha256(Buffer.from(message))));\n    return toHex(sha256(Buffer.from(message)));\n  }\n\n  /**\n   *\n   * @param approveRecordId  request.id\n   */\n  public async rejectHebao(req: loopring_defs.RejectHebaoRequestV3WithPatch) {\n    const { web3, address, request, chainId } = req;\n    const signHash = this.rejectApproveHash({\n      approveRecordId: request.approveRecordId,\n      signer: request.signer,\n    });\n    const result: any = await personalSign(\n      web3,\n      address,\n      \"\",\n      signHash,\n      ConnectorNames.Unknown,\n      chainId\n    );\n    const dataToSig: Map<string, any> = new Map();\n    dataToSig.set(\"approveRecordId\", request.approveRecordId);\n    dataToSig.set(\"signer\", address);\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.REJECT_APPROVE_SIGNATURE,\n      queryParams: {},\n      method: ReqMethod.POST,\n      bodyParams: request,\n      apiKey: \"\",\n      sigFlag: SIG_FLAG.NO_SIG,\n      sigObj: {\n        sig: result?.sig.slice(0, 132),\n      },\n    };\n\n    let hash: string | undefined = undefined;\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      hash = raw_data.data;\n    }\n    return {\n      hash,\n      raw_data,\n    };\n  }\n\n  public async signHebaoApproveWithoutDataStructure(\n    web3: Web3,\n    owner: string,\n    guardian: Guardian,\n    chainId: ChainId,\n    walletType: ConnectorNames\n  ) {\n    const result = await personalSign(\n      web3,\n      owner,\n      \"\",\n      guardian.messageHash,\n      walletType,\n      chainId\n    );\n    return result;\n  }\n\n  public async signHebaoApproveWithDataStructureForContract(\n    web3: Web3,\n    owner: string,\n    guardian: Guardian,\n    chainId: ChainId,\n    newOwner = \"\",\n    newGuardians: undefined | Buffer | any = undefined,\n    masterCopy: undefined | string = undefined,\n    forwarderModuleAddress: undefined | string = undefined\n  ) {\n    let typedData;\n    myLog(\"forwarderModuleAddress\", forwarderModuleAddress);\n\n    if (forwarderModuleAddress) {\n      typedData = this.getApproveRecoverTypedData(\n        chainId,\n        forwarderModuleAddress,\n        guardian.signedRequest.wallet,\n        guardian.signedRequest.validUntil,\n        newOwner\n      );\n      myLog(\"typedData\", typedData);\n    } else {\n      typedData = this.getApproveRecoverV2TypedData(\n        chainId,\n        masterCopy,\n        guardian.signedRequest.wallet,\n        guardian.signedRequest.validUntil,\n        newOwner,\n        newGuardians\n      );\n      myLog(\"typedData\", typedData);\n    }\n\n    const result = await getEcDSASig(\n      web3,\n      typedData,\n      owner,\n      GetEcDSASigType.Contract,\n      chainId,\n      undefined,\n      \"\",\n      ConnectorNames.Unknown\n      // counterFactualInfo\n    );\n    return { sig: result.ecdsaSig };\n  }\n  public encodeAddressesPacked(addrs: string[]) {\n    const addrsBs = Buffer.concat(\n      addrs.map((a) => {\n        return Buffer.from(\"00\".repeat(12) + a.slice(2), \"hex\");\n      })\n    );\n    myLog(\"addrsBs\", addrsBs.toString());\n    return addrsBs;\n  }\n  public async submitApproveSignature<T extends loopring_defs.TX_HASH_API>(\n    req: loopring_defs.SubmitApproveSignatureRequestWithPatch,\n    guardians: string[] = [],\n    isContract1XAddress?: boolean,\n    masterCopy?: string,\n    forwarderModuleAddress: string = \"\"\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      guardian,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n\n    const sigHW = async () => {\n      const result: any = await this.signHebaoApproveWithoutDataStructure(\n        web3,\n        request.signer,\n        guardian,\n        chainId,\n        walletType\n      );\n      ecdsaSignature = result?.sig + SigSuffix.Suffix03;\n    };\n    // metamask not import hw appWallet.\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.Coinbase ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          const result: any = await this.signHebaoApproveWithoutDataStructure(\n            web3,\n            request.signer,\n            guardian,\n            chainId,\n            walletType\n          );\n          ecdsaSignature = result?.sig + SigSuffix.Suffix03;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, request.signer);\n      try {\n        if (isContractCheck) {\n          let newOwner = undefined,\n            newGuardians = [];\n\n          guardian.businessDataJson.value.value.newOwner\n            ? guardian.businessDataJson.value.value.newOwner\n            : 0;\n          if (\n            guardian.businessDataJson &&\n            guardian.businessDataJson.value &&\n            guardian.businessDataJson.value.value\n          ) {\n            newOwner = guardian.businessDataJson.value.value.newOwner;\n            newGuardians = guardian.businessDataJson.value.value.newGuardians;\n          }\n          const guardiansBs = this.encodeAddressesPacked(newGuardians);\n          const guardiansHash = ethUtil.keccak(guardiansBs);\n          // const guardiansBs =\n          //   LoopringAPI.walletAPI.encodeAddressesPacked(guardian.businessDataJson.value.value.newGuardians);\n          const result =\n            await this.signHebaoApproveWithDataStructureForContract(\n              web3,\n              request.signer,\n              guardian,\n              chainId,\n              newOwner,\n              isContract1XAddress ? undefined : guardiansHash,\n              isContract1XAddress ? undefined : masterCopy,\n              forwarderModuleAddress ? undefined : forwarderModuleAddress\n            );\n          ecdsaSignature = result.sig;\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n    request.signature = ecdsaSignature;\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.SUBMIT_APPROVE_SIGNATURE,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n\n  public async getAddressByENS<R extends any, T extends string>(\n    request: loopring_defs.GetEnsAddressRequest\n  ): Promise<{\n    address: string | undefined;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.RESOLVE_ENS,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    let address: T | undefined;\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      address = raw_data.data as T;\n    }\n    return {\n      address,\n      raw_data,\n    };\n  }\n\n  public async getWalletType<T extends any>(\n    request: loopring_defs.GET_WALLET_TYPE\n  ): Promise<{\n    walletType: WalletType | undefined;\n    raw_data: T;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_WALLET_TYPE,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    let walletType: WalletType | undefined;\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      walletType = raw_data.data;\n    }\n    return {\n      walletType,\n      raw_data,\n    };\n  }\n\n  public async getContractType<T = ContractType>(\n    request: loopring_defs.GET_WALLET_TYPE\n  ): Promise<{\n    contractType: T | undefined;\n    raw_data: T;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_WALLET_CONTRACTVERSION,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    let contractType: T | undefined;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      contractType = raw_data.data[0];\n    }\n    return {\n      contractType,\n      raw_data,\n    };\n  }\n\n  public async getWalletModules<T = ModuleType>(\n    request: loopring_defs.GET_WALLET_TYPE\n  ): Promise<{\n    walletModule: T | undefined;\n    raw_data: T;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_WALLET_MODULES,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    let walletModule: T | undefined;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      walletModule = raw_data.data[0];\n    }\n    return {\n      walletModule,\n      raw_data,\n    };\n  }\n  public async getEnsByAddress<R extends any, T extends string>(\n    request: loopring_defs.GetEnsNameRequest\n  ): Promise<{\n    ensName: string | undefined;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.RESOLVE_NAME,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    let ensName: T | undefined;\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      ensName = raw_data.data as T;\n    }\n    return {\n      ensName,\n      raw_data,\n    };\n  }\n\n  public async lockHebaoWallet({\n    web3,\n    from,\n    contractAddress,\n    gasPrice,\n    gasLimit = 150000,\n    chainId = 1,\n    wallet,\n    nonce,\n    isVersion1,\n  }: // sendByMetaMask = true,\n  LockHebaoHebaoParam) {\n    if (isVersion1) {\n      const data = api.Contracts.HeBao.encodeInputs(\"lock\", {\n        wallet,\n      });\n\n      return await sendRawTx(\n        web3,\n        from,\n        contractAddress,\n        0,\n        data,\n        chainId,\n        nonce,\n        gasPrice,\n        Number(gasLimit),\n        true\n      );\n    } else {\n      // const data = api.Contracts.HeBao.encodeInputs(\"lock\", {});\n      return await sendRawTx(\n        web3,\n        from,\n        contractAddress,\n        0,\n        \"0xf83d08ba\",\n        chainId,\n        nonce,\n        gasPrice,\n        Number(gasLimit),\n        true\n      );\n    }\n  }\n\n  public async getHebaoConfig(request: { network?: NetworkWallet }) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_HEBAO_CONFIG,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data: raw_data.data };\n  }\n\n  public async sendMetaTx<R extends any, T extends any>(\n    request: loopring_defs.SendMetaTxRequest,\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.SEND_META_TX,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      bodyParams: request,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data };\n  }\n\n  public async getGuardianApproveList<R extends any, T extends Guardian>(\n    request: loopring_defs.GetGuardianApproveListRequest\n  ): Promise<{\n    guardiansArray: Array<T>;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_GUARDIAN_APPROVE_LIST,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    let guardiansArray: Array<T> = [];\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      guardiansArray = raw_data?.data?.guardians.map((r: any) => ({\n        ens: r.ens ? r.ens : \"\",\n        address: r.wallet,\n        type: HEBAO_META_TYPE[r.metaTxType],\n        id: r.approveId,\n        messageHash: r.txAwareHash,\n        businessDataJson: r.businessDataJson,\n        signedRequest: r.signedRequest,\n        ...r,\n      }));\n    }\n    return {\n      guardiansArray,\n      raw_data,\n    };\n  }\n\n  // /api/appWallet/v3/operationLogs?from=0x189a3c44a39c5ab22712543c0f62a9833bbe8df9&fromTime=0&to=&offset=0&network=ETHEREUM&statues=&hebaoTxType=&limit=20\n\n  /**\n   * getProtectors\n   * @param {GetUserTradesRequest} request\n   * @param apiKey\n   */\n  public async getProtectors<R extends any, T extends Protector>(\n    request: loopring_defs.GetProtectorRequest,\n    apiKey: string\n  ): Promise<{\n    protectorArray: Array<T>;\n\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_PROTECTORS,\n      apiKey: apiKey,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    let protectorArray: Array<T> = [];\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    } else {\n      protectorArray = raw_data?.data.map((p: any) => ({\n        ens: p.protectEns,\n        address: p.protectAddress,\n        lockStatus: p.walletStatus?.toUpperCase(),\n      }));\n    }\n    return {\n      protectorArray,\n      raw_data,\n    };\n  }\n\n  /*\n   * Get user trade amount\n   */\n  public async getHebaoOperationLogs<\n    R extends any,\n    T extends HebaoOperationLog\n  >(\n    request: loopring_defs.HebaoOperationLogs\n  ): Promise<{\n    operationArray: Array<T>;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_OPERATION_LOGS,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      operationArray: raw_data.data as T[],\n      raw_data,\n    };\n  }\n\n  /*\n   * Get user trade amount\n   */\n  public async getUserTradeAmount(request: loopring_defs.GetUserTradeAmount) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_USER_TRADE_AMOUNT,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n    };\n  }\n\n  /*\n   * Get token prices\n   * e.g. http://api3.loopring.io/api/wallet/v3/tokenPrices?token=0xdac17f958d2ee523a2206206994597c13d831ec7&intervalType=1&limit=30&currency=CNY\n   */\n  public async getTokenPrices(request: loopring_defs.GetTokenPricesRequest) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_TOKEN_PRICES,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const priceSeries: string[] = [];\n    const timestampSeries: number[] = [];\n\n    if (raw_data?.data instanceof Array) {\n      raw_data.data.forEach((item: loopring_defs.TokenPriceInfo) => {\n        priceSeries.push(item.price);\n        timestampSeries.push(item.createdAt);\n      });\n    }\n\n    return {\n      tokenPrices: raw_data.data as loopring_defs.TokenPriceInfo[],\n      priceSeries,\n      timestampSeries,\n      raw_data,\n    };\n  }\n\n  /*\n   * Fetches, for all the tokens supported by Loopring, their fiat price.\n   * response: { [key: string]: <price> }  key is token address\n   */\n  public async getLatestTokenPrices(\n    request?: loopring_defs.getLatestTokenPricesRequest\n  ) {\n    const reqParams: ReqParams = {\n      queryParams: request,\n      url: LOOPRING_URLs.GET_LATEST_TOKEN_PRICES,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const tokenPrices: loopring_defs.LoopringMap<number> = {};\n\n    if (raw_data?.data instanceof Array) {\n      raw_data.data.forEach((item: any) => {\n        tokenPrices[item.token.toLowerCase()] = parseFloat(item.price);\n      });\n    }\n\n    return {\n      tokenPrices,\n      raw_data,\n    };\n  }\n}\n","import { BaseAPI } from \"./base_api\";\n\nimport { ReqParams } from \"../defs/loopring_defs\";\n\nimport { SIG_FLAG, ReqMethod } from \"../defs/loopring_enums\";\n\nimport { LOOPRING_URLs } from \"../defs/url_defs\";\n\nimport * as loopring_defs from \"../defs/loopring_defs\";\n\nimport * as sign_tools from \"./sign/sign_tools\";\n\nexport class WhitelistedUserAPI extends BaseAPI {\n  /*\n   * Submit offchain withdraw request\n   * not supported for now.\n   */\n  private async submitOffchainWithdraw(\n    request: loopring_defs.OffChainWithdrawalRequestV3,\n    eddsaKey: string,\n    apiKey: string\n  ) {\n    request.eddsaSignature = sign_tools.get_EddsaSig_OffChainWithdraw(\n      request,\n      eddsaKey\n    ).result;\n\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.WITHDRAWALS_ACTION,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n    };\n  }\n\n  /*\n   * Submit offchain withdraw request\n   */\n  public async submitInternalTransfer(\n    request: loopring_defs.OriginTransferRequestV3,\n    eddsaKey: string,\n    apiKey: string\n  ) {\n    request.eddsaSignature = sign_tools.get_EddsaSig_Transfer(\n      request,\n      eddsaKey\n    ).result;\n\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.POST_INTERNAL_TRANSFER,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport { BaseAPI } from \"./base_api\";\nimport { CollectionMeta, LOOPRING_URLs, RESULT_INFO } from \"../defs\";\nimport {\n  ChainId,\n  ConnectorError,\n  LoopringErrorCode,\n  NftData,\n  NFTFactory,\n  NFTTokenInfo,\n  ReqMethod,\n  ReqParams,\n  SIG_FLAG,\n} from \"../defs\";\nimport { myLog } from \"../utils/log_tools\";\nimport * as ethUtil from \"ethereumjs-util\";\nimport { genExchangeData, sendRawTx } from \"./contract_api\";\nimport contracts from \"./ethereum/contracts\";\nimport {\n  ApproveParam,\n  CallRefreshNFT,\n  ContractNFTMetaParam,\n  DepositNFTParam,\n  IsApproveParam,\n  UserNFTBalanceParam,\n} from \"../defs/nft_defs\";\nimport BN from \"bn.js\";\nimport * as loopring_defs from \"../defs/loopring_defs\";\n\nconst CREATION_CODE = {\n  [ChainId.GOERLI]:\n    \"3d602d80600a3d3981f3363d3d373d3d3d363d735854e62554ce1c146a375c370bc0d323368b372d5af43d82803e903d91602b57fd5bf3\",\n  [ChainId.MAINNET]:\n    \"3d602d80600a3d3981f3363d3d373d3d3d363d73b25f6d711aebf954fb0265a3b29f7b9beba7e55d5af43d82803e903d91602b57fd5bf3\",\n};\n\nexport enum NFTType {\n  ERC1155 = 0,\n  ERC721,\n}\n\nexport enum NFT_TYPE_STRING {\n  ERC1155 = \"ERC1155\",\n  ERC721 = \"ERC721\",\n}\n\nexport enum NFTMethod {\n  setApprovalForAll = \"setApprovalForAll\",\n  isApprovedForAll = \"isApprovedForAll\",\n  uri = \"uri\",\n  tokenURI = \"tokenURI\",\n  depositNFT = \"depositNFT\",\n  balanceOf = \"balanceOf\",\n  ownerOf = \"ownerOf\",\n  // Deposit = 'deposit',\n  // ForceWithdraw = 'forceWithdraw'\n}\n\nexport class NFTAPI extends BaseAPI {\n  private async callContractMethod(\n    web3: any,\n    method: string,\n    data: any[],\n    contractAddress: string,\n    type: NFTType = NFTType.ERC1155\n  ) {\n    // return _genContractData(Contracts.ERC20Token, method, data)\n    const contract = this._genContract(web3, contractAddress, type);\n    return contract.methods[method](...data).call();\n  }\n\n  private _genContractData(Contract: any, method: string, data: any) {\n    return Contract.encodeInputs(method, data);\n  }\n\n  private _genERC1155Data(method: string, data: any) {\n    return this._genContractData(contracts.Contracts.ERC1155, method, data);\n  }\n\n  private _genERC721Data(method: string, data: any) {\n    return this._genContractData(contracts.Contracts.ERC721, method, data);\n  }\n\n  private _genContract(\n    web3: any,\n    contractAddress: string,\n    type: NFTType = NFTType.ERC1155\n  ) {\n    return new web3.eth.Contract(\n      type === NFTType.ERC1155\n        ? contracts.Contracts.erc1155Abi\n        : contracts.Contracts.erc721Abi,\n      contractAddress\n    );\n  }\n\n  /**\n   * getNFTBalance\n   * @param web3\n   * @param tokenAddress\n   * @param account\n   * @param nftId\n   * @param nftType\n   */\n  public async getNFTBalance({\n    web3,\n    tokenAddress,\n    account,\n    nftId,\n    nftType = NFTType.ERC1155,\n  }: UserNFTBalanceParam): Promise<{\n    count?: string;\n  }> {\n    try {\n      if (nftType === NFTType.ERC721) {\n        const result: string = await this.callContractMethod(\n          web3,\n          NFTMethod.ownerOf,\n          [nftId],\n          tokenAddress,\n          nftType\n        );\n        if (result.toLowerCase() === account.toLowerCase()) {\n          return {\n            count: \"1\",\n          };\n        } else {\n          return {\n            count: \"0\",\n          };\n        }\n      } else {\n        const result: string = await this.callContractMethod(\n          web3,\n          NFTMethod.balanceOf,\n          [account, web3.utils.hexToNumberString(nftId)],\n          tokenAddress,\n          nftType\n        );\n        return {\n          count: result.toString(),\n        };\n      }\n    } catch (err) {\n      return {\n        ...(err as any),\n        code: LoopringErrorCode.CONTRACTNFT_BALANCE,\n        message: ConnectorError.CONTRACTNFT_BALANCE,\n      };\n    }\n  }\n\n  /**\n   * getInfoForNFTTokens\n   * @param nftDatas NftData[]\n   */\n  public async getInfoForNFTTokens({\n    nftDatas,\n  }: {\n    nftDatas: NftData[];\n  }): Promise<{ [key: string]: NFTTokenInfo } | undefined> {\n    try {\n      const reqParams: ReqParams = {\n        sigFlag: SIG_FLAG.NO_SIG,\n        url: LOOPRING_URLs.GET_NFTs_INFO,\n        method: ReqMethod.GET,\n        queryParams: { nftDatas: nftDatas.join(\",\") },\n      };\n      const raw_data = (await this.makeReq().request(reqParams)).data;\n      if (raw_data?.resultInfo) {\n        return {\n          ...raw_data?.resultInfo,\n        };\n      }\n      const result = raw_data.reduce(\n        (prev: { [key: string]: NFTTokenInfo }, item: NFTTokenInfo) => {\n          if (item.nftId && item.nftId.startsWith(\"0x\")) {\n            const hashBN = new BN(item.nftId.replace(\"0x\", \"\"), 16);\n            item.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n          }\n          prev[item.nftData] = item;\n          return prev;\n        },\n        {}\n      );\n      return {\n        ...result,\n        raw_data,\n      };\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  public async callRefreshNFT(\n    request: CallRefreshNFT\n  ): Promise<\n    { status: string; createdAt: number; updatedAt: number } | undefined\n  > {\n    try {\n      const reqParams: ReqParams = {\n        sigFlag: SIG_FLAG.NO_SIG,\n        bodyParams: request,\n        url: LOOPRING_URLs.POST_NFT_VALIDATE_REFRESH_NFT,\n        method: ReqMethod.POST,\n      };\n      const raw_data = (await this.makeReq().request(reqParams)).data;\n      if (raw_data?.resultInfo) {\n        return {\n          ...raw_data?.resultInfo,\n        };\n      }\n      const result = raw_data.reduce(\n        (prev: { [key: string]: NFTTokenInfo }, item: NFTTokenInfo) => {\n          if (item.nftId && item.nftId.startsWith(\"0x\")) {\n            const hashBN = new BN(item.nftId.replace(\"0x\", \"\"), 16);\n            item.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n          }\n          prev[item.nftData] = item;\n          return prev;\n        },\n        {}\n      );\n      return {\n        ...result,\n        raw_data,\n      };\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  /**\n   * getContractNFTMeta\n   * @param web3\n   * @param tokenAddress\n   * @param _id\n   * @param nftType\n   */\n  public async getContractNFTMeta(\n    {\n      web3,\n      tokenAddress,\n      nftId,\n      nftType = NFTType.ERC1155,\n    }: ContractNFTMetaParam,\n    _IPFS_META_URL: string = LOOPRING_URLs.IPFS_META_URL\n  ) {\n    try {\n      myLog(tokenAddress, \"nftid\", nftId, web3.utils.hexToNumberString(nftId));\n      let result: string;\n      result = await this.callContractMethod(\n        web3,\n        nftType === NFTType.ERC1155 ? NFTMethod.uri : NFTMethod.tokenURI,\n        [web3.utils.hexToNumberString(nftId)],\n        tokenAddress,\n        nftType\n      );\n      result = result.replace(\n        /^ipfs:\\/\\/(ipfs\\/)?/,\n        LOOPRING_URLs.IPFS_META_URL\n      );\n      result = result.replace(\"{id}\", web3.utils.hexToNumberString(nftId));\n      return await fetch(result).then((response) => response.json());\n    } catch (err) {\n      return {\n        code: LoopringErrorCode.CONTRACTNFT_URI,\n        message: ConnectorError.CONTRACTNFT_URI,\n        ...(err as any),\n      };\n    }\n  }\n\n  /**\n   * approveNFT\n   * @param web3\n   * @param from  The address that deposits the funds to the exchange\n   * @param to  The address deposits to\n   * @param nftId the nftId\n   * @param chainId\n   * @param nftType The type of NFTAction contract address (ERC721/ERC1155/...)\n   * @param nonce\n   * @param gasPrice\n   * @param gasLimit\n   * @param sendByMetaMask\n   */\n  public async approveNFT({\n    web3,\n    from,\n    depositAddress,\n    tokenAddress,\n    nftId,\n    nftType = NFTType.ERC1155,\n    gasPrice,\n    gasLimit,\n    chainId,\n    nonce,\n    approved = true,\n    sendByMetaMask = true,\n  }: ApproveParam) {\n    let data: any;\n\n    if (nftType === NFTType.ERC1155) {\n      data = this._genERC1155Data(NFTMethod.setApprovalForAll, {\n        operator: depositAddress,\n        approved,\n      });\n    } else if (nftType === NFTType.ERC721) {\n      data = this._genERC721Data(NFTMethod.setApprovalForAll, {\n        operator: depositAddress,\n        approved,\n      });\n    }\n    try {\n      return await sendRawTx(\n        web3,\n        from,\n        tokenAddress,\n        \"0\",\n        data,\n        chainId,\n        nonce,\n        gasPrice,\n        gasLimit,\n        sendByMetaMask\n      );\n    } catch (err) {\n      return {\n        ...(err as any),\n        code: LoopringErrorCode.CONTRACTNFT_SET_APPROVE,\n        message: ConnectorError.CONTRACTNFT_SET_APPROVE,\n      };\n    }\n  }\n  public ipfsCid0ToNftID(cidV0Str: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const CID = require(\"cids\");\n    const cid = new CID(cidV0Str);\n    const hashHex = Buffer.from(cid.multihash.slice(2)).toString(\"hex\");\n    const hashBN = new BN(hashHex, 16);\n    return \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n  }\n\n  /**\n   *\n   * @param nftId  16\n   */\n  public ipfsNftIDToCid(nftId: string) {\n    const CID = require(\"cids\");\n    const hashBN = new BN(nftId.replace(\"0x\", \"\"), 16);\n    const hex = hashBN.toString(16, 64);\n    const buf = Buffer.from(\"1220\" + hex, \"hex\");\n    const cid = new CID(buf);\n    return cid.toString();\n  }\n  /**\n   * isApprovedForAll\n   * @param web3\n   * @param from The address that deposits the funds to the exchange\n   * @param exchangeAddress loopring exchange address\n   * @param nftType  NFTType\n   * @param tokenAddress  The address of NFT token\n   */\n  public async isApprovedForAll({\n    web3,\n    from,\n    exchangeAddress,\n    nftType = NFTType.ERC1155,\n    tokenAddress,\n  }: IsApproveParam) {\n    try {\n      const result = await this.callContractMethod(\n        web3,\n        NFTMethod.isApprovedForAll,\n        [from, exchangeAddress],\n        tokenAddress,\n        nftType\n      );\n      return result;\n    } catch (err) {\n      return {\n        ...(err as any),\n        code: LoopringErrorCode.CONTRACTNFT_IS_APPROVE,\n        message: ConnectorError.CONTRACTNFT_IS_APPROVE,\n      };\n    }\n  }\n\n  /**\n   * @DepositParam  an NFTAction to the specified account.\n   * @param web3\n   * @param from The address that deposits the funds to the exchange\n   * @param to The account owner's address receiving the funds\n   * @param nftType The type of NFTAction contract address (ERC721/ERC1155/...)\n   * @param tokenAddress The address of NFTAction token\n   * @param nftId The token type 'id`.\n   * @param amount The amount of tokens to deposit.\n   * @param nonce: number,\n   * @param gasPrice: number,\n   * @param gasLimit: number,\n   * @param extraData Optional extra data used by the deposit contract.\n   * @param chainId  0|5\n   * @param sendByMetaMask boolean\n   */\n  public async depositNFT({\n    web3,\n    from,\n    exchangeAddress,\n    nftType = NFTType.ERC1155,\n    tokenAddress,\n    nftId,\n    amount,\n    gasPrice,\n    gasLimit,\n    chainId = ChainId.MAINNET,\n    nonce,\n    extraData,\n    sendByMetaMask = true,\n  }: DepositNFTParam) {\n    const data = genExchangeData(NFTMethod.depositNFT, {\n      from,\n      to: from,\n      nftType,\n      tokenAddress,\n      nftId,\n      amount,\n      extraData: extraData ? extraData : \"\",\n    });\n    // myLog('depositNFT data',data)\n    return await sendRawTx(\n      web3,\n      from,\n      exchangeAddress,\n      \"0\",\n      data,\n      chainId,\n      nonce,\n      gasPrice,\n      gasLimit,\n      sendByMetaMask\n    );\n  }\n\n  /**\n   *\n   * @function computeNFTAddress\n   * @param owner {string} nftOwner address\n   * @param nftFactory {string} Hash address\n   * @return tokenAddress\n   * @throws Error\n   */\n  public computeNFTAddress({\n    nftOwner,\n    nftFactory = \"0xDB42E6F6cB2A2eFcF4c638cb7A61AdE5beD82609\",\n    nftBaseUri = \"\",\n  }: {\n    nftOwner: string;\n    nftFactory?: string;\n    nftBaseUri?: string;\n  }): { tokenAddress: string } {\n    try {\n      if (!nftFactory) {\n        nftFactory = NFTFactory[this.chainId];\n      }\n      if (nftOwner.startsWith(\"0x\")) {\n        nftOwner = nftOwner.slice(2);\n      }\n\n      const saltBuf = Buffer.concat([\n        Buffer.from(\"NFT_CONTRACT_CREATION\", \"utf8\"),\n        Buffer.from(nftOwner, \"hex\"),\n        Buffer.from(nftBaseUri, \"utf8\"),\n      ]);\n\n      const codeHash = ethUtil.keccak(\n        Buffer.from(CREATION_CODE[this.chainId], \"hex\")\n      );\n\n      const saltHash = ethUtil.keccak(saltBuf);\n\n      const rawBuf = Buffer.concat([\n        Buffer.from(\"ff\", \"hex\"),\n        Buffer.from(nftFactory.slice(2), \"hex\"),\n        saltHash,\n        codeHash,\n      ]);\n\n      const addr = ethUtil.keccak(rawBuf).slice(12).toString(\"hex\");\n      return {\n        tokenAddress: ethUtil.toChecksumAddress(\"0x\" + addr),\n      };\n    } catch (err) {\n      return err as any;\n    }\n  }\n\n  public async getPublicCollectionById<R extends CollectionMeta>(request: {\n    id: string;\n  }): Promise<({ raw_data: R } & CollectionMeta) | RESULT_INFO> {\n    try {\n      const reqParams: ReqParams = {\n        sigFlag: SIG_FLAG.NO_SIG,\n        queryParams: request,\n        url: LOOPRING_URLs.GET_NFT_COLLECTION_PUBLISH,\n        method: ReqMethod.GET,\n      };\n      const raw_data = (await this.makeReq().request(reqParams)).data;\n      if (raw_data?.resultInfo) {\n        return {\n          ...raw_data?.resultInfo,\n        };\n      }\n      const result = raw_data as CollectionMeta;\n      return {\n        ...result,\n        raw_data,\n      };\n    } catch (err) {\n      return {\n        ...(err as any),\n        code: exports.LoopringErrorCode.SKD_UNKNOW,\n      };\n    }\n  }\n\n  async getCollectionWholeNFTs<R>(\n    request: loopring_defs.GetCollectionWholeNFTsRequest\n  ) {\n    const reqParams = {\n      url: LOOPRING_URLs.GET_COLLECTION_WHOLE_NFTS,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    if (raw_data.nftTokenInfos.length) {\n      raw_data.nftTokenInfos = raw_data.nftTokenInfos.reduce(\n        (\n          prev: loopring_defs.UserNFTBalanceInfo[],\n          item: loopring_defs.UserNFTBalanceInfo\n        ) => {\n          if (item.nftId && item.nftId.startsWith(\"0x\")) {\n            const hashBN = new BN(item.nftId.replace(\"0x\", \"\"), 16);\n            item.nftId = \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n            if (\n              request.metadata === true &&\n              item.metadata &&\n              item.metadata.nftId &&\n              item.metadata.nftId.startsWith(\"0x\")\n            ) {\n              // const hashBN = new BN(item.metadata.nftId.replace(\"0x\", \"\"), 16);\n              item.metadata.nftId =\n                \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n            }\n          }\n          return [...prev, item];\n        },\n        []\n      );\n      // const hashBN = new BN(raw_data.transactions.metadata.nftId.replace(\"0x\", \"\"), 16);\n      // raw_data.transactions.metadata.nftId= \"0x\" + hashBN.toString(\"hex\").padStart(64, \"0\");\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      userNFTBalances:\n        raw_data.nftTokenInfos as loopring_defs.UserNFTBalanceInfo[],\n      raw_data,\n    };\n  }\n}\n","import { BaseAPI } from \"./base_api\";\n\nimport { LOOPRING_URLs } from \"../defs/url_defs\";\n\nimport {\n  OffchainFeeReqType,\n  ReqMethod,\n  SIG_FLAG,\n} from \"../defs/loopring_enums\";\n\nimport {\n  GameRankInfo,\n  GetAmmPoolGameUserRankRequest,\n  ReqParams,\n} from \"../defs/loopring_defs\";\nimport { ChainId } from \"../defs\";\nimport * as loopring_defs from \"../defs/loopring_defs\";\nimport { sortObjDictionary } from \"../utils\";\n\nconst GLOBAL_KEY = {\n  GOERLI: {\n    key: \"685xvATlBCsvzyiTxaS02vu0b1xN0DAFpNpslKUNCuSxDhx8gyyz8VmvUqqe5HSQ\",\n    id: 10013,\n  },\n  MAIN: {\n    key: \"re356TcrQ6KhlpkvWxP4UN0C4EqxQVV7ZjvLjunwTjaQPZ20ue2ZgClFeT7okpDQ\",\n    id: 22638,\n  },\n};\n\nexport class GlobalAPI extends BaseAPI {\n  public async getActiveFeeInfo(request: { accountId?: number }) {\n    const _request: loopring_defs.GetOffchainFeeAmtRequest = {\n      accountId: request.accountId\n        ? request.accountId\n        : this.chainId === ChainId.MAINNET\n        ? GLOBAL_KEY.MAIN.id\n        : GLOBAL_KEY.GOERLI.id,\n      requestType: OffchainFeeReqType.UPDATE_ACCOUNT,\n    };\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_OFFCHAIN_FEE_AMT,\n      queryParams: _request,\n      apiKey:\n        this.chainId === ChainId.MAINNET\n          ? GLOBAL_KEY.MAIN.key\n          : GLOBAL_KEY.GOERLI.key,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const gasPrice = parseInt(raw_data.gasPrice);\n    const fees: loopring_defs.LoopringMap<loopring_defs.OffchainFeeInfo> = {};\n    if (raw_data?.fees instanceof Array) {\n      raw_data.fees.forEach((item: loopring_defs.OffchainFeeInfo) => {\n        fees[item.token] = item;\n      });\n    }\n\n    return {\n      fees,\n      gasPrice,\n      raw_data,\n    };\n  }\n  public async getUserBalanceForFee(request: {\n    accountId: number;\n    tokens: string;\n  }) {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_USER_EXCHANGE_BALANCES,\n      queryParams: request,\n      apiKey:\n        this.chainId === ChainId.MAINNET\n          ? GLOBAL_KEY.MAIN.key\n          : GLOBAL_KEY.GOERLI.key,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const userBalances: loopring_defs.LoopringMap<loopring_defs.UserBalanceInfo> =\n      {};\n\n    if (raw_data instanceof Array) {\n      raw_data.forEach((item: loopring_defs.UserBalanceInfo) => {\n        userBalances[item.tokenId] = item;\n      });\n    }\n\n    return {\n      userBalances,\n      raw_data,\n    };\n  }\n  public async getAmmPoolGameUserRank<R>(\n    request: GetAmmPoolGameUserRankRequest\n  ): Promise<{\n    raw_data: R;\n    userRank: GameRankInfo;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_AMMPOOL_GAME_USER_RANK,\n      queryParams: request,\n      apiKey:\n        this.chainId === ChainId.MAINNET\n          ? GLOBAL_KEY.MAIN.key\n          : GLOBAL_KEY.GOERLI.key,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n    const userRank: GameRankInfo = raw_data.data;\n    return {\n      userRank,\n      raw_data: raw_data.data,\n    };\n  }\n  public async getBanxaAPI<R>(\n    {\n      method,\n      query,\n      payload,\n      url,\n      accountId,\n    }: {\n      method: ReqMethod;\n      query: string;\n      payload: string;\n      url: string;\n      accountId: number;\n    },\n    eddsaKey: string,\n    apiKey: string\n  ): Promise<{\n    result: R;\n    raw_data: R;\n  }> {\n    const queryParams = {\n      accountId,\n      url,\n      method: method.toString(),\n      query: query,\n      payload: payload ? payload : \"\",\n    };\n    const dataToSig = sortObjDictionary({\n      ...queryParams,\n      url: encodeURIComponent(queryParams.url),\n      query: encodeURIComponent(queryParams.query),\n      payload: encodeURIComponent(queryParams.payload),\n    });\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_BANXA_API_KEY,\n      method: ReqMethod.GET,\n      queryParams,\n      apiKey,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        PrivateKey: eddsaKey,\n        dataToSig: dataToSig,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data.resultInfo,\n      };\n    }\n    return {\n      result: raw_data.result,\n      raw_data: raw_data,\n    };\n  }\n  // public async getBanxaAPIRequest<R>({}) {}\n  // http://dev.loopring.io?method=GET&query=/api/coins&payload\n}\n","import { BaseAPI } from \"./base_api\";\n\nimport { LOOPRING_URLs } from \"../defs\";\nimport { ChainId, ReqMethod, ReqParams, SIG_FLAG } from \"../defs\";\n\nexport class DelegateAPI extends BaseAPI {\n  public async getCode(address: string): Promise<string> {\n    const reqParams: ReqParams = {\n      sigFlag: SIG_FLAG.NO_SIG,\n      url: LOOPRING_URLs.GET_DELEGATE_GET_CODE,\n      method: ReqMethod.POST,\n      bodyParams: {address},\n    };\n\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return raw_data;\n  }\n\n  public async getIPFS(path: string): Promise<string> {\n    const reqParams: ReqParams = {\n      sigFlag: SIG_FLAG.NO_SIG,\n      url: LOOPRING_URLs.GET_DELEGATE_GET_IPFS,\n      method: ReqMethod.GET,\n      queryParams: {path},\n    };\n\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo && raw_data?.resultInfo.code) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return raw_data;\n  }\n\n  public getCollectionDomain() {\n    return this.chainId === ChainId.GOERLI ? \"https://uatnftinfos.loopring.io\" : \"https://nftinfos.loopring.io\"\n  }\n}\n","/* eslint-disable camelcase  */\nimport { BaseAPI } from \"./base_api\";\n\nimport * as loopring_defs from \"../defs/loopring_defs\";\nimport { SEP } from \"../defs\";\nimport {\n  ConnectorNames,\n  LOOPRING_URLs,\n  ReqMethod,\n  ReqParams,\n  RESULT_INFO,\n  SIG_FLAG,\n  SigPatchField,\n  SigSuffix,\n  SoursURL,\n} from \"../defs\";\nimport { sortObjDictionary } from \"../utils\";\nimport * as sign_tools from \"./sign/sign_tools\";\nimport { isContract } from \"./contract_api\";\nimport { AxiosResponse } from \"axios\";\nimport { DepthData } from \"../defs/loopring_defs\";\nimport { getMidPrice } from \"./exchange_api\";\n\nexport class DefiAPI extends BaseAPI {\n  /*\n   * Returns the fee rate of users placing orders in specific markets\n   */\n  public async getDefiToken<R>(): Promise<{\n    raw_data: R;\n    tokensMap: loopring_defs.LoopringMap<loopring_defs.TokenInfo>;\n    idIndex: loopring_defs.LoopringMap<string>;\n    addressIndex: loopring_defs.LoopringMap<loopring_defs.TokenAddress>;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_DEFI_TOKENS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    const tokensMap: loopring_defs.LoopringMap<loopring_defs.TokenInfo> = {};\n    const addressIndex: loopring_defs.LoopringMap<loopring_defs.TokenAddress> =\n      {};\n    const idIndex: loopring_defs.LoopringMap<string> = {};\n    if (raw_data instanceof Array) {\n      raw_data.forEach((item: loopring_defs.TokenInfo) => {\n        if (item.symbol.startsWith(\"LP-\")) {\n          item.isLpToken = true;\n        } else {\n          item.isLpToken = false;\n        }\n        tokensMap[item.symbol] = item;\n\n        const coinInfo = {\n          icon: SoursURL + `ethereum/assets/${item.address}/logo.png`,\n          name: item.symbol,\n          simpleName: item.symbol,\n          description: item.type,\n          company: \"\",\n        };\n        // totalCoinMap[item.symbol] = coinInfo;\n        addressIndex[item.address.toLowerCase()] = item.symbol;\n        idIndex[item.tokenId] = item.symbol;\n      });\n    }\n\n    return {\n      tokensMap,\n      idIndex,\n      addressIndex,\n      raw_data,\n    };\n  }\n\n  public async getDefiMarkets<R>(\n    request: loopring_defs.GetDefiMarketRequest,\n    url: string = LOOPRING_URLs.GET_DEFI_MARKETS\n  ): Promise<{\n    markets: loopring_defs.LoopringMap<loopring_defs.DefiMarketInfo>;\n    pairs: loopring_defs.LoopringMap<loopring_defs.TokenRelatedInfo>;\n    tokenArr: string[];\n    tokenArrStr: string;\n    marketArr: string[];\n    marketArrStr: string;\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url,\n      queryParams: {}, //request\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const markets: loopring_defs.LoopringMap<loopring_defs.DefiMarketInfo> = {};\n\n    const pairs: loopring_defs.LoopringMap<loopring_defs.TokenRelatedInfo> = {};\n\n    // const isMix = url === LOOPRING_URLs.GET_MIX_MARKETS;\n\n    if (raw_data?.markets instanceof Array) {\n      const types = request?.defiType?.split(\",\");\n      let _markets = [];\n      if (types) {\n        _markets = raw_data.markets.filter(\n          (item: loopring_defs.DefiMarketInfo) =>\n            types.includes(item.type?.toUpperCase())\n        );\n      } else {\n        _markets = raw_data.markets;\n      }\n      _markets.forEach((item: any) => {\n        const marketInfo: loopring_defs.DefiMarketInfo = {\n          ...item,\n        };\n\n        markets[item.market] = marketInfo;\n\n        if (item.enabled) {\n          const [_markets, type, base, quote] =\n            item.market.match(/^(\\w+-)?(\\w+)-(\\w+)$/i);\n          if (type === \"DUAL-\" && base && quote) {\n            if (!pairs[base]) {\n              pairs[base] = {\n                tokenId: item.baseTokenId,\n                tokenList: [quote],\n              };\n            } else {\n              pairs[base].tokenList = [...pairs[base].tokenList, quote];\n            }\n            if (!pairs[quote]) {\n              pairs[quote] = {\n                tokenId: item.baseTokenId,\n                tokenList: [base],\n              };\n            } else {\n              pairs[quote].tokenList = [...pairs[quote].tokenList, base];\n            }\n          } else if (base && quote) {\n            const market: string = item.market;\n            // const ind = market.indexOf(\"-\");\n            // const base = market.substring(0, ind);\n            // const quote = market.substring(ind + 1, market.length);\n\n            if (!pairs[base]) {\n              pairs[base] = {\n                tokenId: item.baseTokenId,\n                tokenList: [quote],\n              };\n            } else {\n              pairs[base].tokenList = [...pairs[base].tokenList, quote];\n            }\n          }\n        }\n      });\n    }\n    const marketArr: string[] = Reflect.ownKeys(markets) as string[];\n    const tokenArr: string[] = Reflect.ownKeys(pairs) as string[];\n    return {\n      markets,\n      pairs,\n      tokenArr,\n      tokenArrStr: tokenArr.join(SEP),\n      marketArr,\n      marketArrStr: marketArr.join(SEP),\n      raw_data,\n    };\n  }\n\n  public async orderDefi<R>(\n    request: loopring_defs.DefiOrderRequest,\n    privateKey: string,\n    apiKey: string\n  ): Promise<\n    | (Omit<any, \"resultInfo\"> & { raw_data: Omit<any, \"resultInfo\"> })\n    | RESULT_INFO\n  > {\n    const dataToSig = [\n      request.exchange,\n      request.storageId,\n      request.accountId,\n      request.sellToken.tokenId,\n      request.buyToken.tokenId,\n      request.sellToken.volume,\n      request.buyToken.volume,\n      request.validUntil,\n      request.maxFeeBips,\n      request.fillAmountBOrS ? 1 : 0,\n      0,\n    ];\n\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.POST_DEFI_ORDER,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG_POSEIDON,\n      sigObj: {\n        dataToSig,\n        sigPatch: SigPatchField.EddsaSignature,\n        PrivateKey: privateKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    return this.returnTxHash(raw_data);\n  }\n\n  public async getDefiReward<R>(\n    request: loopring_defs.GetUserDefiRewardRequest,\n    apiKey: string\n  ): Promise<\n    | {\n        raw_data: R;\n        totalNum: number;\n        totalRewards: string;\n        lastDayRewards: string;\n        rewards: [];\n      }\n    | RESULT_INFO\n  > {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DEFI_REWARDS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    return {\n      ...raw_data,\n      raw_data,\n    };\n  }\n\n  public async getDefiTransaction<R>(\n    request: loopring_defs.GetUserDefiTxRequest,\n    apiKey: string\n  ): Promise<\n    | {\n        raw_data: R;\n        totalNum: number;\n        userDefiTxs: loopring_defs.UserDefiTxsHistory[];\n      }\n    | RESULT_INFO\n  > {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DEFI_TRANSACTIONS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    return {\n      totalNum: raw_data?.totalNum,\n      userDefiTxs: raw_data.transactions as loopring_defs.UserDefiTxsHistory[],\n      raw_data,\n    };\n  }\n\n  public async getDualInfos<R>(\n    request: loopring_defs.GetDualInfosRequest\n  ): Promise<\n    | RESULT_INFO\n    | {\n        totalNum: number;\n        dualInfo: {\n          infos: loopring_defs.DualProductAndPrice[];\n          index: loopring_defs.DualIndex;\n          balance: loopring_defs.DualBalance[];\n          rules: loopring_defs.DualRulesCoinsInfo[];\n        };\n        raw_data: R;\n      }\n  > {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DUAL_INFOS,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      totalNum: raw_data?.totalNum,\n      dualInfo: {\n        infos: raw_data.infos as loopring_defs.DualProductAndPrice[],\n        index: raw_data.index as loopring_defs.DualIndex,\n        balance: raw_data.balance as loopring_defs.DualBalance[],\n        rules: raw_data.rules as loopring_defs.DualRulesCoinsInfo[],\n      },\n      raw_data,\n    };\n  }\n\n  public async getDualBalance<R>(request = undefined) {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DUAL_BALANCE,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    return {\n      raw_data,\n      dualBalanceMap: [...raw_data].reduce((prev, item) => {\n        return { ...prev, [item.coin]: item };\n      }, {} as loopring_defs.LoopringMap<loopring_defs.DualBalance>),\n    };\n  }\n\n  // public async getDualRule<R>(request :loopring_defs.GetDualRuleRequest): Promise<RESULT_INFO | {\n  //\n  // \traw_data: R,\n  // }> {\n  // \tconst reqParams: loopring_defs.ReqParams = {\n  // \t\turl: LOOPRING_URLs.GET_DUAL_RULE,\n  // \t\tqueryParams: request,\n  // \t\tmethod: ReqMethod.GET,\n  // \t\tsigFlag: SIG_FLAG.NO_SIG,\n  // \t};\n  // \tconst raw_data = (await this.makeReq().request(reqParams)).data;\n  // \tif (raw_data?.resultInfo) {\n  // \t\treturn {\n  // \t\t\t...raw_data?.resultInfo,\n  // \t\t};\n  // \t}\n  //\n  //\n  // \treturn {\n  // \t\traw_data,\n  // \t\tdualBalanceMap: [...raw_data].reduce((item, prev) => {\n  // \t\t\treturn {...prev, [ item.coin ]: item};\n  // \t\t}, {} as loopring_defs.loopring_defs.LoopringMap<loopring_defs.DualBalance>)\n  // \t}\n  // }\n\n  public async getDualPrices(request: loopring_defs.GetDualPricesRequest) {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DUAL_PRICES,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    return {\n      raw_data,\n      totalNum: raw_data?.totalNum,\n      infos: raw_data.infos as loopring_defs.DualPrice[],\n    };\n  }\n\n  public async getDualIndex(request: {\n    baseSymbol: string;\n    quoteSymbol: string;\n  }) {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DUAL_INDEX,\n      queryParams: request,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n      dualPrice: raw_data as loopring_defs.DualPrice[],\n    };\n  }\n\n  public async getDualTransactions(\n    request: loopring_defs.GetUserDualTxRequest,\n    apiKey: string\n  ) {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DUAL_TRANSACTIONS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    return {\n      totalNum: raw_data?.totalNum,\n      userDualTxs: raw_data.transactions as loopring_defs.UserDualTxsHistory[],\n      raw_data,\n    };\n    return;\n  }\n\n  public async orderDual(\n    request: loopring_defs.DualOrderRequest,\n    privateKey: string,\n    apiKey: string\n  ) {\n    const dataToSig = [\n      request.exchange,\n      request.storageId,\n      request.accountId,\n      request.sellToken.tokenId,\n      request.buyToken.tokenId,\n      request.sellToken.volume,\n      request.buyToken.volume,\n      request.validUntil,\n      request.maxFeeBips,\n      request.fillAmountBOrS ? 1 : 0,\n      0,\n    ];\n\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_DUAL_ORDER,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG_POSEIDON,\n      sigObj: {\n        dataToSig,\n        sigPatch: SigPatchField.EddsaSignature,\n        PrivateKey: privateKey,\n      },\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    return this.returnTxHash(raw_data);\n  }\n\n  public async getDualUserLocked(\n    {\n      lockTag = [\n        loopring_defs.DUAL_TYPE.DUAL_BASE,\n        loopring_defs.DUAL_TYPE.DUAL_CURRENCY,\n      ],\n      ...request\n    }: loopring_defs.DualUserLockedRequest,\n    apiKey: string\n  ) {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_DUAL_USER_LOCKED,\n      queryParams: { ...request, lockTag: lockTag.join(\",\") },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n\n    return {\n      lockRecord: raw_data.lockRecord,\n      raw_data,\n    };\n    return;\n  }\n\n  public async sendStakeClaim(\n    req: loopring_defs.OriginStakeClaimRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ) {\n    const {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options\n      ? options\n      : { accountId: 0 };\n    const { transfer } = request;\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n    transfer.payeeId = 0;\n    transfer.memo = `STAKE-CLAIM->${request.accountId}`;\n\n    const sigHW = async () => {\n      const result = await sign_tools.signTransferWithoutDataStructure(\n        web3,\n        transfer.payerAddr,\n        transfer as loopring_defs.OriginTransferRequestV3,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      // myLog(\"submitDeployNFT iConnectorNames.MetaMask:\", walletType);\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          // myLog(\"submitDeployNFT notHWAddr:\", isHWAddr);\n          const result = await sign_tools.signTransferWithDataStructure(\n            web3,\n            transfer.payerAddr,\n            transfer as loopring_defs.OriginTransferRequestV3,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, transfer.payerAddr);\n      try {\n        if (isContractCheck) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"Transfer ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    if (counterFactualInfo) {\n      transfer.counterFactualInfo = counterFactualInfo;\n    }\n    transfer.eddsaSignature = sign_tools.get_EddsaSig_Transfer(\n      transfer as loopring_defs.OriginTransferRequestV3,\n      eddsaKey\n    ).result;\n    transfer.ecdsaSignature = ecdsaSignature;\n    const dataToSig: Map<string, any> = sortObjDictionary(request);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_STAKE_CLAIM,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n    };\n\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n      if (raw_data?.resultInfo) {\n        return {\n          ...raw_data?.resultInfo,\n        };\n      }\n      return { raw_data, ...raw_data };\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    // return this.returnTxHash(raw_data);\n    // const raw_data = (await this.makeReq().request(reqParams)).data;\n  }\n\n  public async sendStakeRedeem(\n    request: {\n      accountId: number;\n      hash: string;\n      token: loopring_defs.TokenVolumeV3;\n    },\n    privateKey: string,\n    apiKey: string\n  ) {\n    const dataToSig: Map<string, any> = sortObjDictionary(request);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_STAKE_REDEEM,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: privateKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data, ...raw_data };\n  }\n  public async sendStake(\n    request: {\n      accountId: number;\n      token: loopring_defs.TokenVolumeV3;\n      timestamp: number;\n    },\n    privateKey: string,\n    apiKey: string\n  ) {\n    const dataToSig: Map<string, any> = sortObjDictionary(request);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_STAKE,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: privateKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data, ...raw_data };\n  }\n\n  public async getStakeProducts<R>(): Promise<{\n    products: loopring_defs.STACKING_PRODUCT[];\n    raw_data: R;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_STAKE_PRODUCTS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { products: raw_data, raw_data };\n  }\n\n  public async getStakeSummary<R>(\n    request: {\n      accountId: number;\n      tokenId: number;\n      start?: number;\n      end?: number;\n      limit?: number;\n      offset?: number;\n      hashes?: string;\n      statuses?: string;\n    },\n    apiKey: string\n  ): Promise<\n    | {\n        raw_data: R;\n        totalNum: number;\n        totalStaked: string;\n        totalStakedRewards: string;\n        totalLastDayPendingRewards: string;\n        totalClaimableRewards: string;\n        list: loopring_defs.StakeInfoOrigin[];\n      }\n    | RESULT_INFO\n  > {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_STAKE_SUMMARY,\n      queryParams: { ...request },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { ...raw_data, list: raw_data.staking, raw_data };\n  }\n\n  public async getStakeTransactions<R>(\n    request: {\n      accountId: number;\n      tokenId: number;\n      start?: number;\n      end?: number;\n      limit?: number;\n      offset?: number;\n      hashes?: string;\n      types?: string;\n    },\n    apiKey: string\n  ): Promise<{\n    list: loopring_defs.STACKING_TRANSACTIONS[];\n    totalNum: number;\n    raw_data: R;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_STAKE_TRANSACTIONS,\n      queryParams: { ...request },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      list: raw_data,\n      totalNum: raw_data.totalNum,\n      raw_data,\n    };\n  }\n\n  public async getCefiMarkets<R>(): Promise<{\n    markets: loopring_defs.LoopringMap<\n      loopring_defs.CEX_MARKET & { type: \"CEX\" }\n    >;\n    pairs: loopring_defs.LoopringMap<loopring_defs.TokenRelatedInfo>;\n    tokenArr: string[];\n    tokenArrStr: string;\n    marketArr: string[];\n    marketArrStr: string;\n    raw_data: R;\n  }> {\n    const reqParams = {\n      url: LOOPRING_URLs.GET_CEFI_MARKETS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const markets: loopring_defs.LoopringMap<\n      loopring_defs.CEX_MARKET & { type: \"CEX\" }\n    > = {};\n\n    const pairs: loopring_defs.LoopringMap<loopring_defs.TokenRelatedInfo> = {};\n\n    // const isMix = url === LOOPRING_URLs.GET_MIX_MARKETS;\n\n    if (raw_data instanceof Array) {\n      // let _markets = [];\n      // if (types) {\n      //   _markets = raw_data.markets.filter(\n      //     (item: loopring_defs.DefiMarketInfo) =>\n      //       types.includes(item.type?.toUpperCase())\n      //   );\n      // } else {\n      //   _markets = raw_data.markets;\n      // }\n      raw_data.forEach((item: any) => {\n        const marketInfo: loopring_defs.CEX_MARKET = {\n          ...item,\n        };\n\n        markets[marketInfo.market] = { ...marketInfo, type: \"CEX\" };\n        const { base, quote } = marketInfo?.cefiQuota ?? {\n          base: \"\",\n          quote: \"\",\n        };\n        if (marketInfo.enabled && marketInfo.cefiQuota && base && quote) {\n          if (!pairs[base]) {\n            pairs[base] = {\n              tokenId: item.baseTokenId,\n              tokenList: [quote],\n            };\n          } else {\n            pairs[base].tokenList = [...pairs[base].tokenList, quote];\n          }\n          if (!pairs[quote]) {\n            pairs[quote] = {\n              tokenId: item.baseTokenId,\n              tokenList: [base],\n            };\n          } else {\n            pairs[quote].tokenList = [...pairs[quote].tokenList, base];\n          }\n        }\n      });\n    }\n    const marketArr: string[] = Reflect.ownKeys(markets) as string[];\n    const tokenArr: string[] = Reflect.ownKeys(pairs) as string[];\n    return {\n      markets,\n      pairs,\n      tokenArr,\n      tokenArrStr: tokenArr.join(SEP),\n      marketArr,\n      marketArrStr: marketArr.join(SEP),\n      raw_data,\n    };\n  }\n\n  public async getCefiDepth<R>({\n    request,\n  }: {\n    request: {\n      market: string;\n      level: number;\n      limit?: number;\n    };\n  }): Promise<{\n    depth: loopring_defs.DepthData;\n    raw_data: R;\n  }> {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_CEFI_DEPTH,\n      queryParams: { ...request },\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const timestamp = raw_data[\"timestamp\"];\n\n    const { asks, bids, mid_price } = getMidPrice({\n      _asks: raw_data[\"asks\"],\n      _bids: raw_data[\"bids\"],\n    });\n\n    const depth: DepthData = {\n      symbol: raw_data.market,\n      version: parseInt(raw_data.version),\n      timestamp,\n      mid_price,\n      bids: bids.ab_arr,\n      bids_prices: bids.ab_prices,\n      bids_amtTotals: bids.ab_amtTotals,\n      bids_volTotals: bids.ab_volTotals,\n      bids_amtTotal: bids.amtTotal.toString(),\n      bids_volTotal: bids.volTotal.toString(),\n      asks: asks.ab_arr,\n      asks_prices: asks.ab_prices,\n      asks_amtTotals: asks.ab_amtTotals,\n      asks_volTotals: asks.ab_volTotals,\n      asks_amtTotal: asks.amtTotal.toString(),\n      asks_volTotal: asks.volTotal.toString(),\n    };\n\n    return {\n      depth,\n      raw_data,\n    };\n  }\n  public async getCefiOrders<R>({\n    request,\n    apiKey,\n  }: {\n    request: {\n      accountId: number;\n    };\n    apiKey: string;\n  }) {\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.GET_CEFI_ORDERS,\n      queryParams: { ...request },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      list: raw_data.transactions,\n      totalNum: raw_data.totalNum,\n      raw_data,\n    };\n  }\n\n  public async sendCefiOrder({\n    request,\n    privateKey,\n    apiKey,\n  }: {\n    request: loopring_defs.OriginCEXV3OrderRequest;\n    privateKey: string;\n    apiKey: string;\n  }) {\n    const dataToSig: Map<string, any> = sortObjDictionary(request);\n    const reqParams: loopring_defs.ReqParams = {\n      url: LOOPRING_URLs.POST_CEFI_ORDER,\n      bodyParams: request,\n      apiKey,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: privateKey,\n      },\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data, ...raw_data };\n  }\n}\n","/* eslint-disable camelcase  */\nimport { BaseAPI } from \"./base_api\";\nimport {\n  ReqParams,\n  ReqMethod,\n  SIG_FLAG,\n  LOOPRING_URLs,\n  RESULT_INFO,\n  ConnectorNames,\n  SigSuffix,\n  NFTTokenInfo,\n  UserNFTBalanceInfo,\n} from \"../defs\";\nimport * as loopring_defs from \"../defs/loopring_defs\";\nimport { sortObjDictionary } from \"../utils\";\nimport * as sign_tools from \"./sign/sign_tools\";\nimport { isContract } from \"./contract_api\";\nimport { AxiosResponse } from \"axios\";\nimport { get_EddsaSig_NFT_Transfer } from \"./sign/sign_tools\";\n\nexport class LuckTokenAPI extends BaseAPI {\n  public async getLuckTokenAgents<R>(): Promise<{\n    raw_data: R;\n    luckTokenAgents: { [key: string]: loopring_defs.LuckyTokenInfo };\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_AGENTS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const luckTokenAgents = raw_data.reduce(\n      (\n        prev: { [key: string]: loopring_defs.LuckyTokenInfo },\n        item: { owner: string; infos: any[] }\n      ) => {\n        prev[item.owner] = {\n          signer: item.infos[0],\n          signerUrl: item.infos[1],\n          logoUrl: item.infos[2],\n          memo: item.infos[3],\n        };\n        return prev;\n      },\n      {} as { [key: string]: loopring_defs.LuckyTokenInfo }\n    );\n    return {\n      raw_data,\n      luckTokenAgents,\n    };\n  }\n\n  public async getLuckTokenAuthorizedSigners<R>(): Promise<{\n    raw_data: R;\n    luckTokenAgents: { [key: string]: loopring_defs.LuckyTokenInfo };\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_AUTHORIZEDSIGNERS,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const luckTokenAgents = raw_data.reduce(\n      (\n        prev: { [key: string]: loopring_defs.LuckyTokenInfo },\n        item: { owner: string; infos: any[] }\n      ) => {\n        prev[item.owner] = {\n          signer: item.infos[0],\n          signerUrl: item.infos[1],\n          logoUrl: item.infos[2],\n          memo: item.infos[3],\n        };\n        return prev;\n      },\n      {} as { [key: string]: loopring_defs.LuckyTokenInfo }\n    );\n    return {\n      raw_data,\n      luckTokenAgents,\n    };\n  }\n  public async getLuckTokenClaimHistory<R>(\n    request: { fromId: number; limit?: number; isNft?: boolean },\n    apiKey: string\n  ): Promise<{\n    totalNum: number;\n    list: loopring_defs.LuckTokenHistory[];\n    raw_data: R;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_CLAIMHISTORY,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const totalNum: number = raw_data.totalNum;\n    const list: loopring_defs.LuckTokenHistory[] = raw_data.list;\n\n    return {\n      totalNum,\n      list,\n      raw_data,\n    };\n  }\n\n  public async getLuckTokenLuckyTokens<R>(\n    request: {\n      senderId: number;\n      hash: string;\n      partitions: string;\n      modes: string;\n      scopes: string;\n      statuses: string;\n      startTime: number;\n      endTime: number;\n      fromId: number;\n      limit?: number;\n      official: boolean;\n      isNft?: boolean;\n    },\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    list: loopring_defs.LuckyTokenItemForReceive[];\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_LUCKYTOKENS,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    const totalNum: number = raw_data.totalNum;\n    const list: loopring_defs.LuckyTokenItemForReceive[] = raw_data.list;\n\n    return {\n      totalNum,\n      list,\n      raw_data,\n    };\n  }\n  public async getLuckTokenDetail<R>(\n    request: {\n      limit?: number;\n      hash: string;\n      fromId?: number;\n      accountId?: number;\n    },\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    detail: loopring_defs.LuckTokenClaimDetail;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_LUCKYTOKENDETAIL,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data, detail: raw_data };\n  }\n  \n  public async getBlindBoxDetail<R>(\n    request: {\n      limit?: number;\n      hash: string;\n      fromId?: number;\n      showHelper: boolean;\n      accountId?: number;\n    },\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    // detail: loopring_defs.LuckTokenClaimDetail;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_BLINDBOXDETAIL,\n      queryParams: request,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data };\n  }\n\n  \n\n  public async getLuckTokenWithdrawals<R>(\n    request: {\n      statuses: loopring_defs.LuckyTokenWithdrawStatus[];\n      tokenId?: number;\n      startTime?: number;\n      endTime?: number;\n      fromId?: number;\n      offset?: number;\n      limit?: number;\n      isNft?: boolean;\n    },\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    luckTokenWithdraw: loopring_defs.LuckTokenWithdraw[];\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_WITHDRAWALS,\n      queryParams: { ...request, statuses: request.statuses.join(\",\") },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n      totalNum: raw_data?.totalNum,\n      luckTokenWithdraw: raw_data.list,\n    };\n  }\n  public async getLuckTokenBalances<R>(\n    request: {\n      accountId: number;\n      tokens?: number[];\n      isNft?: boolean;\n      offset?: number;\n      limit?: number;\n    },\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    tokenBalance: Array<\n      loopring_defs.UserBalanceInfo & {\n        isNft?: boolean;\n        nftTokenInfo?: loopring_defs.NFTTokenInfo;\n      }\n    >;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_BALANCES,\n      queryParams: { \n        ...request, \n        // statuses: request.tokens?.join(\",\") \n      },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n      totalNum: raw_data?.length,\n      tokenBalance: raw_data,\n    };\n  }\n  public async getLuckTokenClaimedLuckyTokens<R>(\n    request: {\n      fromId: number;\n      limit?: number;\n      hashes?: string[];\n      isNft?: boolean;\n    },\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    claimedHistory: Array<\n      loopring_defs.LuckyTokenItemForReceive & { id: number }\n    >;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_CLAIMEDLUCKYTOKENS,\n      queryParams: { ...request, hashes: request?.hashes?.join(\",\") },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n      totalNum: raw_data?.totalNum,\n      claimedHistory: raw_data.list,\n    };\n  }\n\n  public async getLuckTokenSummary<R>(apiKey: string): Promise<{\n    raw_data: R;\n    tokenSummaryList: {\n      tokenId: number;\n      amount: string;\n      isNft?: Boolean;\n      nftTokenInfo?: NFTTokenInfo & Partial<UserNFTBalanceInfo>;\n    }[];\n    totalNum: number;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_SUMMARY,\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n      totalNum: raw_data.count,\n      tokenSummaryList: raw_data.tokenSummaryList,\n    };\n  }\n\n  public async sendLuckTokenClaimLuckyToken<R>({\n    request,\n    apiKey,\n    eddsaKey,\n  }: {\n    request: {\n      hash: string;\n      claimer: string;\n      referrer: string;\n    };\n    eddsaKey: string;\n    apiKey: string;\n  }): Promise<{\n    raw_data: R;\n  }> {\n    const dataToSig: Map<string, any> = sortObjDictionary(request);\n\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.POST_LUCK_TOKEN_CLAIMLUCKYTOKEN,\n      bodyParams: request,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n      apiKey,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data, ...raw_data };\n  }\n  public async sendLuckTokenClaimBlindBox<R>({\n    request,\n    apiKey,\n    eddsaKey,\n  }: {\n    request: {\n      hash: string;\n      claimer: string;\n      referrer: string;\n    };\n    eddsaKey: string;\n    apiKey: string;\n  }): Promise<{\n    raw_data: R;\n  }> {\n    const dataToSig: Map<string, any> = sortObjDictionary(request);\n\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.POST_LUCK_TOKEN_CLAIMBLINDBOX,\n      bodyParams: request,\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.EDDSA_SIG,\n      sigObj: {\n        dataToSig,\n        PrivateKey: eddsaKey,\n      },\n      apiKey,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return { raw_data, ...raw_data };\n  }\n  public async sendLuckTokenWithdraws<T>(\n    req: loopring_defs.OriginLuckTokenWithdrawsRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<T> | RESULT_INFO> {\n    let {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n    const { accountId, counterFactualInfo }: any = options;\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n    let { transfer } = request;\n    transfer.payeeId = 0;\n    transfer.memo = `LuckTokenWithdrawalBy${request.claimer}`;\n    transfer.maxFee = {\n      volume: \"0\",\n      tokenId: 0,\n    };\n\n    const sigHW = async () => {\n      const result = await sign_tools.signTransferWithoutDataStructure(\n        web3,\n        transfer.payerAddr,\n        transfer as loopring_defs.OriginTransferRequestV3,\n        chainId,\n        walletType,\n        accountId,\n        counterFactualInfo\n      );\n      ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n    };\n    if (\n      walletType === ConnectorNames.MetaMask ||\n      walletType === ConnectorNames.Gamestop ||\n      walletType === ConnectorNames.OtherExtension\n    ) {\n      // myLog(\"submitDeployNFT iConnectorNames.MetaMask:\", walletType);\n      try {\n        if (isHWAddr) {\n          await sigHW();\n        } else {\n          // myLog(\"submitDeployNFT notHWAddr:\", isHWAddr);\n          const result = await sign_tools.signTransferWithDataStructure(\n            web3,\n            transfer.payerAddr,\n            transfer as loopring_defs.OriginTransferRequestV3,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    } else {\n      const isContractCheck = await isContract(web3, transfer.payerAddr);\n      try {\n        if (isContractCheck) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId\n            );\n          ecdsaSignature = result.ecdsaSig;\n        } else if (counterFactualInfo) {\n          const result =\n            await sign_tools.signTransferWithDataStructureForContract(\n              web3,\n              transfer.payerAddr,\n              transfer as loopring_defs.OriginTransferRequestV3,\n              chainId,\n              accountId,\n              counterFactualInfo\n            );\n          ecdsaSignature = result.ecdsaSig;\n          // myLog(\"Transfer ecdsaSignature:\", ecdsaSignature);\n        } else {\n          await sigHW();\n        }\n      } catch (err) {\n        throw {\n          ...this.genErr(err as any),\n        };\n      }\n    }\n\n    if (counterFactualInfo) {\n      transfer.counterFactualInfo = counterFactualInfo;\n    }\n    let { maxFee, token, ..._transfer } = transfer;\n    // @ts-ignore\n    _transfer = {\n      ..._transfer,\n      maxFeeAmount: maxFee.volume,\n      feeToken: maxFee.tokenId,\n      amount: token.volume,\n      token: token.tokenId,\n      ecdsaAuth: ecdsaSignature,\n      eddsaSig: sign_tools.get_EddsaSig_Transfer(\n        transfer as loopring_defs.OriginTransferRequestV3,\n        eddsaKey\n      ).result,\n    } as any;\n\n    request = {\n      ...request,\n      transfer: JSON.stringify(_transfer) as any,\n    };\n\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.POST_LUCK_TOKEN_WITHDRAWALS,\n      apiKey,\n      method: ReqMethod.POST,\n      bodyParams: { ...request },\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n    let raw_data;\n    try {\n      raw_data = (await this.makeReq().request(reqParams)).data;\n    } catch (error) {\n      throw error as AxiosResponse;\n    }\n    return this.returnTxHash(raw_data);\n  }\n\n  public async sendLuckTokenSend<\n    R = {\n      hash: string;\n      status: string;\n      isIdempotent: boolean;\n      accountId: number;\n      tokenId: number;\n      storageId: number;\n    }\n  >(\n    req: loopring_defs.OriginLuckTokenSendRequestV3WithPatch,\n    options?: { accountId?: number; counterFactualInfo?: any }\n  ): Promise<loopring_defs.TX_HASH_RESULT<R> | RESULT_INFO> {\n    let {\n      request,\n      web3,\n      chainId,\n      walletType,\n      eddsaKey,\n      apiKey,\n      isHWAddr: isHWAddrOld,\n    } = req;\n\n    const { accountId, counterFactualInfo }: any = options;\n\n    const isHWAddr = !!isHWAddrOld;\n    let ecdsaSignature = undefined;\n\n    const {\n      luckyToken: { maxFeeAmount, token, amount, feeToken, ...rest },\n      // @ts-ignore\n      nftData,\n    } = request;\n\n    try {\n      let transfer: any, eddsaSig;\n      if (nftData) {\n        transfer = {\n          ...rest,\n          fromAccountId: rest.payerId,\n          fromAddress: rest.payerAddr,\n          toAccountId: 0,\n          toAddress: rest.payeeAddr,\n          maxFee: {\n            tokenId: feeToken,\n            amount: maxFeeAmount,\n          },\n          payeeId: 0,\n          memo: `LuckTokenSendBy${accountId}`,\n          token: {\n            nftData,\n            tokenId: token,\n            amount: amount,\n          },\n        } as loopring_defs.OriginNFTTransferRequestV3;\n        const sigHW = async () => {\n          const result = await sign_tools.signNFTTransferWithoutDataStructure(\n            web3,\n            transfer.payerAddr,\n            transfer,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n        };\n\n        if (\n          walletType === ConnectorNames.MetaMask ||\n          walletType === ConnectorNames.Gamestop ||\n          walletType === ConnectorNames.OtherExtension\n        ) {\n          try {\n            if (isHWAddr) {\n              await sigHW();\n            } else {\n              const result = await sign_tools.signTNFTransferWithDataStructure(\n                web3,\n                transfer.payerAddr,\n                transfer,\n                chainId,\n                walletType,\n                accountId,\n                counterFactualInfo\n              );\n              ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n            }\n          } catch (err) {\n            throw {\n              ...this.genErr(err as any),\n            };\n          }\n        } else {\n          const isContractCheck = await isContract(web3, transfer.payerAddr);\n          try {\n            if (isContractCheck) {\n              // signOffchainWithdrawWithDataStructureForContract\n              const result =\n                await sign_tools.signNFTTransferWithDataStructureForContract(\n                  web3,\n                  transfer.payerAddr,\n                  transfer,\n                  chainId,\n                  accountId\n                );\n              ecdsaSignature = result.ecdsaSig;\n            } else if (counterFactualInfo) {\n              const result =\n                await sign_tools.signNFTTransferWithDataStructureForContract(\n                  web3,\n                  transfer.payerAddr,\n                  transfer,\n                  chainId,\n                  accountId,\n                  counterFactualInfo\n                );\n              ecdsaSignature = result.ecdsaSig;\n              // myLog(\"NFTransfer ecdsaSignature:\", ecdsaSignature);\n            } else {\n              await sigHW();\n            }\n          } catch (err) {\n            throw {\n              ...this.genErr(err as any),\n            };\n          }\n        }\n        eddsaSig = get_EddsaSig_NFT_Transfer(transfer, eddsaKey).result;\n      } else {\n        transfer = {\n          ...rest,\n          maxFee: {\n            tokenId: feeToken,\n            volume: maxFeeAmount,\n          },\n          payeeId: 0,\n          memo: `LuckTokenSendBy${accountId}`,\n          token: {\n            tokenId: token,\n            volume: amount,\n          },\n        } as loopring_defs.OriginTransferRequestV3;\n        const sigHW = async () => {\n          const result = await sign_tools.signTransferWithoutDataStructure(\n            web3,\n            transfer.payerAddr,\n            transfer as loopring_defs.OriginTransferRequestV3,\n            chainId,\n            walletType,\n            accountId,\n            counterFactualInfo\n          );\n          ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix03;\n        };\n        if (\n          walletType === ConnectorNames.MetaMask ||\n          walletType === ConnectorNames.Gamestop ||\n          walletType === ConnectorNames.OtherExtension\n        ) {\n          // myLog(\"submitDeployNFT iConnectorNames.MetaMask:\", walletType);\n          try {\n            if (isHWAddr) {\n              await sigHW();\n            } else {\n              // myLog(\"submitDeployNFT notHWAddr:\", isHWAddr);\n              const result = await sign_tools.signTransferWithDataStructure(\n                web3,\n                transfer.payerAddr,\n                transfer as loopring_defs.OriginTransferRequestV3,\n                chainId,\n                walletType,\n                accountId,\n                counterFactualInfo\n              );\n              ecdsaSignature = result.ecdsaSig + SigSuffix.Suffix02;\n            }\n          } catch (err) {\n            throw {\n              ...this.genErr(err as any),\n            };\n          }\n        } else {\n          const isContractCheck = await isContract(web3, transfer.payerAddr);\n          try {\n            if (isContractCheck) {\n              const result =\n                await sign_tools.signTransferWithDataStructureForContract(\n                  web3,\n                  transfer.payerAddr,\n                  transfer as loopring_defs.OriginTransferRequestV3,\n                  chainId,\n                  accountId\n                );\n              ecdsaSignature = result.ecdsaSig;\n            } else if (counterFactualInfo) {\n              const result =\n                await sign_tools.signTransferWithDataStructureForContract(\n                  web3,\n                  transfer.payerAddr,\n                  transfer as loopring_defs.OriginTransferRequestV3,\n                  chainId,\n                  accountId,\n                  counterFactualInfo\n                );\n              ecdsaSignature = result.ecdsaSig;\n              // myLog(\"Transfer ecdsaSignature:\", ecdsaSignature);\n            } else {\n              await sigHW();\n            }\n          } catch (err) {\n            throw {\n              ...this.genErr(err as any),\n            };\n          }\n        }\n\n        if (counterFactualInfo) {\n          transfer.counterFactualInfo = counterFactualInfo;\n        }\n        transfer.eddsaSignature = sign_tools.get_EddsaSig_Transfer(\n          transfer as loopring_defs.OriginTransferRequestV3,\n          eddsaKey\n        ).result;\n        eddsaSig = sign_tools.get_EddsaSig_Transfer(transfer, eddsaKey).result;\n      }\n\n      request = {\n        ...request,\n        nftData,\n        luckyToken: {\n          ...request.luckyToken,\n          payeeId: 0,\n          memo: `LuckTokenSendBy${accountId}`,\n          eddsaSig,\n        },\n      };\n      const reqParams: loopring_defs.ReqParams = {\n        url: LOOPRING_URLs.POST_LUCK_TOKEN_SENDLUCKYTOKEN,\n        bodyParams: { ...request },\n        apiKey,\n        method: ReqMethod.POST,\n        sigFlag: SIG_FLAG.NO_SIG,\n        ecdsaSignature,\n      };\n      let raw_data;\n      try {\n        raw_data = (await this.makeReq().request(reqParams)).data;\n      } catch (error) {\n        throw error as AxiosResponse;\n      }\n      return this.returnTxHash(raw_data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public async getLuckTokenClaimedBlindBox<R>(\n    request: {\n      fromId: number;\n      limit?: number;\n      isNft?: boolean;\n      offset?: number;\n      statuses?: number[]\n    },\n    apiKey: string\n  ): Promise<{\n    raw_data: R;\n    totalNum: number;\n    list: Array<\n      loopring_defs.LuckyTokenBlindBoxItemReceive & { id: number }\n    >;\n  }> {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_LUCK_TOKEN_CLAIMEDBLINDBOX,\n      queryParams: { ...request, statuses: request?.statuses?.join(\",\") },\n      apiKey,\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    if (raw_data?.resultInfo) {\n      return {\n        ...raw_data?.resultInfo,\n      };\n    }\n    return {\n      raw_data,\n      totalNum: raw_data?.totalNum,\n      list: raw_data.list,\n    };\n  }\n}\n","/* eslint-disable camelcase  */\nimport { BaseAPI } from \"./base_api\";\n\nimport {\n  CreateContactRequest,\n  DeleteContactRequest,\n  GetContactsRequest,\n  GetContactsResponse,\n  LOOPRING_URLs,\n  ReqMethod,\n  ReqParams,\n  SIG_FLAG,\n  UpdateContactRequest,\n} from \"../defs\";\n\nexport class ContactAPI extends BaseAPI {\n\n  public async getContacts(\n    request: GetContactsRequest,\n    apiKey: string,\n    // url: string = LOOPRING_URLs.GET_CONTACTS\n  ) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.GET_CONTACTS,\n      queryParams: request, //request\n      method: ReqMethod.GET,\n      sigFlag: SIG_FLAG.NO_SIG,\n      apiKey\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    console.log(raw_data)\n    return raw_data as GetContactsResponse\n  }\n\n  public async createContact(\n    request: CreateContactRequest,\n    apiKey: string,\n  ) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.CREATE_CONTACT,\n      bodyParams: request, //request\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      apiKey,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    return raw_data as boolean  \n  }\n\n  public async updateContact(\n    request: UpdateContactRequest,\n    apiKey: string,\n  ) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.UPDATE_CONTACT,\n      bodyParams: request, //request\n      method: ReqMethod.POST,\n      sigFlag: SIG_FLAG.NO_SIG,\n      apiKey,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    return raw_data as boolean  \n  }\n  public async deleteContact(\n    request: DeleteContactRequest,\n    apiKey: string,\n    // url: string = LOOPRING_URLs.GET_CONTACTS\n  ) {\n    const reqParams: ReqParams = {\n      url: LOOPRING_URLs.DELETE_CONTACT,\n      bodyParams: request, //request\n      method: ReqMethod.DELETE,\n      sigFlag: SIG_FLAG.NO_SIG,\n      apiKey,\n    };\n\n    const raw_data = (await this.makeReq().request(reqParams)).data;\n    return raw_data as boolean\n  }\n\n}\n\n// ContactAPI.get"],"names":["dumpError400","reason","src","console","debug","response","error","data","message","sleep","milliseconds","Promise","resolve","setTimeout","specialSymbols","getBaseQuote","symbol","base","undefined","quote","startsWith","substr","length","i","ind","indexOf","lastIndexOf","getTokenInfoBySymbol","tokenSymbolMap","err","getTokenInfoById","tokenIdMap","id","hasMarket","marketArr","market","includes","getExistedMarket","baseShow","quoteShow","amm","getPair","ChainId","NetworkContextName","ConnectorNames","SigSuffix","NFTFactory","MAINNET","GOERLI","NFTFactory_Collection","WsOps","WsTopicType","getAccountArg","topic","account","getOrderArg","order","getOrderBookArg","orderbook","level","count","snapshot","showOverlap","obj","Object","keys","forEach","key","getMixOrderArg","mixorder","orderWsRequest","getCefiOrderBook","cefiOrderBook","getTradeArg","trade","getMixTradeArg","mixtrade","getTickerArg","ticker","getCandlestickArg","candlestick","getAmmpoolArg","poolAddress","ammpool","LOOPRING_URLs","HEBAO_LOCK_STATUS","HEBAO_META_TYPE","SoursURL","ReqMethod","SigPatchField","MarketStatus","VipCatergory","TradeChannel","OrderType","OrderTypeResp","Currency","OffchainFeeReqType","OffchainNFTFeeReqType","TradingInterval","TxStatus","OrderStatus","Side","WithdrawalTypes","UserTxTypes","UserBillTypes","UserNFTTxTypes","TransferType","BillType","FilledType","TxType","TxNFTType","AmmTxType","SortOrder","RuleType","AmmPoolActivityStatus","SIG_FLAG","AssetType","IntervalType","NetworkWallet","DefiMarketStatus","AMMtxTypes","OrderMakerType","TradesFillTypes","LegacyNFT","DEPLOYMENT_STATUS","NFT_IMAGE_SIZES","SEP","DefiAction","NFT_PREFERENCE_TYPE","DUAL_TYPE","LABEL_INVESTMENT_STATUS","SETTLEMENT_STATUS","LuckyTokenItemStatusIndex","LuckyTokenWithdrawStatus","LuckyTokenItemStatus","LuckyTokenAmountType","LuckyTokenViewType","LuckyTokenClaimType","ClaimRecordStatus","BlindBoxStatus","StakeStatus","StakeTransactionType","AddressType","LoopringErrorCode","ConnectorError","checkErrorInfo","errorInfo","isFirstTime","NOT_SUPPORT_ERROR","USER_DENIED","IsMobile","Android","navigator","userAgent","match","BlackBerry","iOS","Opera","Windows","Ethereum","window","ethereum","isImToken","any","global","log","BigNumber","config","EXPONENTIAL_AT","RANGE","ROUNDING_MODE","addHexPrefix","input","Error","toBuffer","mixed","Buffer","ethUtil","zeroPad","num","places","String","padStart","toHex","BN","toString","Uint8Array","regex","RegExp","test","toNumber","Number","toBig","toBN","fromGWEI","value","times","toFixed","toGWEI","div","formatKey","slice","formatAddress","clearHexPrefix","padLeftEven","hex","getDisplaySymbol","settingsCurrency","number","precision","ceil","rm","Math","floor","formatEddsaKey","hexKey","numberWithCommas","replace","isNaN","parts","split","join","sortObjDictionary","dataToSig","Map","Reflect","ownKeys","sort","a","b","localeCompare","set","makeMarket","raw_data","coinMap","totalCoinMap","addressIndex","idIndex","tokensMap","Array","item","isLpToken","coinInfo","icon","address","name","simpleName","description","type","company","toLowerCase","tokenId","makeAmmPool","ammpools","pairs","pools","ind2","substring","tokens","pooled","tokenList","makeMarkets","url","GET_MARKETS","markets","isMix","GET_MIX_MARKETS","marketInfo","baseTokenId","enabled","orderbookAggLevels","precisionForPrice","quoteTokenId","status","isSwapEnabled","ALL","AMM","createdAt","parseInt","tokenArr","tokenArrStr","marketArrStr","_myLog","myLog","BIG0","fm","BIG1","BIG10","BIG10K","getToken","token","getTokenInfoByToken","ammBalance","tokenInfo","tokenVol","pooledMap","volume","reserve","fromWEI","valueInWEI","precisionToFixed","decimals","toWEI","bigN","isEmpty","trim","getAmountOutWithFeeBips","amountIn","feeBips","reserveIn","reserveOut","amountInBig","reserveInBig","reserveOutBig","lt","feeBipsBig","amountInWithFee","minus","numerator","denominator","plus","getAmountInWithFeeBips","amountOut","amountOutBig","getOutputOrderbook","baseToken","quoteToken","isAtoB","isReverse","depth","output","remain","bids","abInfo","consume","gte","amt","lte","volValue","vol","eq","ratio","pow","asks","amtValue","getReserveInfo","sell","buy","tokenMap","marketMap","ammPoolSnapshot","sellToken","buyToken","coinA","coinB","getPriceImpactStr","curPrice","toPrice","toPriceBig","percent","abs","getCurPrice","getToPrice","amountS","amountB","amountSBig","amountBBig","getPriceImpact","takerFee","updatePriceImpact_new","reverseIn","reverseOut","sellDecimal","amountBOut","buyDecimal","isReversed","exceedDepth","priceImpact","mid_price","coinADecimal","coinBDecimal","getMinReceived","minimumDecimal","slipBips","minReceived","minReceivedVal","getOutputAmount","takerRate","reserveInfo","amountBOutWithoutFee","sellAmt","buyAmt","amountInWei","bids_amtTotal","asks_volTotal","gt","leftRatio","bids_volTotal","asks_amtTotal","amountSBint","outputOrderbook","amountBOutSlip","ammPoolCalc","rawVal","coinA_Vol_BIG","coinB_Vol_BIG","makeJoinAmmPoolRequest","slippageTolerance","owner","fees","idIdx","coinAOffchainId","coinBOffchainId","rawValMatchForRawVal","fee","volLp","rest","lp","volA","volB","request","joinTokens","minimumLp","storageIds","makeExitAmmPoolMini","RatioDecimal","lpTokenVol","lpToken","miniLpVol","miniLpVal","makeExitAmmCoverFeeLP","quoteVolume","maxFee","feeLp","feeLpWithSlippage","miniFeeLpWithSlippageVal","feeLpVal","makeExitAmmPoolRequest2","offchainId","minDecimal","burnedVol","exitTokens","unPooled","burned","storageId","volA_show","volB_show","calcDefi","isJoin","isInputSell","sellAmount","buyAmount","feeVol","tokenSell","tokenBuy","buyTokenBalanceVol","depositPrice","withdrawPrice","sellPrice","dustToken","minVolBuy","max","orderAmounts","dust","miniSellVol","maxSellVol","sellVol","buyVol","maxFeeBips","calcDual","info","index","rule","balance","dualMarket","lessEarnVol","lessEarnTokenSymbol","greaterEarnVol","greaterEarnTokenSymbol","maxSellAmount","feeTokenSymbol","quota","currency","settleRatio","profit","ROUND_DOWN","dualType","DUAL_BASE","strike","ROUND_CEIL","baseLimitAmount","baseMin","min","baseSize","free","baseMax","quoteLimitAmount","currencyMin","currencyMax","calcDex","CEX_NO_PRODUCT","msg","code","CEX_NO_DEPTH_ERROR","field","from","FQ","n","field_modulus","SNARK_SCALAR_FIELD","m","mod","add","other","on","mul","sub","new_n","on_c","m_c","two_c","on_power_c","modulo","n_on_power_remainder","one","modulus","zero","p","n_","BigInteger","p_","m_","result","modPow","jubjub","JUBJUB_E","JUBJUB_C","Point","x","y","generate","xBigInt","yBigInt","point","scaler","infinity","bitwiseAnd","and","copyP1","copyP2","u1","v1","u2","v2","u3_tmp0","u3_tmp1","JUBJUB_D","u3_tmp2","u3","v3_tmp0","v3_tmp1","JUBJUB_A","v3_tmp3","v3_tmp5","v3","blake2b","require","PoseidonParams","t","nRoundsF","nRoundsP","seed","e","constants_C","constants_M","security_target","permunation","poseidon_constants","poseidon_matrix","H","arg","outputLength","enc","TextEncoder","encode","buf","alloc","update","final","items","toJSON","sum","itemBigInt","tmp","H_Bigint","SignatureScheme","to_bytes","c","seedBigInt","push","matrix","row","j","c_i","c_t_j","p_c","c_t_j_p","left","p_2","item_c","poseidon_sbox","state","params","half_F","element_c","e_c","poseidon_mix","M","newState","element","poseidon","inputs","concat","C_i","Signature","R","s","toStr","SignedMessage","A","sig","bitIntDataItems","bnToBuf","more","reverse","prehash_message","hash_secret_python","k","byteArray0","byteArray1","digest1","sha512","array","buffer","sha512StrItems","itemInt","st","sha512MessageHexStr","sha512MessageHexStrBigInt","hashed","JUBJUB_L","B","sign","copyKey","r","copy_r","hash_public","t_c","key_n_t","S","signatureResult","signedMessage","as_scalar","inputMsg","bn","BigInt","len","u8","bnToBufWithFixedLength","bytesToHexString","bytes","strItems","strItemsJoined","babyJub","packPoint","P0","P1","packed","hexStr","half","aa","bb","EDDSAUtil","PrivateKey","hash","strKey","signed","formatted","toHexString","hexString","generateKeyPair","bigInt","secretKey","copySecretKey","publicKey","keyPair","pack","publicKeyX","publicKeyY","newPack","GetEcDSASigType","MIN_NFT_TOKENID","generatePrivateKey","seedBuff","formatedPx","formatedPy","sk","counterFactualInfo","web3","walletType","keySeed","chainId","accountId","isMobile","personalSign","end","splice","newValue","makeRequestParamStr","arrObj","orderedMap","map","paramlist","fromEntries","get","encodeURIComponent","genSigWithPadding","signature","signatureRx_Hex","Rx","padding","fill","signatureRy_Hex","Ry","signatureS_Hex","makeObjectStr","jsonTxt","JSON","stringify","escape","getEdDSASig","method","basePath","api_url","requestInfo","toUpperCase","uri","_hash","sha256","toFormat","verifyEdDSASig","getEdDSASigWithPoseidon","poseidonParams","bigIntInputs","signEip712","currentProvider","sendAsync","signEip712WalletConnect","typedData","send","getEcDSASig","pwd","msgParams","HasDataStruct","WithoutDataStruct","Contract","ecdsaSig","sigUtil","signEip712Result","convertPublicKey2","pk","convertPublicKey","getUpdateAccountEcdsaTypedData","accountID","feeTokenID","validUntil","nonce","types","EIP712Domain","AccountUpdate","primaryType","domain","version","verifyingContract","exchange","signUpdateAccountWithDataStructure","bodyParams","Unknown","signUpdateAccountWithoutDataStructure","signUpdateAccountWithDataStructureForContract","get_EddsaSig_OffChainWithdraw","eddsaKey","onchainDataHash","abi","minGas","to","extraData","orderHashStr","getOrderHash","fillAmountBOrS","taker","hashInHex","getWithdrawTypedData","tokenID","amount","storageID","Withdrawal","signOffchainWithdrawWithDataStructure","signOffchainWithdrawWithoutDataStructure","signOffchainWithdrawWithDataStructureForContract","get_EddsaSig_NFT_Withdraw","getNftData","idNo0x","nftId","nftIdLo","nftIdHi","minterAddress","nftType","tokenAddress","royaltyPercentage","getNFTMintTypedData","utils","hexToNumberString","toAccountId","nftAddress","Mint","getNFTWithdrawTypedData","signNFTWithdrawWithDataStructure","signNFTWithdrawWithoutDataStructure","signNFTWithdrawWithDataStructureForContract","get_EddsaSig_NFT_Mint","minterId","get_Is_Nft_Token","get_EddsaSig_NFT_Order","nftData","get_EddsaSig_Dual_Order","signNFTMintWithDataStructure","signNFTMintWithoutDataStructure","signNFTMintWithDataStructureForContract","get_EddsaSig_Transfer","payerId","payeeId","payeeAddr","getTransferOldTypedData","payerAddr","Transfer","getTransferTypedData","signTransferWithDataStructure","signTransferWithoutDataStructure","signTransferWithDataStructureForContract","get_EddsaSig_NFT_Transfer","fromAccountId","toAddress","getNftTradeHash","maker","getNFTTransferTypedData","fromAddress","signTNFTransferWithDataStructure","signNFTTransferWithoutDataStructure","signNFTTransferWithDataStructureForContract","eddsaSign","sigHash","idiv","eddsaSig","eddsaSignWithDomain","domainHax","hashStruct","getAmmJoinEcdsaTypedData","patch","joinAmounts","joinStorageIDs","mintMinAmount","PoolJoin","ammName","get_EddsaSig_JoinAmmPool","domainSeparator","getAmmExitEcdsaTypedData","burnAmount","burnStorageID","exitMinAmounts","PoolExit","get_EddsaSig_ExitAmmPool","sortObject","o","reduce","setSearchParams","searchParams","URLSearchParams","search","objects","object","objectTmp","serializeDataIfNeeded","nonString","toPathString","pathname","Request","baseUrl","timeout","baseOptions","baseURL","headers","feeVersion","pf","validateStatus","insecure","_axios","axios","create","getIns","options","localUrl","URL","localVarRequestOptions","queryParams","urlPathStr","apiKey","sigObj","sigFlag","NO_SIG","EDDSA_SIG_POSEIDON","EDDSA_SIG","ecdsaSignature","eddsaSignature","sigPatch","optInOne","updateOpt","reqOpt","interceptors","use","req","addApiKey","addSig","updateBaseUrl","handle400","callback","res","statusText","AbiFunction","outputs","constant","inputTypes","outputTypes","methodAbiHash","methodID","encodeInputs","abiInputs","parseInputs","rawEncode","decodeOutputs","parseOutputs","rawDecode","decodeEncodedInputs","encoded","funAbi","filter","abiFunctions","acc","methodHash","abiFunction","decodeEncodeInputs","methodId","ERC20Token","erc20Abi","ExchangeContract","exchange36Abi","ContractWallet","contractWalletAbi","ERC1155","erc1155Abi","ERC721","erc721Abi","HeBao","hebao","Contracts","KEY_MESSAGE","BaseAPI","param","baseUrlMap","setChainId","genErr","hasOwnProperty","HTTP_ERROR","SKD_UNKNOW","find","prev","returnTxHash","resultInfo","getAvailableBroker","reqParams","GET_AVAILABLE_BROKER","GET","makeReq","getCounterFactualInfo","COUNTER_FACTUAL_INFO","getBaseUrlByChainId","setBaseUrl","ecRecover","eth","personal","contractWalletValidate32","hashPersonalMessage","ABI","_data","_signature","call","valid","mykeyWalletValid","myKeyContract","_account","_index","fromRpcSig","keccak256","recAddress","pubToAddress","ecrecover","v","ecRecover2","messageBuffer","totalHash","keccak","old_v","pub","recoveredAddress","formatSig","rpcSig","toRpcSig","recoverSignType","ethRecover","fcWalletValid","fcValid","isMetaMask","MetaMask","isWalletLink","isConnected","selectedAddress","walletValid2","myKeyValid","api","walletOwner","_result","WsAPI","getWsKey","GET_WS_KEY","wsKey","checkAmt","rawStr","getFeeMap","feeArr","feesMap","genAB","ab_arr","amtTotal","volTotal","ab_prices","ab_amtTotals","ab_volTotals","best","price","parseFloat","getMidPrice","_asks","askReverse","_bids","bidReverse","ExchangeAPI","getRelayerCurrentTime","GET_RELAYER_CURRENT_TIME","getProtocolPortrait","GET_PROTOCOL_PORTRAIT","getExchangeFeeInfo","GET_EXCHANGE_FEEINFO","orderbookTradingFeesStablecoin","ORDERBOOK_TRADING_FEES_STABLECOIN","orderbookTradingFees","ORDERBOOK_TRADING_FEES","ammTradingFees","AMM_TRADING_FEES","otherFees","OTHER_FEES","getWithdrawalAgents","GET_WITHDRAWAL_AGENTS","supportTokenMap","getRecommendedMarkets","GET_RECOMENDED_MARKETS","recommended","getMarkets","getMixMarkets","getTokens","GET_TOKENS","getEthBalances","GET_ETH_BALANCES","ethBalance","getTokenBalances","GET_TOKEN_BALANCES","tokenBalances","getAllTokenBalances","GET_AKK_TOKEN_BALANCES","getAllowances","GET_ALLOWANCES","tokenAllowances","allowances","getExchangeInfo","GET_EXCHANGE_INFO","exchangeInfo","ammExitFees","depositAddress","exchangeAddress","fastWithdrawalFees","onchainFees","openAccountFees","transferFees","updateFees","withdrawalFees","getMixDepth","getDepth","GET_MIX_DEPTH","GET_DEPTH","limit","timestamp","bids_prices","bids_amtTotals","bids_volTotals","asks_prices","asks_amtTotals","asks_volTotals","getMixTicker","getTicker","GET_MIX_TICKER","GET_TICKER","tickers","tickMap","tickList","arr","open","close","change","tick","base_token_volume","quote_token_volume","high","low","bid","ask","base_fee_amt","quote_fee_amt","getAllMixTickers","getAllTickers","getMixCandlestick","getCandlestick","GET_MIX_CANDLESTICK","GET_CANDLESTICK","tsStep","interval","min1","min5","min15","min30","hr1","hr2","hr4","hr12","d1","w1","candlesticks","rawCandlesticks","lastCandlestick","lastTs","curTs","txs","baseVol","quoteVol","counter","getFiatPrice","GET_FIAT_PRICE","fiatPrices","prices","disableWithdrawTokenList","GET_IGNORE_WITHDRAW","getMarketTrades","GET_TRADES","marketTrades","trades","tradeTime","tradeId","side","totalNum","getAccount","ACCOUNT_ACTION","accInfo","getEthNonce","GET_ETH_NONCE","getGasPrice","GET_GAS_PRICE","gasPrice","getGasPriceRange","GET_GAS_PRICE_RANGE","gasPriceRanges","ranges","getAccountServices","GET_ACCOUNT_SERVICES","register","joinAmm","dAppTrade","legal","AmmpoolAPI","getAmmPoolConf","GET_AMM_POOLS_CONF","getAmmPoolUserRewards","GET_AMMPOOL_REWARDS","ammUserRewardMap","current","lastDay","getAmmPoolGameRank","GET_AMMPOOL_GAME_RANK","totalRewards","userRankList","getAmmPoolGameUserRank","GET_AMMPOOL_GAME_USER_RANK","userRank","getOrderList","lst","ASC","rangeFrom","getAmmPoolActivityRules","GET_AMM_ACTIVITY_RULES","activityInProgressRules","activityDateMap","groupByRuleType","groupByRuleTypeAndStatus","groupByActivityStatus","currentTs","Date","getTime","NotStarted","rangeTo","InProgress","EndOfGame","ruleType","getAmmAssetHistory","GET_AMM_ASSET_HISTORY","dataSeries","getAmmPoolStats","GET_AMM_POOL_STATS","ammPoolStats","getAmmPoolSnapshot","GET_AMM_POOLS_SNAPSHOT","getAmmPoolBalances","GET_AMM_POOLS_BALANCES","ammpoolsbalances","tempPooled","item2","poolName","getLiquidityMining","GET_LIQUIDITY_MINING","rewards","getLiquidityMiningUserHistory","GET_LIQUIDITY_MINING_USER_HISTORY","userMiningInfos","getUserAmmPoolTxs","GET_USER_AMM_POOL_TXS","userAmmPoolTxs","transactions","getAmmPoolTxs","GET_AMM_POOL_TXS","getAmmPoolTrades","GET_AMM_POOL_TRADE_TXS","ammPoolTrades","joinAmmPool","now","POST_JOIN_AMM_POOL","POST","sign_tools","joinAmmPoolResult","exitAmmPool","POST_EXIT_AMM_POOL","exitAmmPoolResult","ERC20Method","ApproveVal","Zero","Max","checkWeb3","errorMsg","signEthereumTx","rawTx","ethTx","Transaction","fromSerializedTx","jsonTx","assign","getNonce","addr","getTransactionCount","sendRawTx","gasLimit","sendByMetaMask","sendTransaction","_genContractData","genERC20Data","genExchangeData","approve","_value","Approve","_spender","approveZero","approveMax","deposit","valueC","Deposit","forceWithdrawal","ForceWithdraw","tx","transactionHash","isContract","getCode","UserAPI","updateUserApiKey","API_KEY_ACTION","getNextStorageId","GET_NEXT_STORAGE_ID","orderId","getOrderDetails","ORDER_ACTION","orderDetail","getOrders","GET_MULTI_ORDERS","orders","submitOrder","orderRequest","privateKey","tradeChannel","MIXED","EddsaSignature","cancelOrder","orderHash","clientOrderId","DELETE","cancelMultiOrdersByHash","ORDER_CANCEL_HASH_LIST","cancelMultiOrdersByCreditOrderId","ORDER_CANCEL_CLIENT_ORDER_ID_LIST","getUserRegTxs","GET_USER_REG_TXS","userRegTxs","getUserPwdResetTxs","GET_PWD_RESET_TXS","userPwdResetTxs","getUserBalances","GET_USER_EXCHANGE_BALANCES","userBalances","getAssetLookRecords","GET_ASSET_LOCK_RECORDS","getUserDepositHistory","GET_USER_DEPOSITS_HISTORY","userDepositHistory","getUserOnchainWithdrawalHistory","WITHDRAWALS_ACTION","userOnchainWithdrawalHistory","getUserTransferList","GET_USER_TRANSFERS_LIST","userTransfers","getUserTxs","GET_USER_TXS","userTxs","getUserTrades","GET_USER_TRADE_HISTORY","userTrades","getUserFeeRate","GET_USER_FEE_RATE","userFreeRateMap","getUserOrderFeeRate","GET_USER_ORDER_FEE_RATE","feeRate","getMinimumTokenAmt","GET_MINIMUM_TOKEN_AMT","amounts","amountMap","tokenSymbol","cacheOverdueAt","getOffchainFeeAmt","GET_OFFCHAIN_FEE_AMT","getNFTOffchainFeeAmt","GET_NFT_OFFCHAIN_FEE_AMT","submitNFTValidateOrder","POST_NFT_VALIDATE_ORDER","submitNFTTrade","makerFeeBips","takerFeeBips","POST_NFT_TRADE","getUserOwenCollection","GET_NFT_COLLECTION","collections","collection","extends","getUserLegacyCollection","GET_NFT_LEGACY_COLLECTION","getUserNFTCollection","GET_NFT_COLLECTION_HASNFT","getUserNFTLegacyTokenAddress","GET_NFT_LEGACY_TOKENADDRESS","addresses","getUserNFTDepositHistory","GET_USER_NFT_DEPOSIT_HISTORY","userNFTDepositHistory","deposits","getUserNFTWithdrawalHistory","GET_USER_NFT_WITHDRAW_HISTORY","userNFTWithdrawalHistory","withdrawals","getUserNFTTransferHistory","GET_USER_NFT_TRANSFER_HISTORY","userNFTTransfers","transfers","getUserNFTMintHistory","GET_USER_NFT_MINT_HISTORY","userNFTMints","getUserNFTTransactionHistory","GET_USER_NFT_TRANSACTION_HISTORY","metadata","hashBN","userNFTTxs","getUserNFTTradeHistory","GET_USER_NFT_TRADE_HISTORY","SetReferrer","promotionCode","referrer","SET_REFERRER","getUserNFTBalances","GET_USER_NFT_BALANCES","userNFTBalances","getUserNFTBalancesByCollection","GET_USER_NFT_BALANCES_BY_COLLECTION","getUserNFTLegacyBalance","GET_NFT_LEGACY_BALANCE","getUserVIPAssets","GET_USER_VIP_ASSETS","vipAsset","getUserVIPInfo","GET_USER_VIP_INFO","vipInfo","created_at","validTo","valid_to","org","vipTag","vip_tag","unLockAccount","NO_EDDSA_KEY","submitOffchainWithdraw","isHWAddrOld","isHWAddr","sigHW","Suffix03","Gamestop","OtherExtension","Suffix02","isContractCheck","submitInternalTransfer","POST_INTERNAL_TRANSFER","submitForceWithdrawals","transfer","memo","requesterAddress","withdrawAddress","POST_FORCE_WITHDRAWALS","submitDeployNFT","GET_DEPLOY_TOKEN_ADDRESS","submitNFTInTransfer","POST_NFT_INTERNAL_TRANSFER","submitNFTWithdraw","POST_NFT_WITHDRAWALS","submitNFTMint","_noEcdsa","counterFactualNftInfo","nftFactory","nftOwner","nftBaseUri","POST_NFT_MINT","submitNFTCollection","_req","POST_NFT_CREATE_COLLECTION","contractAddress","deleteNFTCollection","DELETE_NFT_CREATE_COLLECTION","submitNFTLegacyCollection","POST_NFT_CREATE_LEGACY_COLLECTION","submitEditNFTCollection","POST_NFT_EDIT_COLLECTION","submitUpdateNFTLegacyCollection","nftHashes","POST_NFT_LEGACY_UPDATE_COLLECTION","submitUpdateNFTGroup","POST_NFT_UPDATE_NFT_GROUP","submitDeployCollection","POST_DEPLOY_COLLECTION","updateAccount","getUserApiKey","getUserBills","GET_USER_BILLS","WalletAPI","getUserAssets","GET_USER_ASSETS","assetSeries","timestampSeries","dateSeries","createdAtStr","userAssets","getApproveRecoverTypedData","guardiaContractAddress","wallet","newOwner","recover","getApproveRecoverV2TypedData","newGuardians","rejectApproveHash","REJECT_APPROVE_SIGNATURE","approveRecordId","signer","rejectHebao","signHash","signHebaoApproveWithoutDataStructure","guardian","messageHash","signHebaoApproveWithDataStructureForContract","masterCopy","forwarderModuleAddress","signedRequest","encodeAddressesPacked","addrs","addrsBs","repeat","submitApproveSignature","guardians","isContract1XAddress","Coinbase","businessDataJson","guardiansBs","guardiansHash","SUBMIT_APPROVE_SIGNATURE","getAddressByENS","RESOLVE_ENS","getWalletType","GET_WALLET_TYPE","getContractType","GET_WALLET_CONTRACTVERSION","contractType","getWalletModules","GET_WALLET_MODULES","walletModule","getEnsByAddress","RESOLVE_NAME","ensName","lockHebaoWallet","isVersion1","getHebaoConfig","GET_HEBAO_CONFIG","sendMetaTx","SEND_META_TX","getGuardianApproveList","GET_GUARDIAN_APPROVE_LIST","guardiansArray","ens","metaTxType","approveId","txAwareHash","getProtectors","GET_PROTECTORS","protectorArray","protectEns","protectAddress","lockStatus","walletStatus","getHebaoOperationLogs","GET_OPERATION_LOGS","operationArray","getUserTradeAmount","GET_USER_TRADE_AMOUNT","getTokenPrices","GET_TOKEN_PRICES","priceSeries","tokenPrices","getLatestTokenPrices","GET_LATEST_TOKEN_PRICES","WhitelistedUserAPI","CREATION_CODE","NFTType","NFT_TYPE_STRING","NFTMethod","NFTAPI","callContractMethod","contract","_genContract","methods","_genERC1155Data","contracts","_genERC721Data","getNFTBalance","ownerOf","balanceOf","CONTRACTNFT_BALANCE","getInfoForNFTTokens","nftDatas","GET_NFTs_INFO","callRefreshNFT","POST_NFT_VALIDATE_REFRESH_NFT","getContractNFTMeta","_IPFS_META_URL","tokenURI","IPFS_META_URL","fetch","then","json","CONTRACTNFT_URI","approveNFT","approved","setApprovalForAll","operator","CONTRACTNFT_SET_APPROVE","ipfsCid0ToNftID","cidV0Str","CID","cid","hashHex","multihash","ipfsNftIDToCid","isApprovedForAll","CONTRACTNFT_IS_APPROVE","depositNFT","computeNFTAddress","saltBuf","codeHash","saltHash","rawBuf","getPublicCollectionById","GET_NFT_COLLECTION_PUBLISH","exports","getCollectionWholeNFTs","GET_COLLECTION_WHOLE_NFTS","nftTokenInfos","GLOBAL_KEY","MAIN","GlobalAPI","getActiveFeeInfo","_request","requestType","UPDATE_ACCOUNT","getUserBalanceForFee","getBanxaAPI","query","payload","GET_BANXA_API_KEY","DelegateAPI","GET_DELEGATE_GET_CODE","getIPFS","path","GET_DELEGATE_GET_IPFS","getCollectionDomain","DefiAPI","getDefiToken","GET_DEFI_TOKENS","getDefiMarkets","GET_DEFI_MARKETS","defiType","_markets","orderDefi","POST_DEFI_ORDER","getDefiReward","GET_DEFI_REWARDS","getDefiTransaction","GET_DEFI_TRANSACTIONS","userDefiTxs","getDualInfos","GET_DUAL_INFOS","dualInfo","infos","rules","getDualBalance","GET_DUAL_BALANCE","dualBalanceMap","coin","getDualPrices","GET_DUAL_PRICES","getDualIndex","GET_DUAL_INDEX","dualPrice","getDualTransactions","GET_DUAL_TRANSACTIONS","userDualTxs","orderDual","POST_DUAL_ORDER","getDualUserLocked","lockTag","loopring_defs","DUAL_CURRENCY","GET_DUAL_USER_LOCKED","lockRecord","sendStakeClaim","POST_STAKE_CLAIM","sendStakeRedeem","POST_STAKE_REDEEM","sendStake","POST_STAKE","getStakeProducts","GET_STAKE_PRODUCTS","products","getStakeSummary","GET_STAKE_SUMMARY","list","staking","getStakeTransactions","GET_STAKE_TRANSACTIONS","getCefiMarkets","GET_CEFI_MARKETS","cefiQuota","getCefiDepth","GET_CEFI_DEPTH","getCefiOrders","GET_CEFI_ORDERS","sendCefiOrder","POST_CEFI_ORDER","LuckTokenAPI","getLuckTokenAgents","GET_LUCK_TOKEN_AGENTS","luckTokenAgents","signerUrl","logoUrl","getLuckTokenAuthorizedSigners","GET_LUCK_TOKEN_AUTHORIZEDSIGNERS","getLuckTokenClaimHistory","GET_LUCK_TOKEN_CLAIMHISTORY","getLuckTokenLuckyTokens","GET_LUCK_TOKEN_LUCKYTOKENS","getLuckTokenDetail","GET_LUCK_TOKEN_LUCKYTOKENDETAIL","detail","getBlindBoxDetail","GET_LUCK_TOKEN_BLINDBOXDETAIL","getLuckTokenWithdrawals","GET_LUCK_TOKEN_WITHDRAWALS","statuses","luckTokenWithdraw","getLuckTokenBalances","GET_LUCK_TOKEN_BALANCES","tokenBalance","getLuckTokenClaimedLuckyTokens","GET_LUCK_TOKEN_CLAIMEDLUCKYTOKENS","hashes","claimedHistory","getLuckTokenSummary","GET_LUCK_TOKEN_SUMMARY","tokenSummaryList","sendLuckTokenClaimLuckyToken","POST_LUCK_TOKEN_CLAIMLUCKYTOKEN","sendLuckTokenClaimBlindBox","POST_LUCK_TOKEN_CLAIMBLINDBOX","sendLuckTokenWithdraws","claimer","_transfer","maxFeeAmount","feeToken","ecdsaAuth","POST_LUCK_TOKEN_WITHDRAWALS","sendLuckTokenSend","luckyToken","POST_LUCK_TOKEN_SENDLUCKYTOKEN","getLuckTokenClaimedBlindBox","GET_LUCK_TOKEN_CLAIMEDBLINDBOX","ContactAPI","getContacts","GET_CONTACTS","createContact","CREATE_CONTACT","updateContact","UPDATE_CONTACT","deleteContact","DELETE_CONTACT"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;IACaA,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAcC,GAAd;MAAcA;AAAAA,IAAAA,MAAM;;;AAC9C,MAAIA,GAAJ,EAAS;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAc,MAAd,EAAsBF,GAAtB;AACD;;AACD,MAAID,MAAJ,YAAIA,MAAM,CAAEI,QAAZ,EAAsB;AACpBF,IAAAA,OAAO,CAACG,KAAR,CAAcL,MAAM,CAACI,QAAP,CAAgBE,IAA9B;AACD,GAFD,MAEO;AACLJ,IAAAA,OAAO,CAACG,KAAR,CAAcL,MAAM,CAACO,OAArB;AACD;AACF;SAEeC,MAAMC;AACpB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD;AAAA,WAAaC,UAAU,CAACD,OAAD,EAAUF,YAAV,CAAvB;AAAA,GAAZ,CAAP;AACD;;ACZD,IAAMI,cAAc,GAAG,CAAC,WAAD,CAAvB;AAEA,SAAgBC,aAAaC;AAC3B,MAAI,CAACA,MAAL,EAAa;AACX,WAAO;AACLC,MAAAA,IAAI,EAAEC,SADD;AAELC,MAAAA,KAAK,EAAED;AAFF,KAAP;AAID;;AAED,MAAIF,MAAM,CAACI,UAAP,CAAkB,MAAlB,CAAJ,EAA+B;AAC7BJ,IAAAA,MAAM,GAAGA,MAAM,CAACK,MAAP,CAAc,CAAd,CAAT;AACD;;AAED,MAAIP,cAAc,CAACQ,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,cAAc,CAACQ,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;AAC9C,UAAMC,GAAG,GAAGR,MAAM,CAACS,OAAP,CAAeX,cAAc,CAACS,CAAD,CAA7B,CAAZ;;AACA,UAAIC,GAAG,IAAI,CAAX,EAAc;AACZ,YAAIA,GAAG,KAAK,CAAZ,EAAe;AACb,iBAAO;AACLP,YAAAA,IAAI,EAAEH,cAAc,CAACS,CAAD,CADf;AAELJ,YAAAA,KAAK,EAAEH,MAAM,CAACK,MAAP,CAAcL,MAAM,CAACU,WAAP,CAAmB,GAAnB,IAA0B,CAAxC;AAFF,WAAP;AAID,SALD,MAKO;AACL,iBAAO;AACLT,YAAAA,IAAI,EAAED,MAAM,CAACK,MAAP,CAAc,CAAd,EAAiBL,MAAM,CAACS,OAAP,CAAe,GAAf,CAAjB,CADD;AAELN,YAAAA,KAAK,EAAEL,cAAc,CAACS,CAAD;AAFhB,WAAP;AAID;AACF;AACF;AACF;;AAED,MAAMN,IAAI,GAAGD,MAAM,CAACK,MAAP,CAAc,CAAd,EAAiBL,MAAM,CAACS,OAAP,CAAe,GAAf,CAAjB,CAAb;AACA,MAAMN,KAAK,GAAGH,MAAM,CAACK,MAAP,CAAcL,MAAM,CAACS,OAAP,CAAe,GAAf,IAAsB,CAApC,CAAd;AAEA,SAAO;AACLR,IAAAA,IAAI,EAAJA,IADK;AAELE,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,IAAaQ,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCC,cADkC,EAElCZ,MAFkC;AAIlC,MAAI,CAACY,cAAL,EAAqB;AACnB,WAAOV,SAAP;AACD;;AACD,MAAI;AACF,WAAOU,cAAc,CAACZ,MAAD,CAArB;AACD,GAFD,CAEE,OAAOa,GAAP,EAAY;AACZ,WAAOX,SAAP;AACD;;AACD,SAAOA,SAAP;AACD,CAbM;AAeP,IAAaY,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BC,UAD8B,EAE9BC,EAF8B;AAI9B,MAAI,CAACD,UAAL,EAAiB;AACf,WAAOb,SAAP;AACD;;AACD,MAAI;AACF,WAAOa,UAAU,CAACC,EAAD,CAAjB;AACD,GAFD,CAEE,OAAOH,GAAP,EAAY;AACZ,WAAOX,SAAP;AACD;;AACD,SAAOA,SAAP;AACD,CAbM;AAeP,IAAae,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAiBC,MAAjB;AACvB,MAAI,CAACD,SAAL,EAAgB;AACd,WAAO,KAAP;AACD;;AAED,MAAIA,SAAS,CAACE,QAAV,CAAmBD,MAAnB,CAAJ,EAAgC;AAC9B,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CATM;AAWP,IAAaE,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BH,SAD8B,EAE9BjB,IAF8B,EAG9BE,KAH8B;AAK9B,MAAIgB,MAAM,GAAQjB,SAAlB;AACA,MAAIoB,QAAQ,GAAQpB,SAApB;AACA,MAAIqB,SAAS,GAAQrB,SAArB;;AAEA,MAAID,IAAI,IAAIE,KAAZ,EAAmB;AACjBgB,IAAAA,MAAM,GAAMlB,IAAN,SAAcE,KAApB;AACAmB,IAAAA,QAAQ,GAAGrB,IAAX;AACAsB,IAAAA,SAAS,GAAGpB,KAAZ;;AACA,QAAI,CAACc,SAAS,CAACC,SAAD,EAAYC,MAAZ,CAAd,EAAmC;AACjCA,MAAAA,MAAM,GAAMhB,KAAN,SAAeF,IAArB;;AACA,UAAIgB,SAAS,CAACC,SAAD,EAAYC,MAAZ,CAAb,EAAkC;AAChCG,QAAAA,QAAQ,GAAGnB,KAAX;AACAoB,QAAAA,SAAS,GAAGtB,IAAZ;AACD,OAHD,MAGO;AACLkB,QAAAA,MAAM,GAAGjB,SAAT;AACAoB,QAAAA,QAAQ,GAAGpB,SAAX;AACAqB,QAAAA,SAAS,GAAGrB,SAAZ;AACD;AACF;AACF;;AAED,MAAMsB,GAAG,GAAGL,MAAM,YAAUA,MAAV,GAAqBjB,SAAvC;AAEA,SAAO;AACLiB,IAAAA,MAAM,EAANA,MADK;AAELK,IAAAA,GAAG,EAAHA,GAFK;AAGLF,IAAAA,QAAQ,EAARA,QAHK;AAILC,IAAAA,SAAS,EAATA;AAJK,GAAP;AAMD,CAlCM;AAmCP,IAAaE,OAAO,GAAG,SAAVA,OAAU,CAACP,SAAD,EAAiBC,MAAjB;AACrB,sBAAwBpB,YAAY,CAACoB,MAAD,CAApC;AAAA,MAAQlB,IAAR,iBAAQA,IAAR;AAAA,MAAcE,KAAd,iBAAcA,KAAd;;AAEA,SAAOkB,gBAAgB,CAACH,SAAD,EAAYjB,IAAZ,EAAkBE,KAAlB,CAAvB;AACD,CAJM;;;;ACxHP,WAAYuB;AACVA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,8BAAA,WAAA;AACD,CAHD,EAAYA,eAAO,KAAPA,eAAO,KAAA,CAAnB;;AAKA,IAAaC,kBAAkB,GAAG,SAA3B;AAEP;AAAA,WAAYC;AACVA,EAAAA,yBAAA,YAAA;AACAA,EAAAA,0BAAA,aAAA;AACAA,EAAAA,yBAAA,YAAA;AACAA,EAAAA,+BAAA,kBAAA;AACAA,EAAAA,0BAAA,aAAA;AACAA,EAAAA,gCAAA,mBAAA;AACAA,EAAAA,0BAAA,aAAA;AACAA,EAAAA,wBAAA,WAAA;AACAA,EAAAA,wBAAA,WAAA;AACAA,EAAAA,2BAAA,cAAA;AACD,CAXD,EAAYA,sBAAc,KAAdA,sBAAc,KAAA,CAA1B;;AAaA,WAAYC;AACVA,EAAAA,qBAAA,OAAA;AACAA,EAAAA,qBAAA,OAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,IAAaC,UAAU,kCACpBJ,eAAO,CAACK,OADY,IACF,4CADE,cAEpBL,eAAO,CAACM,MAFY,IAEH,4CAFG,cAAhB;AAKP,IAAaC,qBAAqB,sDAC/BP,eAAO,CAACK,OADuB,IACb,4CADa,wBAE/BL,eAAO,CAACM,MAFuB,IAEd,4CAFc,wBAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBP;AAAA,WAAYE;AACVA,EAAAA,YAAA,QAAA;AACAA,EAAAA,cAAA,UAAA;AACD,CAHD,EAAYA,aAAK,KAALA,aAAK,KAAA,CAAjB;;AAKA,WAAYC;AACVA,EAAAA,sBAAA,YAAA;AACAA,EAAAA,oBAAA,UAAA;AACAA,EAAAA,oBAAA,UAAA;AACAA,EAAAA,uBAAA,aAAA;AACAA,EAAAA,qBAAA,WAAA;AACAA,EAAAA,0BAAA,gBAAA;AACAA,EAAAA,sBAAA,YAAA;AACAA,EAAAA,wBAAA,cAAA;AACAA,EAAAA,uBAAA,aAAA;AACAA,EAAAA,4BAAA,kBAAA;AACD,CAXD,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;AAaA,IAAaC,aAAa,GAAG,SAAhBA,aAAgB;AAC3B,SAAO;AACLC,IAAAA,KAAK,EAAEF,mBAAW,CAACG;AADd,GAAP;AAGD,CAJM;AAaP,IAAaC,WAAW,GAAG,SAAdA,WAAc,CAACpB,MAAD;AACzB,SAAO;AACLkB,IAAAA,KAAK,EAAEF,mBAAW,CAACK,KADd;AAELrB,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID,CALM;AAmCP,IAAasB,eAAe,GAAG,SAAlBA,eAAkB;wBAC7BJ;MAAAA,gCAAQF,mBAAW,CAACO;MACpBvB,cAAAA;MACAwB,aAAAA;MACAC,aAAAA;MACAC,gBAAAA;MACAC,mBAAAA;AAEA,MAAMC,GAAG,GAAQ;AACfV,IAAAA,KAAK,EAALA,KADe;AAEflB,IAAAA,MAAM,EAANA,MAFe;AAGfwB,IAAAA,KAAK,EAALA,KAHe;AAIfC,IAAAA,KAAK,EAALA,KAJe;AAKfC,IAAAA,QAAQ,EAARA,QALe;AAMfC,IAAAA,WAAW,EAAXA;AANe,GAAjB;AAQAE,EAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAAyB,UAACC,GAAD;AAAA,WACvBJ,GAAG,CAACI,GAAD,CAAH,KAAajD,SAAb,GAAyB,OAAO6C,GAAG,CAACI,GAAD,CAAnC,GAA2C,EADpB;AAAA,GAAzB;AAGA,SAAOJ,GAAP;AACD,CApBM;AAsBP,IAAaK,cAAc,GAAG,SAAjBA,cAAiB;0BAC5Bf;MAAAA,iCAAQF,mBAAW,CAACkB;MACjBC;;AAEH,SAAOb,eAAe;AACpBJ,IAAAA,KAAK,EAALA;AADoB,KAEjBiB,cAFiB,EAAtB;AAID,CARM;AAUP,IAAaC,gBAAgB,GAAG,SAAnBA,gBAAmB;0BAC9BlB;MAAAA,iCAAQF,mBAAW,CAACqB;MACjBF;;AAEH,SAAOb,eAAe;AACpBJ,IAAAA,KAAK,EAALA;AADoB,KAEjBiB,cAFiB,EAAtB;AAID,CARM;AAUP,IAAaG,WAAW,GAAG,SAAdA,WAAc,CAACtC,MAAD;AACzB,SAAO;AACLkB,IAAAA,KAAK,EAAEF,mBAAW,CAACuB,KADd;AAELvC,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID,CALM;AAOP,IAAawC,cAAc,GAAG,SAAjBA,cAAiB,CAACxC,MAAD;AAC5B,SAAO;AACLkB,IAAAA,KAAK,EAAEF,mBAAW,CAACyB,QADd;AAELzC,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID,CALM;AAOP,IAAa0C,YAAY,GAAG,SAAfA,YAAe,CAAC1C,MAAD;AAC1B,SAAO;AACLkB,IAAAA,KAAK,EAAEF,mBAAW,CAAC2B,MADd;AAEL3C,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID,CALM;AAOP,IAAa4C,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC5C,MAAD;AAC/B,SAAO;AACLkB,IAAAA,KAAK,EAAEF,mBAAW,CAAC6B,WADd;AAEL7C,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID,CALM;AAOP,IAAa8C,aAAa,GAAG,SAAhBA,aAAgB,CAACC,WAAD;AAC3B,SAAO;AACL7B,IAAAA,KAAK,EAAEF,mBAAW,CAACgC,OADd;AAELtB,IAAAA,QAAQ,EAAE,IAFL;AAGLqB,IAAAA,WAAW,EAAXA;AAHK,GAAP;AAKD,CANM;;AChJP,WAAYE;AACVA,EAAAA,qCAAA,+BAAA;AACAA,EAAAA,yCAAA,sBAAA;AACAA,EAAAA,+BAAA,mBAAA;AACAA,EAAAA,oCAAA,sBAAA;AACAA,EAAAA,6BAAA,kBAAA;AACAA,EAAAA,uCAAA,0BAAA;AACAA,EAAAA,kDAAA,mCAAA;AACAA,EAAAA,iCAAA,mBAAA;AACAA,EAAAA,4BAAA,6BAAA;AACAA,EAAAA,2BAAA,4BAAA;AACAA,EAAAA,kCAAA,0BAAA;AACAA,EAAAA,sCAAA,sCAAA;AACAA,EAAAA,qCAAA,6BAAA;AACAA,EAAAA,oCAAA,+CAAA;AAEAA,EAAAA,gCAAA,wBAAA;AACAA,EAAAA,0BAAA,kBAAA;AACAA,EAAAA,8BAAA,sBAAA;AACAA,EAAAA,2BAAA,mBAAA;AACAA,EAAAA,+BAAA,uBAAA;AACAA,EAAAA,gCAAA,wBAAA;AACAA,EAAAA,oCAAA,4BAAA;AACAA,EAAAA,+BAAA,kBAAA;AACAA,EAAAA,2BAAA,kBAAA;AACAA,EAAAA,uCAAA,qBAAA;AACAA,EAAAA,+BAAA,oBAAA;AACAA,EAAAA,qCAAA,+BAAA;AACAA,EAAAA,iCAAA,4BAAA;AACAA,EAAAA,kCAAA,4BAAA;AACAA,EAAAA,2CAAA,0BAAA;AACAA,EAAAA,0CAAA,0BAAA;AACAA,EAAAA,mCAAA,6BAAA;AACAA,EAAAA,uCAAA,kCAAA;AAEAA,EAAAA,wCAAA,2BAAA;AACAA,EAAAA,uCAAA,wBAAA;AACAA,EAAAA,6BAAA,8BAAA;AACAA,EAAAA,kCAAA,0BAAA;AACAA,EAAAA,wCAAA,0BAAA;AACAA,EAAAA,sCAAA,6BAAA;AACAA,EAAAA,sCAAA,qCAAA;AACAA,EAAAA,qCAAA,6BAAA;AACAA,EAAAA,+BAAA,uBAAA;AAEAA,EAAAA,+BAAA,2BAAA;AACAA,EAAAA,8BAAA,sBAAA;AACAA,EAAAA,iCAAA,yBAAA;AACAA,EAAAA,mCAAA,8BAAA;AACAA,EAAAA,uCAAA,kCAAA;AAEAA,EAAAA,8BAAA,oCAAA;AACAA,EAAAA,oCAAA,yCAAA;AAEAA,EAAAA,uCAAA,iCAAA;AAEAA,EAAAA,mCAAA,sBAAA;AACAA,EAAAA,uCAAA,wBAAA;AACAA,EAAAA,uCAAA,yBAAA;AACAA,EAAAA,mCAAA,2BAAA;AACAA,EAAAA,mCAAA,qBAAA;AACAA,EAAAA,mCAAA,qBAAA;AACAA,EAAAA,iCAAA,6BAAA;AACAA,EAAAA,sCAAA,kCAAA;AACAA,EAAAA,uCAAA,uBAAA;AACAA,EAAAA,uCAAA,kCAAA;AACAA,EAAAA,yCAAA,6BAAA;AACAA,EAAAA,oCAAA,wBAAA;AACAA,EAAAA,sCAAA,sBAAA;AACAA,EAAAA,2CAAA,2BAAA;AACAA,EAAAA,qCAAA,oCAAA;AACAA,EAAAA,sCAAA,8BAAA;AACAA,EAAAA,sCAAA,2BAAA;AACAA,EAAAA,kDAAA,+CAAA;AACAA,EAAAA,sCAAA,qCAAA;AACAA,EAAAA,sCAAA,uBAAA;AACAA,EAAAA,uCAAA,4BAAA;AAEAA,EAAAA,gCAAA,wBAAA;AACAA,EAAAA,iCAAA,yBAAA;AACAA,EAAAA,gCAAA,uBAAA;AACAA,EAAAA,iCAAA,yBAAA;AACAA,EAAAA,sCAAA,8BAAA;AAEAA,EAAAA,6BAAA,kBAAA;AAEAA,EAAAA,2BAAA,eAAA;AACAA,EAAAA,wCAAA,4CAAA;AACAA,EAAAA,sCAAA,0CAAA;AAEAA,EAAAA,gCAAA,8BAAA;AACAA,EAAAA,iCAAA,+BAAA;AACAA,EAAAA,0CAAA,0CAAA;AACAA,EAAAA,+BAAA,+BAAA;AACAA,EAAAA,mCAAA,iCAAA;AACAA,EAAAA,iCAAA,iCAAA;AACAA,EAAAA,gCAAA,+BAAA;AACAA,EAAAA,mCAAA,iCAAA;AACAA,EAAAA,2CAAA,mCAAA;AACAA,EAAAA,4BAAA,8BAAA;AACAA,EAAAA,6BAAA,+BAAA;;AAEAA,EAAAA,yCAAA,0CAAA;AACAA,EAAAA,yCAAA,0CAAA;;AAEAA,EAAAA,6BAAA,8BAAA;AAEAA,EAAAA,qCAAA,mCAAA;;AAEAA,EAAAA,kCAAA,yBAAA;AACAA,EAAAA,oCAAA,qCAAA;AACAA,EAAAA,sCAAA,8BAAA;AACAA,EAAAA,oDAAA,yCAAA;AACAA,EAAAA,yCAAA,iCAAA;AACAA,EAAAA,2CAAA,yBAAA;AACAA,EAAAA,qCAAA,2BAAA;AACAA,EAAAA,8BAAA,qBAAA;AACAA,EAAAA,+BAAA,sBAAA;AACAA,EAAAA,wCAAA,8BAAA;AACAA,EAAAA,yCAAA,gCAAA;AACAA,EAAAA,kDAAA,+CAAA;AACAA,EAAAA,8CAAA,8BAAA;AACAA,EAAAA,uCAAA,0CAAA;AACAA,EAAAA,kDAAA,sDAAA;AACAA,EAAAA,0CAAA,yCAAA;AACAA,EAAAA,mCAAA,2BAAA;AACAA,EAAAA,2CAAA,2BAAA;AACAA,EAAAA,6CAAA,2BAAA;AACAA,EAAAA,0CAAA,wCAAA;AACAA,EAAAA,2CAAA,kCAAA;AACAA,EAAAA,0CAAA,oCAAA;AACAA,EAAAA,0CAAA,kCAAA;AACAA,EAAAA,4CAAA,+CAAA;AACAA,EAAAA,uCAAA,0CAAA;AAEAA,EAAAA,8BAAA,0BAAA;AACAA,EAAAA,8CAAA,+BAAA;AACAA,EAAAA,6CAAA,8BAAA;AACAA,EAAAA,8CAAA,iCAAA;AACAA,EAAAA,iDAAA,kCAAA;AACAA,EAAAA,+CAAA,4BAAA;AACAA,EAAAA,2CAAA,gCAAA;AACAA,EAAAA,0CAAA,2BAAA;AACAA,EAAAA,yCAAA,mCAAA;AACAA,EAAAA,8BAAA,mCAAA;AAEAA,EAAAA,+BAAA,uBAAA;AACAA,EAAAA,gCAAA,wBAAA;AACAA,EAAAA,+BAAA,uBAAA;AACAA,EAAAA,sCAAA,8BAAA;AACAA,EAAAA,iCAAA,yBAAA;AACAA,EAAAA,8BAAA,uBAAA;AACAA,EAAAA,gCAAA,uBAAA;AACAA,EAAAA,qCAAA,kCAAA;AAEAA,EAAAA,sCAAA,8BAAA;AACAA,EAAAA,iDAAA,yCAAA;AACAA,EAAAA,4CAAA,yCAAA;AACAA,EAAAA,2CAAA,wCAAA;AACAA,EAAAA,gDAAA,6CAAA;AACAA,EAAAA,8CAAA,2CAAA;AACAA,EAAAA,2CAAA,uCAAA;AACAA,EAAAA,wCAAA,qCAAA;AACAA,EAAAA,kDAAA,+CAAA;AACAA,EAAAA,+CAAA,iDAAA;AACAA,EAAAA,uCAAA,oCAAA;AACAA,EAAAA,+CAAA,sCAAA;AACAA,EAAAA,gDAAA,uCAAA;AACAA,EAAAA,8CAAA,qCAAA;AACAA,EAAAA,4CAAA,wCAAA;AACAA,EAAAA,kCAAA,+BAAA;AACAA,EAAAA,mCAAA,2BAAA;AACAA,EAAAA,iCAAA,wBAAA;AACAA,EAAAA,2BAAA,wBAAA;AACAA,EAAAA,kCAAA,yBAAA;AACAA,EAAAA,kCAAA,+BAAA;AACAA,EAAAA,uCAAA,oCAAA;;AAGAA,EAAAA,6BAAA,yBAAA;AACAA,EAAAA,+BAAA,6BAAA;AACAA,EAAAA,+BAAA,gCAAA;AACAA,EAAAA,+BAAA,yBAAA;;AAGAA,EAAAA,iCAAA,wBAAA;AACAA,EAAAA,+BAAA,sBAAA;AACAA,EAAAA,gCAAA,uBAAA;AACAA,EAAAA,gCAAA,sBAAA;AACD,CA7LD,EAAYA,qBAAa,KAAbA,qBAAa,KAAA,CAAzB;;ACAA,WAAYC;AACVA,EAAAA,gCAAA,gBAAA;AACAA,EAAAA,4BAAA,YAAA;AACAA,EAAAA,iCAAA,iBAAA;AACAA,EAAAA,kCAAA,kBAAA;AACAA,EAAAA,2BAAA,WAAA;AACAA,EAAAA,mCAAA,mBAAA;AACD,CAPD,EAAYA,yBAAiB,KAAjBA,yBAAiB,KAAA,CAA7B;;AASA,WAAYC;AACVA,EAAAA,iDAAA,aAAA;AACAA,EAAAA,iDAAA,aAAA;AACAA,EAAAA,qDAAA,iBAAA;AACAA,EAAAA,wDAAA,oBAAA;AACAA,EAAAA,sDAAA,kBAAA;AACAA,EAAAA,wDAAA,mBAAA;AACD,CAPD,EAAYA,uBAAe,KAAfA,uBAAe,KAAA,CAA3B;;AASA,IAAaC,QAAQ,GAAG,oCAAjB;;AClBP,WAAYC;AACVA,EAAAA,gBAAA,QAAA;AACAA,EAAAA,iBAAA,SAAA;AACAA,EAAAA,mBAAA,WAAA;AACD,CAJD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAMA,WAAYC;AACVA,EAAAA,+BAAA,mBAAA;AACD,CAFD,EAAYA,qBAAa,KAAbA,qBAAa,KAAA,CAAzB;;AAIA,WAAYC;AACVA,EAAAA,qCAAA,QAAA;AACAA,EAAAA,4CAAA,eAAA;AACAA,EAAAA,qCAAA,QAAA;AACD,CAJD,EAAYA,oBAAY,KAAZA,oBAAY,KAAA,CAAxB;;AAMA,WAAYC;AACVA,EAAAA,iDAAA,sCAAA;AACAA,EAAAA,sCAAA,2BAAA;AACAA,EAAAA,gCAAA,qBAAA;AACAA,EAAAA,0BAAA,eAAA;AACD,CALD,EAAYA,oBAAY,KAAZA,oBAAY,KAAA,CAAxB;;AAOA,WAAYC;AACVA,EAAAA,qBAAA,KAAA;AACAA,EAAAA,0BAAA,eAAA;AACAA,EAAAA,wBAAA,aAAA;AACAA,EAAAA,qBAAA,UAAA;AACD,CALD,EAAYA,oBAAY,KAAZA,oBAAY,KAAA,CAAxB;;AAOA,WAAYC;AACVA,EAAAA,uBAAA,gBAAA;AACAA,EAAAA,sBAAA,eAAA;AACAA,EAAAA,sBAAA,eAAA;AACAA,EAAAA,qBAAA,QAAA;AACD,CALD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAOA,WAAYC;AACVA,EAAAA,2BAAA,gBAAA;AACAA,EAAAA,0BAAA,eAAA;AACAA,EAAAA,0BAAA,eAAA;AACAA,EAAAA,yBAAA,cAAA;AACD,CALD,EAAYA,qBAAa,KAAbA,qBAAa,KAAA,CAAzB;;AAOA,WAAYC;AACVA,EAAAA,eAAA,QAAA;AACAA,EAAAA,eAAA,QAAA;AACD,CAHD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AAKA,WAAYC;AACVA,EAAAA,mDAAA,UAAA;AACAA,EAAAA,iEAAA,wBAAA;AACAA,EAAAA,4DAAA,mBAAA;AACAA,EAAAA,sDAAA,aAAA;AACAA,EAAAA,sEAAA,6BAAA;AACAA,EAAAA,0DAAA,iBAAA;AACAA,EAAAA,sDAAA,aAAA;AACAA,EAAAA,qDAAA,YAAA;AACAA,EAAAA,sDAAA,aAAA;AACAA,EAAAA,0EAAA,gCAAA;AACAA,EAAAA,wDAAA,cAAA;AACAA,EAAAA,wDAAA,cAAA;AACAA,EAAAA,+DAAA,qBAAA;AACD,CAdD,EAAYA,0BAAkB,KAAlBA,0BAAkB,KAAA,CAA9B;;AAeA,WAAYC;AACVA,EAAAA,4DAAA,aAAA;AACAA,EAAAA,mEAAA,mBAAA;AACAA,EAAAA,iEAAA,iBAAA;AACAA,EAAAA,+DAAA,eAAA;AACAA,EAAAA,oFAAA,oCAAA;AACD,CAND,EAAYA,6BAAqB,KAArBA,6BAAqB,KAAA,CAAjC;;AAQA,WAAYC;AACVA,EAAAA,uBAAA,SAAA;AACAA,EAAAA,uBAAA,SAAA;AACAA,EAAAA,wBAAA,UAAA;AACAA,EAAAA,wBAAA,UAAA;AACAA,EAAAA,sBAAA,QAAA;AACAA,EAAAA,sBAAA,QAAA;AACAA,EAAAA,sBAAA,QAAA;AACAA,EAAAA,uBAAA,SAAA;AACAA,EAAAA,qBAAA,OAAA;AACAA,EAAAA,qBAAA,OAAA;AACD,CAXD,EAAYA,uBAAe,KAAfA,uBAAe,KAAA,CAA3B;;AAaA,WAAYC;AACVA,EAAAA,sBAAA,eAAA;AACAA,EAAAA,qBAAA,cAAA;AACAA,EAAAA,oBAAA,aAAA;AACAA,EAAAA,kBAAA,WAAA;AACD,CALD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AAOA,WAAYC;AACVA,EAAAA,yBAAA,eAAA;AACAA,EAAAA,wBAAA,cAAA;AACAA,EAAAA,qBAAA,WAAA;AACAA,EAAAA,wBAAA,cAAA;AACAA,EAAAA,yBAAA,eAAA;AACAA,EAAAA,sBAAA,YAAA;AACD,CAPD,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;AASA,WAAYC;AACVA,EAAAA,WAAA,QAAA;AACAA,EAAAA,YAAA,SAAA;AACD,CAHD,EAAYA,YAAI,KAAJA,YAAI,KAAA,CAAhB;;AAKA,WAAYC;AACVA,EAAAA,sCAAA,wBAAA;AACAA,EAAAA,qCAAA,uBAAA;AACAA,EAAAA,mCAAA,qBAAA;AACD,CAJD,EAAYA,uBAAe,KAAfA,uBAAe,KAAA,CAA3B;;AAMA,WAAYC;AACVA,EAAAA,sBAAA,YAAA;AACAA,EAAAA,uBAAA,aAAA;AACAA,EAAAA,kCAAA,wBAAA;AACAA,EAAAA,+BAAA,qBAAA;AACAA,EAAAA,uCAAA,6BAAA;AACAA,EAAAA,+BAAA,qBAAA;AACAA,EAAAA,mCAAA,yBAAA;AACAA,EAAAA,uBAAA,uBAAA;AACAA,EAAAA,oCAAA,0BAAA;AACAA,EAAAA,8BAAA,oBAAA;AACAA,EAAAA,yBAAA,eAAA;AACD,CAZD,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;AAcA,WAAYC;AACVA,EAAAA,2CAAA,YAAA;AACAA,EAAAA,sDAAA,uBAAA;AACAA,EAAAA,4CAAA,aAAA;AACD,CAJD,EAAYA,qBAAa,KAAbA,qBAAa,KAAA,CAAzB;;AAMA,WAAYC;AACVA,EAAAA,yBAAA,YAAA;AACAA,EAAAA,0BAAA,aAAA;AACAA,EAAAA,0BAAA,uBAAA;AACAA,EAAAA,sBAAA,SAAA;AACD,CALD,EAAYA,sBAAc,KAAdA,sBAAc,KAAA,CAA1B;;AAOA,WAAYC;AACVA,EAAAA,wBAAA,aAAA;AACAA,EAAAA,4BAAA,iBAAA;AACD,CAHD,EAAYA,oBAAY,KAAZA,oBAAY,KAAA,CAAxB;;AAKA,WAAYC;AACVA,EAAAA,iBAAA,UAAA;AACAA,EAAAA,mBAAA,YAAA;AACAA,EAAAA,8BAAA,uBAAA;AACAA,EAAAA,+BAAA,wBAAA;AACAA,EAAAA,oBAAA,aAAA;AACAA,EAAAA,wBAAA,iBAAA;AACD,CAPD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AASA,WAAYC;AACVA,EAAAA,iBAAA,QAAA;AACAA,EAAAA,iBAAA,QAAA;AACD,CAHD,EAAYA,kBAAU,KAAVA,kBAAU,KAAA,CAAtB;;AAKA,WAAYC;AACVA,EAAAA,kBAAA,aAAA;AACAA,EAAAA,iBAAA,YAAA;AACAA,EAAAA,6BAAA,wBAAA;AACD,CAJD,EAAYA,cAAM,KAANA,cAAM,KAAA,CAAlB;;AAMA,WAAYC;AACVA,EAAAA,qBAAA,aAAA;AACAA,EAAAA,oBAAA,YAAA;AACAA,EAAAA,qBAAA,aAAA;AACAA,EAAAA,gBAAA,QAAA;AACAA,EAAAA,iBAAA,SAAA;AACD,CAND,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAQA,WAAYC;AACVA,EAAAA,iBAAA,aAAA;AACAA,EAAAA,iBAAA,aAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,WAAYC;AACVA,EAAAA,+BAAA,QAAA;AACAA,EAAAA,gCAAA,SAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,WAAYC;AACVA,EAAAA,sBAAA,eAAA;AACAA,EAAAA,+BAAA,wBAAA;AACAA,EAAAA,4BAAA,qBAAA;AACD,CAJD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AAMA,WAAYC;AACVA,EAAAA,mCAAA,eAAA;AACAA,EAAAA,mCAAA,eAAA;AACAA,EAAAA,kCAAA,cAAA;AACD,CAJD,EAAYA,6BAAqB,KAArBA,6BAAqB,KAAA,CAAjC;;AAMA,WAAYC;AACVA,EAAAA,gCAAA,WAAA;AACAA,EAAAA,mCAAA,cAAA;AACAA,EAAAA,4CAAA,uBAAA;AACD,CAJD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AAMA,WAAYC;AACVA,EAAAA,qCAAA,cAAA;AACAA,EAAAA,+BAAA,QAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,WAAYC;AACVA,EAAAA,sCAAA,SAAA;AACAA,EAAAA,qCAAA,QAAA;AACD,CAHD,EAAYA,oBAAY,KAAZA,oBAAY,KAAA,CAAxB;;AClJA,WAAYC;AACVA,EAAAA,yBAAA,aAAA;AACAA,EAAAA,yBAAA,aAAA;AACAA,EAAAA,uBAAA,WAAA;AACAA,EAAAA,sBAAA,UAAA;AACD,CALD,EAAYA,qBAAa,KAAbA,qBAAa,KAAA,CAAzB;;AAwRA,WAAYC;AACVA,EAAAA,8CAAA,SAAA;AACAA,EAAAA,8CAAA,SAAA;AACAA,EAAAA,qDAAA,gBAAA;AACAA,EAAAA,oDAAA,eAAA;AACAA,EAAAA,sDAAA,iBAAA;AACAA,EAAAA,gEAAA,0BAAA;AACAA,EAAAA,sDAAA,gBAAA;AACAA,EAAAA,gEAAA,0BAAA;AACAA,EAAAA,6DAAA,uBAAA;AACAA,EAAAA,8CAAA,QAAA;AACD,CAXD,EAAYA,wBAAgB,KAAhBA,wBAAgB,KAAA,CAA5B;;AAyRA,WAAYC;AACVA,EAAAA,kCAAA,SAAA;AACAA,EAAAA,kCAAA,SAAA;AACD,CAHD,EAAYA,kBAAU,KAAVA,kBAAU,KAAA,CAAtB;;AA+EA,WAAYC;AACVA,EAAAA,uBAAA,UAAA;AACAA,EAAAA,uBAAA,UAAA;AACD,CAHD,EAAYA,sBAAc,KAAdA,sBAAc,KAAA,CAA1B;;AA+qBA,WAAYC;AACVA,EAAAA,sBAAA,QAAA;AACAA,EAAAA,sBAAA,QAAA;AACD,CAHD,EAAYA,uBAAe,KAAfA,uBAAe,KAAA,CAA3B;;AAsuCA,WAAYC;AACVA,EAAAA,mBAAA,WAAA;AACAA,EAAAA,oBAAA,YAAA;AACAA,EAAAA,sBAAA,cAAA;AACD,CAJD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAeA,WAAYC;AACVA,EAAAA,iCAAA,iBAAA;AACAA,EAAAA,kCAAA,kBAAA;AACAA,EAAAA,8BAAA,cAAA;AACAA,EAAAA,6BAAA,aAAA;AACD,CALD,EAAYA,yBAAiB,KAAjBA,yBAAiB,KAAA,CAA7B;;AAOA,WAAYC;AACVA,EAAAA,wBAAA,YAAA;AACAA,EAAAA,wBAAA,YAAA;AACAA,EAAAA,2BAAA,aAAA;AACD,CAJD,EAAYA,uBAAe,KAAfA,uBAAe,KAAA,CAA3B;;AAmfA,IAAaC,GAAG,GAAG,GAAZ;AAEP;AAAA,WAAYC;AACVA,EAAAA,qBAAA,YAAA;AACAA,EAAAA,sBAAA,aAAA;AACD,CAHD,EAAYA,kBAAU,KAAVA,kBAAU,KAAA,CAAtB;;AA+FA,WAAYC;AACVA,EAAAA,0BAAA,QAAA;AACAA,EAAAA,2BAAA,SAAA;AACD,CAHD,EAAYA,2BAAmB,KAAnBA,2BAAmB,KAAA,CAA/B;;AAgEA,WAAYC;AACVA,EAAAA,sBAAA,cAAA;AACAA,EAAAA,0BAAA,kBAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAyEA,WAAYC;AACV;AACA;AACA;AACAA,EAAAA,oCAAA,cAAA;AACAA,EAAAA,iCAAA,WAAA;AACAA,EAAAA,qCAAA,eAAA;AACAA,EAAAA,oCAAA,cAAA;AACD,CARD,EAAYA,+BAAuB,KAAvBA,+BAAuB,KAAA,CAAnC;;AAUA,WAAYC;AACVA,EAAAA,8BAAA,cAAA;AACAA,EAAAA,4BAAA,YAAA;AACAA,EAAAA,yBAAA,SAAA;AACD,CAJD,EAAYA,yBAAiB,KAAjBA,yBAAiB,KAAA,CAA7B;;AA+IA,WAAYC;AACVA,EAAAA,sEAAA,eAAA;AACAA,EAAAA,yEAAA,kBAAA;AACAA,EAAAA,mEAAA,YAAA;AACAA,EAAAA,qEAAA,cAAA;AACAA,EAAAA,oEAAA,aAAA;AACAA,EAAAA,kEAAA,WAAA;AACD,CAPD,EAAYA,iCAAyB,KAAzBA,iCAAyB,KAAA,CAArC;;AAQA,WAAYC;AACVA,EAAAA,kEAAA,aAAA;AACAA,EAAAA,oEAAA,eAAA;AACAA,EAAAA,mEAAA,cAAA;AACAA,EAAAA,yEAAA,oBAAA;AACAA,EAAAA,wEAAA,mBAAA;AACD,CAND,EAAYA,gCAAwB,KAAxBA,gCAAwB,KAAA,CAApC;;AAQA,WAAYC;AACVA,EAAAA,kCAAA,eAAA;AACAA,EAAAA,qCAAA,kBAAA;AACAA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,iCAAA,cAAA;AACAA,EAAAA,gCAAA,aAAA;AACAA,EAAAA,8BAAA,WAAA;AACD,CAPD,EAAYA,4BAAoB,KAApBA,4BAAoB,KAAA,CAAhC;;AAQA,WAAYC;AACVA,EAAAA,wDAAA,WAAA;AACAA,EAAAA,yDAAA,YAAA;AACD,CAHD,EAAYA,4BAAoB,KAApBA,4BAAoB,KAAA,CAAhC;;AAIA,WAAYC;AACVA,EAAAA,oDAAA,WAAA;AACAA,EAAAA,qDAAA,YAAA;AACD,CAHD,EAAYA,0BAAkB,KAAlBA,0BAAkB,KAAA,CAA9B;;AAIA,WAAYC;AACVA,EAAAA,qDAAA,UAAA;AACAA,EAAAA,sDAAA,WAAA;AACAA,EAAAA,yDAAA,cAAA;AACD,CAJD,EAAYA,2BAAmB,KAAnBA,2BAAmB,KAAA,CAA/B;;AAKA,WAAYC;AACVA,EAAAA,kCAAA,kBAAA;AACAA,EAAAA,4BAAA,YAAA;AACAA,EAAAA,4BAAA,YAAA;AACD,CAJD,EAAYA,yBAAiB,KAAjBA,yBAAiB,KAAA,CAA7B;;AAKA,WAAYC;AACVA,EAAAA,4BAAA,eAAA;AACAA,EAAAA,wBAAA,WAAA;AACAA,EAAAA,yBAAA,YAAA;AACD,CAJD,EAAYA,sBAAc,KAAdA,sBAAc,KAAA,CAA1B;;AA2UA,WAAYC;AACVA,EAAAA,uBAAA,aAAA;AACAA,EAAAA,qBAAA,WAAA;AACAA,EAAAA,+BAAA,qBAAA;AACAA,EAAAA,kCAAA,wBAAA;AACAA,EAAAA,qBAAA,WAAA;AACD,CAND,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;AA8BA,WAAYC;AACVA,EAAAA,iCAAA,cAAA;AACAA,EAAAA,8BAAA,WAAA;AACAA,EAAAA,6BAAA,UAAA;AACD,CAJD,EAAYA,4BAAoB,KAApBA,4BAAoB,KAAA,CAAhC;;AAsCA,WAAYC;AACVA,EAAAA,+CAAA,oBAAA;AACAA,EAAAA,mDAAA,sBAAA;;AAEAA,EAAAA,gEAAA,kCAAA;AACAA,EAAAA,gEAAA,kCAAA;AACAA,EAAAA,gEAAA,kCAAA;AACAA,EAAAA,gEAAA,kCAAA;AAEAA,EAAAA,kDAAA,qBAAA;;AAEAA,EAAAA,iDAAA,mBAAA;AACAA,EAAAA,mDAAA,qBAAA;AACAA,EAAAA,+CAAA,iBAAA;AACAA,EAAAA,iDAAA,mBAAA;AACAA,EAAAA,oDAAA,sBAAA;AAEAA,EAAAA,sCAAA,QAAA;AACAA,EAAAA,+CAAA,iBAAA;AACAA,EAAAA,+CAAA,iBAAA;AACAA,EAAAA,6CAAA,eAAA;AAEAA,EAAAA,0CAAA,aAAA;AACD,CAvBD,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;ACn5HA,WAAYC;AACVA,EAAAA,8DAAA,kBAAA;AACAA,EAAAA,6DAAA,iBAAA;AAEAA,EAAAA,kEAAA,sBAAA;AACAA,EAAAA,+DAAA,mBAAA;AAEAA,EAAAA,qEAAA,yBAAA;AACAA,EAAAA,oEAAA,wBAAA;AACAA,EAAAA,kEAAA,sBAAA;AACAA,EAAAA,gEAAA,oBAAA;AACAA,EAAAA,qEAAA,yBAAA;AACAA,EAAAA,6DAAA,iBAAA;AACAA,EAAAA,sEAAA,0BAAA;AACAA,EAAAA,sEAAA,0BAAA;AACAA,EAAAA,kEAAA,sBAAA;AACAA,EAAAA,qEAAA,yBAAA;AACAA,EAAAA,uEAAA,2BAAA;AACAA,EAAAA,qEAAA,yBAAA;AACAA,EAAAA,qEAAA,yBAAA;AACAA,EAAAA,8DAAA,kBAAA;AACAA,EAAAA,wEAAA,4BAAA;AACAA,EAAAA,0EAAA,8BAAA;AACAA,EAAAA,qEAAA,yBAAA;AACAA,EAAAA,gGAAA,oDAAA;AAEAA,EAAAA,oEAAA,wBAAA;AACAA,EAAAA,mEAAA,uBAAA;AACAA,EAAAA,qEAAA,yBAAA;AACAA,EAAAA,mEAAA,uBAAA;AAEAA,EAAAA,6DAAA,iBAAA;AACAA,EAAAA,+DAAA,mBAAA;AACAA,EAAAA,kEAAA,sBAAA;AACAA,EAAAA,gEAAA,oBAAA;AACAA,EAAAA,0DAAA,cAAA;AAEAA,EAAAA,qEAAA,yBAAA;AACAA,EAAAA,0EAAA,8BAAA;AACAA,EAAAA,gEAAA,oBAAA;AAEAA,EAAAA,mEAAA,uBAAA;AACAA,EAAAA,wEAAA,4BAAA;AACAA,EAAAA,2DAAA,eAAA;AACAA,EAAAA,gEAAA,oBAAA;AACAA,EAAAA,oEAAA,wBAAA;AACAA,EAAAA,uEAAA,2BAAA;AACAA,EAAAA,wEAAA,4BAAA;AACAA,EAAAA,kEAAA,sBAAA;AACAA,EAAAA,4DAAA,gBAAA;AACAA,EAAAA,8DAAA,kBAAA;AACAA,EAAAA,6DAAA,iBAAA;AACAA,EAAAA,2DAAA,eAAA;AACAA,EAAAA,mEAAA,uBAAA;AACAA,EAAAA,+DAAA,mBAAA;AACD,CAvDD,EAAYA,yBAAiB,KAAjBA,yBAAiB,KAAA,CAA7B;;AAyDA,WAAYC;AACVA,EAAAA,mCAAA,iCAAA;AACAA,EAAAA,6BAAA,kCAAA;AACAA,EAAAA,+BAAA,qCAAA;AACAA,EAAAA,iCAAA,2BAAA;AACAA,EAAAA,qCAAA,+BAAA;AACAA,EAAAA,wCAAA,iCAAA;AACAA,EAAAA,yCAAA,kCAAA;AACAA,EAAAA,8BAAA,iBAAA;AACAA,EAAAA,4BAAA,yBAAA;AACAA,EAAAA,oCAAA,qBAAA;AACAA,EAAAA,gCAAA,sBAAA;AACD,CAZD,EAAYA,sBAAc,KAAdA,sBAAc,KAAA,CAA1B;;AAuBA,IAAaC,cAAc,GAAG,SAAjBA,cAAiB,CAC5BC,SAD4B,EAE5BC,WAF4B;AAI5B,MAAM3I,OAAO,GAAG0I,SAAS,CAAC1I,OAA1B;;AACA,MAAI2I,WAAW,IAAI3I,OAAO,KAAK,mBAA/B,EAAoD;AAClD,WAAOwI,sBAAc,CAACI,iBAAtB;AACD,GAFD,MAEO,IAAI5I,OAAO,KAAK,aAAZ,IAA6BA,OAAO,KAAK,eAA7C,EAA8D;AACnE,WAAOwI,sBAAc,CAACK,WAAtB;AACD,GAFM,MAEA,IACL7I,OAAO,KACNA,OAAO,CAACY,UAAR,CAAmB,mBAAnB,KACCZ,OAAO,CAACiB,OAAR,CAAgB,yBAAhB,IAA6C,CAFxC,CADF,EAIL;AACA,WAAOuH,sBAAc,CAACK,WAAtB;AACD;;AACD,SAAO7I,OAAP;AACD,CAjBM;;ICzEM8I,QAAQ,GAAG;AACtBC,EAAAA,OAAO,EAAE;AACP,WAAOC,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,UAA1B,CAAP;AACD,GAHqB;AAItBC,EAAAA,UAAU,EAAE;AACV,WAAOH,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,aAA1B,CAAP;AACD,GANqB;AAOtBE,EAAAA,GAAG,EAAE;AACH,WAAOJ,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,mBAA1B,CAAP;AACD,GATqB;AAUtBG,EAAAA,KAAK,EAAE;AACL,WAAOL,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,aAA1B,CAAP;AACD,GAZqB;AAatBI,EAAAA,OAAO,EAAE;AACP,WACEN,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,WAA1B,KACAF,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,YAA1B,CAFF;AAID,GAlBqB;AAmBtBK,EAAAA,QAAQ,EAAE;;;AACR,WAAO,YAAAC,MAAM,SAAN,oBAAQC,QAAR,kBAAoBD,MAApB,qBAAoB,SAAQC,QAAR,CAAiBC,SAArC,CAAP;AACD,GArBqB;AAuBtBC,EAAAA,GAAG,EAAE;AACH,QAAI,OAAOC,MAAM,CAACZ,SAAd,KAA4B,WAA5B,IAA2C,OAAOA,SAAP,KAAqB,WAApE,EAAiF;AAC/ErJ,MAAAA,OAAO,CAACkK,GAAR,CAAY,qCAAZ;AACA,aAAO,KAAP;AACD;;AACD,WACEf,QAAQ,CAACC,OAAT,MACAD,QAAQ,CAACK,UAAT,EADA,IAEAL,QAAQ,CAACM,GAAT,EAFA,IAGAN,QAAQ,CAACO,KAAT,EAHA,IAIAP,QAAQ,CAACQ,OAAT,EAJA,IAKAR,QAAQ,CAACS,QAAT,EANF;AAQD;AApCqB,CAAjB;;ACQPO,SAAS,CAACC,MAAV,CAAiB;AACfC,EAAAA,cAAc,EAAE,GADD;AAEfC,EAAAA,KAAK,EAAE,CAAC,CAAC,MAAF,EAAU,QAAV,CAFQ;AAGfC,EAAAA,aAAa,EAAE;AAHA,CAAjB;AAMA;;;;;;AAKA,SAAgBC,aAAaC;AAC3B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,CAACxJ,UAAN,CAAiB,IAAjB,IAAyBwJ,KAAzB,GAAiC,OAAOA,KAA/C;AACD;;AACD,QAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED;;;;;;AAKA,SAAgBC,SAASC;AACvB,MAAIA,KAAK,YAAYC,MAArB,EAA6B;AAC3B,WAAOD,KAAP;AACD,GAFD,MAEO;AACL,WAAOE,gBAAA,CAAiBF,KAAjB,CAAP;AACD;AACF;AAED;;;;;;;AAMA,SAAgBG,QAAQC,KAAUC;AAChC,SAAON,QAAQ,CAACO,MAAM,CAACF,GAAD,CAAN,CAAYG,QAAZ,CAAqBF,MAArB,EAA6B,GAA7B,CAAD,CAAf;AACD;AAED;;;;;;AAKA,SAAgBG,MACdR;AAEA,MACE,OAAOA,KAAP,KAAiB,QAAjB,IACAA,KAAK,YAAYT,SADjB,IAEAS,KAAK,YAAYS,EAHnB,EAIE;AACA,WAAOb,YAAY,CAACI,KAAK,CAACU,QAAN,CAAe,EAAf,CAAD,CAAnB;AACD;;AAED,MAAIV,KAAK,YAAYC,MAAjB,IAA2BD,KAAK,YAAYW,UAAhD,EAA4D;AAC1D,WAAOf,YAAY,CAACI,KAAK,CAACU,QAAN,CAAe,KAAf,CAAD,CAAnB;AACD;;AAED,MAAI,OAAOV,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAMY,KAAK,GAAG,IAAIC,MAAJ,CAAW,kBAAX,CAAd;AACA,WAAOD,KAAK,CAACE,IAAN,CAAWd,KAAX,IACHA,KADG,GAEHJ,YAAY,CAACG,QAAQ,CAACC,KAAD,CAAR,CAAgBU,QAAhB,CAAyB,KAAzB,CAAD,CAFhB;AAGD;;AACD,QAAM,IAAIZ,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED;;;;;;AAKA,SAAgBiB,SACdf;AAEA,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AAED,MAAIA,KAAK,YAAYT,SAAjB,IAA8BS,KAAK,YAAYS,EAAnD,EAAuD;AACrD,WAAOT,KAAK,CAACe,QAAN,EAAP;AACD;;AAED,MAAI,OAAOf,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOgB,MAAM,CAAChB,KAAD,CAAb;AACD;;AAED,MAAIA,KAAK,YAAYC,MAAjB,IAA2BD,KAAK,YAAYW,UAAhD,EAA4D;AAC1D,WAAOK,MAAM,CAAChB,KAAK,CAACU,QAAN,CAAe,KAAf,CAAD,CAAb;AACD;;AAED,QAAM,IAAIZ,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED;;;;;;AAKA,SAAgBmB,MACdjB;AAEA,MAAIA,KAAK,YAAYT,SAArB,EAAgC;AAC9B,WAAOS,KAAP;AACD;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,IAAIT,SAAJ,CAAcS,KAAK,CAACU,QAAN,EAAd,CAAP;AACD;;AAED,MAAI,OAAOV,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,IAAIT,SAAJ,CAAcS,KAAd,CAAP;AACD;;AACD,MAAIA,KAAK,YAAYC,MAAjB,IAA2BD,KAAK,YAAYW,UAAhD,EAA4D;AAC1D,WAAO,IAAIpB,SAAJ,CAAcS,KAAK,CAACU,QAAN,CAAe,KAAf,CAAd,CAAP;AACD;;AAED,QAAM,IAAIZ,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED;;;;;;AAKA,SAAgBoB,KAAKlB;AACnB,SAAOA,KAAK,YAAYS,EAAjB,GAAsBT,KAAtB,GAA8B,IAAIS,EAAJ,CAAOQ,KAAK,CAACjB,KAAD,CAAL,CAAaU,QAAb,CAAsB,EAAtB,CAAP,EAAkC,EAAlC,CAArC;AACD;AAED;;;;;;AAKA,SAAgBS,SAASC;AACvB,SAAO,IAAI7B,SAAJ,CAAc0B,KAAK,CAACG,KAAD,CAAL,CAAaC,KAAb,CAAmB,GAAnB,EAAwBC,OAAxB,CAAgC,CAAhC,CAAd,CAAP;AACD;AAED;;;;;;AAKA,SAAgBC,OAAOH;AACrB,SAAOH,KAAK,CAACG,KAAD,CAAL,CAAaI,GAAb,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;;AAKA,SAAgBC,UAAUzB;AACxB,MAAIA,KAAK,YAAYC,MAAjB,IAA2BD,KAAK,YAAYW,UAAhD,EAA4D;AAC1D,WAAOX,KAAK,CAACU,QAAN,CAAe,KAAf,CAAP;AACD;;AAED,MAAI,OAAOV,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,CAAC3J,UAAN,CAAiB,IAAjB,IAAyB2J,KAAK,CAAC0B,KAAN,CAAY,CAAZ,CAAzB,GAA0C1B,KAAjD;AACD;;AACD,QAAM,IAAIF,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED;;;;;;AAKA,SAAgB6B,cAAc3B;AAC5B,MAAIA,KAAK,YAAYC,MAAjB,IAA2BD,KAAK,YAAYW,UAAhD,EAA4D;AAC1D,WAAOT,yBAAA,CAA0B,OAAOF,KAAK,CAACU,QAAN,CAAe,KAAf,CAAjC,CAAP;AACD;;AAED,MAAI,OAAOV,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOE,yBAAA,CACLF,KAAK,CAAC3J,UAAN,CAAiB,IAAjB,IAAyB2J,KAAzB,GAAiC,OAAOA,KADnC,CAAP;AAGD;;AACD,QAAM,IAAIF,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED;;;;;;AAKA,SAAgB8B,eAAe/B;AAC7B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,CAACxJ,UAAN,CAAiB,IAAjB,IAAyBwJ,KAAK,CAAC6B,KAAN,CAAY,CAAZ,CAAzB,GAA0C7B,KAAjD;AACD;;AACD,QAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED;;;;;;AAKA,SAAgB+B,YAAYC;AAC1B,SAAOA,GAAG,CAACvL,MAAJ,GAAa,CAAb,KAAmB,CAAnB,SAA2BuL,GAA3B,GAAmCA,GAA1C;AACD;AAED;;;;;;AAKA,SAAgBC,iBAAiBC;AAC/B,UAAQA,gBAAR;AACE,SAAK,KAAL;AACE,aAAO,GAAP;;AACF,SAAK,KAAL;AACE,aAAO,GAAP;;AACF;AACE,aAAO,EAAP;AANJ;AAQD;AAED;;;;;;;;AAOA,SAAgBV,QAAQW,QAAaC,WAAgBC;AACnDD,EAAAA,SAAS,GAAGA,SAAS,IAAI,CAAzB;;AACA,MAAID,MAAM,YAAY1C,SAAtB,EAAiC;AAC/B,QAAM6C,EAAE,GAAGD,IAAI,GAAG,CAAH,GAAO,CAAtB;AACA,WAAOF,MAAM,CAACX,OAAP,CAAeY,SAAf,EAA0BE,EAA1B,CAAP;AACD;;AAED,MAAI,OAAOH,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOE,IAAI,GACP,CACEE,IAAI,CAACF,IAAL,CAAUF,MAAM,GAAGjB,MAAM,CAAC,OAAOkB,SAAR,CAAzB,IACAlB,MAAM,CAAC,OAAOkB,SAAR,CAFR,EAGEZ,OAHF,CAGUY,SAHV,CADO,GAKP,CACEG,IAAI,CAACC,KAAL,CAAWL,MAAM,GAAGjB,MAAM,CAAC,OAAOkB,SAAR,CAA1B,IACAlB,MAAM,CAAC,OAAOkB,SAAR,CAFR,EAGEZ,OAHF,CAGUY,SAHV,CALJ;AASD;;AAED,QAAM,IAAIpC,KAAJ,CAAU,kBAAV,CAAN;AACD;AAED,SAAgByC,eAAenJ;AAC7B,MAAMoJ,MAAM,GAAGZ,cAAc,CAACxI,GAAD,CAA7B;AACA,SAAOwG,YAAY,CAACU,MAAM,CAACkC,MAAD,CAAN,CAAejC,QAAf,CAAwB,EAAxB,EAA4B,GAA5B,CAAD,CAAnB;AACD;AAED;;;;;;AAKA,SAAgBkC,iBAAiBR;AAC/B,MAAIA,MAAJ,EAAY;AACVA,IAAAA,MAAM,GAAGA,MAAM,CAACvB,QAAP,GAAkBgC,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,CAAT;;AACA,QAAIC,KAAK,CAAC3B,MAAM,CAACiB,MAAD,CAAP,CAAT,EAA2B;AACzB,aAAO,GAAP;AACD;;AACD,QAAI;AACF,UAAMW,KAAK,GAAGX,MAAM,CAACvB,QAAP,GAAkBmC,KAAlB,CAAwB,GAAxB,CAAd;AACAD,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASF,OAAT,CAAiB,uBAAjB,EAA0C,GAA1C,CAAX;AACA,aAAOE,KAAK,CAACE,IAAN,CAAW,GAAX,CAAP;AACD,KAJD,CAIE,OAAOhM,GAAP,EAAY;AACZ,aAAO,GAAP;AACD;AACF,GAZD,MAYO;AACL,WAAOmL,MAAP;AACD;AACF;AAED,SAAgBc,kBAAkB/J;AAGhC,MAAMgK,SAAS,GAAqB,IAAIC,GAAJ,EAApC;;AACA,MAAIjK,GAAJ,EAAS;AACPkK,IAAAA,OAAO,CAACC,OAAR,CAAgBnK,GAAhB,EACGoK,IADH,CACQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,CAAC3C,QAAF,GAAa6C,aAAb,CAA2BD,CAAC,CAAC5C,QAAF,EAA3B,CAAV;AAAA,KADR,EAEGvH,OAFH,CAEW,UAACC,GAAD;AACP4J,MAAAA,SAAS,CAACQ,GAAV,CAAcpK,GAAG,CAACsH,QAAJ,EAAd,EAA8B1H,GAAG,CAACI,GAAG,CAACsH,QAAJ,EAAD,CAAjC;AACD,KAJH;AAKD;;AACD,SAAOsC,SAAP;AACD;AACD,SAAgBS,WAAcC;AAC5B,MAAMC,OAAO,GAMR,EANL;AAOA,MAAMC,YAAY,GAMb,EANL;AAOA,MAAMC,YAAY,GAA8B,EAAhD;AACA,MAAMC,OAAO,GAAwB,EAArC;AACA,MAAMC,SAAS,GAA2B,EAA1C;;AACA,MAAIL,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,IAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACf,UAAIA,IAAI,CAAChO,MAAL,CAAYI,UAAZ,CAAuB,KAAvB,CAAJ,EAAmC;AACjC4N,QAAAA,IAAI,CAACC,SAAL,GAAiB,IAAjB;AACD,OAFD,MAEO;AACLD,QAAAA,IAAI,CAACC,SAAL,GAAiB,KAAjB;AACD;;AACDH,MAAAA,SAAS,CAACE,IAAI,CAAChO,MAAN,CAAT,GAAyBgO,IAAzB;AAEA,UAAME,QAAQ,GAAG;AACfC,QAAAA,IAAI,EAAE5J,QAAQ,yBAAsByJ,IAAI,CAACI,OAA3B,eADC;AAEfC,QAAAA,IAAI,EAAEL,IAAI,CAACK,IAFI;AAGfC,QAAAA,UAAU,EAAEN,IAAI,CAAChO,MAHF;AAIfuO,QAAAA,WAAW,EAAEP,IAAI,CAACQ,IAJH;AAKfC,QAAAA,OAAO,EAAET,IAAI,CAACK;AALC,OAAjB;;AAOA,UAAI,CAACL,IAAI,CAAChO,MAAL,CAAYI,UAAZ,CAAuB,KAAvB,CAAL,EAAoC;AAClCsN,QAAAA,OAAO,CAACM,IAAI,CAAChO,MAAN,CAAP,GAAuBkO,QAAvB;AACD;;AACDP,MAAAA,YAAY,CAACK,IAAI,CAAChO,MAAN,CAAZ,GAA4BkO,QAA5B;AACAN,MAAAA,YAAY,CAACI,IAAI,CAACI,OAAL,CAAaM,WAAb,EAAD,CAAZ,GAA2CV,IAAI,CAAChO,MAAhD;AACA6N,MAAAA,OAAO,CAACG,IAAI,CAACW,OAAN,CAAP,GAAwBX,IAAI,CAAChO,MAA7B;AACD,KArBD;AAsBD;;AACD,SAAO;AACL8N,IAAAA,SAAS,EAATA,SADK;AAELJ,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,YAAY,EAAZA,YAHK;AAILE,IAAAA,OAAO,EAAPA,OAJK;AAKLD,IAAAA,YAAY,EAAZA;AALK,GAAP;AAOD;AACD,SAAgBgB,YAAenB;AAI7B,MAAMoB,QAAQ,GAA+B,EAA7C;AACA,MAAMC,KAAK,GAAkC,EAA7C;;AACA,MAAI,CAAArB,QAAQ,QAAR,YAAAA,QAAQ,CAAEsB,KAAV,aAA2BhB,KAA/B,EAAsC;AACpCN,IAAAA,QAAQ,CAACsB,KAAT,CAAe7L,OAAf,CAAuB,UAAC8K,IAAD;AACrB,UAAM7M,MAAM,GAAW6M,IAAI,CAAC7M,MAA5B;AACA0N,MAAAA,QAAQ,CAAC1N,MAAD,CAAR,GAAmB6M,IAAnB;AACA,UAAI/N,IAAI,GAAG,EAAX;AAAA,UACEE,KAAK,GAAG,EADV;AAEA,UAAMK,GAAG,GAAGW,MAAM,CAACV,OAAP,CAAe,GAAf,CAAZ;AACA,UAAMuO,IAAI,GAAG7N,MAAM,CAACT,WAAP,CAAmB,GAAnB,CAAb;AACAT,MAAAA,IAAI,GAAGkB,MAAM,CAAC8N,SAAP,CAAiBzO,GAAG,GAAG,CAAvB,EAA0BwO,IAA1B,CAAP;AACA7O,MAAAA,KAAK,GAAGgB,MAAM,CAAC8N,SAAP,CAAiBD,IAAI,GAAG,CAAxB,EAA2B7N,MAAM,CAACb,MAAlC,CAAR;;AAEA,UAAI,CAACwO,KAAK,CAAC7O,IAAD,CAAV,EAAkB;AAChB6O,QAAAA,KAAK,CAAC7O,IAAD,CAAL,GAAc;AACZ0O,UAAAA,OAAO,EAAEX,IAAI,CAACkB,MAAL,CAAYC,MAAZ,CAAmB,CAAnB,CADG;AAEZC,UAAAA,SAAS,EAAE,CAACjP,KAAD;AAFC,SAAd;AAID,OALD,MAKO;AACL2O,QAAAA,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAZ,aAA4BN,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAxC,GAAmDjP,KAAnD;AACD;;AAED,UAAI,CAAC2O,KAAK,CAAC3O,KAAD,CAAV,EAAmB;AACjB2O,QAAAA,KAAK,CAAC3O,KAAD,CAAL,GAAe;AACbwO,UAAAA,OAAO,EAAEX,IAAI,CAACkB,MAAL,CAAYC,MAAZ,CAAmB,CAAnB,CADI;AAEbC,UAAAA,SAAS,EAAE,CAACnP,IAAD;AAFE,SAAf;AAID,OALD,MAKO;AACL6O,QAAAA,KAAK,CAAC3O,KAAD,CAAL,CAAaiP,SAAb,aAA6BN,KAAK,CAAC3O,KAAD,CAAL,CAAaiP,SAA1C,GAAqDnP,IAArD;AACD;AACF,KA3BD;AA4BD;;AACD,SAAO;AACL4O,IAAAA,QAAQ,EAARA,QADK;AAELC,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,SAAgBO,YACd5B,UACA6B;MAAAA;AAAAA,IAAAA,MAAclL,qBAAa,CAACmL;;;AAS5B,MAAMC,OAAO,GAA4B,EAAzC;AAEA,MAAMV,KAAK,GAAkC,EAA7C;AAEA,MAAMW,KAAK,GAAGH,GAAG,KAAKlL,qBAAa,CAACsL,eAApC;;AAEA,MAAI,CAAAjC,QAAQ,QAAR,YAAAA,QAAQ,CAAE+B,OAAV,aAA6BzB,KAAjC,EAAwC;AACtCN,IAAAA,QAAQ,CAAC+B,OAAT,CAAiBtM,OAAjB,CAAyB,UAAC8K,IAAD;AACvB,UAAM2B,UAAU,GAAe;AAC7BC,QAAAA,WAAW,EAAE5B,IAAI,CAAC4B,WADW;AAE7BC,QAAAA,OAAO,EAAE7B,IAAI,CAAC6B,OAFe;AAG7B1O,QAAAA,MAAM,EAAE6M,IAAI,CAAC7M,MAHgB;AAI7B2O,QAAAA,kBAAkB,EAAE9B,IAAI,CAAC8B,kBAJI;AAK7BC,QAAAA,iBAAiB,EAAE/B,IAAI,CAAC+B,iBALK;AAM7BC,QAAAA,YAAY,EAAEhC,IAAI,CAACgC;AANU,OAA/B;;AASA,UAAIP,KAAJ,EAAW;AACTE,QAAAA,UAAU,CAACM,MAAX,GAAoBjC,IAAI,CAACiC,MAAzB;AACAN,QAAAA,UAAU,CAACO,aAAX,GACEP,UAAU,CAACM,MAAX,KAAsBvL,oBAAY,CAACyL,GAAnC,IACAR,UAAU,CAACM,MAAX,KAAsBvL,oBAAY,CAAC0L,GAFrC;AAGAT,QAAAA,UAAU,CAACU,SAAX,GAAuBC,QAAQ,CAACtC,IAAI,CAACqC,SAAN,CAA/B;AACD;;AAEDb,MAAAA,OAAO,CAACxB,IAAI,CAAC7M,MAAN,CAAP,GAAuBwO,UAAvB;;AAEA,UAAI3B,IAAI,CAAC6B,OAAT,EAAkB;AAChB,YAAM1O,MAAM,GAAW6M,IAAI,CAAC7M,MAA5B;AACA,YAAMX,GAAG,GAAGW,MAAM,CAACV,OAAP,CAAe,GAAf,CAAZ;AACA,YAAMR,IAAI,GAAGkB,MAAM,CAAC8N,SAAP,CAAiB,CAAjB,EAAoBzO,GAApB,CAAb;AACA,YAAML,KAAK,GAAGgB,MAAM,CAAC8N,SAAP,CAAiBzO,GAAG,GAAG,CAAvB,EAA0BW,MAAM,CAACb,MAAjC,CAAd;;AAEA,YAAI,CAACwO,KAAK,CAAC7O,IAAD,CAAV,EAAkB;AAChB6O,UAAAA,KAAK,CAAC7O,IAAD,CAAL,GAAc;AACZ0O,YAAAA,OAAO,EAAEX,IAAI,CAAC4B,WADF;AAEZR,YAAAA,SAAS,EAAE,CAACjP,KAAD;AAFC,WAAd;AAID,SALD,MAKO;AACL2O,UAAAA,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAZ,aAA4BN,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAxC,GAAmDjP,KAAnD;AACD;;AAED,YAAI,CAAC2O,KAAK,CAAC3O,KAAD,CAAV,EAAmB;AACjB2O,UAAAA,KAAK,CAAC3O,KAAD,CAAL,GAAe;AACbwO,YAAAA,OAAO,EAAEX,IAAI,CAACgC,YADD;AAEbZ,YAAAA,SAAS,EAAE,CAACnP,IAAD;AAFE,WAAf;AAID,SALD,MAKO;AACL6O,UAAAA,KAAK,CAAC3O,KAAD,CAAL,CAAaiP,SAAb,aAA6BN,KAAK,CAAC3O,KAAD,CAAL,CAAaiP,SAA1C,GAAqDnP,IAArD;AACD;AACF;AACF,KA5CD;AA6CD;;AAED,MAAMiB,SAAS,GAAa+L,OAAO,CAACC,OAAR,CAAgBsC,OAAhB,CAA5B;AAEA,MAAMe,QAAQ,GAAatD,OAAO,CAACC,OAAR,CAAgB4B,KAAhB,CAA3B;AAEA,SAAO;AACLU,IAAAA,OAAO,EAAPA,OADK;AAELV,IAAAA,KAAK,EAALA,KAFK;AAGLyB,IAAAA,QAAQ,EAARA,QAHK;AAILC,IAAAA,WAAW,EAAED,QAAQ,CAAC1D,IAAT,CAAc/F,GAAd,CAJR;AAKL5F,IAAAA,SAAS,EAATA,SALK;AAMLuP,IAAAA,YAAY,EAAEvP,SAAS,CAAC2L,IAAV,CAAe/F,GAAf;AANT,GAAP;AAQD;;AC7dD;AACA,IAAI4J,MAAJ;;AAEA,AAIE;AACAA,EAAAA,MAAM,GAAGvR,OAAO,CAACkK,GAAjB;AACD,CAND;;AAuBA,AAAO,IAAMsH,KAAK,GAAGD,MAAd;;ACMP,IAAME,IAAI,gBAAGC,KAAA,CAAS,CAAT,CAAb;AAEA,IAAMC,IAAI,gBAAGD,KAAA,CAAS,CAAT,CAAb;AAEA,IAAME,KAAK,gBAAGF,KAAA,CAAS,EAAT,CAAd;AAEA,IAAMG,MAAM,gBAAGH,KAAA,CAAS,KAAT,CAAf;AAEA,IAAaI,QAAQ,GAAG,SAAXA,QAAW,CAAC/B,MAAD,EAAcgC,KAAd;AACtB,MAAI,CAAChC,MAAL,EAAa;AACX,UAAMrF,KAAK,CAAC,iBAAD,CAAX;AACD;;AACD,SAAOqF,MAAM,CAACgC,KAAD,CAAb;AACD,CALM;AAOP,IAAaC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,UADiC,EAEjClC,MAFiC,EAGjCgC,KAHiC;AAKjC,MAAMG,SAAS,GAAGJ,QAAQ,CAAC/B,MAAD,EAASgC,KAAT,CAA1B;AAEA,MAAMI,QAAQ,GAAGF,UAAU,CAACG,SAAX,CAAqBF,SAAS,CAAC1C,OAA/B,EAAwC6C,MAAzD;AACA,MAAMC,OAAO,GAAGZ,KAAA,CAASS,QAAT,CAAhB;AAEA,SAAO;AACLD,IAAAA,SAAS,EAATA,SADK;AAELC,IAAAA,QAAQ,EAARA,QAFK;AAGLG,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD,CAfM;AAiBP,SAAgBC,QACdxC,QACAlP,QACA2R,YACA1F,WACAC;AAEA,MAAI;AACF,QAAMmF,SAAS,GAAGJ,QAAQ,CAAC/B,MAAD,EAASlP,MAAT,CAA1B;AACA,QAAM4R,gBAAgB,GAAG3F,SAAS,GAAGA,SAAH,GAAeoF,SAAS,CAACpF,SAA3D;AACA,QAAMd,KAAK,GAAG0F,KAAA,CAASc,UAAT,EAAqBpG,GAArB,CAAyB,OAAO8F,SAAS,CAACQ,QAA1C,CAAd;AACA,WAAOhB,OAAA,CAAW1F,KAAX,EAAkByG,gBAAlB,EAAoC1F,IAApC,CAAP;AACD,GALD,CAKE,OAAOrL,GAAP,EAAY;AACZ,WAAOX,SAAP;AACD;;AACD,SAAO,GAAP;AACD;AAED,SAAgB4R,MACd5C,QACAlP,QACAmL,OACAgB;MAAAA;AAAAA,IAAAA,KAAUjM;;;AAEV,MAAMmR,SAAS,GAAGJ,QAAQ,CAAC/B,MAAD,EAASlP,MAAT,CAA1B;;AACA,MAAI,OAAOqR,SAAP,KAAqB,WAAzB,EAAsC;AACpC,WAAO,GAAP;AACD;;AAED,MAAMU,IAAI,GAAGlB,KAAA,CAAS1F,KAAT,EAAgBC,KAAhB,CAAsB,OAAOiG,SAAS,CAACQ,QAAvC,CAAb;AAEA,SAAO1F,EAAE,KAAKjM,SAAP,GAAmB6R,IAAI,CAACtH,QAAL,EAAnB,GAAqCsH,IAAI,CAAC1G,OAAL,CAAa,CAAb,EAAgBc,EAAhB,CAA5C;AACD;AAED,SAAgB6F,QAAQpI;AACtB,MAAI,CAACA,KAAD,IAAUA,KAAK,CAACqI,IAAN,OAAiB,EAA/B,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASC,uBAAT,CACEC,QADF,EAEEC,OAFF,EAGEC,SAHF,EAIEC,UAJF;AAME,MAAMC,WAAW,GAAG1B,KAAA,CAASsB,QAAT,CAApB;AACA,MAAMK,YAAY,GAAG3B,KAAA,CAASwB,SAAT,CAArB;AACA,MAAMI,aAAa,GAAG5B,KAAA,CAASyB,UAAT,CAAtB;;AAEA,MAAIC,WAAW,CAACG,EAAZ,CAAe9B,IAAf,KAAwB4B,YAAY,CAACE,EAAb,CAAgB9B,IAAhB,CAAxB,IAAiD6B,aAAa,CAACC,EAAd,CAAiB9B,IAAjB,CAArD,EAA6E;AAC3E,WAAOA,IAAP;AACD;;AAED,MAAM+B,UAAU,GAAG9B,KAAA,CAASuB,OAAT,CAAnB;AAEA,MAAMQ,eAAe,GAAGL,WAAW,CAACnH,KAAZ,CAAkB4F,MAAM,CAAC6B,KAAP,CAAaF,UAAb,CAAlB,CAAxB;AACA,MAAMG,SAAS,GAAGF,eAAe,CAACxH,KAAhB,CAAsBqH,aAAtB,CAAlB;AACA,MAAMM,WAAW,GAAGP,YAAY,CAACpH,KAAb,CAAmB4F,MAAnB,EAA2BgC,IAA3B,CAAgCJ,eAAhC,CAApB;AAEA,SAAOE,SAAS,CAACvH,GAAV,CAAcwH,WAAd,CAAP;AACD;;AAED,SAASE,sBAAT,CACEC,SADF,EAEEd,OAFF,EAGEC,SAHF,EAIEC,UAJF;AAME,MAAMa,YAAY,GAAGtC,KAAA,CAASqC,SAAT,CAArB;AACA,MAAMV,YAAY,GAAG3B,KAAA,CAASwB,SAAT,CAArB;AACA,MAAMI,aAAa,GAAG5B,KAAA,CAASyB,UAAT,CAAtB;;AAEA,MACEa,YAAY,CAACT,EAAb,CAAgB9B,IAAhB,KACA4B,YAAY,CAACE,EAAb,CAAgB9B,IAAhB,CADA,IAEA6B,aAAa,CAACC,EAAd,CAAiB9B,IAAjB,CAHF,EAIE;AACA,WAAOA,IAAP;AACD;;AAED,MAAM+B,UAAU,GAAG9B,KAAA,CAASuB,OAAT,CAAnB;AAEA,MAAMU,SAAS,GAAGN,YAAY,CAACpH,KAAb,CAAmB+H,YAAnB,EAAiC/H,KAAjC,CAAuC4F,MAAvC,CAAlB;AACA,MAAM+B,WAAW,GAAGN,aAAa,CAC9BI,KADiB,CACXM,YADW,EAEjB/H,KAFiB,CAEX4F,MAAM,CAAC6B,KAAP,CAAaF,UAAb,CAFW,CAApB;AAIA,SAAOG,SAAS,CAACvH,GAAV,CAAcwH,WAAd,EAA2BC,IAA3B,CAAgClC,IAAhC,CAAP;AACD;;AAED,SAASsC,kBAAT,CACExJ,KADF,EAEEyJ,SAFF,EAGEC,UAHF,EAIElB,OAJF,EAKEmB,MALF,EAMEC,SANF,EAOEC,KAPF;AASE,MAAIC,MAAM,GAAG,GAAb;AACA,MAAIC,MAAM,GAAW/J,KAArB;AAEA,MAAMgK,IAAI,GAAGH,KAAK,CAACG,IAAnB;AAEA;AACA;AACA;AACA;AAEA;;AAEA,MAAI,CAACP,SAAD,IAAc,CAACC,UAAnB,EAA+B;AAC7B,WAAOI,MAAP;AACD;AAGD;;;AAEA,MAAIH,MAAJ,EAAY;AACV,QAAI,CAACC,SAAL,EAAgB;AACd;AAEAG,MAAAA,MAAM,GAAG9C,KAAA,CACA8C,MADA,EAENvI,KAFM,CAEA,OAAOiI,SAAS,CAACxB,QAFjB,EAGNpH,QAHM,EAAT;;AAKA,WAAK,IAAIlK,CAAC,GAAGqT,IAAI,CAACtT,MAAL,GAAc,CAA3B,EAA8BC,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,YAAMsT,MAAM,GAAWD,IAAI,CAACrT,CAAD,CAA3B,CADyC;;AAKzC,YAAMuT,OAAO,GAAWjD,KAAA,CAAS8C,MAAT,EAAiBI,GAAjB,CAAqBlD,KAAA,CAASgD,MAAM,CAACG,GAAhB,CAArB,IACpBH,MAAM,CAACG,GADa,GAEpBL,MAFJ;;AAIA,YAAI9C,KAAA,CAASiD,OAAT,EAAkBG,GAAlB,CAAsBrD,IAAtB,CAAJ,EAAiC;AAC/B;AACD;;AAED,YAAMsD,QAAQ,GAAGrD,KAAA,CAASgD,MAAM,CAACM,GAAhB,EAAqB5I,GAArB,CAAyB,OAAO+H,UAAU,CAACzB,QAA3C,CAAjB;;AAEA,YAAIhB,KAAA,CAASiD,OAAT,EAAkBM,EAAlB,CAAqBvD,KAAA,CAASgD,MAAM,CAACG,GAAhB,CAArB,CAAJ,EAAgD;AAC9CN,UAAAA,MAAM,GAAG7C,KAAA,CAAS6C,MAAT,EAAiBV,IAAjB,CAAsBkB,QAAtB,EAAgCzJ,QAAhC,EAAT;AACD,SAFD,MAEO;AACL,cAAM4J,KAAK,GAAGxD,KAAA,CAASiD,OAAT,EAAkBvI,GAAlB,CAAsBsF,KAAA,CAASgD,MAAM,CAACG,GAAhB,CAAtB,CAAd,CADK;;AAGLN,UAAAA,MAAM,GAAG7C,KAAA,CAAS6C,MAAT,EAAiBV,IAAjB,CAAsBqB,KAAK,CAACjJ,KAAN,CAAY8I,QAAZ,CAAtB,EAA6CzJ,QAA7C,EAAT;AACD,SArBwC;;;AAyBzCkJ,QAAAA,MAAM,GAAG9C,KAAA,CAAS8C,MAAT,EAAiBd,KAAjB,CAAuBhC,KAAA,CAASiD,OAAT,CAAvB,EAA0CrJ,QAA1C,EAAT;AACD;AACF,KAnCD,MAmCO;AACL;AACA;AAEAkJ,MAAAA,MAAM,GAAG9C,KAAA,CAAS8C,MAAT,EAAiBvI,KAAjB,CAAuB2F,KAAK,CAACuD,GAAN,CAAUjB,SAAS,CAACxB,QAApB,CAAvB,EAAsDpH,QAAtD,EAAT;;AAEA,WAAK,IAAIlK,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGkT,KAAK,CAACc,IAAN,CAAWjU,MAA/B,EAAuCC,EAAC,EAAxC,EAA4C;AAC1C,YAAMsT,OAAM,GAAWJ,KAAK,CAACc,IAAN,CAAWhU,EAAX,CAAvB,CAD0C;;AAG1C,YAAMuT,QAAO,GAAWjD,KAAA,CAAS8C,MAAT,EAAiBI,GAAjB,CAAqBlD,KAAA,CAASgD,OAAM,CAACM,GAAhB,CAArB,IACpBN,OAAM,CAACM,GADa,GAEpBR,MAFJ;;AAIA,YAAI9C,KAAA,CAASiD,QAAT,EAAkBG,GAAlB,CAAsBrD,IAAtB,CAAJ,EAAiC;AAC/B;AACA;AACD,SAVyC;AAc1C;;;AAEA,YAAM4D,QAAQ,GAAG3D,KAAA,CAASgD,OAAM,CAACG,GAAhB,EAAqBzI,GAArB,CAAyB,OAAO+H,UAAU,CAACzB,QAA3C,CAAjB;;AAEA,YAAIhB,KAAA,CAASiD,QAAT,EAAkBM,EAAlB,CAAqBvD,KAAA,CAASgD,OAAM,CAACM,GAAhB,CAArB,CAAJ,EAAgD;AAC9CT,UAAAA,MAAM,GAAG7C,KAAA,CAAS6C,MAAT,EAAiBV,IAAjB,CAAsBwB,QAAtB,EAAgC/J,QAAhC,EAAT;AACD,SAFD,MAEO;AACL,cAAM4J,MAAK,GAAGxD,KAAA,CAASiD,QAAT,EAAkBvI,GAAlB,CAAsBsF,KAAA,CAASgD,OAAM,CAACM,GAAhB,CAAtB,CAAd;;AACAT,UAAAA,MAAM,GAAG7C,KAAA,CAAS6C,MAAT,EAAiBV,IAAjB,CAAsBqB,MAAK,CAACjJ,KAAN,CAAYoJ,QAAZ,CAAtB,EAA6C/J,QAA7C,EAAT;AACD;;AAEDkJ,QAAAA,MAAM,GAAG9C,KAAA,CAAS8C,MAAT,EAAiBd,KAAjB,CAAuBhC,KAAA,CAASiD,QAAT,CAAvB,EAA0CrJ,QAA1C,EAAT,CAzB0C;AA4B3C;AACF;AACF,GAxED,MAwEO;AACL,QAAI,CAAC+I,SAAL,EAAgB;AACd;AAEAG,MAAAA,MAAM,GAAG9C,KAAA,CACA8C,MADA,EAENvI,KAFM,CAEA2F,KAAK,CAACuD,GAAN,CAAUhB,UAAU,CAACzB,QAArB,CAFA,EAGNpH,QAHM,EAAT;;AAKA,WAAK,IAAIlK,GAAC,GAAGqT,IAAI,CAACtT,MAAL,GAAc,CAA3B,EAA8BC,GAAC,IAAI,CAAnC,EAAsCA,GAAC,EAAvC,EAA2C;AACzC,YAAMsT,QAAM,GAAWD,IAAI,CAACrT,GAAD,CAA3B,CADyC;;AAIzC,YAAMuT,SAAO,GAAWjD,KAAA,CAAS8C,MAAT,EAAiBI,GAAjB,CAAqBlD,KAAA,CAASgD,QAAM,CAACM,GAAhB,CAArB,IACpBN,QAAM,CAACM,GADa,GAEpBR,MAFJ;;AAIA,YAAI9C,KAAA,CAASiD,SAAT,EAAkBG,GAAlB,CAAsBrD,IAAtB,CAAJ,EAAiC;AAC/B;AACD,SAVwC;AAczC;;;AAEA,YAAM4D,SAAQ,GAAG3D,KAAA,CACRgD,QAAM,CAACG,GADC,EAEdzI,GAFc,CAEVwF,KAAK,CAACuD,GAAN,CAAUjB,SAAS,CAACxB,QAApB,CAFU,CAAjB;;AAIA,YAAIhB,KAAA,CAASiD,SAAT,EAAkBM,EAAlB,CAAqBP,QAAM,CAACM,GAA5B,CAAJ,EAAsC;AACpCT,UAAAA,MAAM,GAAG7C,KAAA,CAAS6C,MAAT,EAAiBV,IAAjB,CAAsBnC,KAAA,CAAS2D,SAAT,CAAtB,EAA0C/J,QAA1C,EAAT;AACD,SAFD,MAEO;AACL,cAAM4J,OAAK,GAAGxD,KAAA,CAASiD,SAAT,EAAkBvI,GAAlB,CAAsBsF,KAAA,CAASgD,QAAM,CAACM,GAAhB,CAAtB,CAAd;;AACAT,UAAAA,MAAM,GAAG7C,KAAA,CAAS6C,MAAT,EAAiBV,IAAjB,CAAsBqB,OAAK,CAACjJ,KAAN,CAAYoJ,SAAZ,CAAtB,EAA6C/J,QAA7C,EAAT;AACD;;AAEDkJ,QAAAA,MAAM,GAAG9C,KAAA,CAAS8C,MAAT,EAAiBd,KAAjB,CAAuBhC,KAAA,CAASiD,SAAT,CAAvB,EAA0CrJ,QAA1C,EAAT,CA3ByC;AA8B1C;AACF,KAvCD,MAuCO;AACL;AAEAkJ,MAAAA,MAAM,GAAG9C,KAAA,CACA8C,MADA,EAENvI,KAFM,CAEA2F,KAAK,CAACuD,GAAN,CAAUhB,UAAU,CAACzB,QAArB,CAFA,EAGNpH,QAHM,EAAT;;AAKA,WAAK,IAAIlK,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGkT,KAAK,CAACc,IAAN,CAAWjU,MAA/B,EAAuCC,GAAC,EAAxC,EAA4C;AAC1C,YAAMsT,QAAM,GAAWJ,KAAK,CAACc,IAAN,CAAWhU,GAAX,CAAvB,CAD0C;;AAK1C,YAAMuT,SAAO,GAAWjD,KAAA,CAAS8C,MAAT,EAAiBI,GAAjB,CAAqBlD,KAAA,CAASgD,QAAM,CAACG,GAAhB,CAArB,IACpBH,QAAM,CAACG,GADa,GAEpBL,MAFJ;;AAIA,YAAI9C,KAAA,CAASiD,SAAT,EAAkBG,GAAlB,CAAsBrD,IAAtB,CAAJ,EAAiC;AAC/B;AACD;;AAED,YAAMsD,SAAQ,GAAGrD,KAAA,CACRgD,QAAM,CAACM,GADC,EAEd5I,GAFc,CAEVwF,KAAK,CAACuD,GAAN,CAAUjB,SAAS,CAACxB,QAApB,CAFU,CAAjB;;AAIA,YAAIhB,KAAA,CAASiD,SAAT,EAAkBM,EAAlB,CAAqBvD,KAAA,CAASgD,QAAM,CAACG,GAAhB,CAArB,CAAJ,EAAgD;AAC9CN,UAAAA,MAAM,GAAG7C,KAAA,CAAS6C,MAAT,EAAiBV,IAAjB,CAAsBkB,SAAtB,EAAgCzJ,QAAhC,EAAT;AACD,SAFD,MAEO;AACL,cAAM4J,OAAK,GAAGxD,KAAA,CAASiD,SAAT,EAAkBvI,GAAlB,CAAsBsF,KAAA,CAASgD,QAAM,CAACG,GAAhB,CAAtB,CAAd;;AACAN,UAAAA,MAAM,GAAG7C,KAAA,CAAS6C,MAAT,EAAiBV,IAAjB,CAAsBqB,OAAK,CAACjJ,KAAN,CAAY8I,SAAZ,CAAtB,EAA6CzJ,QAA7C,EAAT;AACD,SAtByC;;;AA0B1CkJ,QAAAA,MAAM,GAAG9C,KAAA,CAAS8C,MAAT,EAAiBd,KAAjB,CAAuBhC,KAAA,CAASiD,SAAT,CAAvB,EAA0CrJ,QAA1C,EAAT;AACD;AACF;AACF;;AAED,SAAOiJ,MAAP;AACD;;AAED,SAAgBe,eACdC,MACAC,KACAzT,WACA0T,UACAC,WACAC;;;MAAAA;AAAAA,IAAAA,kBAA+C5U;;;AAE/C,0BAA6CmB,gBAAgB,CAC3DH,SAD2D,EAE3DwT,IAF2D,EAG3DC,GAH2D,CAA7D;AAAA,MAAQxT,MAAR,qBAAQA,MAAR;AAAA,MAAgBK,GAAhB,qBAAgBA,GAAhB;;AAMA,MACEwQ,OAAO,CAAC7Q,MAAD,CAAP,IACA6Q,OAAO,CAACxQ,GAAD,CADP,IAEAwB,MAAM,CAACC,IAAP,CAAY4R,SAAZ,EAAuBpU,OAAvB,CAA+BU,MAA/B,IAAyC,CAH3C,EAIE;AACA,WAAOjB,SAAP;AACD;;AAED,MAAMyP,UAAU,GAAekF,SAAS,CAAC1T,MAAD,CAAxC;AAEA,MAAM4T,SAAS,GAAGpU,oBAAoB,CAACiU,QAAD,EAAWF,IAAX,CAAtC;AACA,MAAMM,QAAQ,GAAGrU,oBAAoB,CAACiU,QAAD,EAAWD,GAAX,CAArC;AAEA,MAAInB,SAAS,GAAG,KAAhB;AAEA,MAAMyB,KAAK,uBAAGH,eAAH,qBAAG,iBAAiB3F,MAAjB,CAAwB,CAAxB,CAAd;AAEA,MAAM+F,KAAK,wBAAGJ,eAAH,qBAAG,kBAAiB3F,MAAjB,CAAwB,CAAxB,CAAd;AAEA,MAAIkD,SAAS,GAAG,GAAhB;AACA,MAAIC,UAAU,GAAG,GAAjB;;AAEA,MACE,CAAAyC,SAAS,QAAT,YAAAA,SAAS,CAAEpG,OAAX,MAAuBzO,SAAvB,IACA,CAAA8U,QAAQ,QAAR,YAAAA,QAAQ,CAAErG,OAAV,MAAsBzO,SADtB,IAEA,CAAA+U,KAAK,QAAL,YAAAA,KAAK,CAAEtG,OAAP,MAAmBzO,SAFnB,IAGA,CAAAgV,KAAK,QAAL,YAAAA,KAAK,CAAEvG,OAAP,MAAmBzO,SAJrB,EAKE;AACA,QAAI,CAAA6U,SAAS,QAAT,YAAAA,SAAS,CAAEpG,OAAX,OAAuBsG,KAAvB,oBAAuBA,KAAK,CAAEtG,OAA9B,CAAJ,EAA2C;AACzC0D,MAAAA,SAAS,GAAG4C,KAAK,CAACzD,MAAlB;AACAc,MAAAA,UAAU,GAAG4C,KAAK,CAAC1D,MAAnB;AACD,KAHD,MAGO;AACLa,MAAAA,SAAS,GAAG6C,KAAK,CAAC1D,MAAlB;AACAc,MAAAA,UAAU,GAAG2C,KAAK,CAACzD,MAAnB;AACAgC,MAAAA,SAAS,GAAG,IAAZ;AACD;AACF,GAdD,MAcO;AACL,QAAIrS,MAAM,KAAQwT,GAAR,SAAeD,IAAzB,EAAiC;AAC/BlB,MAAAA,SAAS,GAAG,IAAZ;AACD;AACF;;AAED,SAAO;AACLnB,IAAAA,SAAS,EAATA,SADK;AAELC,IAAAA,UAAU,EAAVA,UAFK;AAGLyC,IAAAA,SAAS,EAATA,SAHK;AAILC,IAAAA,QAAQ,EAARA,QAJK;AAKLC,IAAAA,KAAK,EAALA,KALK;AAMLC,IAAAA,KAAK,EAALA,KANK;AAOL1B,IAAAA,SAAS,EAATA,SAPK;AAQL7D,IAAAA,UAAU,EAAVA;AARK,GAAP;AAUD;;AAED,SAASwF,iBAAT,CAA2BC,QAA3B,EAA6CC,OAA7C;AACE,MAAI,CAACD,QAAD,IAAa,CAACC,OAAlB,EAA2B;AACzB,WAAO,GAAP;AACD;;AAED,MAAMC,UAAU,GAAGzE,KAAA,CAASwE,OAAT,CAAnB;;AAEA,MAAIC,UAAU,CAAClB,EAAX,CAAcxD,IAAd,CAAJ,EAAyB;AACvB,WAAO,GAAP;AACD;;AAED,MAAM2E,OAAO,GAAG1E,KAAA,CAASyE,UAAT,EAAqB/J,GAArB,CAAyB6J,QAAzB,CAAhB;AAEA,SAAOtE,IAAI,CAAC+B,KAAL,CAAW0C,OAAX,EAAoBC,GAApB,GAA0B/K,QAA1B,EAAP;AACD;;AAED,SAAgBgL,YAAYpD,WAAmBC;AAC7C,MAAI,CAACD,SAAD,IAAc,CAACC,UAAnB,EAA+B;AAC7B,WAAO,GAAP;AACD;;AAEDD,EAAAA,SAAS,GAAGA,SAAS,CAACJ,IAAV,EAAZ;AACAK,EAAAA,UAAU,GAAGA,UAAU,CAACL,IAAX,EAAb;AAEA,MAAMO,YAAY,GAAG3B,KAAA,CAASwB,SAAT,CAArB;AACA,MAAMI,aAAa,GAAG5B,KAAA,CAASyB,UAAT,CAAtB;;AAEA,MAAIE,YAAY,CAAC4B,EAAb,CAAgBxD,IAAhB,CAAJ,EAA2B;AACzB,WAAO,GAAP;AACD;;AAED,SAAO6B,aAAa,CAAClH,GAAd,CAAkBiH,YAAlB,EAAgC/H,QAAhC,EAAP;AACD;AAED,SAAgBiL,WAAWC,SAAiBC;AAC1C,MAAI,CAACD,OAAD,IAAY,CAACC,OAAjB,EAA0B;AACxB,WAAO,GAAP;AACD;;AAEDD,EAAAA,OAAO,GAAGA,OAAO,CAAC1D,IAAR,EAAV;AACA2D,EAAAA,OAAO,GAAGA,OAAO,CAAC3D,IAAR,EAAV;AAEA,MAAM4D,UAAU,GAAGhF,KAAA,CAAS8E,OAAT,CAAnB;AACA,MAAMG,UAAU,GAAGjF,KAAA,CAAS+E,OAAT,CAAnB;;AAEA,MAAIC,UAAU,CAACzB,EAAX,CAAcxD,IAAd,CAAJ,EAAyB;AACvB,WAAO,GAAP;AACD;;AAED,SAAOkF,UAAU,CAACvK,GAAX,CAAesK,UAAf,EAA2BpL,QAA3B,EAAP;AACD;AAED,SAAgBsL,eACd1D,WACAC,YACAqD,SACAvD,SACA4D;AAEA,MAAIJ,OAAO,GAAc1D,uBAAuB,CAC9CyD,OAD8C,EAE9CvD,OAF8C,EAG9CC,SAH8C,EAI9CC,UAJ8C,CAAhD;AAMAsD,EAAAA,OAAO,GAAGA,OAAO,CAACxK,KAAR,CAAc4F,MAAM,CAAC6B,KAAP,CAAahC,KAAA,CAASmF,QAAT,CAAb,CAAd,EAAgDzK,GAAhD,CAAoDyF,MAApD,CAAV;AACA,MAAMoE,QAAQ,GAAGK,WAAW,CAACpD,SAAD,EAAYC,UAAZ,CAA5B;AACA,MAAM+C,OAAO,GAAGK,UAAU,CAACC,OAAD,EAAUC,OAAO,CAACnL,QAAR,EAAV,CAA1B;AAEA,SAAO0K,iBAAiB,CAACC,QAAD,EAAWC,OAAX,CAAxB;AACD;AAED,SAAgBY,sBACdC,WACAC,YACAR,SACAS,aACAC,YACAC,YACAlE,SACA4D,UACAzC,QACAgD,YACAC,aACA/C;AAEA,MAAIgD,WAAW,GAAG,GAAlB;;AAEA,MAAIzE,OAAO,CAACkE,SAAD,CAAP,IAAsBlE,OAAO,CAACmE,UAAD,CAA7B,IAA6CnE,OAAO,CAACI,OAAD,CAAxD,EAAmE;AACjE,WAAO,GAAP;AACD;;AAED,MAAIoE,WAAJ,EAAiB;AACfC,IAAAA,WAAW,GAAGV,cAAc,CAACG,SAAD,EAAYC,UAAZ,EAAwBR,OAAxB,EAAiCvD,OAAjC,EAA0C,GAA1C,CAA5B;AACD,GAFD,MAEO;AACL,QAAI,CAACqB,KAAK,CAACiD,SAAX,EAAsB;AACpB,aAAO,GAAP;AACD,KAHI;;;AAML,QAAMC,YAAY,GAAG,CAACJ,UAAD,GAAcH,WAAd,GAA4BE,UAAjD;AACA,QAAMM,YAAY,GAAG,CAACL,UAAD,GAAcD,UAAd,GAA2BF,WAAhD;AACA,QAAMhB,QAAQ,GAAGvE,KAAA,CACR4C,KAAK,CAACiD,SADE,EAEdtL,KAFc,CAER,OAAOwL,YAFC,EAGdrL,GAHc,CAGV,OAAOoL,YAHG,EAIdlM,QAJc,EAAjB;AAKA,QAAM4K,OAAO,GAAG,CAACkB,UAAD,GACZb,UAAU,CAACC,OAAD,EAAUU,UAAV,CADE,GAEZX,UAAU,CAACW,UAAD,EAAaV,OAAb,CAFd,CAbK;AAiBL;;AAEAc,IAAAA,WAAW,GAAGtB,iBAAiB,CAACC,QAAD,EAAWC,OAAX,CAA/B;AACD;;AAED,SAAOoB,WAAP;AACD;AAED,SAAgBI,eACdR,YACAS,gBACAC;AAEA,MAAMC,WAAW,GAAGnG,KAAA,CACXwF,UADW,EAEjBjL,KAFiB,CAEX4F,MAAM,CAAC6B,KAAP,CAAahC,KAAA,CAASkG,QAAT,CAAb,CAFW,EAGjBxL,GAHiB,CAGbyF,MAHa,CAApB;AAIA,SAAO;AACLgG,IAAAA,WAAW,EAAEA,WAAW,CAAC3L,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,CADR;AAEL4L,IAAAA,cAAc,EAAED,WAAW,CAACzL,GAAZ,CAAgB,OAAOuL,cAAvB,EAAuCrM,QAAvC,EAFX;AAGLqM,IAAAA,cAAc,EAAdA;AAHK,GAAP;AAKD;AAED,SAAgBI;MACdtN,aAAAA;MACA8K,YAAAA;MACAC,WAAAA;MACApB,cAAAA;MACArS,iBAAAA;MACA0T,gBAAAA;MACAC,iBAAAA;MACApB,aAAAA;MACAqB,uBAAAA;MACA1C,eAAAA;MACA+E,iBAAAA;MACAJ,gBAAAA;AAoCA;AAEA;AAEA;AAEA,MAAMK,WAAW,GAAG3C,cAAc,CAChCC,IADgC,EAEhCC,GAFgC,EAGhCzT,SAHgC,EAIhC0T,QAJgC,EAKhCC,SALgC,EAMhCC,eANgC,CAAlC;;AASA,MAAI,CAACsC,WAAL,EAAkB;AAChB,WAAOlX,SAAP;AACD;;AAED,MAAQmS,SAAR,GACE+E,WADF,CAAQ/E,SAAR;AAAA,MAAmBC,UAAnB,GACE8E,WADF,CAAmB9E,UAAnB;AAAA,MAA+ByC,SAA/B,GACEqC,WADF,CAA+BrC,SAA/B;AAAA,MAA0CC,QAA1C,GACEoC,WADF,CAA0CpC,QAA1C;AAAA,MAAoDxB,SAApD,GACE4D,WADF,CAAoD5D,SAApD;AAAA,MAA+D7D,UAA/D,GACEyH,WADF,CAA+DzH,UAA/D;;AAGA,MAAI,CAACoF,SAAD,IAAc,CAACC,QAAnB,EAA6B;AAC3B,WAAO9U,SAAP;AACD;;AAED0J,EAAAA,KAAK,GAAGA,KAAK,CAACqI,IAAN,EAAR;AAEA,MAAIuE,WAAW,GAAG,KAAlB;AAEA,MAAI9C,MAAM,GAAQ,GAAlB;AAEA,MAAIiC,OAAO,GAAG,GAAd;AAEA,MAAI0B,oBAAoB,GAAG,GAA3B;AAEA,MAAIhB,UAAU,GAAG,GAAjB;AAEA,MAAIiB,OAAO,GAAG,GAAd;AACA,MAAIC,MAAM,GAAG,GAAb;AAEA,MAAIT,cAAc,GAAG,CAArB;;AAEA,MAAIvD,MAAJ,EAAY;AACV;AACA;AACA,QAAMiE,WAAW,GAAG1F,KAAK,CAAC8C,QAAD,EAAWF,IAAX,EAAiB9K,KAAjB,EAAwB,CAAxB,CAAzB,CAHU;;AAOV,QAAIoI,OAAO,CAACyB,KAAK,CAACgE,aAAP,CAAP,IAAgCzF,OAAO,CAACyB,KAAK,CAACiE,aAAP,CAA3C,EAAkE;AAChElB,MAAAA,WAAW,GAAG,IAAd;AACD,KAFD,MAEO;AACL,UAAI,CAAChD,SAAL,EAAgB;AACdgD,QAAAA,WAAW,GAAG3F,KAAA,CAAS2G,WAAT,EAAsBG,EAAtB,CAAyB9G,KAAA,CAAS4C,KAAK,CAACgE,aAAf,CAAzB,CAAd,CADc;AAGf,OAHD,MAGO;AACLjB,QAAAA,WAAW,GAAG3F,KAAA,CAAS2G,WAAT,EAAsBG,EAAtB,CAAyB9G,KAAA,CAAS4C,KAAK,CAACiE,aAAf,CAAzB,CAAd,CADK;AAGN;AACF,KAjBS;;;AAqBV,QAAIlB,WAAJ,EAAiB;AACf,UAAI7G,UAAU,CAACO,aAAf,EAA8B;AAC5B,YAAM0F,OAAO,GAAG1D,uBAAuB,CACrCsF,WADqC,EAErCpF,OAFqC,EAGrCC,SAHqC,EAIrCC,UAJqC,CAAvC;AAMAoB,QAAAA,MAAM,GAAGhC,OAAO,CAACkD,QAAD,EAAWD,GAAX,EAAgBiB,OAAO,CAACvK,OAAR,CAAgB,CAAhB,EAAmB,CAAnB,CAAhB,CAAhB;AACD;AACF,KAVD,MAUO;AACLqI,MAAAA,MAAM,GAAGN,kBAAkB,CACzBxJ,KADyB,EAEzBmL,SAFyB,EAGzBC,QAHyB,EAIzB5C,OAJyB,EAKzBmB,MALyB,EAMzBC,SANyB,EAOzBC,KAPyB,CAA3B;AASD;;AAED4D,IAAAA,oBAAoB,GAAGvF,KAAK,CAAC8C,QAAD,EAAWD,GAAX,EAAgBjB,MAAhB,EAAwB,CAAxB,CAA5B;AAEA,QAAMkE,SAAS,GAAG5G,MAAM,CAAC6B,KAAP,CAAahC,KAAA,CAASsG,SAAT,CAAb,EAAkC5L,GAAlC,CAAsCyF,MAAtC,CAAlB,CA7CU;;AAiDVqF,IAAAA,UAAU,GAAGvE,KAAK,CAChB8C,QADgB,EAEhBD,GAFgB,EAGhB9D,KAAA,CAAS6C,MAAT,EAAiBtI,KAAjB,CAAuBwM,SAAvB,EAAkCnN,QAAlC,EAHgB,EAIhB,CAJgB,CAAlB;AAOAkL,IAAAA,OAAO,GAAG7D,KAAK,CAAC8C,QAAD,EAAWF,IAAX,EAAiB9K,KAAjB,EAAwB,CAAxB,CAAf;AAEA0N,IAAAA,OAAO,GAAG1N,KAAV;AACA2N,IAAAA,MAAM,GAAG7D,MAAT;AACD,GA5DD,MA4DO;AACL;AACA;AAEA,QAAI1B,OAAO,CAACyB,KAAK,CAACoE,aAAP,CAAP,IAAgC7F,OAAO,CAACyB,KAAK,CAACqE,aAAP,CAA3C,EAAkE;AAChEtB,MAAAA,WAAW,GAAG,IAAd;AACD,KAFD,MAEO;AACL,UAAMgB,YAAW,GAAG1F,KAAK,CAAC8C,QAAD,EAAWD,GAAX,EAAgB/K,KAAhB,EAAuB,CAAvB,CAAzB;;AAEA,UAAI,CAAC4J,SAAL,EAAgB;AACdgD,QAAAA,WAAW,GAAG3F,KAAA,CAAS2G,YAAT,EAAsBG,EAAtB,CAAyB9G,KAAA,CAAS4C,KAAK,CAACoE,aAAf,CAAzB,CAAd;AACD,OAFD,MAEO;AACLrB,QAAAA,WAAW,GAAG3F,KAAA,CAAS2G,YAAT,EAAsBG,EAAtB,CAAyB9G,KAAA,CAAS4C,KAAK,CAACqE,aAAf,CAAzB,CAAd;AACD;AACF;;AAED,QAAIC,WAAW,GAAGnH,IAAlB;;AAEA,QAAMgF,QAAO,GAAW9D,KAAK,CAAC8C,QAAD,EAAWD,GAAX,EAAgB/K,KAAhB,EAAuB,CAAvB,CAA7B,CAlBK;;;AAsBL,QAAI4M,WAAJ,EAAiB;AACf,UAAI7G,UAAU,CAACO,aAAf,EAA8B;AAC5B6H,QAAAA,WAAW,GAAG9E,sBAAsB,CAClC2C,QADkC,EAElCxD,OAFkC,EAGlCC,SAHkC,EAIlCC,UAJkC,CAApC;AAMD;AACF,KATD,MASO;AACL,UAAM0F,eAAe,GAAG5E,kBAAkB,CACxCxJ,KADwC,EAExCmL,SAFwC,EAGxCC,QAHwC,EAIxC5C,OAJwC,EAKxCmB,MALwC,EAMxCC,SANwC,EAOxCC,KAPwC,CAA1C;AASAsE,MAAAA,WAAW,GAAGlH,KAAA,CAASiB,KAAK,CAAC8C,QAAD,EAAWF,IAAX,EAAiBsD,eAAjB,CAAd,CAAd;AACD;;AAED,QAAID,WAAW,CAACJ,EAAZ,CAAe/G,IAAf,CAAJ,EAA0B;AACxB8C,MAAAA,MAAM,GAAGhC,OAAO,CAACkD,QAAD,EAAWF,IAAX,EAAiBqD,WAAW,CAACtN,QAAZ,EAAjB,CAAhB;AAEA4M,MAAAA,oBAAoB,GAAGxG,KAAA,CAAS+E,QAAT,EAAkBvK,OAAlB,CAA0B,CAA1B,EAA6B,CAA7B,CAAvB,CAHwB;;AAKxB,UAAMuM,UAAS,GAAG5G,MAAM,CAAC6B,KAAP,CAAahC,KAAA,CAASsG,SAAT,CAAb,EAAkC5L,GAAlC,CAAsCyF,MAAtC,CAAlB;;AACAqF,MAAAA,UAAU,GAAGxF,KAAA,CAAS+E,QAAT,EAAkBxK,KAAlB,CAAwBwM,UAAxB,EAAmCvM,OAAnC,CAA2C,CAA3C,EAA8C,CAA9C,CAAb;AACD;;AAEDsK,IAAAA,OAAO,GAAGoC,WAAW,CAAC1M,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,CAAV,CArDK;;AAyDLiM,IAAAA,OAAO,GAAG5D,MAAV;AACA6D,IAAAA,MAAM,GAAG3N,KAAT;AACD;;AAEDkN,EAAAA,cAAc,GAAG9B,QAAQ,CAACnD,QAA1B;AAEA,MAAMoG,cAAc,GAAGpB,cAAc,CAACR,UAAD,EAAaS,cAAb,EAA6BC,QAA7B,CAArC;AAEA,MAAMN,WAAW,GAAGR,qBAAqB,CACvC5D,SADuC,EAEvCC,UAFuC,EAGvCqD,OAHuC,EAIvCZ,SAAS,CAAClD,QAJ6B,EAKvCwE,UALuC,EAMvCrB,QAAQ,CAACnD,QAN8B,EAOvCO,OAPuC,EAQvC+E,SARuC,EASvC5D,MATuC,EAUvCC,SAVuC,EAWvCgD,WAXuC,EAYvC/C,KAZuC,CAAzC;AAeA,SAAO;AACL+C,IAAAA,WAAW,EAAXA,WADK;AAELhD,IAAAA,SAAS,EAATA,SAFK;AAGLD,IAAAA,MAAM,EAANA,MAHK;AAKLwD,IAAAA,QAAQ,EAARA,QALK;AAMLI,IAAAA,SAAS,EAATA,SANK;AAOL/E,IAAAA,OAAO,EAAPA,OAPK;AASLsB,IAAAA,MAAM,EAANA,MATK;AAWL4D,IAAAA,OAAO,EAAPA,OAXK;AAYLC,IAAAA,MAAM,EAANA,MAZK;AAcL5B,IAAAA,OAAO,EAAPA,OAdK;AAgBLU,IAAAA,UAAU,EAAVA,UAhBK;AAiBLgB,IAAAA,oBAAoB,EAApBA,oBAjBK;AAmBLY,IAAAA,cAAc,EAAdA,cAnBK;AAqBLxB,IAAAA,WAAW,EAAXA;AArBK,GAAP;AAuBD;AAED,SAAgByB,YACdC,QACA5E,QACA0B,OACAC;AAEA,MAAMkD,aAAa,GAAGvH,KAAA,CAASoE,KAAK,CAACzD,MAAf,CAAtB;AACA,MAAM6G,aAAa,GAAGxH,KAAA,CAASqE,KAAK,CAAC1D,MAAf,CAAtB;AAEA,MAAIkC,MAAM,GAAG9C,IAAb;AAEA,MAAIyD,KAAK,GAAGzD,IAAZ;;AAEA,MAAI2C,MAAJ,EAAY;AACV,QAAI,CAAC6E,aAAa,CAAChE,EAAd,CAAiBxD,IAAjB,CAAL,EAA6B;AAC3ByD,MAAAA,KAAK,GAAGxD,KAAA,CAASsH,MAAT,EAAiB5M,GAAjB,CAAqB6M,aAArB,CAAR;AACA1E,MAAAA,MAAM,GAAGW,KAAK,CAACjJ,KAAN,CAAYiN,aAAZ,CAAT;AACD;AACF,GALD,MAKO;AACL,QAAI,CAACA,aAAa,CAACjE,EAAd,CAAiBxD,IAAjB,CAAL,EAA6B;AAC3ByD,MAAAA,KAAK,GAAGxD,KAAA,CAASsH,MAAT,EAAiB5M,GAAjB,CAAqB8M,aAArB,CAAR;AACA3E,MAAAA,MAAM,GAAGW,KAAK,CAACjJ,KAAN,CAAYgN,aAAZ,CAAT;AACD;AACF;;AAED,SAAO;AACL1E,IAAAA,MAAM,EAAEA,MAAM,CAACrI,OAAP,CAAe,CAAf,EAAkB,CAAlB,CADH;AAELgJ,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED;;;;;;;;;;;;;;;AAcA,SAAgBiE,uBACdH,QACA5E,QACAgF,mBACAC,OACAC,MACA3D,iBACAF,UACA8D,OACAC,iBACAC,iBACAC;MAFAF;AAAAA,IAAAA,kBAAkB;;;MAClBC;AAAAA,IAAAA,kBAAkB;;;AAGlB,MAAM3D,KAAK,GAAkBH,eAAe,CAAC3F,MAAhB,CAAuB,CAAvB,CAA7B;AACA,MAAM+F,KAAK,GAAkBJ,eAAe,CAAC3F,MAAhB,CAAuB,CAAvB,CAA7B;AAEA,MAAMkE,SAAS,GAAcuB,QAAQ,CAAC8D,KAAK,CAACzD,KAAK,CAACtG,OAAP,CAAN,CAArC;AACA,MAAM2E,UAAU,GAAcsB,QAAQ,CAAC8D,KAAK,CAACxD,KAAK,CAACvG,OAAP,CAAN,CAAtC;AAEA,MAAMmK,GAAG,GACPL,IAAI,IAAIA,IAAI,CAACnF,UAAU,CAACtT,MAAZ,CAAZ,IAAmCyY,IAAI,CAACnF,UAAU,CAACtT,MAAZ,CAAJ,CAAwB8Y,GAA3D,GACIL,IAAI,CAACnF,UAAU,CAACtT,MAAZ,CAAJ,CAAwB8Y,GAD5B,GAEI,GAHN;AAKAX,EAAAA,MAAM,GAAGtH,KAAA,CACAsH,MADA,EAEN/M,KAFM,CAEA2F,KAAK,CAACuD,GAAN,CAAUf,MAAM,GAAGF,SAAS,CAACxB,QAAb,GAAwByB,UAAU,CAACzB,QAAnD,CAFA,EAGNxG,OAHM,CAGE,CAHF,EAGK,CAHL,CAAT;;AAMA,qBAAwB6M,WAAW,CAACC,MAAD,EAAS5E,MAAT,EAAiB0B,KAAjB,EAAwBC,KAAxB,CAAnC;AAAA,MAAMxB,MAAN,gBAAMA,MAAN;AAAA,MAAcW,KAAd,gBAAcA,KAAd;;AACA,MAAI0E,KAAJ;;AACA,MAAIrF,MAAM,KAAK,GAAX,IAAkBmF,oBAAtB,EAA4C;AAC1CnF,IAAAA,MAAM,GAAG7C,KAAA,CACAgI,oBADA,EAENzN,KAFM,CAEA2F,KAAK,CAACuD,GAAN,CAAUf,MAAM,GAAGD,UAAU,CAACzB,QAAd,GAAyBwB,SAAS,CAACxB,QAAnD,CAFA,EAGNxG,OAHM,CAGE,CAHF,EAGK,CAHL,CAAT,CAD0C;;AAM1C0N,IAAAA,KAAK,GAAG,GAAR;AACD,GAPD,MAOO;AACL,QAAMC,IAAI,GAAGlI,IAAI,CAAC+B,KAAL,CAAWhC,KAAA,CAAS0H,iBAAT,CAAX,CAAb;AACAQ,IAAAA,KAAK,GAAGlI,KAAA,CACCiE,eAAe,CAACmE,EAAhB,CAAmBzH,MADpB,EAELpG,KAFK,CAECiJ,KAFD,EAGLjJ,KAHK,CAGC4N,IAHD,EAIL3N,OAJK,CAIG,CAJH,EAIM,CAJN,CAAR;AAKD;;AACD,MAAM6N,IAAI,GAAG3F,MAAM,GAAG4E,MAAH,GAAYzE,MAA/B;AACA,MAAMyF,IAAI,GAAG5F,MAAM,GAAGG,MAAH,GAAYyE,MAA/B;AAEA,MAAMiB,OAAO,GAAuB;AAClCZ,IAAAA,KAAK,EAALA,KADkC;AAElCtU,IAAAA,WAAW,EAAE4Q,eAAe,CAAC5Q,WAFK;AAGlCmV,IAAAA,UAAU,EAAE;AACVlK,MAAAA,MAAM,EAAE,CACN;AAAER,QAAAA,OAAO,EAAEsG,KAAK,CAACtG,OAAjB;AAA0B6C,QAAAA,MAAM,EAAE0H;AAAlC,OADM,EAEN;AAAEvK,QAAAA,OAAO,EAAEuG,KAAK,CAACvG,OAAjB;AAA0B6C,QAAAA,MAAM,EAAE2H;AAAlC,OAFM,CADE;AAKVG,MAAAA,SAAS,EAAE;AAAE3K,QAAAA,OAAO,EAAEmG,eAAe,CAACmE,EAAhB,CAAmBtK,OAA9B;AAAuC6C,QAAAA,MAAM,EAAEuH;AAA/C;AALD,KAHsB;AAUlCQ,IAAAA,UAAU,EAAE,CAACZ,eAAD,EAAkBC,eAAlB,CAVsB;AAWlCE,IAAAA,GAAG,EAAHA;AAXkC,GAApC;AAcA,SAAO;AACLM,IAAAA,OAAO,EAAPA;AADK,GAAP;AAGD;AACD,SAAgBI,oBACdrB,QACArD,iBACAF,UACA8D,OACAe;MAAAA;AAAAA,IAAAA,eAAe;;;AAEf,MAAMC,UAAU,GAAkB5E,eAAe,CAACmE,EAAlD;AACA,MAAMU,OAAO,GAAc/E,QAAQ,CAAC8D,KAAK,CAACgB,UAAU,CAAC/K,OAAZ,CAAN,CAAnC;AACA,MAAMiL,SAAS,GAAG/I,KAAA,CACT6I,UAAU,CAAClI,MADF,EAEfpG,KAFe,CAET,CAFS,EAGfG,GAHe,CAGX,OAAOkO,YAHI,CAAlB;AAIA,SAAO;AACLG,IAAAA,SAAS,EAAEA,SAAS,CAACnP,QAAV,EADN;AAELoP,IAAAA,SAAS,EAAEhJ,KAAA,CACF+I,SADE,EAERrO,GAFQ,CAEJ,OAAOoO,OAAO,CAAC9H,QAFX,EAGRpH,QAHQ;AAFN,GAAP;AAOD;AACD,SAAgBqP,sBACdrB,MACA3D,iBACAF,UACA8D,OACAH;MAAAA;AAAAA,IAAAA,oBAAoB;;;AAEpB,MAAMmB,UAAU,GAAkB5E,eAAe,CAACmE,EAAlD;AACA,MAAMU,OAAO,GAAc/E,QAAQ,CAAC8D,KAAK,CAACgB,UAAU,CAAC/K,OAAZ,CAAN,CAAnC;AACA,MAAMxO,KAAK,GAAkB2U,eAAe,CAAC3F,MAAhB,CAAuB,CAAvB,CAA7B;AACA,MAAMmE,UAAU,GAAcsB,QAAQ,CAAC8D,KAAK,CAACvY,KAAK,CAACwO,OAAP,CAAN,CAAtC;AACA,MAAMoL,WAAW,GAAG5Z,KAAK,CAACqR,MAA1B;AAEA,MAAMwI,MAAM,GACVvB,IAAI,IAAIA,IAAI,CAACnF,UAAU,CAACtT,MAAZ,CAAZ,GAAkCyY,IAAI,CAACnF,UAAU,CAACtT,MAAZ,CAAJ,CAAwB8Y,GAA1D,GAAgE,GADlE;;AAGA,MAAMmB,KAAK,GAAGpJ,KAAA,CACLmJ,MADK,EAEX5O,KAFW,CAELsO,UAAU,CAAClI,MAFN,EAGXjG,GAHW,CAGPwO,WAHO,EAIX/G,IAJW,CAIN,CAJM,CAAd;;AAMA,MAAMkH,iBAAiB,GAAGD,KAAK,CAAC1O,GAAN,CAAUuF,IAAI,CAAC+B,KAAL,CAAWhC,KAAA,CAAS0H,iBAAT,CAAX,CAAV,CAA1B;AACA,SAAO;AACL0B,IAAAA,KAAK,EAAEA,KAAK,CAACxP,QAAN,EADF;AAELyP,IAAAA,iBAAiB,EAAEA,iBAAiB,CAACzP,QAAlB,EAFd;AAGL0P,IAAAA,wBAAwB,EAAEtJ,KAAA,CACjBqJ,iBADiB,EAEvB3O,GAFuB,CAEnB,OAAOoO,OAAO,CAAC9H,QAFI,EAGvBpH,QAHuB,EAHrB;AAOL2P,IAAAA,QAAQ,EAAEvJ,KAAA,CACDoJ,KADC,EAEP1O,GAFO,CAEH,OAAOoO,OAAO,CAAC9H,QAFZ,EAGPpH,QAHO;AAPL,GAAP;AAYD;AAED,SAAgB4P,wBACdlC,QACAI,mBACAC,OACAC,MACA3D,iBACAF,UACA8D,OACA4B,YACAC;MADAD;AAAAA,IAAAA,aAAa;;;MACbC;AAAAA,IAAAA,aAAa;;;AAEb,MAAMb,UAAU,GAAkB5E,eAAe,CAACmE,EAAlD;AACA,MAAMU,OAAO,GAAc/E,QAAQ,CAAC8D,KAAK,CAACgB,UAAU,CAAC/K,OAAZ,CAAN,CAAnC;AAEA,MAAM6L,SAAS,GAAG3J,KAAA,CACTsH,MADS,EAEf/M,KAFe,CAET,OAAOuO,OAAO,CAAC9H,QAFN,EAGfxG,OAHe,CAGP,CAHO,EAGJ,CAHI,CAAlB;AAKA,MAAMgJ,KAAK,GAAGxD,KAAA,CACL2J,SADK,EAEXpP,KAFW,CAEL,OAAOmP,UAFF,EAGXhP,GAHW,CAGPmO,UAAU,CAAClI,MAHJ,EAIXnG,OAJW,CAIH,CAJG,EAIA,CAJA,CAAd;AAMA,MAAM4J,KAAK,GAAkBH,eAAe,CAAC3F,MAAhB,CAAuB,CAAvB,CAA7B;AACA,MAAM+F,KAAK,GAAkBJ,eAAe,CAAC3F,MAAhB,CAAuB,CAAvB,CAA7B;AAEA,MAAM6J,IAAI,GAAGlI,IAAI,CAAC+B,KAAL,CAAWhC,KAAA,CAAS0H,iBAAT,CAAX,CAAb;AAEA,MAAMW,IAAI,GAAGlO,KAAK,CAACqJ,KAAD,CAAL,CACVjJ,KADU,CACJ6J,KAAK,CAACzD,MADF,EAEVjG,GAFU,CAEN,OAAOgP,UAFD,EAGVnP,KAHU,CAGJ4N,IAHI,EAIV3N,OAJU,CAIF,CAJE,EAIC,CAJD,CAAb;AAMA,MAAM8N,IAAI,GAAGnO,KAAK,CAACqJ,KAAD,CAAL,CACVjJ,KADU,CACJ8J,KAAK,CAAC1D,MADF,EAEVjG,GAFU,CAEN,OAAOgP,UAFD,EAGVnP,KAHU,CAGJ4N,IAHI,EAIV3N,OAJU,CAIF,CAJE,EAIC,CAJD,CAAb;AAMA,MAAMgI,SAAS,GAAcuB,QAAQ,CAAC8D,KAAK,CAACzD,KAAK,CAACtG,OAAP,CAAN,CAArC;AACA,MAAM2E,UAAU,GAAcsB,QAAQ,CAAC8D,KAAK,CAACxD,KAAK,CAACvG,OAAP,CAAN,CAAtC;AAEA,MAAMqL,MAAM,GACVvB,IAAI,IAAIA,IAAI,CAACnF,UAAU,CAACtT,MAAZ,CAAZ,GAAkCyY,IAAI,CAACnF,UAAU,CAACtT,MAAZ,CAAJ,CAAwB8Y,GAA1D,GAAgE,GADlE;AAGA,MAAMM,OAAO,GAAuB;AAClCZ,IAAAA,KAAK,EAALA,KADkC;AAElCtU,IAAAA,WAAW,EAAE4Q,eAAe,CAAC5Q,WAFK;AAGlCuW,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,CACR;AAAE/L,QAAAA,OAAO,EAAEsG,KAAK,CAACtG,OAAjB;AAA0B6C,QAAAA,MAAM,EAAE0H;AAAlC,OADQ,EAER;AAAEvK,QAAAA,OAAO,EAAEuG,KAAK,CAACvG,OAAjB;AAA0B6C,QAAAA,MAAM,EAAE2H;AAAlC,OAFQ,CADA;AAKVwB,MAAAA,MAAM,EAAE;AAAEhM,QAAAA,OAAO,EAAEmG,eAAe,CAACmE,EAAhB,CAAmBtK,OAA9B;AAAuC6C,QAAAA,MAAM,EAAEgJ;AAA/C;AALE,KAHsB;AAUlCI,IAAAA,SAAS,EAAEN,UAVuB;AAWlCN,IAAAA,MAAM,EAANA;AAXkC,GAApC;AAcA,SAAO;AACL3F,IAAAA,KAAK,EAALA,KADK;AAEL6E,IAAAA,IAAI,EAAJA,IAFK;AAGLC,IAAAA,IAAI,EAAJA,IAHK;AAIL0B,IAAAA,SAAS,EAAEhK,KAAA,CACFqI,IADE,EAER3N,GAFQ,CAEJ,OAAO8H,SAAS,CAACxB,QAFb,EAGRpH,QAHQ,EAJN;AAQLqQ,IAAAA,SAAS,EAAEjK,KAAA,CACFsI,IADE,EAER5N,GAFQ,CAEJ,OAAO+H,UAAU,CAACzB,QAFd,EAGRpH,QAHQ,EARN;AAYL2O,IAAAA,OAAO,EAAPA;AAZK,GAAP;AAcD;AAED;;;;;;;;;;;;;;;;;;;AAkBA,SAAgB2B;MACdC,eAAAA;MACAC,oBAAAA;MACAC,mBAAAA;MACAC,kBAAAA;MACAC,eAAAA;MACAzL,mBAAAA;MACA0L,kBAAAA;MACAC,iBAAAA;MACAC,2BAAAA;;AAkBA;AACA,cAAoBP,MAAM,GACtB,CAACrL,UAAU,CAAC6L,YAAZ,CADsB,GAEtB,CAAC7L,UAAU,CAAC8L,aAAZ,CAFJ;AAAA,MAAOC,SAAP;AAIA;;;AACA,MAAMC,SAAS,GAAGL,QAAlB;AAEA,MAAMM,SAAS,GAAGtS,SAAS,CAACuS,GAAV,CAChBhL,KAAA,CAASuK,MAAT,EAAiBhQ,KAAjB,CAAuB,CAAvB,CADgB,EAEhBuQ,SAAS,CAACG,YAAV,CAAuBC,IAFP,CAAlB;AAKA,MAAMC,WAAW,GAAG1S,SAAS,CAACuS,GAAV,CAClBD,SAAS,CAACrQ,GAAV,CAAcmQ,SAAd,CADkB,EAElBL,SAAS,CAACS,YAAV,CAAuBC,IAFL,CAApB;AAIA,MAAME,UAAU,GAAGpL,KAAA,CAAS0K,kBAAT,EAA6BhQ,GAA7B,CAAiCmQ,SAAjC,CAAnB;AACA;AACA;;AACA;;AACA,MAAIQ,OAAJ,EAAaC,MAAb;;AACA,MAAIlB,WAAJ,EAAiB;AACfiB,IAAAA,OAAO,GAAGrL,KAAA,CACDqK,UAAU,GAAGA,UAAH,GAAgB,CADzB,EAEP9P,KAFO,CAED,OAAOiQ,SAAS,CAACxJ,QAFhB,CAAV;AAGAsK,IAAAA,MAAM,GAAGD,OAAO,CAAC9Q,KAAR,CAAcsQ,SAAd,CAAT;AACD,GALD,MAKO;AACLS,IAAAA,MAAM,GAAGtL,KAAA,CACAsK,SAAS,GAAGA,SAAH,GAAe,CADxB,EAEN/P,KAFM,CAEA,OAAOkQ,QAAQ,CAACzJ,QAFhB,CAAT;AAGAqK,IAAAA,OAAO,GAAGC,MAAM,CAAC5Q,GAAP,CAAWmQ,SAAX,CAAV;AACD;AACD;;AAEA;;;AACA,MAAMU,UAAU,GAAGhQ,IAAI,CAACF,IAAL,CACjB2E,KAAA,CAASuK,MAAT,EAAiBhQ,KAAjB,CAAuB,KAAvB,EAA8BG,GAA9B,CAAkC4Q,MAAlC,EAA0CrR,QAA1C,EADiB,CAAnB;AAIA,SAAO;AACLoR,IAAAA,OAAO,EAAEA,OAAO,CAACzR,QAAR,EADJ;AAEL0R,IAAAA,MAAM,EAAEA,MAAM,CAAC1R,QAAP,EAFH;AAGLwR,IAAAA,UAAU,EAAEA,UAAU,CAACxR,QAAX,EAHP;AAILuQ,IAAAA,MAAM,EAANA,MAJK;AAKLC,IAAAA,WAAW,EAAXA,WALK;AAMLmB,IAAAA,UAAU,EAAVA,UANK;AAOLJ,IAAAA,WAAW,EAAEA,WAAW,CAACvR,QAAZ;AAPR,GAAP;AASD;AAED;;;;;;;;;;;;;AAYA,SAAgB4R;;;MACdC,aAAAA;MACAC,AACAC,aAAAA;MACAC,gBAAAA;MACArB,eAAAA;MACArG,kBAAAA;MAEAC,iBAAAA;MACAkG,mBAAAA;MACAwB,mBAAAA;AAcA,MAAMR,OAAO,GAAGrL,KAAA,CACPqK,UAAU,GAAGA,UAAH,GAAgB,CADnB,EAEb9P,KAFa,CAEP,OAAO2J,SAAS,CAAClD,QAFV,CAAhB;AAGA,MAAI8K,WAAJ,EACEC,mBADF,EAEEC,cAFF,EAGEC,sBAHF,EAIEC,aAJF,EAKEf,WALF,EAMEgB,cANF,EAOEC,KAPF,EAQEb,UARF;AASA,MAAQnc,IAAR,GAA2Bqc,IAA3B,CAAQrc,IAAR;AAAA,MAAcid,QAAd,GAA2BZ,IAA3B,CAAcY,QAAd;AACA,MAAMC,WAAW,GAAGtM,KAAA,CACXyL,IAAI,CAACc,MADM,EAEjBhS,KAFiB,CAEXkR,IAAI,CAACjI,KAFM,EAGjBhJ,OAHiB,CAGT,CAHS,EAGN/B,SAAS,CAAC+T,UAHJ,CAApB;;AAIA,MAAIf,IAAI,CAACgB,QAAL,KAAkBrW,iBAAS,CAACsW,SAAhC,EAA2C;AAAA;;AACzCZ,IAAAA,WAAW,GAAG3R,KAAK,CAACmS,WAAD,CAAL,CAAmBnK,IAAnB,CAAwB,CAAxB,EAA2B5H,KAA3B,CAAiC8Q,OAAjC,CAAd,CADyC;;AAEzCU,IAAAA,mBAAmB,GAAG7H,SAAS,CAAC/U,MAAhC;AACA6c,IAAAA,cAAc,GAAG7R,KAAK,CACpBA,KAAK,CAACmS,WAAD,CAAL,CACGnK,IADH,CACQ,CADR,EAEG5H,KAFH,CAES8P,UAAU,GAAGA,UAAH,GAAgB,CAFnC,EAGG9P,KAHH,CAGSkR,IAAI,CAACkB,MAHd,EAIGnS,OAJH,CAIW2J,QAAQ,CAAC/I,SAJpB,EAI+B3C,SAAS,CAACmU,UAJzC,CADoB,CAAL,CAMfrS,KANe,CAMT,OAAO4J,QAAQ,CAACnD,QANP,CAAjB,CAHyC;AAWzC;;AACAiL,IAAAA,sBAAsB,GAAG9H,QAAQ,CAAChV,MAAlC;AACAgc,IAAAA,WAAW,GAAG1S,SAAS,CAACuS,GAAV,CACZa,UAAU,CAACgB,eADC,EAEZ1S,KAAK,CAACwR,IAAI,CAACmB,OAAN,CAAL,CAAoBvS,KAApB,CAA0B,OAAO2J,SAAS,CAAClD,QAA3C,CAFY,CAAd,CAbyC;;AAiBzCoL,IAAAA,KAAK,GAAG3T,SAAS,CAACsU,GAAV,CAActB,IAAI,CAACuB,QAAnB,EAA6BpB,OAAO,oBAAGA,OAAO,CAACxc,IAAD,CAAV,qBAAG,cAAe6d,IAAlB,GAAyB,CAA7D,CAAR,CAjByC;;AAmBzCf,IAAAA,aAAa,GAAGzT,SAAS,CAACsU,GAAV,CAAcpB,IAAI,CAACuB,OAAL,GAAevB,IAAI,CAACuB,OAApB,GAA8B,CAA5C,EAA+Cd,KAA/C,CAAhB;AACAD,IAAAA,cAAc,GAAGhI,QAAQ,CAAChV,MAA1B;AACAoc,IAAAA,UAAU,GAAG,CAAb,CArByC;AAuB1C,GAvBD,MAuBO;AACLO,IAAAA,WAAW,GAAG3R,KAAK,CACjBA,KAAK,CAACmS,WAAD,CAAL,CACGnK,IADH,CACQ,CADR,EAEG5H,KAFH,CAES8P,UAAU,GAAGA,UAAH,GAAgB,CAFnC;AAAA,KAIG3P,GAJH,CAIO+Q,IAAI,CAACkB,MAJZ,EAKGnS,OALH,CAKW2J,QAAQ,CAAC/I,SALpB,EAK+B3C,SAAS,CAACmU,UALzC,CADiB,CAAL,CAOZrS,KAPY,CAON,OAAO4J,QAAQ,CAACnD,QAPV,CAAd,CADK;;AAWL+K,IAAAA,mBAAmB,GAAG5H,QAAQ,CAAChV,MAA/B;AACA6c,IAAAA,cAAc,GAAG7R,KAAK,CAACmS,WAAD,CAAL,CAAmBnK,IAAnB,CAAwB,CAAxB,EAA2B5H,KAA3B,CAAiC8Q,OAAjC,CAAjB,CAZK;;AAcLY,IAAAA,sBAAsB,GAAG/H,SAAS,CAAC/U,MAAnC;AACAgc,IAAAA,WAAW,GAAG1S,SAAS,CAACuS,GAAV,CACZa,UAAU,CAACsB,gBADC,EAEZhT,KAAK,CAACwR,IAAI,CAACyB,WAAN,CAAL,CAAwB7S,KAAxB,CAA8B,OAAO2J,SAAS,CAAClD,QAA/C,CAFY,CAAd,CAfK;;AAmBLoL,IAAAA,KAAK,GAAG3T,SAAS,CAACsU,GAAV,CACN5S,KAAK,CAACsR,IAAI,CAACuB,QAAN,CAAL,CAAqBzS,KAArB,CAA2BkR,IAAI,CAACkB,MAAhC,EAAwC/S,QAAxC,EADM,EAENgS,OAAO,CAACS,QAAD,CAAP,CAAkBY,IAFZ,CAAR;AAIAf,IAAAA,aAAa,GAAGzT,SAAS,CAACsU,GAAV,CAAcpB,IAAI,CAAC0B,WAAnB,EAAgCjB,KAAhC,CAAhB;AACA;;AACAD,IAAAA,cAAc,GAAGhI,QAAQ,CAAChV,MAA1B;AACAoc,IAAAA,UAAU,GAAG,CAAb;AACD;;AACDzL,EAAAA,KAAK,CACH,aADG,EAEHwM,WAFG,EAGHR,WAAW,CAAClS,QAAZ,EAHG,EAIHoS,cAAc,CAACpS,QAAf,EAJG,EAKH,QALG,EAMH6R,IAAI,CAACkB,MANF,CAAL;AAQA,SAAO;AACLP,IAAAA,KAAK,EAAEA,KAAK,CAACxS,QAAN,EADF;AAELyR,IAAAA,OAAO,EAAEA,OAAO,CAACzR,QAAR,EAFJ;AAGLkS,IAAAA,WAAW,EAAEA,WAAW,CAAClS,QAAZ,EAHR;AAILmS,IAAAA,mBAAmB,EAAnBA,mBAJK;AAKLC,IAAAA,cAAc,EAAEA,cAAc,CAACpS,QAAf,EALX;AAMLqS,IAAAA,sBAAsB,EAAtBA,sBANK;AAOLd,IAAAA,WAAW,EAAEA,WAAW,CAACvR,QAAZ,EAPR;AAQLsK,IAAAA,SAAS,EAATA,SARK;AASLgI,IAAAA,aAAa,EAAEA,aAAa,qBAAGA,aAAH,qBAAG,eAAetS,QAAf,EAAH,GAA+B,EATtD;AAUL2R,IAAAA,UAAU,EAAEA,UAVP;AAWL;AACAhB,IAAAA,MAAM,EAANA,MAZK;AAaL4B,IAAAA,cAAc,EAAdA;AAbK,GAAP;AAeD;AAED;;;;;;;;;;;;;AAYA,SAAgBmB;;;MACd7B,aAAAA;MACA1S,cAAAA;MACA8K,aAAAA;MACAC,YAAAA;MACApB,eAAAA;MACArS,kBAAAA;MACA0T,iBAAAA;MACAC,kBAAAA;MACApB,cAAAA;MACArB,gBAAAA;AAaA,MAAM2C,SAAS,GAAGH,QAAQ,CAACF,IAAD,CAA1B;AACA,MAAMM,QAAQ,GAAGJ,QAAQ,CAACD,GAAD,CAAzB;AACA,MAAMyC,WAAW,GAAG3C,cAAc,CAACC,IAAD,EAAOC,GAAP,EAAYzT,SAAZ,EAAuB0T,QAAvB,EAAiCC,SAAjC,CAAlC;;AACA,MAAI,CAACuC,WAAL,EAAkB;AAChB,UAAM;AACJ5X,MAAAA,OAAO,EAAEwI,sBAAc,CAACoW,cADpB;AAEJC,MAAAA,GAAG,EAAErW,sBAAc,CAACoW,cAFhB;AAGJE,MAAAA,IAAI,EAAEvW,yBAAiB,CAACqW;AAHpB,KAAN;AAKD;;AACD,MAAQ5K,SAAR,GAAsB4D,WAAtB,CAAQ5D,SAAR;AACA,MAAI0I,OAAJ,EAAaC,MAAb,EAAqBvG,OAArB,EAA8BD,OAA9B,EAAuCa,WAAvC;;AACA,MAAIjD,MAAJ,EAAY;AACV2I,IAAAA,OAAO,GAAGtS,KAAV;AACA+L,IAAAA,OAAO,GAAG9E,KAAA,CAASjH,KAAK,GAAGA,KAAH,GAAW,CAAzB,EAA4BwB,KAA5B,CAAkC,OAAO2J,SAAS,CAAClD,QAAnD,CAAV;AACA,QAAM2F,WAAW,GAAG7B,OAApB;;AACA,QAAI3D,OAAO,CAACyB,KAAK,CAACgE,aAAP,CAAP,IAAgCzF,OAAO,CAACyB,KAAK,CAACiE,aAAP,CAA3C,EAAkE;AAChE,YAAM;AACJlY,QAAAA,OAAO,EAAEwI,sBAAc,CAACuW,kBADpB;AAEJF,QAAAA,GAAG,EAAErW,sBAAc,CAACuW,kBAFhB;AAGJD,QAAAA,IAAI,EAAEvW,yBAAiB,CAACwW;AAHpB,OAAN;AAKD,KAND,MAMO;AACL,UAAI,CAAC/K,SAAL,EAAgB;AACdgD,QAAAA,WAAW,GAAG3F,KAAA,CAAS2G,WAAT,EAAsBG,EAAtB,CAAyB9G,KAAA,CAAS4C,KAAK,CAACgE,aAAf,CAAzB,CAAd,CADc;AAGf,OAHD,MAGO;AACLjB,QAAAA,WAAW,GAAG3F,KAAA,CAAS2G,WAAT,EAAsBG,EAAtB,CAAyB9G,KAAA,CAAS4C,KAAK,CAACiE,aAAf,CAAzB,CAAd,CADK;AAGN;;AACD,UAAIlB,WAAJ,EAAiB;AACf2F,QAAAA,MAAM,GAAGjc,SAAT;AACA0V,QAAAA,OAAO,GAAG1V,SAAV;AACD,OAHD,MAGO;AAAA;;AACLic,QAAAA,MAAM,GAAG/I,kBAAkB,CACzBxJ,KADyB,EAEzBmL,SAFyB,EAGzBC,QAHyB,EAIzB5C,OAJyB,EAKzBmB,MALyB,EAMzBC,SANyB,EAOzBC,KAPyB,CAAlB,CAQPhJ,QARO,EAAT;AASAmL,QAAAA,OAAO,GAAG/E,KAAA,YAASsL,MAAT,sBAAmB,CAAnB,EAAsB/Q,KAAtB,CAA4B,OAAO4J,QAAQ,CAACnD,QAA5C,CAAV;AACD;AACF;AACF,GAlCD,MAkCO;AACLsK,IAAAA,MAAM,GAAGvS,KAAT;AACAgM,IAAAA,OAAO,GAAG/E,KAAA,CAASjH,KAAK,GAAGA,KAAH,GAAW,CAAzB,EAA4BwB,KAA5B,CAAkC,OAAO4J,QAAQ,CAACnD,QAAlD,CAAV;;AAEA,QAAIG,OAAO,CAACyB,KAAK,CAACoE,aAAP,CAAP,IAAgC7F,OAAO,CAACyB,KAAK,CAACqE,aAAP,CAA3C,EAAkE;AAChE,YAAM;AACJtY,QAAAA,OAAO,EAAEwI,sBAAc,CAACuW,kBADpB;AAEJF,QAAAA,GAAG,EAAErW,sBAAc,CAACuW,kBAFhB;AAGJD,QAAAA,IAAI,EAAEvW,yBAAiB,CAACwW;AAHpB,OAAN;AAKD,KAND,MAMO;AACL;AACA,UAAI,CAAC/K,SAAL,EAAgB;AACdgD,QAAAA,WAAW,GAAGZ,OAAO,CAAC+B,EAAR,CAAW9G,KAAA,CAAS4C,KAAK,CAACoE,aAAf,CAAX,CAAd;AACD,OAFD,MAEO;AACLrB,QAAAA,WAAW,GAAGZ,OAAO,CAAC+B,EAAR,CAAW9G,KAAA,CAAS4C,KAAK,CAACqE,aAAf,CAAX,CAAd;AACD;;AACD,UAAItB,WAAJ,EAAiB;AACf0F,QAAAA,OAAO,GAAGhc,SAAV;AACAyV,QAAAA,OAAO,GAAGzV,SAAV;AACD,OAHD,MAGO;AAAA;;AACL,YAAM8X,eAAe,GAAG5E,kBAAkB,CACxCxJ,KADwC,EAExCmL,SAFwC,EAGxCC,QAHwC,EAIxC5C,OAJwC,EAKxCmB,MALwC,EAMxCC,SANwC,EAOxCC,KAPwC,CAA1C;AASAyI,QAAAA,OAAO,GAAGrL,KAAA,CAASiB,KAAK,CAAC8C,QAAD,EAAWF,IAAX,EAAiBsD,eAAjB,CAAd,EAAiDvN,QAAjD,EAAV;AACAkL,QAAAA,OAAO,GAAG9E,KAAA,aAASqL,OAAT,uBAAoB,CAApB,EAAuB9Q,KAAvB,CAA6B,OAAO2J,SAAS,CAAClD,QAA9C,CAAV;AACD;AACF,KAjCI;;AAkCN;;AACD,SAAO;AACLO,IAAAA,OAAO,EAAPA,OADK;AAELkK,IAAAA,IAAI,EAAJA,IAFK;AAGL/I,IAAAA,MAAM,EAANA,MAHK;AAILC,IAAAA,SAAS,EAATA,SAJK;AAKL0I,IAAAA,OAAO,EAAPA,OALK;AAMLC,IAAAA,MAAM,EAANA,MANK;AAOLvG,IAAAA,OAAO,eAAEA,OAAF,qBAAE,UAASnL,QAAT,EAPJ;AAQLkL,IAAAA,OAAO,cAAEA,OAAF,qBAAE,SAASlL,QAAT,EARJ;AASL+L,IAAAA,WAAW,EAAXA;AATK,GAAP;AAWD;;;;;;;;;;;ACv3CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,IAAI,UAAU,OAAO,EAAE;AAClC,AACA;AACA,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC;AAC5B,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC;AACjC,EAAE,IAAItW,WAAS,CAAC;AAChB,EAAE,IAAI,OAAO,GAAG,OAAO,MAAM,KAAK,UAAU,GAAG,MAAM,GAAG,EAAE,CAAC;AAC3D,EAAE,IAAI,cAAc,GAAG,OAAO,CAAC,QAAQ,IAAI,YAAY,CAAC;AACxD,EAAE,IAAI,mBAAmB,GAAG,OAAO,CAAC,aAAa,IAAI,iBAAiB,CAAC;AACvE,EAAE,IAAI,iBAAiB,GAAG,OAAO,CAAC,WAAW,IAAI,eAAe,CAAC;AACjE;AACA,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;AACnC,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE;AACpC,MAAM,KAAK,EAAE,KAAK;AAClB,MAAM,UAAU,EAAE,IAAI;AACtB,MAAM,YAAY,EAAE,IAAI;AACxB,MAAM,QAAQ,EAAE,IAAI;AACpB,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AACpB,GAAG;AACH,EAAE,IAAI;AACN;AACA,IAAI,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AACnB,GAAG,CAAC,OAAO,GAAG,EAAE;AAChB,IAAI,MAAM,GAAG,SAAS,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;AACvC,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AAC9B,KAAK,CAAC;AACN,GAAG;AACH;AACA,EAAE,SAAS,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE;AACrD;AACA,IAAI,IAAI,cAAc,GAAG,OAAO,IAAI,OAAO,CAAC,SAAS,YAAY,SAAS,GAAG,OAAO,GAAG,SAAS,CAAC;AACjG,IAAI,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;AAC5D,IAAI,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;AACjD;AACA;AACA;AACA,IAAI,SAAS,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACjE;AACA,IAAI,OAAO,SAAS,CAAC;AACrB,GAAG;AACH,EAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;AAClC,IAAI,IAAI;AACR,MAAM,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;AACxD,KAAK,CAAC,OAAO,GAAG,EAAE;AAClB,MAAM,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACzC,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,sBAAsB,GAAG,gBAAgB,CAAC;AAChD,EAAE,IAAI,sBAAsB,GAAG,gBAAgB,CAAC;AAChD,EAAE,IAAI,iBAAiB,GAAG,WAAW,CAAC;AACtC,EAAE,IAAI,iBAAiB,GAAG,WAAW,CAAC;AACtC;AACA;AACA;AACA,EAAE,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,SAAS,GAAG,EAAE;AACzB,EAAE,SAAS,iBAAiB,GAAG,EAAE;AACjC,EAAE,SAAS,0BAA0B,GAAG,EAAE;AAC1C;AACA;AACA;AACA,EAAE,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAC7B,EAAE,MAAM,CAAC,iBAAiB,EAAE,cAAc,EAAE,YAAY;AACxD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL;AACA,EAAE,IAAI,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC;AACvC,EAAE,IAAI,uBAAuB,GAAG,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3E,EAAE,IAAI,uBAAuB;AAC7B,MAAM,uBAAuB,KAAK,EAAE;AACpC,MAAM,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,cAAc,CAAC,EAAE;AAC5D;AACA;AACA,IAAI,iBAAiB,GAAG,uBAAuB,CAAC;AAChD,GAAG;AACH;AACA,EAAE,IAAI,EAAE,GAAG,0BAA0B,CAAC,SAAS;AAC/C,IAAI,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAC3D,EAAE,iBAAiB,CAAC,SAAS,GAAG,0BAA0B,CAAC;AAC3D,EAAE,MAAM,CAAC,EAAE,EAAE,aAAa,EAAE,0BAA0B,CAAC,CAAC;AACxD,EAAE,MAAM,CAAC,0BAA0B,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;AACvE,EAAE,iBAAiB,CAAC,WAAW,GAAG,MAAM;AACxC,IAAI,0BAA0B;AAC9B,IAAI,iBAAiB;AACrB,IAAI,mBAAmB;AACvB,GAAG,CAAC;AACJ;AACA;AACA;AACA,EAAE,SAAS,qBAAqB,CAAC,SAAS,EAAE;AAC5C,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,SAAS,MAAM,EAAE;AACzD,MAAM,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,GAAG,EAAE;AAC9C,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACzC,OAAO,CAAC,CAAC;AACT,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA,EAAE,OAAO,CAAC,mBAAmB,GAAG,SAAS,MAAM,EAAE;AACjD,IAAI,IAAI,IAAI,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,WAAW,CAAC;AAClE,IAAI,OAAO,IAAI;AACf,QAAQ,IAAI,KAAK,iBAAiB;AAClC;AACA;AACA,QAAQ,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,MAAM,mBAAmB;AAC/D,QAAQ,KAAK,CAAC;AACd,GAAG,CAAC;AACJ;AACA,EAAE,OAAO,CAAC,IAAI,GAAG,SAAS,MAAM,EAAE;AAClC,IAAI,IAAI,MAAM,CAAC,cAAc,EAAE;AAC/B,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;AAChE,KAAK,MAAM;AACX,MAAM,MAAM,CAAC,SAAS,GAAG,0BAA0B,CAAC;AACpD,MAAM,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;AAC7D,KAAK;AACL,IAAI,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACzC,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,CAAC,KAAK,GAAG,SAAS,GAAG,EAAE;AAChC,IAAI,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAC5B,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,aAAa,CAAC,SAAS,EAAE,WAAW,EAAE;AACjD,IAAI,SAAS,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE;AAClD,MAAM,IAAI,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AAC/D,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACnC,QAAQ,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3B,OAAO,MAAM;AACb,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;AAChC,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AACjC,QAAQ,IAAI,KAAK;AACjB,YAAY,OAAO,KAAK,KAAK,QAAQ;AACrC,YAAY,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;AAC3C,UAAU,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,EAAE;AACzE,YAAY,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACnD,WAAW,EAAE,SAAS,GAAG,EAAE;AAC3B,YAAY,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAClD,WAAW,CAAC,CAAC;AACb,SAAS;AACT;AACA,QAAQ,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,SAAS,EAAE;AACnE;AACA;AACA;AACA,UAAU,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;AACnC,UAAU,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1B,SAAS,EAAE,SAAS,KAAK,EAAE;AAC3B;AACA;AACA,UAAU,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACzD,SAAS,CAAC,CAAC;AACX,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,eAAe,CAAC;AACxB;AACA,IAAI,SAAS,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE;AAClC,MAAM,SAAS,0BAA0B,GAAG;AAC5C,QAAQ,OAAO,IAAI,WAAW,CAAC,SAAS,OAAO,EAAE,MAAM,EAAE;AACzD,UAAU,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAC/C,SAAS,CAAC,CAAC;AACX,OAAO;AACP;AACA,MAAM,OAAO,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,eAAe,GAAG,eAAe,CAAC,IAAI;AAC9C,UAAU,0BAA0B;AACpC;AACA;AACA,UAAU,0BAA0B;AACpC,SAAS,GAAG,0BAA0B,EAAE,CAAC;AACzC,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B,GAAG;AACH;AACA,EAAE,qBAAqB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACjD,EAAE,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,mBAAmB,EAAE,YAAY;AACnE,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL,EAAE,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AACxC;AACA;AACA;AACA;AACA,EAAE,OAAO,CAAC,KAAK,GAAG,SAAS,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE;AAC7E,IAAI,IAAI,WAAW,KAAK,KAAK,CAAC,EAAE,WAAW,GAAG,OAAO,CAAC;AACtD;AACA,IAAI,IAAI,IAAI,GAAG,IAAI,aAAa;AAChC,MAAM,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC;AAC/C,MAAM,WAAW;AACjB,KAAK,CAAC;AACN;AACA,IAAI,OAAO,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC;AAC/C,QAAQ,IAAI;AACZ,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,MAAM,EAAE;AAC1C,UAAU,OAAO,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;AAC1D,SAAS,CAAC,CAAC;AACX,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;AACpD,IAAI,IAAI,KAAK,GAAG,sBAAsB,CAAC;AACvC;AACA,IAAI,OAAO,SAAS,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE;AACxC,MAAM,IAAI,KAAK,KAAK,iBAAiB,EAAE;AACvC,QAAQ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;AACxD,OAAO;AACP;AACA,MAAM,IAAI,KAAK,KAAK,iBAAiB,EAAE;AACvC,QAAQ,IAAI,MAAM,KAAK,OAAO,EAAE;AAChC,UAAU,MAAM,GAAG,CAAC;AACpB,SAAS;AACT;AACA;AACA;AACA,QAAQ,OAAO,UAAU,EAAE,CAAC;AAC5B,OAAO;AACP;AACA,MAAM,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC9B,MAAM,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AACxB;AACA,MAAM,OAAO,IAAI,EAAE;AACnB,QAAQ,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACxC,QAAQ,IAAI,QAAQ,EAAE;AACtB,UAAU,IAAI,cAAc,GAAG,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACtE,UAAU,IAAI,cAAc,EAAE;AAC9B,YAAY,IAAI,cAAc,KAAK,gBAAgB,EAAE,SAAS;AAC9D,YAAY,OAAO,cAAc,CAAC;AAClC,WAAW;AACX,SAAS;AACT;AACA,QAAQ,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,EAAE;AACvC;AACA;AACA,UAAU,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC;AACrD;AACA,SAAS,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AAC/C,UAAU,IAAI,KAAK,KAAK,sBAAsB,EAAE;AAChD,YAAY,KAAK,GAAG,iBAAiB,CAAC;AACtC,YAAY,MAAM,OAAO,CAAC,GAAG,CAAC;AAC9B,WAAW;AACX;AACA,UAAU,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACjD;AACA,SAAS,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE;AAChD,UAAU,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAChD,SAAS;AACT;AACA,QAAQ,KAAK,GAAG,iBAAiB,CAAC;AAClC;AACA,QAAQ,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACtD,QAAQ,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AACtC;AACA;AACA,UAAU,KAAK,GAAG,OAAO,CAAC,IAAI;AAC9B,cAAc,iBAAiB;AAC/B,cAAc,sBAAsB,CAAC;AACrC;AACA,UAAU,IAAI,MAAM,CAAC,GAAG,KAAK,gBAAgB,EAAE;AAC/C,YAAY,SAAS;AACrB,WAAW;AACX;AACA,UAAU,OAAO;AACjB,YAAY,KAAK,EAAE,MAAM,CAAC,GAAG;AAC7B,YAAY,IAAI,EAAE,OAAO,CAAC,IAAI;AAC9B,WAAW,CAAC;AACZ;AACA,SAAS,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AAC5C,UAAU,KAAK,GAAG,iBAAiB,CAAC;AACpC;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AACnC,UAAU,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AACnC,SAAS;AACT,OAAO;AACP,KAAK,CAAC;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,mBAAmB,CAAC,QAAQ,EAAE,OAAO,EAAE;AAClD,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACnD,IAAI,IAAI,MAAM,KAAKA,WAAS,EAAE;AAC9B;AACA;AACA,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B;AACA,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AACtC;AACA,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;AACzC;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC,UAAU,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAClC,UAAU,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACjD;AACA,UAAU,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AAC1C;AACA;AACA,YAAY,OAAO,gBAAgB,CAAC;AACpC,WAAW;AACX,SAAS;AACT;AACA,QAAQ,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AACjC,QAAQ,OAAO,CAAC,GAAG,GAAG,IAAI,SAAS;AACnC,UAAU,gDAAgD,CAAC,CAAC;AAC5D,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAClE;AACA,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACjC,MAAM,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AAC/B,MAAM,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AAC/B,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;AAC1B;AACA,IAAI,IAAI,EAAE,IAAI,EAAE;AAChB,MAAM,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AAC/B,MAAM,OAAO,CAAC,GAAG,GAAG,IAAI,SAAS,CAAC,kCAAkC,CAAC,CAAC;AACtE,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;AACnB;AACA;AACA,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;AAChD;AACA;AACA,MAAM,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE;AACvC,QAAQ,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAChC,QAAQ,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAChC,OAAO;AACP;AACA,KAAK,MAAM;AACX;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK;AACL;AACA;AACA;AACA,IAAI,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC5B,IAAI,OAAO,gBAAgB,CAAC;AAC5B,GAAG;AACH;AACA;AACA;AACA,EAAE,qBAAqB,CAAC,EAAE,CAAC,CAAC;AAC5B;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,WAAW;AACxC,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,UAAU,EAAE,WAAW;AACpC,IAAI,OAAO,oBAAoB,CAAC;AAChC,GAAG,CAAC,CAAC;AACL;AACA,EAAE,SAAS,YAAY,CAAC,IAAI,EAAE;AAC9B,IAAI,IAAI,KAAK,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;AACpC;AACA,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,MAAM,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,KAAK;AACL;AACA,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,MAAM,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,MAAM,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,KAAK;AACL;AACA,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,GAAG;AACH;AACA,EAAE,SAAS,aAAa,CAAC,KAAK,EAAE;AAChC,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC;AACxC,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC3B,IAAI,OAAO,MAAM,CAAC,GAAG,CAAC;AACtB,IAAI,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC;AAC9B,GAAG;AACH;AACA,EAAE,SAAS,OAAO,CAAC,WAAW,EAAE;AAChC;AACA;AACA;AACA,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;AAC3C,IAAI,WAAW,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACrB,GAAG;AACH;AACA,EAAE,OAAO,CAAC,IAAI,GAAG,SAAS,MAAM,EAAE;AAClC,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB,IAAI,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;AAC5B,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,KAAK;AACL,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;AACnB;AACA;AACA;AACA,IAAI,OAAO,SAAS,IAAI,GAAG;AAC3B,MAAM,OAAO,IAAI,CAAC,MAAM,EAAE;AAC1B,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC7B,QAAQ,IAAI,GAAG,IAAI,MAAM,EAAE;AAC3B,UAAU,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;AAC3B,UAAU,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAC5B,UAAU,OAAO,IAAI,CAAC;AACtB,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,CAAC;AACN,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,MAAM,CAAC,QAAQ,EAAE;AAC5B,IAAI,IAAI,QAAQ,EAAE;AAClB,MAAM,IAAI,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;AACpD,MAAM,IAAI,cAAc,EAAE;AAC1B,QAAQ,OAAO,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7C,OAAO;AACP;AACA,MAAM,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;AAC/C,QAAQ,OAAO,QAAQ,CAAC;AACxB,OAAO;AACP;AACA,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACnC,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,SAAS,IAAI,GAAG;AAC3C,UAAU,OAAO,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE;AACxC,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;AAC1C,cAAc,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvC,cAAc,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAChC,cAAc,OAAO,IAAI,CAAC;AAC1B,aAAa;AACb,WAAW;AACX;AACA,UAAU,IAAI,CAAC,KAAK,GAAGA,WAAS,CAAC;AACjC,UAAU,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAC3B;AACA,UAAU,OAAO,IAAI,CAAC;AACtB,SAAS,CAAC;AACV;AACA,QAAQ,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAChC,OAAO;AACP,KAAK;AACL;AACA;AACA,IAAI,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;AAChC,GAAG;AACH,EAAE,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;AACA,EAAE,SAAS,UAAU,GAAG;AACxB,IAAI,OAAO,EAAE,KAAK,EAAEA,WAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AAC5C,GAAG;AACH;AACA,EAAE,OAAO,CAAC,SAAS,GAAG;AACtB,IAAI,WAAW,EAAE,OAAO;AACxB;AACA,IAAI,KAAK,EAAE,SAAS,aAAa,EAAE;AACnC,MAAM,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB,MAAM,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB;AACA;AACA,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAGA,WAAS,CAAC;AACzC,MAAM,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AACxB,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC3B;AACA,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC3B,MAAM,IAAI,CAAC,GAAG,GAAGA,WAAS,CAAC;AAC3B;AACA,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AAC7C;AACA,MAAM,IAAI,CAAC,aAAa,EAAE;AAC1B,QAAQ,KAAK,IAAI,IAAI,IAAI,IAAI,EAAE;AAC/B;AACA,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;AACpC,cAAc,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AACrC,cAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AACtC,YAAY,IAAI,CAAC,IAAI,CAAC,GAAGA,WAAS,CAAC;AACnC,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,EAAE,WAAW;AACrB,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB;AACA,MAAM,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACzC,MAAM,IAAI,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;AAC5C,MAAM,IAAI,UAAU,CAAC,IAAI,KAAK,OAAO,EAAE;AACvC,QAAQ,MAAM,UAAU,CAAC,GAAG,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC;AACvB,KAAK;AACL;AACA,IAAI,iBAAiB,EAAE,SAAS,SAAS,EAAE;AAC3C,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE;AACrB,QAAQ,MAAM,SAAS,CAAC;AACxB,OAAO;AACP;AACA,MAAM,IAAI,OAAO,GAAG,IAAI,CAAC;AACzB,MAAM,SAAS,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE;AACnC,QAAQ,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;AAC9B,QAAQ,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC;AAC/B,QAAQ,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC;AAC3B;AACA,QAAQ,IAAI,MAAM,EAAE;AACpB;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAClC,UAAU,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAClC,SAAS;AACT;AACA,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC;AACzB,OAAO;AACP;AACA,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;AACtC;AACA,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;AACrC;AACA;AACA;AACA,UAAU,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/B,SAAS;AACT;AACA,QAAQ,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE;AACvC,UAAU,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AACxD,UAAU,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;AAC5D;AACA,UAAU,IAAI,QAAQ,IAAI,UAAU,EAAE;AACtC,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,EAAE;AAC5C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAClD,aAAa,MAAM,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AACrD,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC9C,aAAa;AACb;AACA,WAAW,MAAM,IAAI,QAAQ,EAAE;AAC/B,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,EAAE;AAC5C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAClD,aAAa;AACb;AACA,WAAW,MAAM,IAAI,UAAU,EAAE;AACjC,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AAC9C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC9C,aAAa;AACb;AACA,WAAW,MAAM;AACjB,YAAY,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACtE,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,MAAM,EAAE,SAAS,IAAI,EAAE,GAAG,EAAE;AAChC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI;AACrC,YAAY,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;AAC5C,YAAY,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AAC1C,UAAU,IAAI,YAAY,GAAG,KAAK,CAAC;AACnC,UAAU,MAAM;AAChB,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,YAAY;AACtB,WAAW,IAAI,KAAK,OAAO;AAC3B,WAAW,IAAI,KAAK,UAAU,CAAC;AAC/B,UAAU,YAAY,CAAC,MAAM,IAAI,GAAG;AACpC,UAAU,GAAG,IAAI,YAAY,CAAC,UAAU,EAAE;AAC1C;AACA;AACA,QAAQ,YAAY,GAAG,IAAI,CAAC;AAC5B,OAAO;AACP;AACA,MAAM,IAAI,MAAM,GAAG,YAAY,GAAG,YAAY,CAAC,UAAU,GAAG,EAAE,CAAC;AAC/D,MAAM,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;AACzB,MAAM,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;AACvB;AACA,MAAM,IAAI,YAAY,EAAE;AACxB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC7B,QAAQ,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC;AAC5C,QAAQ,OAAO,gBAAgB,CAAC;AAChC,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACnC,KAAK;AACL;AACA,IAAI,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE;AACzC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACnC,QAAQ,MAAM,MAAM,CAAC,GAAG,CAAC;AACzB,OAAO;AACP;AACA,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO;AACjC,UAAU,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;AACtC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;AAC/B,OAAO,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC3C,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AAC1C,QAAQ,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAC1B,OAAO,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,QAAQ,EAAE;AACvD,QAAQ,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,MAAM,EAAE,SAAS,UAAU,EAAE;AACjC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,UAAU,KAAK,UAAU,EAAE;AAC7C,UAAU,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC1D,UAAU,aAAa,CAAC,KAAK,CAAC,CAAC;AAC/B,UAAU,OAAO,gBAAgB,CAAC;AAClC,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,OAAO,EAAE,SAAS,MAAM,EAAE;AAC9B,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;AACrC,UAAU,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;AACxC,UAAU,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACvC,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;AACpC,YAAY,aAAa,CAAC,KAAK,CAAC,CAAC;AACjC,WAAW;AACX,UAAU,OAAO,MAAM,CAAC;AACxB,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,MAAM,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;AAC/C,KAAK;AACL;AACA,IAAI,aAAa,EAAE,SAAS,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE;AAC3D,MAAM,IAAI,CAAC,QAAQ,GAAG;AACtB,QAAQ,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC;AAClC,QAAQ,UAAU,EAAE,UAAU;AAC9B,QAAQ,OAAO,EAAE,OAAO;AACxB,OAAO,CAAC;AACR;AACA,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;AAClC;AACA;AACA,QAAQ,IAAI,CAAC,GAAG,GAAGA,WAAS,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL,GAAG,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,OAAO,CAAC;AACjB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,EAAE,CAA6B,MAAM,CAAC,OAAO,CAAK;AAClD,CAAC,CAAC,CAAC;AACH;AACA,IAAI;AACJ,EAAE,kBAAkB,GAAG,OAAO,CAAC;AAC/B,CAAC,CAAC,OAAO,oBAAoB,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;AACtC,IAAI,UAAU,CAAC,kBAAkB,GAAG,OAAO,CAAC;AAC5C,GAAG,MAAM;AACT,IAAI,QAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC;AACrD,GAAG;AACH;;;IC9uBase,KAAb;;AAESA,wBAAA,gBAAqBlV,gBAAS,CAACmV,IAAV,CAAe,+EAAf,CAArB;;AAGAD,cAAA,gBAAWlV,gBAAS,CAACmV,IAAV,CAAe,+EAAf,CAAX;AAIT;;AACA,IAAaC,EAAb;AAIE,cAAYC,CAAZ,EAA0BC,aAA1B;QAA0BA;AAAAA,MAAAA,gBAAgBJ,KAAK,CAACK;;;AAC9C,SAAKC,CAAL,GAASF,aAAT;AACA,SAAKD,CAAL,GAASA,CAAC,CAACI,GAAF,CAAM,KAAKD,CAAX,CAAT;AACD,GAPH;AAUE;AACA;;;AAXF;;AAAA,SAaEE,GAbF,GAaE,aAAIC,KAAJ;AACE,QAAMC,EAAE,GAAGD,KAAX;AACA,QAAMN,CAAC,GAAI,KAAKA,CAAL,CAAOK,GAAP,CAAWE,EAAX,CAAD,CAAiBH,GAAjB,CAAqB,KAAKD,CAA1B,CAAV;AACA,WAAO,IAAIJ,EAAJ,CAAOC,CAAP,EAAU,KAAKG,CAAf,CAAP;AACD,GAjBH;;AAAA,SAmBEK,GAnBF,GAmBE,aAAIF,KAAJ;AACE,QAAMC,EAAE,GAAGD,KAAX;AACA,QAAMN,CAAC,GAAG,KAAKA,CAAL,CAAOQ,GAAP,CAAWD,EAAX,EAAeH,GAAf,CAAmB,KAAKD,CAAxB,CAAV;AACA,WAAO,IAAIJ,EAAJ,CAAOC,CAAP,EAAU,KAAKG,CAAf,CAAP;AACD,GAvBH;;AAAA,SAyBEM,GAzBF,GAyBE,aAAIH,KAAJ;AACE,QAAMC,EAAE,GAAGD,KAAX;AACA,QAAII,KAAJ;;AACA,QAAI,KAAKV,CAAL,CAAO5K,GAAP,CAAWmL,EAAX,CAAJ,EAAoB;AAClBG,MAAAA,KAAK,GAAI,KAAKV,CAAL,CAAOS,GAAP,CAAWF,EAAX,CAAD,CAAiBH,GAAjB,CAAqB,KAAKD,CAA1B,CAAR;AACD,KAFD,MAEO;AACLO,MAAAA,KAAK,GAAI,KAAKV,CAAL,CAAOS,GAAP,CAAWF,EAAX,EAAeF,GAAf,CAAmB,KAAKF,CAAxB,CAAD,CAA6BC,GAA7B,CAAiC,KAAKD,CAAtC,CAAR;AACD;;AACD,WAAO,IAAIJ,EAAJ,CAAOW,KAAP,EAAc,KAAKP,CAAnB,CAAP;AACD,GAlCH;;AAAA,SAoCEvT,GApCF,GAoCE,aAAI0T,KAAJ;AACE,QAAMK,IAAI,GAAGL,KAAb;AACA,QAAMM,GAAG,GAAG,KAAKT,CAAjB;AACA,QAAMU,KAAK,GAAGlW,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAd;AACA,QAAMgB,UAAU,GAAGC,MAAM,CAACJ,IAAD,EAAOC,GAAG,CAACH,GAAJ,CAAQI,KAAR,CAAP,EAAuBD,GAAvB,CAAzB;AACA,QAAMI,oBAAoB,GAAG,KAAKhB,CAAL,CAAOQ,GAAP,CAAWM,UAAX,EAAuBV,GAAvB,CAA2B,KAAKD,CAAhC,CAA7B;AAEA,WAAO,IAAIJ,EAAJ,CAAOiB,oBAAP,EAA6B,KAAKb,CAAlC,CAAP;AACD,GA5CH;;AAAA,KA8CSc,GA9CT,GA8CE,aAAWC,OAAX;QAAWA;AAAAA,MAAAA,UAAqBrB,KAAK,CAACK;;;AACpC,WAAO,IAAIH,EAAJ,CAAOpV,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAP,EAA4BoB,OAA5B,CAAP;AACD,GAhDH;;AAAA,KAkDSC,IAlDT,GAkDE,cAAYD,OAAZ;QAAYA;AAAAA,MAAAA,UAAqBrB,KAAK,CAACK;;;AACrC,WAAO,IAAIH,EAAJ,CAAOpV,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAP,EAA4BoB,OAA5B,CAAP;AACD,GApDH;;AAAA;AAAA;AAwDA,SAAgBH,OAAOf,GAAcoB,GAAcjB;AACjD,MAAMkB,EAAE,GAAG,IAAIC,eAAJ,CAAetB,CAAC,CAAClU,QAAF,EAAf,CAAX;AACA,MAAMyV,EAAE,GAAG,IAAID,eAAJ,CAAeF,CAAC,CAACtV,QAAF,EAAf,CAAX;AACA,MAAM0V,EAAE,GAAG,IAAIF,eAAJ,CAAenB,CAAC,CAACrU,QAAF,EAAf,CAAX;;AAGA,MAAM2V,MAAM,GAAGJ,EAAE,CAACK,MAAH,CAAUH,EAAV,EAAcC,EAAd,CAAf;;AAEA,SAAO7W,gBAAS,CAACmV,IAAV,CAAe2B,MAAM,CAAC3V,QAAP,EAAf,CAAP;AACD;;AC9ED;;;;;;;;;;;;;;;;;;AAkBA,IAGa6V,MAAb;AACSA,eAAA,GAAW9B,KAAK,CAACK,kBAAjB;AACAyB,eAAA,gBAAWhX,gBAAS,CAACmV,IAAV,CAAe,+EAAf,CAAX;AACA6B,eAAA,gBAAWhX,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAX;;AAEA6B,eAAA,gBAAWA,MAAM,CAACC,QAAP,CAAgBhV,GAAhB,CAAoB+U,MAAM,CAACE,QAA3B,CAAX;;AACAF,eAAA,gBAAWhX,gBAAS,CAACmV,IAAV,CAAe,QAAf,CAAX;;AACA6B,eAAA,gBAAWhX,gBAAS,CAACmV,IAAV,CAAe,QAAf,CAAX;;AAGT,IAAagC,KAAb;AAIE,iBAAYC,CAAZ,EAAmBC,CAAnB;AACE,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACD;;AAPH,QASSC,QATT,GASE;AACE,QAAMC,OAAO,GAAGvX,gBAAS,CAACmV,IAAV,CAAe,+EAAf,CAAhB;AACA,QAAMqC,OAAO,GAAGxX,gBAAS,CAACmV,IAAV,CAAe,+EAAf,CAAhB;AACA,QAAMsC,KAAK,GAAG,IAAIN,KAAJ,CAAU,IAAI/B,EAAJ,CAAOmC,OAAP,CAAV,EAA2B,IAAInC,EAAJ,CAAOoC,OAAP,CAA3B,CAAd;AACA,WAAOC,KAAP;AACD,GAdH;;AAAA;;AAAA,SAgBE5B,GAhBF,GAgBE,aAAI6B,MAAJ;AACE,QAAIjB,CAAC,GAAG,IAAIU,KAAJ,CAAU,KAAKC,CAAf,EAAkB,KAAKC,CAAvB,CAAR;AACA,QAAIvT,CAAC,GAAGqT,KAAK,CAACQ,QAAN,EAAR;AACA;AAEA,WAAO,CAACD,MAAM,CAAC5M,EAAP,CAAU9K,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAV,CAAR,EAAwC;AACtC,UAAMyC,UAAU,GAAGF,MAAM,CAACG,GAAP,CAAW7X,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAX,CAAnB;;AACA,UAAI,CAACyC,UAAU,CAAC9M,EAAX,CAAc9K,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAd,CAAL,EAAyC;AACvCrR,QAAAA,CAAC,GAAGA,CAAC,CAAC4R,GAAF,CAAMe,CAAN,CAAJ;AACD;;AACD,UAAIqB,MAAM,GAAG,IAAIX,KAAJ,CAAUV,CAAC,CAACW,CAAZ,EAAeX,CAAC,CAACY,CAAjB,CAAb;AACA,UAAIU,MAAM,GAAG,IAAIZ,KAAJ,CAAUV,CAAC,CAACW,CAAZ,EAAeX,CAAC,CAACY,CAAjB,CAAb;AACAZ,MAAAA,CAAC,GAAGqB,MAAM,CAACpC,GAAP,CAAWqC,MAAX,CAAJ;AACAL,MAAAA,MAAM,GAAGA,MAAM,CAACzV,GAAP,CAAWjC,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAX,CAAT,CARsC;AAWvC;;AACD,WAAOrR,CAAP;AACD,GAlCH;;AAAA,SAoCE4R,GApCF,GAoCE,aAAIC,KAAJ;AACE,QAAI,KAAKyB,CAAL,CAAO/B,CAAP,CAASvK,EAAT,CAAY9K,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAZ,KAAoC,KAAKkC,CAAL,CAAOhC,CAAP,CAASvK,EAAT,CAAY9K,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAZ,CAAxC,EAA0E;AACxE,aAAOQ,KAAP;AACD;;AACD,QAAMqC,EAAE,GAAG,KAAKZ,CAAhB;AACA,QAAMa,EAAE,GAAG,KAAKZ,CAAhB;AACA,QAAMa,EAAE,GAAGvC,KAAK,CAACyB,CAAjB;AACA,QAAMe,EAAE,GAAGxC,KAAK,CAAC0B,CAAjB;AAEA,QAAMe,OAAO,GAAIJ,EAAE,CAACnC,GAAH,CAAOsC,EAAE,CAAC9C,CAAV,CAAD,CAAeK,GAAf,CAAmBuC,EAAE,CAACpC,GAAH,CAAOqC,EAAE,CAAC7C,CAAV,EAAaA,CAAhC,CAAhB;AACA,QAAMgD,OAAO,GAAGL,EAAE,CAACnC,GAAH,CAAOqC,EAAE,CAAC7C,CAAV,EAAaQ,GAAb,CAAiBoC,EAAE,CAAC5C,CAApB,EAAuBQ,GAAvB,CAA2BsC,EAAE,CAAC9C,CAA9B,EAAiCQ,GAAjC,CAAqCmB,MAAM,CAACsB,QAA5C,CAAhB;AACA,QAAMC,OAAO,GAAGnD,EAAE,CAACkB,GAAH,GAASZ,GAAT,CAAa2C,OAAO,CAAChD,CAArB,CAAhB;AAEA,QAAMmD,EAAE,GAAGJ,OAAO,CAACnW,GAAR,CAAYsW,OAAO,CAAClD,CAApB,CAAX;AAEA,QAAMoD,OAAO,GAAGR,EAAE,CAACpC,GAAH,CAAOsC,EAAE,CAAC9C,CAAV,CAAhB;AACA,QAAMqD,OAAO,GAAGV,EAAE,CAACnC,GAAH,CAAOqC,EAAE,CAAC7C,CAAV,EAAaQ,GAAb,CAAiBmB,MAAM,CAAC2B,QAAxB,CAAhB;AACA,QAAMC,OAAO,GAAGH,OAAO,CAAC3C,GAAR,CAAY4C,OAAO,CAACrD,CAApB,CAAhB;AACA,QAAMwD,OAAO,GAAGzD,EAAE,CAACkB,GAAH,GAASR,GAAT,CAAauC,OAAO,CAAChD,CAArB,CAAhB;AAEA,QAAMyD,EAAE,GAAGF,OAAO,CAAC3W,GAAR,CAAY4W,OAAO,CAACxD,CAApB,CAAX;AAEA,WAAO,IAAI8B,KAAJ,CAAUqB,EAAV,EAAcM,EAAd,CAAP;AACD,GA3DH;;AAAA,QA6DSnB,QA7DT,GA6DE;AACE,WAAO,IAAIR,KAAJ,CAAU,IAAI/B,EAAJ,CAAOpV,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAP,CAAV,EAAuC,IAAIC,EAAJ,CAAOpV,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAP,CAAvC,CAAP;AACD,GA/DH;;AAAA;AAAA;;AC/BA;;;;;;;;;;;;;AAcA;AAOA,IAAI4D,OAAO,gBAAGC,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAaC,cAAb,GAWE,wBAAYxC,CAAZ,EAA0ByC,CAA1B,EAAqCC,QAArC,EAAuDC,QAAvD,EAAyEC,IAAzE,EAAuFC,CAAvF,EAAqGC,WAArG,EAAsIC,WAAtI,EAAyKC,eAAzK;AACE,OAAKhD,CAAL,GAASA,CAAT;AACA,OAAKyC,CAAL,GAASA,CAAT;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,CAAL,GAASA,CAAT;;AAEA,MAAIC,WAAW,IAAI,IAAnB,EAAyB;AACvB,SAAKA,WAAL,GAAmBG,WAAW,CAACC,kBAAZ,CAA+BlD,CAA/B,EAAqC4C,IAArC,iBAAuDF,QAAQ,GAAGC,QAAlE,CAAnB;AACD,GAFD,MAEO;AACL,SAAKG,WAAL,GAAmBA,WAAnB;AACD;;AAED,MAAIC,WAAW,IAAI,IAAnB,EAAyB;AACvB,SAAKA,WAAL,GAAmBE,WAAW,CAACE,eAAZ,CAA4BnD,CAA5B,EAAkC4C,IAAlC,mBAAsDH,CAAtD,CAAnB;AACD,GAFD,MAEO;AACL,SAAKM,WAAL,GAAmBA,WAAnB;AACD;;AAED,OAAKC,eAAL,GAAuBA,eAAvB;AACD,CAhCH;AAoCA,IAAaC,WAAb;AAAA;;AAAA,cAESG,CAFT,GAEE,WAASC,GAAT;AACE,QAAMC,YAAY,GAAG,EAArB;AAEA,QAAMC,GAAG,GAAG,IAAIC,uBAAJ,EAAZ;AACA,QAAM/jB,OAAO,GAAG8jB,GAAG,CAACE,MAAJ,CAAWJ,GAAX,CAAhB;;AAGA,QAAMK,GAAG,GAAGzZ,MAAM,CAAC0Z,KAAP,CAAaL,YAAb,CAAZ;AAEA;;AACAhB,IAAAA,OAAO,CAACoB,GAAG,CAACnjB,MAAL,EAAa,IAAb,CAAP,CAA0BqjB,MAA1B,CAAiCnkB,OAAjC,EAA0CokB,KAA1C,CAAgDH,GAAhD;AACA,QAAMI,KAAK,GAAGJ,GAAG,CAACK,MAAJ,GAAavkB,IAA3B;;AAGA,QAAIwkB,GAAG,GAAGza,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAV;AACA,QAAIle,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsjB,KAAK,CAACvjB,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,UAAMyjB,UAAU,GAAG1a,gBAAS,CAACmV,IAAV,CAAeoF,KAAK,CAACtjB,CAAD,CAApB,CAAnB;AACA,UAAM0jB,GAAG,GAAGD,UAAU,CAAC7E,GAAX,CAAgB7V,gBAAS,CAACmV,IAAV,CAAe,KAAf,EAAsBnK,GAAtB,CAA0BhL,gBAAS,CAACmV,IAAV,CAAele,CAAf,CAA1B,CAAhB,CAAZ;AACAwjB,MAAAA,GAAG,GAAGA,GAAG,CAAC/E,GAAJ,CAAQiF,GAAR,CAAN;AACD;;;AAED,WAAOF,GAAP;AACD,GAzBH;;AAAA,cA2BSG,QA3BT,GA2BE,kBAAgBd,GAAhB;AACE,QAAMC,YAAY,GAAG,EAArB;AAEA,QAAM7jB,OAAO,GAAG,IAAIkL,UAAJ,CAAeyZ,eAAe,CAACC,QAAhB,CAAyBhB,GAAzB,CAAf,CAAhB;;AAGA,QAAMK,GAAG,GAAGzZ,MAAM,CAAC0Z,KAAP,CAAaL,YAAb,CAAZ;;AAEAhB,IAAAA,OAAO,CAACoB,GAAG,CAACnjB,MAAL,EAAa,IAAb,CAAP,CAA0BqjB,MAA1B,CAAiCnkB,OAAjC,EAA0CokB,KAA1C,CAAgDH,GAAhD;AACA,QAAMI,KAAK,GAAGJ,GAAG,CAACK,MAAJ,GAAavkB,IAA3B;;AAGA,QAAIwkB,GAAG,GAAGza,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAV;AACA,QAAIle,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsjB,KAAK,CAACvjB,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,UAAMyjB,UAAU,GAAG1a,gBAAS,CAACmV,IAAV,CAAeoF,KAAK,CAACtjB,CAAD,CAApB,CAAnB;AACA,UAAM0jB,GAAG,GAAGD,UAAU,CAAC7E,GAAX,CAAgB7V,gBAAS,CAACmV,IAAV,CAAe,KAAf,EAAsBnK,GAAtB,CAA0BhL,gBAAS,CAACmV,IAAV,CAAele,CAAf,CAA1B,CAAhB,CAAZ;AACAwjB,MAAAA,GAAG,GAAGA,GAAG,CAAC/E,GAAJ,CAAQiF,GAAR,CAAN;AACD;;;AAED,WAAOF,GAAP;AACD,GAhDH;;AAAA,cAmDSd,kBAnDT,GAmDE,4BAA0BlD,CAA1B,EAAwC4C,IAAxC,EAAsDhE,CAAtD;AACE,QAAI0F,CAAJ;AACAA,IAAAA,CAAC,GAAG,EAAJ;AACA,QAAIC,UAAU,GAAG,KAAKnB,CAAL,CAAOR,IAAP,CAAjB;AACA,QAAMvC,MAAM,GAAGkE,UAAU,CAACvF,GAAX,CAAegB,CAAf,CAAf;AACAsE,IAAAA,CAAC,CAACE,IAAF,CAAOnE,MAAP;;AACA,SAAK,IAAI7f,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoe,CAAC,GAAC,CAAtB,EAAyBpe,CAAC,EAA1B,EAA8B;AAC5B+jB,MAAAA,UAAU,GAAG,KAAKJ,QAAL,CAAcI,UAAd,CAAb;;AACA,UAAMlE,OAAM,GAAGkE,UAAU,CAACvF,GAAX,CAAegB,CAAf,CAAf;;AACAsE,MAAAA,CAAC,CAACE,IAAF,CAAOnE,OAAP;AACD;;AACD,WAAOiE,CAAP;AACD,GA/DH;;AAAA,cAiESnB,eAjET,GAiEE,yBAAuBnD,CAAvB,EAAqC4C,IAArC,EAAmDH,CAAnD;AACE,QAAM6B,CAAC,GAAG,KAAKpB,kBAAL,CAAwBlD,CAAxB,EAA2B4C,IAA3B,EAAiCH,CAAC,GAAC,CAAnC,CAAV;AACA,QAAIgC,MAAJ;AACAA,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAK,IAAIjkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiiB,CAApB,EAAuBjiB,CAAC,EAAxB,EAA4B;AAC1B,UAAIkkB,GAAQ,SAAZ;AACAA,MAAAA,GAAG,GAAG,EAAN;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlC,CAApB,EAAuBkC,CAAC,EAAxB,EAA4B;AAC1B,YAAMC,GAAG,GAAGN,CAAC,CAAC9jB,CAAD,CAAb;AACA,YAAMqkB,KAAK,GAAGP,CAAC,CAAC7B,CAAC,GAACkC,CAAH,CAAf;AACA,YAAMG,GAAG,GAAG9E,CAAZ;AACA,YAAM+E,OAAO,GAAGF,KAAK,CAAC7F,GAAN,CAAU8F,GAAV,CAAhB;AACA,YAAME,IAAI,GAAGJ,GAAG,CAACvF,GAAJ,CAAQ0F,OAAR,CAAb;AACA,YAAME,GAAG,GAAGH,GAAG,CAACzF,GAAJ,CAAQ,CAAR,CAAZ;AACA,YAAM6F,MAAM,GAAGvF,MAAM,CAACqF,IAAD,EAAOC,GAAP,EAAYH,GAAZ,CAArB;AACAJ,QAAAA,GAAG,CAACF,IAAJ,CAASU,MAAT;AACD;;AACDT,MAAAA,MAAM,CAACD,IAAP,CAAYE,GAAZ;AACD;;AACD,WAAOD,MAAP;AACD,GArFH;;AAAA,cAuFSU,aAvFT,GAuFE,uBAAqBC,KAArB,EAAyC5kB,CAAzC,EAAoD6kB,MAApD;AACE;;;;;;;AAQA,QAAMC,MAAM,GAAGD,MAAM,CAAC3C,QAAP,GAAkB,CAAjC;;AAEA,QAAIliB,CAAC,GAAG8kB,MAAJ,IAAc9kB,CAAC,IAAK8kB,MAAM,GAAGD,MAAM,CAAC1C,QAAxC,EAAmD;AACjD,WAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,KAAK,CAAC7kB,MAA1B,EAAkCokB,CAAC,EAAnC,EAAuC;AACrC,YAAMY,SAAS,GAAGH,KAAK,CAACT,CAAD,CAAvB;AACA,YAAMa,GAAG,GAAGH,MAAM,CAACxC,CAAnB;AACA,YAAMiC,GAAG,GAAGO,MAAM,CAACrF,CAAnB;AACA,YAAM/R,IAAI,GAAG0R,MAAM,CAAC4F,SAAD,EAAYC,GAAZ,EAAiBV,GAAjB,CAAnB;AACAM,QAAAA,KAAK,CAACT,CAAD,CAAL,GAAW1W,IAAX;AACD;AACF,KARD,MAQO;AACL,UAAMsX,UAAS,GAAGH,KAAK,CAAC,CAAD,CAAvB;AACA,UAAMI,IAAG,GAAGH,MAAM,CAACxC,CAAnB;AACA,UAAMiC,IAAG,GAAGO,MAAM,CAACrF,CAAnB;;AACA,UAAM/R,KAAI,GAAG0R,MAAM,CAAC4F,UAAD,EAAYC,IAAZ,EAAiBV,IAAjB,CAAnB;;AACAM,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWnX,KAAX;AACD;;AACD,WAAOmX,KAAP;AACD,GAlHH;;AAAA,cAoHSK,YApHT,GAoHE,sBAAoBL,KAApB,EAAwCM,CAAxC,EAA0D1F,CAA1D;AACE;;;;AAIA,QAAI2F,QAAJ;AACAA,IAAAA,QAAQ,GAAG,EAAX;;AACA,SAAK,IAAInlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGklB,CAAC,CAACnlB,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AACjC,UAAIwjB,GAAG,GAAGza,gBAAS,CAACmV,IAAV,CAAe,CAAf,CAAV;;AACA,WAAK,IAAIiG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,KAAK,CAAC7kB,MAA1B,EAAkCokB,CAAC,EAAnC,EAAuC;AACrC,YAAMiB,OAAO,GAAGR,KAAK,CAACT,CAAD,CAArB;AACAX,QAAAA,GAAG,GAAGA,GAAG,CAAC/E,GAAJ,CAASyG,CAAC,CAACllB,CAAD,CAAD,CAAKmkB,CAAL,EAAQvF,GAAR,CAAYwG,OAAZ,CAAT,CAAN;AACD;;AACDD,MAAAA,QAAQ,CAACnB,IAAT,CAAcR,GAAG,CAAChF,GAAJ,CAAQgB,CAAR,CAAd;AACD;;AACD,WAAO2F,QAAP;AACD,GApIH;;AAwIE;;;;;;;;;;;;;;;;;;;;;AAxIF;;AAAA,cAkKSE,QAlKT,GAkKE,kBAAgBC,MAAhB,EAAqCT,MAArC;AACE,QAAID,KAAJ;AACAA,IAAAA,KAAK,GAAG,EAAR;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACW,MAAN,CAAaD,MAAb,CAAR;;AAEA,SAAK,IAAItlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6kB,MAAM,CAAC5C,CAAP,GAAWqD,MAAM,CAACvlB,MAAtC,EAA8CC,CAAC,EAA/C,EAAmD;AACjD4kB,MAAAA,KAAK,CAACZ,IAAN,CAAWjb,gBAAS,CAACmV,IAAV,CAAe,CAAf,CAAX;AACD;AAGD;;;AAEA,SAAK,IAAIle,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6kB,MAAM,CAACvC,WAAP,CAAmBviB,MAAvC,EAA+CC,CAAC,EAAhD,EAAoD;AAClD,UAAMwlB,GAAG,GAAGX,MAAM,CAACvC,WAAP,CAAmBtiB,CAAnB,CAAZ;;AAEA,WAAK,IAAIgc,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG4I,KAAK,CAAC7kB,MAAlC,EAA0Cic,KAAK,EAA/C,EAAmD;AACjD,YAAMoJ,OAAO,GAAGR,KAAK,CAAC5I,KAAD,CAArB;AACA4I,QAAAA,KAAK,CAAC5I,KAAD,CAAL,GAAeoJ,OAAO,CAAC3G,GAAR,CAAY+G,GAAZ,CAAf;AACD;;AAEDZ,MAAAA,KAAK,GAAG,KAAKD,aAAL,CAAmBC,KAAnB,EAA0B5kB,CAA1B,EAA6B6kB,MAA7B,CAAR,CARkD;;AAWlDD,MAAAA,KAAK,GAAG,KAAKK,YAAL,CAAkBL,KAAlB,EAAyBC,MAAM,CAACtC,WAAhC,EAA6CsC,MAAM,CAACrF,CAApD,CAAR,CAXkD;AAanD;;;AAED,WAAOoF,KAAK,CAAC,CAAD,CAAZ;AACD,GA9LH;;AAAA;AAAA;;AC3DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAMaa,SAAb;AAIE,qBAAYC,CAAZ,EAAsBC,CAAtB;AACE,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACD;;AAPH;;AAAA,SASEC,KATF,GASE;AACE,WAAU,KAAKF,CAAL,CAAOvF,CAAP,CAAS/B,CAAnB,SAAwB,KAAKsH,CAAL,CAAOtF,CAAP,CAAShC,CAAjC,SAAsC,KAAKuH,CAAL,CAAOvH,CAA7C;AACD,GAXH;;AAAA;AAAA;AAcA,IAAayH,aAAb;AAKE,yBAAYC,CAAZ,EAAsBC,GAAtB,EAAsCjI,GAAtC;AACE,SAAKgI,CAAL,GAASA,CAAT;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKjI,GAAL,GAAWA,GAAX;AACD;;AATH;;AAAA,UAWE8H,KAXF,GAWE;AACE,WAAU,KAAKE,CAAL,CAAO3F,CAAP,CAAS/B,CAAnB,SACE,KAAK0H,CAAL,CAAO1F,CAAP,CAAShC,CADX,SAEI,KAAK2H,GAAL,CAASH,KAAT,EAFJ,SAEwB,KAAK9H,GAAL,CAAS5T,QAAT,EAFxB;AAGD,GAfH;;AAAA;AAAA;AAkBA,IAAa0Z,eAAb;AAAA;;AAAA,kBACSC,QADT,GACE,kBAAgBhB,GAAhB;AACE,QAAMC,YAAY,GAAG,EAArB;;AAIA,QAAIkD,eAAe,GAAGC,OAAO,CAACpD,GAAG,CAAC3Y,QAAJ,EAAD,CAA7B;;AAGA,QAAMgc,IAAI,GAAGpD,YAAY,GAAGkD,eAAe,CAACjmB,MAA5C;;AAEA,QAAImmB,IAAI,GAAG,CAAX,EAAc;AACZ,WAAK,IAAIlmB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkmB,IAApB,EAA0BlmB,CAAC,EAA3B,EAA+B;AAC7BgmB,QAAAA,eAAe,GAAG,CAAC,CAAD,EAAIT,MAAJ,CAAWS,eAAX,CAAlB;AACD;AACF,KAJD,MAIO;AACLA,MAAAA,eAAe,GAAGA,eAAe,CAAC9a,KAAhB,CAAsB,CAAtB,EAAyB4X,YAAzB,CAAlB;AACD;;AAEDkD,IAAAA,eAAe,GAAGA,eAAe,CAACG,OAAhB,EAAlB;;AAEA,WAAOH,eAAP;AACD;AAED;;;;;AAxBF;;AAAA,kBA8BSI,eA9BT,GA8BE,yBAAuBlB,CAAvB;AACE,WAAOA,CAAP;AACD;AAED;;;;;;;;AAlCF;;AAAA,kBA8CSmB,kBA9CT,GA8CE,4BAA0BC,CAA1B,EAAiCzD,GAAjC;AACE,QAAM0D,UAAU,GAAG,KAAK1C,QAAL,CAAcyC,CAAC,CAAClI,CAAhB,CAAnB;AACA,QAAMoI,UAAU,GAAG,KAAK3C,QAAL,CAAchB,GAAd,CAAnB;AAEA,QAAMW,GAAG,GAAG+C,UAAU,CAAChB,MAAX,CAAkBiB,UAAlB,CAAZ;AAGA;AACA;;AAEA,QAAMC,OAAO,GAAGC,eAAM,CAACC,KAAP,CAAa,IAAIxc,UAAJ,CAAeqZ,GAAf,EAAoBoD,MAAjC,CAAhB;;AAGA,QAAIC,cAAJ;;AAEA,SAAK,IAAI7mB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGymB,OAAO,CAAC1mB,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC,UAAM8mB,OAAO,GAAGL,OAAO,CAACzmB,CAAD,CAAvB;AACA,UAAI+mB,EAAE,GAAGD,OAAO,CAAC5c,QAAR,CAAiB,EAAjB,CAAT;;AACA,UAAI6c,EAAE,CAAChnB,MAAH,IAAa,CAAjB,EAAoB;AAClBgnB,QAAAA,EAAE,GAAG,MAAMA,EAAX;AACD;;AACDF,MAAAA,cAAc,GAAG,CAACE,EAAD,EAAKxB,MAAL,CAAYsB,cAAZ,CAAjB;AACD;;AACD,QAAMG,mBAAmB,GAAGH,cAAc,CAACva,IAAf,CAAoB,EAApB,CAA5B;;AAEA,QAAM2a,yBAAyB,GAAGle,gBAAS,CAACmV,IAAV,CAChC,OAAO8I,mBADyB,CAAlC;;AAIA,QAAME,MAAM,GAAGD,yBAAyB,CAACzI,GAA1B,CAA8BuB,MAAM,CAACoH,QAArC,CAAf;;AAEA,WAAOD,MAAP;AACD,GA9EH;;AAAA,kBAgFSE,CAhFT,GAgFE;AACE,WAAOlH,KAAK,CAACG,QAAN,EAAP;AACD,GAlFH;;AAAA,kBAoFSgH,IApFT,GAoFE,cAAYvJ,GAAZ,EAA4Blb,GAA5B,EAAqCwkB,CAArC;AACE;AAEA,QAAME,OAAO,GAAG,IAAInJ,EAAJ,CAAOvb,GAAG,CAACwb,CAAX,EAAcxb,GAAG,CAAC2b,CAAlB,CAAhB;AACA,QAAMuH,CAAC,GAAGsB,CAAC,CAACxI,GAAF,CAAM0I,OAAO,CAAClJ,CAAd,CAAV;AAGA;;AAEA,QAAM8G,CAAC,GAAG,KAAKkB,eAAL,CAAqBtI,GAArB,CAAV;;AAGA,QAAMyJ,CAAC,GAAG,KAAKlB,kBAAL,CAAwBzjB,GAAxB,EAA6BsiB,CAA7B,CAAV;;AAGA,QAAMsC,MAAM,GAAGze,gBAAS,CAACmV,IAAV,CAAeqJ,CAAC,CAACrd,QAAF,EAAf,CAAf;AAEA,QAAMwb,CAAC,GAAG0B,CAAC,CAACxI,GAAF,CAAM4I,MAAN,CAAV;AAGA;;AAEA,QAAMvF,CAAC,GAAG,KAAKwF,WAAL,CAAiB/B,CAAjB,EAAoBI,CAApB,EAAuBZ,CAAvB,CAAV;AAEA;;AAEA,QAAMwC,GAAG,GAAGzF,CAAZ;AACA,QAAM0F,OAAO,GAAG/kB,GAAG,CAACwb,CAAJ,CAAMQ,GAAN,CAAU8I,GAAV,CAAhB;AACA,QAAMlD,IAAI,GAAG+C,CAAC,CAAC9I,GAAF,CAAMkJ,OAAN,CAAb;AACA,QAAMC,CAAC,GAAGpD,IAAI,CAAChG,GAAL,CAASuB,MAAM,CAACC,QAAhB,CAAV;;AAIA,QAAM6H,eAAe,GAAG,IAAIpC,SAAJ,CAAcC,CAAd,EAAiB,IAAIvH,EAAJ,CAAOyJ,CAAP,CAAjB,CAAxB;;AAGA,QAAME,aAAa,GAAG,IAAIjC,aAAJ,CAAkBC,CAAlB,EAAqB+B,eAArB,EAAsC/J,GAAtC,CAAtB;;AAGA,WAAOgK,aAAP;AACD,GA5HH;;AAAA,kBA8HSC,SA9HT,GA8HE,mBAAiBvH,KAAjB;AACE;AACA,WAAO,CAACA,KAAK,CAACL,CAAN,CAAQ/B,CAAT,EAAYoC,KAAK,CAACJ,CAAN,CAAQhC,CAApB,CAAP;AACD,GAjIH;;AAAA,kBAmISqJ,WAnIT,GAmIE,qBAAmB/B,CAAnB,EAA6BI,CAA7B,EAAuCZ,CAAvC;AACE,QAAI8C,QAAJ;AACAA,IAAAA,QAAQ,GAAG,KAAKD,SAAL,CAAerC,CAAf,EAAkBH,MAAlB,CAAyB,KAAKwC,SAAL,CAAejC,CAAf,CAAzB,EAA4CP,MAA5C,CAAmD,CAACL,CAAD,CAAnD,CAAX;;AAEA,QAAML,MAAM,GAAG,IAAI7C,cAAJ,CACb/D,KAAK,CAACK,kBADO,EAEb,CAFa,EAGb,CAHa,EAIb,EAJa,EAKb,UALa,EAMbvV,gBAAS,CAACmV,IAAV,CAAe,CAAf,CANa,EAOb,IAPa,EAQb,IARa,EASb,GATa,CAAf;AAWA,QAAM2B,MAAM,GAAG4C,WAAW,CAAC4C,QAAZ,CAAqB2C,QAArB,EAA+BnD,MAA/B,CAAf;AACA,WAAOhF,MAAP;AACD,GApJH;;AAAA;AAAA;AAuJA,SAAgBoG,QAAQgC;AACtB,MAAI3c,GAAG,GAAG4c,MAAM,CAACD,EAAD,CAAN,CAAW/d,QAAX,CAAoB,EAApB,CAAV;;AACA,MAAIoB,GAAG,CAACvL,MAAJ,GAAa,CAAjB,EAAoB;AAClBuL,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD;;AACD,MAAM6c,GAAG,GAAG7c,GAAG,CAACvL,MAAJ,GAAa,CAAzB;;AAGA,MAAMqoB,EAAE,GAAG,IAAIje,UAAJ,CAAege,GAAf,CAAX;AACA,MAAInoB,CAAC,GAAG,CAAR;AACA,MAAImkB,CAAC,GAAG,CAAR;;AACA,SAAOnkB,CAAC,GAAGmoB,GAAX,EAAgB;AACdC,IAAAA,EAAE,CAACpoB,CAAD,CAAF,GAAQ+P,QAAQ,CAACzE,GAAG,CAACJ,KAAJ,CAAUiZ,CAAV,EAAaA,CAAC,GAAG,CAAjB,CAAD,EAAsB,EAAtB,CAAhB;AACAnkB,IAAAA,CAAC,IAAI,CAAL;AACAmkB,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAO3W,KAAK,CAAC0Q,IAAN,CAAWkK,EAAX,CAAP;AACD;AAED,SAAgBC,uBAAuBJ,IAAYnF;AACjD,MAAIxX,GAAG,GAAG4c,MAAM,CAACD,EAAD,CAAN,CAAW/d,QAAX,CAAoB,EAApB,CAAV;;AACA,MAAIoB,GAAG,CAACvL,MAAJ,GAAa,CAAjB,EAAoB;AAClBuL,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD;;AACD,MAAM6c,GAAG,GAAG7c,GAAG,CAACvL,MAAJ,GAAa,CAAzB;;AAIA,MAAMqoB,EAAE,GAAG,IAAIje,UAAJ,CAAege,GAAf,CAAX;AACA,MAAInoB,CAAC,GAAG,CAAR;AACA,MAAImkB,CAAC,GAAG,CAAR;;AACA,SAAOnkB,CAAC,GAAGmoB,GAAX,EAAgB;AACdC,IAAAA,EAAE,CAACpoB,CAAD,CAAF,GAAQ+P,QAAQ,CAACzE,GAAG,CAACJ,KAAJ,CAAUiZ,CAAV,EAAaA,CAAC,GAAG,CAAjB,CAAD,EAAsB,EAAtB,CAAhB;AACAnkB,IAAAA,CAAC,IAAI,CAAL;AACAmkB,IAAAA,CAAC,IAAI,CAAL;AACD;;AAED,MAAI6B,eAAe,GAAGxY,KAAK,CAAC0Q,IAAN,CAAWkK,EAAX,CAAtB;AAEA,MAAMlC,IAAI,GAAGpD,YAAY,GAAGkD,eAAe,CAACjmB,MAA5C;;AAEA,MAAImmB,IAAI,GAAG,CAAX,EAAc;AACZ,SAAK,IAAIlmB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGkmB,IAApB,EAA0BlmB,EAAC,EAA3B,EAA+B;AAC7BgmB,MAAAA,eAAe,GAAG,CAAC,CAAD,EAAIT,MAAJ,CAAWS,eAAX,CAAlB;AACD;AACF,GAJD,MAIO;AACLA,IAAAA,eAAe,GAAGA,eAAe,CAAC9a,KAAhB,CAAsB,CAAtB,EAAyB4X,YAAzB,CAAlB;AACD;;AAED,SAAOkD,eAAP;AACD;AAED,SAgBgBsC,iBAAiBC;AAC/B,MAAIC,QAAJ;AACAA,EAAAA,QAAQ,GAAG,EAAX;;AACA,OAAK,IAAIxoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuoB,KAAK,CAACxoB,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,QAAMyN,IAAI,GAAG8a,KAAK,CAACvoB,CAAD,CAAlB;AACA,QAAI+mB,EAAE,GAAGtZ,IAAI,CAACvD,QAAL,CAAc,EAAd,CAAT;;AACA,QAAI6c,EAAE,CAAChnB,MAAH,IAAa,CAAjB,EAAoB;AAClBgnB,MAAAA,EAAE,GAAG,MAAMA,EAAX;AACD,KALoC;;;AAOrCyB,IAAAA,QAAQ,CAACxE,IAAT,CAAc+C,EAAd;AACD;;AACD,MAAM0B,cAAc,GAAGD,QAAQ,CAAClc,IAAT,CAAc,EAAd,CAAvB;AACA,SAAOmc,cAAP;AACD;;ICvSYC,OAAb;AAAA;;AAAA,UAESC,SAFT,GAEE,mBAAiBC,EAAjB,EAAgCC,EAAhC;AACE,QAAMC,MAAM,GAAGlF,eAAe,CAACC,QAAhB,CAAyBgF,EAAzB,EAA6B1C,OAA7B,EAAf;;AAEA,QAAIuC,OAAO,CAACvW,EAAR,CAAWyW,EAAX,EAAe7f,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAAf,CAAJ,EAAyC;AACvC;AACA4K,MAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAY,IAAxB;AACD;;AACD,QAAMC,MAAM,GAAGT,gBAAgB,CAACQ,MAAD,CAA/B;;AAEA,WAAOC,MAAP;AACD,GAZH;;AAAA,UAcS5W,EAdT,GAcE,YAAUtF,CAAV,EAAwBC,CAAxB;AACE,QAAMkc,IAAI,GAAG/K,KAAK,CAACK,kBAAN,CAAyBtT,GAAzB,CAA6BjC,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAA7B,CAAb;AACA,QAAMsB,CAAC,GAAGvB,KAAK,CAACK,kBAAhB;AACA,QAAI2K,EAAJ;AACA,QAAIC,EAAJ;;AACA,QAAIrc,CAAC,CAACuK,EAAF,CAAK4R,IAAL,CAAJ,EAAgB;AACdC,MAAAA,EAAE,GAAGpc,CAAC,CAACgS,GAAF,CAAMW,CAAN,CAAL;AACD,KAFD,MAEO;AACLyJ,MAAAA,EAAE,GAAGpc,CAAL;AACD;;AACD,QAAIC,CAAC,CAACsK,EAAF,CAAK4R,IAAL,CAAJ,EAAgB;AACdE,MAAAA,EAAE,GAAGpc,CAAC,CAAC+R,GAAF,CAAMW,CAAN,CAAL;AACD,KAFD,MAEO;AACL0J,MAAAA,EAAE,GAAGpc,CAAL;AACD;;;AAED,WAAOmc,EAAE,CAAC9W,EAAH,CAAM+W,EAAN,CAAP;AACD,GA/BH;;AAAA,UAiCS9R,EAjCT,GAiCE,YAAUvK,CAAV,EAAwBC,CAAxB;AACE,QAAMkc,IAAI,GAAG/K,KAAK,CAACK,kBAAN,CAAyBtT,GAAzB,CAA6BjC,gBAAS,CAACmV,IAAV,CAAe,GAAf,CAA7B,CAAb;AACA,QAAMsB,CAAC,GAAGvB,KAAK,CAACK,kBAAhB;AACA,QAAI2K,EAAJ;AACA,QAAIC,EAAJ;;AACA,QAAIrc,CAAC,CAACuK,EAAF,CAAK4R,IAAL,CAAJ,EAAgB;AACdC,MAAAA,EAAE,GAAGpc,CAAC,CAACgS,GAAF,CAAMW,CAAN,CAAL;AACD,KAFD,MAEO;AACLyJ,MAAAA,EAAE,GAAGpc,CAAL;AACD;;AACD,QAAIC,CAAC,CAACsK,EAAF,CAAK4R,IAAL,CAAJ,EAAgB;AACdE,MAAAA,EAAE,GAAGpc,CAAC,CAAC+R,GAAF,CAAMW,CAAN,CAAL;AACD,KAFD,MAEO;AACL0J,MAAAA,EAAE,GAAGpc,CAAL;AACD;;;AAED,WAAOmc,EAAE,CAAC7R,EAAH,CAAM8R,EAAN,CAAP;AACD,GAlDH;;AAAA;AAAA;;ICCaC,SAAb;AAAA;;AAAA,YAES9B,IAFT,GAEE,cAAY+B,UAAZ,EAA4CC,IAA5C;AACE,QAAMC,MAAM,GAAGvgB,gBAAS,CAACmV,IAAV,CAAekL,UAAf,CAAf;AACA,QAAMtL,GAAG,GAAG/U,gBAAS,CAACmV,IAAV,CAAemL,IAAf,CAAZ;AAGA;;AACA,QAAM/B,OAAO,GAAG,IAAInJ,EAAJ,CAAOmL,MAAP,CAAhB;AACA,QAAMlC,CAAC,GAAGxD,eAAe,CAACwD,CAAhB,EAAV;AACA,QAAMmC,MAAM,GAAG3F,eAAe,CAACyD,IAAhB,CAAqBvJ,GAArB,EAA0BwJ,OAA1B,EAAmCF,CAAnC,CAAf;;AAEA,QAAMjH,CAAC,GAAGgJ,SAAS,CAACK,SAAV,CAAoBD,MAAM,CAACxD,GAAP,CAAWL,CAAX,CAAavF,CAAb,CAAe/B,CAAf,CAAiBqL,WAAjB,GAA+Bve,KAA/B,CAAqC,CAArC,CAApB,CAAV;AACA,QAAMkV,CAAC,GAAG+I,SAAS,CAACK,SAAV,CAAoBD,MAAM,CAACxD,GAAP,CAAWL,CAAX,CAAatF,CAAb,CAAehC,CAAf,CAAiBqL,WAAjB,GAA+Bve,KAA/B,CAAqC,CAArC,CAApB,CAAV;AACA,QAAMya,CAAC,GAAGwD,SAAS,CAACK,SAAV,CAAoBD,MAAM,CAACxD,GAAP,CAAWJ,CAAX,CAAavH,CAAb,CAAeqL,WAAf,GAA6Bve,KAA7B,CAAmC,CAAnC,CAApB,CAAV;AACA;AAEA,WAAO;AACL,YAAMqe,MAAM,CAACxD,GAAP,CAAWL,CAAX,CAAavF,CAAb,CAAe/B,CAAf,CAAiBlU,QAAjB,EADD;AAEL,YAAMqf,MAAM,CAACxD,GAAP,CAAWL,CAAX,CAAatF,CAAb,CAAehC,CAAf,CAAiBlU,QAAjB,EAFD;AAGL,WAAKqf,MAAM,CAACxD,GAAP,CAAWJ,CAAX,CAAavH,CAAb,CAAelU,QAAf;AAHA,KAAP;AAKD,GAtBH;;AAAA,YAwBSsf,SAxBT,GAwBE,mBAAiBE,SAAjB;AACE,QAAM5G,YAAY,GAAG,KAAK,CAA1B;AACA,QAAMoD,IAAI,GAAGpD,YAAY,GAAG4G,SAAS,CAAC3pB,MAAtC;;AACA,QAAImmB,IAAI,GAAG,CAAX,EAAc;AACZ,WAAK,IAAIlmB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkmB,IAApB,EAA0BlmB,CAAC,EAA3B,EAA+B;AAC7B0pB,QAAAA,SAAS,GAAG,MAAOA,SAAnB;AACD;AACF,KAJD,MAIO;AACLA,MAAAA,SAAS,GAAGA,SAAS,CAACxe,KAAV,CAAgB,CAAhB,EAAmB4X,YAAnB,CAAZ;AACD;;AACD,WAAO4G,SAAP;AACD,GAnCH;;AAAA,YAqCSC,eArCT,GAqCE,yBAAuBvH,IAAvB;AACE,QAAIwH,MAAM,GAAG7gB,gBAAS,CAACmV,IAAV,CAAe,CAAf,CAAb;;AACA,SAAK,IAAIle,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoiB,IAAI,CAACriB,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,UAAMyN,IAAI,GAAG2U,IAAI,CAACpiB,CAAD,CAAjB;AACA,UAAMyjB,UAAU,GAAG1a,gBAAS,CAACmV,IAAV,CAAezQ,IAAf,CAAnB;AACA,UAAMiW,GAAG,GAAG3a,gBAAS,CAACmV,IAAV,CAAe,KAAf,EAAsBnK,GAAtB,CAA0BhL,gBAAS,CAACmV,IAAV,CAAele,CAAf,CAA1B,CAAZ;AACA4pB,MAAAA,MAAM,GAAGA,MAAM,CAACnL,GAAP,CAAWgF,UAAU,CAAC7E,GAAX,CAAe8E,GAAf,CAAX,CAAT;AACD;;;AAED,QAAMmG,SAAS,GAAGD,MAAM,CAACpL,GAAP,CAAWuB,MAAM,CAACoH,QAAlB,CAAlB;;AAGA,QAAM2C,aAAa,GAAG/gB,gBAAS,CAACmV,IAAV,CAAe2L,SAAS,CAAC3f,QAAV,EAAf,CAAtB;;AAGA,QAAMkd,CAAC,GAAGxD,eAAe,CAACwD,CAAhB,EAAV;;AAGA,QAAM2C,SAAS,GAAG3C,CAAC,CAACxI,GAAF,CAAMkL,aAAN,CAAlB;;AAGA,QAAME,OAAO,GAAG;AACd,oBAAcD,SAAS,CAAC5J,CAAV,CAAY/B,CAAZ,CAAclU,QAAd,EADA;AAEd,oBAAc6f,SAAS,CAAC3J,CAAV,CAAYhC,CAAZ,CAAclU,QAAd,EAFA;AAGd,mBAAa2f,SAAS,CAAC3f,QAAV;AAHC,KAAhB;AAMA,WAAO8f,OAAP;AACD,GAjEH;;AAAA,YAmESC,IAnET,GAmEE,cAAYC,UAAZ,EAAgCC,UAAhC;AACE,QAAMvB,EAAE,GAAG7f,gBAAS,CAACmV,IAAV,CAAegM,UAAf,CAAX;AACA,QAAMrB,EAAE,GAAG9f,gBAAS,CAACmV,IAAV,CAAeiM,UAAf,CAAX;AACA,QAAMC,OAAO,GAAG1B,OAAO,CAACC,SAAR,CAAkBC,EAAlB,EAAsBC,EAAtB,CAAhB;AACA,WAAOuB,OAAP;AACD,GAxEH;;AAAA;AAAA;;ACuCA,WAAYC;AACVA,EAAAA,qDAAA,kBAAA;AACAA,EAAAA,yDAAA,sBAAA;AACAA,EAAAA,gDAAA,aAAA;AACD,CAJD,EAAYA,uBAAe,KAAfA,uBAAe,KAAA,CAA3B;;AAMA,IAAMC,eAAe,GAAG,KAAxB;AAEA,IAAMhM,kBAAkB,gBAAG,IAAIoB,SAAJ,CACzB,+EADyB,EAEzB,EAFyB,CAA3B;AAeA,SAAgB6K,mBAAmB1K;AAKjC,MAAI,CAACA,MAAM,CAAC9gB,KAAZ,EAAmB;AACjB;AACA,QAAMyrB,QAAQ,GAAG9gB,cAAA,CAAe4G,QAAA,CAAYuP,MAAM,CAACkG,GAAnB,CAAf,CAAjB,CAFiB;;AAIjB,QAAM3D,IAAI,GAAGrZ,gBAAS,CAACmV,IAAV,CAAe,OAAOsM,QAAQ,CAACtgB,QAAT,CAAkB,KAAlB,CAAtB,CAAb,CAJiB;;AAMjB,QAAM8b,eAAe,GAAGqC,sBAAsB,CAACjG,IAAI,CAAClY,QAAL,EAAD,EAAkB,EAAlB,CAA9C,CANiB;;AAQjB,QAAM8f,OAAO,GAAGb,SAAS,CAACQ,eAAV,CAA0B3D,eAA1B,CAAhB,CARiB;;AAWjB,QAAMyE,UAAU,GAAGna,cAAA,CACjBA,KAAA,CAASA,KAAA,CAAS0Z,OAAO,CAACE,UAAjB,CAAT,CADiB,CAAnB;AAGA,QAAMQ,UAAU,GAAGpa,cAAA,CACjBA,KAAA,CAASA,KAAA,CAAS0Z,OAAO,CAACG,UAAjB,CAAT,CADiB,CAAnB;AAGA,QAAMQ,EAAE,GAAG3gB,KAAK,CAACS,KAAK,CAACuf,OAAO,CAACH,SAAT,CAAN,CAAhB;AAEA,WAAO;AACLG,MAAAA,OAAO,EAAPA,OADK;AAELS,MAAAA,UAAU,EAAVA,UAFK;AAGLC,MAAAA,UAAU,EAAVA,UAHK;AAILC,MAAAA,EAAE,EAAFA,EAJK;AAKLC,MAAAA,kBAAkB,EAAE/K,MAAM,CAAC+K;AALtB,KAAP;AAOD,GA1BD,MA0BO;AACLhsB,IAAAA,OAAO,CAACkK,GAAR,CAAY,oCAAZ,EAAkD+W,MAAM,CAAC9gB,KAAzD;AACA,UAAMuK,KAAK,CAACuW,MAAM,CAAC9gB,KAAR,CAAX;AACD;AACF;AACD,SAAsB4qB,eAAtB;AAAA;AAAA;;;oEAAO,uBAWLI,SAXK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHc,YAAAA,IAFG,QAEHA,IAFG,EAGHhd,OAHG,QAGHA,OAHG,EAIHid,UAJG,QAIHA,UAJG,EAKHC,OALG,QAKHA,OALG,EAMHC,OANG,QAMHA,OANG,EAOHC,SAPG,QAOHA,SAPG,EAQHL,kBARG,QAQHA,kBARG,EASHM,QATG,QASHA,QATG;;AAAA,gBAWLnB,SAXK;AAWLA,cAAAA,SAXK,GAW6CpqB,SAX7C;AAAA;;AAAA;AAAA,mBAyBqBwrB,YAAY,CACpCN,IADoC,EAEpChd,OAFoC,EAGpC,EAHoC,EAIpCkd,OAJoC,EAKpCD,UALoC,EAMpCE,OANoC,EAOpCC,SAPoC,EAQpCL,kBARoC,EASpCM,QAAQ,KAAKvrB,SAAb,GAAyBoI,QAAQ,CAACa,GAAT,EAAzB,GAA0CsiB,QATN,CAzBjC;;AAAA;AAyBCrL,YAAAA,MAzBD;AAAA;AAAA,kCAsCD0K,kBAAkB,CAAC1K,MAAD,CAtCjB,EAqCGmK,OArCH,uBAqCGA,OArCH,EAqCYS,UArCZ,uBAqCYA,UArCZ,EAqCwBC,UArCxB,uBAqCwBA,UArCxB,EAqCoCC,EArCpC,uBAqCoCA,EArCpC,EAqCwCC,mBArCxC,uBAqCwCA,kBArCxC;;AAAA,kBAyCDb,SAAS,IACTlK,MAAM,CAACkG,GAAP,CAAWhmB,MAAX,GAAoB,CADpB,IAEAgqB,SAAS,CAAC5J,CAFV,IAGA4J,SAAS,CAAC3J,CAHV,KAIC,CAAC9P,KAAA,CAASma,UAAT,EAAqB5W,EAArB,CAAwBvD,KAAA,CAASyZ,SAAS,CAAC5J,CAAnB,CAAxB,CAAD,IACC,CAAC7P,KAAA,CAASoa,UAAT,EAAqB7W,EAArB,CAAwBvD,KAAA,CAASyZ,SAAS,CAAC3J,CAAnB,CAAxB,CALH,CAzCC;AAAA;AAAA;AAAA;;AAgDGxV,YAAAA,KAhDH,GAgDWiV,MAAM,CAACkG,GAAP,CAAW1Z,KAAX,CAAiB,EAAjB,CAhDX;AAiDG+e,YAAAA,GAjDH,GAiDSxgB,KAAK,CAACygB,MAAN,CAAaxL,MAAM,CAACkG,GAAP,CAAWhmB,MAAX,GAAoB,CAAjC,EAAoC,CAApC,EAAuCuM,IAAvC,CAA4C,EAA5C,CAjDT;AAkDD8e,YAAAA,GAAG,GAAGA,GAAG,IAAI,IAAP,GAAc,IAAd,GAAqB,IAA3B;AACAvL,YAAAA,MAAM,CAACkG,GAAP,GAAanb,KAAK,CAAC2a,MAAN,CAAa6F,GAAG,CAAC/e,KAAJ,CAAU,EAAV,CAAb,EAA4BC,IAA5B,CAAiC,EAAjC,CAAb;AACIgf,YAAAA,QApDH,GAoDcf,kBAAkB,CAAC1K,MAAD,CApDhC;;AAsDDjhB,YAAAA,OAAO,CAACkK,GAAR,CACE,iBADF,EAEE,wBAFF,EAGE,GAHF,EAIE2hB,UAJF,EAKE,GALF,EAMEC,UANF,EAOE,uBAPF,EAQEX,SARF,EASE,sBATF,EAUE,wBAVF,EAWE,GAXF,EAYEqB,GAZF,EAaEE,QAAQ,CAACb,UAbX,EAcE,GAdF,EAeEa,QAAQ,CAACZ,UAfX;AAtDC,6CAuEM;AACLV,cAAAA,OAAO,EAAEsB,QAAQ,CAACtB,OADb;AAELS,cAAAA,UAAU,EAAEa,QAAQ,CAACb,UAFhB;AAGLC,cAAAA,UAAU,EAAEY,QAAQ,CAACZ,UAHhB;AAILC,cAAAA,EAAE,EAAEW,QAAQ,CAACX,EAJR;AAKLC,cAAAA,kBAAkB,EAAlBA;AALK,aAvEN;;AAAA;AAAA,6CA+EM;AAAEZ,cAAAA,OAAO,EAAPA,OAAF;AAAWS,cAAAA,UAAU,EAAVA,UAAX;AAAuBC,cAAAA,UAAU,EAAVA,UAAvB;AAAmCC,cAAAA,EAAE,EAAFA,EAAnC;AAAuCC,cAAAA,kBAAkB,EAAlBA;AAAvC,aA/EN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAkFGthB,KAAK,aAlFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAsFP,IAAMiiB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAC1S,OAAD;AAC1B,MAAM2S,MAAM,GAAGhe,KAAK,CAAC0Q,IAAN,CAAWrF,OAAX,CAAf;AACA2S,EAAAA,MAAM,CAAC5e,IAAP,CAAY,UAAUC,CAAV,EAAaC,CAAb;AACV,WAAOD,CAAC,CAAC,CAAD,CAAD,CAAKE,aAAL,CAAmBD,CAAC,CAAC,CAAD,CAApB,CAAP;AACD,GAFD;AAGA,MAAM2e,UAAU,GAAG,IAAIhf,GAAJ,CAAQ+e,MAAM,CAACE,GAAP,CAAW,UAAC1rB,CAAD;AAAA,WAAO,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAAP;AAAA,GAAX,CAAR,CAAnB;AAEA,MAAM2rB,SAAS,GAAkB,EAAjC;AAEA,MAAMjpB,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYD,MAAM,CAACmpB,WAAP,CAAmBH,UAAnB,CAAZ,CAAb;;AAEA,MAAI/oB,IAAJ,EAAU;AACRA,IAAAA,IAAI,CAACC,OAAL,CAAa,UAACC,GAAD;AACX,UAAMgI,KAAK,GAAGiO,OAAO,CAACgT,GAAR,CAAYjpB,GAAZ,CAAd;AACA,UAAIgI,KAAK,KAAKjL,SAAV,IAAuBiL,KAAK,KAAK,EAArC,EACE+gB,SAAS,CAAC3H,IAAV,CAAkBphB,GAAlB,SAAyBgI,KAAzB;AACH,KAJD;AAKD;;;AAGD,SAAOkhB,kBAAkB,CAACH,SAAS,CAACrf,IAAV,CAAe,GAAf,CAAD,CAAlB,CAAwCJ,OAAxC,CAAgD,MAAhD,EAAwD,OAAxD,CAAP;AACD,CArBD;;;AAwBA,IAAM6f,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC3C,UAAD,EAAiCC,IAAjC;AACxB,MAAM2C,SAAS,GAAG7C,SAAS,CAAC9B,IAAV,CAAe+B,UAAf,EAA2BC,IAA3B,CAAlB;AAEA,MAAI4C,eAAe,GAAG3b,cAAA,CAAkBA,KAAA,CAASA,IAAA,CAAQ0b,SAAS,CAACE,EAAlB,CAAT,CAAlB,CAAtB;;AACA,MAAID,eAAe,CAAClsB,MAAhB,GAAyB,EAA7B,EAAiC;AAC/B,QAAMosB,OAAO,GAAG,IAAI3e,KAAJ,CAAU,KAAKye,eAAe,CAAClsB,MAA/B,EAAuCqsB,IAAvC,CAA4C,CAA5C,CAAhB;AACAH,IAAAA,eAAe,GAAGE,OAAO,CAAC7f,IAAR,CAAa,EAAb,EAAiBpC,QAAjB,KAA8B+hB,eAAhD;AACD;;AAED,MAAII,eAAe,GAAG/b,cAAA,CAAkBA,KAAA,CAASA,IAAA,CAAQ0b,SAAS,CAACM,EAAlB,CAAT,CAAlB,CAAtB;;AACA,MAAID,eAAe,CAACtsB,MAAhB,GAAyB,EAA7B,EAAiC;AAC/B,QAAMosB,QAAO,GAAG,IAAI3e,KAAJ,CAAU,KAAK6e,eAAe,CAACtsB,MAA/B,EAAuCqsB,IAAvC,CAA4C,CAA5C,CAAhB;;AACAC,IAAAA,eAAe,GAAGF,QAAO,CAAC7f,IAAR,CAAa,EAAb,EAAiBpC,QAAjB,KAA8BmiB,eAAhD;AACD;;AAED,MAAIE,cAAc,GAAGjc,cAAA,CAAkBA,KAAA,CAASA,IAAA,CAAQ0b,SAAS,CAACrG,CAAlB,CAAT,CAAlB,CAArB;;AACA,MAAI4G,cAAc,CAACxsB,MAAf,GAAwB,EAA5B,EAAgC;AAC9B,QAAMosB,SAAO,GAAG,IAAI3e,KAAJ,CAAU,KAAK+e,cAAc,CAACxsB,MAA9B,EAAsCqsB,IAAtC,CAA2C,CAA3C,CAAhB;;AACAG,IAAAA,cAAc,GAAGJ,SAAO,CAAC7f,IAAR,CAAa,EAAb,EAAiBpC,QAAjB,KAA8BqiB,cAA/C;AACD;;AAED,MAAM1M,MAAM,GAAG,OAAOoM,eAAP,GAAyBI,eAAzB,GAA2CE,cAA1D;;AAEA,SAAO1M,MAAP;AACD,CAxBD;;AA0BA,IAAM2M,aAAa,GAAG,SAAhBA,aAAgB,CAAC3T,OAAD;AACpB,MAAM4T,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAelqB,MAAM,CAACmpB,WAAP,CAAmB/S,OAAnB,CAAf,CAAhB;AACA,SAAOiT,kBAAkB,CAACW,OAAD,CAAlB,CAA4BvgB,OAA5B,CAAoC,SAApC,EAA+C0gB,MAA/C,CAAP;AACD,CAHD;;AAKA,SAAgBC,YACdC,QACAC,UACAC,SACAC,aACA7D;AAEA,MAAIvE,MAAM,GAAGllB,SAAb;AAEAmtB,EAAAA,MAAM,GAAGA,MAAM,CAACI,WAAP,GAAqBxb,IAArB,EAAT;;AAEA,MAAIob,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,QAAnC,EAA6C;AAC3CjI,IAAAA,MAAM,GAAG0G,mBAAmB,CAAC0B,WAAD,CAA5B;AACD,GAFD,MAEO,IAAIH,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,KAApC,EAA2C;AAChDjI,IAAAA,MAAM,GAAG2H,aAAa,CAACS,WAAD,CAAtB;AACD,GAFM,MAEA;AACL,UAAM,IAAI3jB,KAAJ,CAAawjB,MAAb,4BAAN;AACD;;AAED,MAAMK,GAAG,GAAGrB,kBAAkB,MAAIiB,QAAJ,GAAeC,OAAf,CAA9B;AAEA,MAAM/tB,OAAO,GAAM6tB,MAAN,SAAgBK,GAAhB,SAAuBtI,MAApC;;AAEAzU,EAAAA,KAAK,CAAC,aAAD,EAAgBnR,OAAhB,CAAL;;AACA,MAAImuB,KAAK,GAAQ,IAAI1N,SAAJ,CAAe2N,MAAM,CAACpuB,OAAD,CAAN,CAAgBiL,QAAhB,EAAf,EAA2C,EAA3C,CAAjB;;AAEA,MAAImf,IAAI,GAAG+D,KAAK,CAAC5O,GAAN,CAAUF,kBAAV,EAA8BgP,QAA9B,CAAuC,CAAvC,EAA0C,CAA1C,EAA6C,EAA7C,CAAX;;;AAEAld,EAAAA,KAAK,CAAC,kBAAD,EAAqBnR,OAArB,EAA8B,OAA9B,EAAuCmuB,KAAvC,EAA8C,MAA9C,EAAsD/D,IAAtD,CAAL;AAEA,MAAMtD,GAAG,GAAGgG,iBAAiB,CAAC3C,UAAD,EAAaC,IAAb,CAA7B;AAEA,SAAOtD,GAAP;AACD;AAED,SAAgBwH,eACdlE,MACAhgB;AAEA,SAAO,IAAP;AACD;AACD,IAAamkB,uBAAuB,GAAG,SAA1BA,uBAA0B,CACrClI,MADqC,EAErC8D,UAFqC;AAIrC,MAAM5J,CAAC,GAAGvB,KAAK,CAACK,kBAAhB;AACA,MAAMmP,cAAc,GAAG,IAAIzL,cAAJ,CACrBxC,CADqB,EAErB8F,MAAM,CAACvlB,MAAP,GAAgB,CAFK,EAGrB,CAHqB,EAIrB,EAJqB,EAKrB,UALqB,EAMrBgJ,gBAAS,CAACmV,IAAV,CAAe,CAAf,CANqB,EAOrB,IAPqB,EAQrB,IARqB,EASrB,GATqB,CAAvB;AAWA,MAAIwP,YAAJ;AACAA,EAAAA,YAAY,GAAG,EAAf;;AACA,OAAK,IAAI1tB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,MAAM,CAACvlB,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,QAAMqJ,KAAK,GAAGic,MAAM,CAACtlB,CAAD,CAApB;AACA0tB,IAAAA,YAAY,CAAC1J,IAAb,CAAkBjb,gBAAS,CAACmV,IAAV,CAAe7U,KAAf,CAAlB;AACD;;AACD,MAAMggB,IAAI,GAAG5G,WAAW,CAAC4C,QAAZ,CAAqBqI,YAArB,EAAmCD,cAAnC,CAAb;;AAEA,SAAO;AACLpE,IAAAA,IAAI,EAAJA,IADK;AAELxJ,IAAAA,MAAM,EAAEkM,iBAAiB,CAAC3C,UAAD,EAAaC,IAAb;AAFpB,GAAP;AAID,CA5BM;AA8BP;;;;;;;;;AAQA,SAAsBsE,UAAtB;AAAA;AAAA;;;4DAAO,kBACL9C,IADK,EAEL9oB,OAFK,EAGL+qB,MAHK,EAILjI,MAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMuB,IAAIzlB,OAAJ,CAAY,UAACC,OAAD;;;AACtC,uCAAAwrB,IAAI,CAAC+C,eAAL,2CAAsBC,SAAtB,CACE;AACEf,gBAAAA,MAAM,EAANA,MADF;AAEEjI,gBAAAA,MAAM,EAANA,MAFF;AAGE9iB,gBAAAA,OAAO,EAAPA;AAHF,eADF,EAME,UAAUzB,GAAV,EAAoBuf,MAApB;AACE,oBAAIvf,GAAJ,EAAS;AACPjB,kBAAAA,OAAO,CAAC;AAAEN,oBAAAA,KAAK,EAAE;AAAEE,sBAAAA,OAAO,EAAEqB,GAAG,CAACrB;AAAf;AAAT,mBAAD,CAAP;AACA;AACD;;AAED,oBAAI4gB,MAAM,CAAC9gB,KAAX,EAAkB;AAChBM,kBAAAA,OAAO,CAAC;AAAEN,oBAAAA,KAAK,EAAE;AAAEE,sBAAAA,OAAO,EAAE4gB,MAAM,CAAC9gB,KAAP,CAAaE;AAAxB;AAAT,mBAAD,CAAP;AACA;AACD;;AAEDI,gBAAAA,OAAO,CAAC;AAAEwgB,kBAAAA,MAAM,EAAEA,MAAM,CAACA;AAAjB,iBAAD,CAAP;AACD,eAlBH;AAoBD,aArB2B,CANvB;;AAAA;AAMC/gB,YAAAA,QAND;;AAAA,iBA6BDA,QAAQ,CAAC,QAAD,CA7BP;AAAA;AAAA;AAAA;;AAAA,8CA8BIA,QA9BJ;;AAAA;AAAA,kBAgCG,IAAIwK,KAAJ,CAAUxK,QAAQ,CAAC,OAAD,CAAR,CAAkB,SAAlB,CAAV,CAhCH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAoCP,SAAsBgvB,uBAAtB;AAAA;AAAA;;;4EAAO,kBACLjD,IADK,EAEL9oB,OAFK,EAGLgsB,SAHK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAMyBlD,IAAI,CAAC+C,eAN9B,qBAMyB,uBAAsBI,IAAtB,CAC1B,mBAD0B,EAE1B,CAACjsB,OAAD,EAAUgsB,SAAV,CAF0B,CANzB;;AAAA;AAMGjvB,YAAAA,QANH;AAAA,8CAWIA,QAXJ;;AAAA;AAAA;AAAA;AAAA,8CAaI;AAAEC,cAAAA,KAAK;AAAP,aAbJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAiBP,SAAsBkvB,WAAtB;AAAA;AAAA;;;gEAAO,kBACLpD,IADK,EAELkD,SAFK,EAGLlgB,OAHK,EAILI,IAJK,EAKL+c,OALK,EAMLC,SANK,EAOLiD,GAPK,EAQLpD,UARK,EASLF,kBATK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAOLsD,GAPK;AAOLA,cAAAA,GAPK,GAOC,EAPD;AAAA;;AAWCC,YAAAA,SAXD,GAWazB,IAAI,CAACC,SAAL,CAAeoB,SAAf,CAXb;AAYClJ,YAAAA,MAZD,GAYU,CAAChX,OAAD,EAAUsgB,SAAV,CAZV;AAAA,2BAkBGlgB,IAlBH;AAAA,8CAmBEoc,uBAAe,CAAC+D,aAnBlB,wBA+CE/D,uBAAe,CAACgE,iBA/ClB,yBA4EEhE,uBAAe,CAACiE,QA5ElB;AAAA;;AAAA;AAAA;AAAA,mBAoBgB,IAAIlvB,OAAJ,CAAY,UAACC,OAAD;AAC3BwrB,cAAAA,IAAI,CAAC+C,eAAL,CAAqBI,IAArB,CACE;AACElB,gBAAAA,MAAM,EAAE,sBADV;AAEEjI,gBAAAA,MAAM,EAANA,MAFF;AAGEhX,gBAAAA,OAAO,EAAPA;AAHF,eADF,EAME,UAAUvN,GAAV,EAAoBuf,MAApB;AACE,oBAAIvf,GAAJ,EAAS;AACPjB,kBAAAA,OAAO,CAAC;AAAEN,oBAAAA,KAAK,EAAE;AAAEE,sBAAAA,OAAO,EAAEqB,GAAG,CAACrB;AAAf;AAAT,mBAAD,CAAP;AACD,iBAFD,MAEO,IAAI4gB,MAAJ,YAAIA,MAAM,CAAE9gB,KAAZ,EAAmB;AACxBM,kBAAAA,OAAO,CAAC;AAAEN,oBAAAA,KAAK,EAAE;AAAEE,sBAAAA,OAAO,EAAE4gB,MAAM,CAAC9gB,KAAP,CAAaE;AAAxB;AAAT,mBAAD,CAAP;AACD,iBAFM,MAEA;AACLI,kBAAAA,OAAO,CAAC;AAAEwgB,oBAAAA,MAAM,EAAEA,MAAM,CAACA;AAAjB,mBAAD,CAAP;AACD;AACF,eAdH;AAgBD,aAjBgB,CApBhB;;AAAA;AAoBD/gB,YAAAA,QApBC;;AAAA,gBAuCIA,QAAQ,CAAC,QAAD,CAvCZ;AAAA;AAAA;AAAA;;AAAA,kBAwCO,IAAIwK,KAAJ,CAAUxK,QAAQ,CAAC,OAAD,CAAR,CAAkB,SAAlB,CAAV,CAxCP;;AAAA;AAAA,8CA2CM;AACLyvB,cAAAA,QAAQ,EAAEzvB,QAAQ,CAAC+gB;AADd,aA3CN;;AAAA;AAgDDwJ,YAAAA,IAAI,GAAGmF,sBAAA,CAAuBnH,IAAvB,CAA4B0G,SAA5B,CAAP;AACA1E,YAAAA,IAAI,GAAG/Y,KAAA,CAAS+Y,IAAT,CAAP,CAjDC;;AAAA,gBAqDIyB,UArDJ;AAAA;AAAA;AAAA;;AAAA,kBAsDOxhB,KAAK,CAAC,oBAAD,CAtDZ;;AAAA;AAAA;AAAA,mBAyDiB6hB,YAAY,CAC5BN,IAD4B,EAE5Bhd,OAF4B,EAG5BqgB,GAH4B,EAI5B7E,IAJ4B,EAK5ByB,UAL4B,EAM5BE,OAN4B,EAO5BJ,kBAAkB,GAAGA,kBAAkB,CAACK,SAAtB,GAAkCtrB,SAPxB,EAQ5BirB,kBAR4B,EAS5B7iB,QAAQ,CAACa,GAAT,EAT4B,CAzD7B;;AAAA;AAyDDojB,YAAAA,SAzDC;;AAAA,gCAqEGA,SArEH,aAqEG,WAAWjG,GArEd;AAAA;AAAA;AAAA;;AAAA,8CAsEQ;AACLwI,cAAAA,QAAQ,EAAEvC,SAAS,CAACjG,GADf;AAEL6E,cAAAA,kBAAkB,EAAEoB,SAAS,CAACpB;AAFzB,aAtER;;AAAA;AAAA,kBA2EK,IAAIthB,KAAJ,CAAU0iB,SAAS,CAACjtB,KAApB,CA3EL;;AAAA;AA6ED;AACAsqB,YAAAA,IAAI,GAAGmF,sBAAA,CAAuBnH,IAAvB,CAA4B0G,SAA5B,CAAP;AACA1E,YAAAA,IAAI,GAAG/Y,KAAA,CAAS+Y,IAAT,CAAP;AACAjZ,YAAAA,KAAK,CAAC,wBAAD,EAA2BiZ,IAA3B,CAAL;AAhFC;AAAA,mBAkFwByE,uBAAuB,CAC9CjD,IAD8C,EAE9Chd,OAF8C,EAG9CsgB,SAH8C,CAlF/C;;AAAA;AAkFDM,YAAAA,gBAlFC;;AAAA,iBAwFGA,gBAAgB,CAAC1vB,KAxFpB;AAAA;AAAA;AAAA;;AAAA,kBAyFOuK,KAAK,CAAC,oBAAD,CAzFZ;;AAAA;AAAA,8CA4FM;AACLilB,cAAAA,QAAQ,EAAEE;AADL,aA5FN;;AAAA;AAAA;;AAAA;AAAA,kBAkGCnlB,KAAK,CAAC,yCAAyC2E,IAA1C,CAlGN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAqGP,SAAgBygB,kBAAkBC;AAChC;AACA,SAAO,IAAI1kB,EAAJ,CAAOkf,SAAS,CAACc,IAAV,CAAe0E,EAAE,CAACxO,CAAlB,EAAqBwO,EAAE,CAACvO,CAAxB,CAAP,EAAmC,EAAnC,CAAP;AACD;AAED,SAAgBwO,iBAAiBD;AAC/B,MAAMzE,UAAU,GAAG5Z,cAAA,CAAkBA,KAAA,CAASA,KAAA,CAASqe,EAAE,CAACxO,CAAZ,CAAT,CAAlB,CAAnB;AACA,MAAMgK,UAAU,GAAG7Z,cAAA,CAAkBA,KAAA,CAASA,KAAA,CAASqe,EAAE,CAACvO,CAAZ,CAAT,CAAlB,CAAnB;;AAGA,SAAO,IAAInW,EAAJ,CAAOkf,SAAS,CAACc,IAAV,CAAeC,UAAf,EAA2BC,UAA3B,CAAP,EAA+C,EAA/C,CAAP;AACD;AAED,SAAgB0E,+BACd7vB,MACAgsB;AAEA,MAAM/rB,OAAO,GAAQ;AACnBgZ,IAAAA,KAAK,EAAEjZ,IAAI,CAACiZ,KADO;AAEnB6W,IAAAA,SAAS,EAAE9vB,IAAI,CAACisB,SAFG;AAGnB8D,IAAAA,UAAU,EAAE/vB,IAAI,CAACya,MAAL,CAAYrL,OAHL;AAInBqL,IAAAA,MAAM,EAAEza,IAAI,CAACya,MAAL,CAAYxI,MAJD;AAKnB8Y,IAAAA,SAAS,EAAEzZ,YAAA,CAAgBoe,iBAAiB,CAAC1vB,IAAI,CAAC+qB,SAAN,CAAjB,CAAkC7f,QAAlC,CAA2C,EAA3C,CAAhB,CALQ;AAMnB8kB,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB,UANE;AAOnBC,IAAAA,KAAK,EAAEjwB,IAAI,CAACiwB;AAPO,GAArB;AAUA,MAAMlB,SAAS,GAAoB;AACjCmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOLmhB,MAAAA,aAAa,EAAE,CACb;AAAEthB,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,IAAI,EAAE;AAAvB,OADa,EAEb;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OAFa,EAGb;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAHa,EAIb;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OAJa,EAKb;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OALa,EAMb;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OANa,EAOb;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,IAAI,EAAE;AAAvB,OAPa;AAPV,KAD0B;AAkBjCohB,IAAAA,WAAW,EAAE,eAlBoB;AAmBjCC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE,mBADA;AAENyhB,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAPA,OAHM;AAINwE,MAAAA,iBAAiB,EAAExwB,IAAI,CAACywB;AAJlB,KAnByB;AAyBjCxwB,IAAAA,OAAO,EAAEA;AAzBwB,GAAnC;AA4BA,SAAO8uB,SAAP;AACD;AAED,SAAsB2B,kCAAtB;AAAA;AAAA;;;uFAAO,kBACL7E,IADK,EAEL8E,UAFK,EAGL3E,OAHK,EAILF,UAJK,EAKLG,SALK,EAMLL,kBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCmD,YAAAA,SARD,GAQac,8BAA8B,CAACc,UAAD,EAAa3E,OAAb,CAR3C;;AAAA;AAAA,mBAUgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B4B,UAAU,CAAC1X,KAHmB,EAI9BoS,uBAAe,CAAC+D,aAJc,EAK9BpD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,8CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsBgQ,qCAAtB;AAAA;AAAA;;;0FAAO,kBACLhF,IADK,EAEL8E,UAFK,EAGL3E,OAHK,EAILF,UAJK,EAKLG,SALK,EAMLL,kBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCmD,YAAAA,SARD,GAQkBc,8BAA8B,CAACc,UAAD,EAAa3E,OAAb,CARhD;AAAA;AAAA,mBASgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B4B,UAAU,CAAC1X,KAHmB,EAI9BoS,uBAAe,CAACgE,iBAJc,EAK9BrD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9BH,UAR8B,EAS9BF,kBAT8B,CAT3B;;AAAA;AASC/K,YAAAA,MATD;AAAA,8CAoBEA,MApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAuBP,SAAsBiQ,6CAAtB;AAAA;AAAA;;;kGAAO,kBACLjF,IADK,EAEL8E,UAFK,EAGL3E,OAHK,EAILC,SAJK,EAKLL,kBALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCmD,YAAAA,SAPD,GAOac,8BAA8B,CAACc,UAAD,EAAa3E,OAAb,CAP3C;AAAA;AAAA,mBAQgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B4B,UAAU,CAAC1X,KAHmB,EAI9BoS,uBAAe,CAACiE,QAJc,EAK9BtD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAR3B;;AAAA;AAQC/K,YAAAA,MARD;AAAA,8CAmBEA,MAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAuBP,SAAgBkQ,8BACdlX,SACAmX;AAEA,MAAMC,eAAe,GAAGC,gBAAA,CAEpB,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAFoB,EAGpB,CACErX,OAAO,CAACsX,MADV,EAEE,IAAIlmB,EAAJ,CAAOqG,cAAA,CAAkBuI,OAAO,CAACuX,EAA1B,CAAP,EAAsC,EAAtC,CAFF,EAGE1mB,gBAAA,CAAiBmP,OAAO,CAACwX,SAAzB,CAHF,CAHoB,EASrBnlB,KATqB,CASf,CATe,EASZ,EATY,CAAxB;AAWA,MAAMolB,YAAY,GAAGhgB,YAAA,CAAgB2f,eAAe,CAAC/lB,QAAhB,CAAyB,KAAzB,CAAhB,CAArB;AAEA,MAAMob,MAAM,GAAG,CACb,IAAIrb,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4W,QAAzB,CAAP,EAA2CvlB,QAA3C,EADa,EAEb2O,OAAO,CAACoS,SAFK,EAGbpS,OAAO,CAAClI,KAAR,CAAcvC,OAHD,EAIbyK,OAAO,CAAClI,KAAR,CAAcM,MAJD,EAKb4H,OAAO,CAACY,MAAR,CAAerL,OALF,EAMbyK,OAAO,CAACY,MAAR,CAAexI,MANF,EAObqf,YAPa,EAQbzX,OAAO,CAACmW,UARK,EASbnW,OAAO,CAACwB,SATK,CAAf;AAYA,SAAOmT,uBAAuB,CAAClI,MAAD,EAAS0K,QAAT,CAA9B;AACD;AAED,SAAgBO,aAAa1X;AAC3B,MAAM2G,CAAC,GAAGvB,KAAK,CAACK,kBAAhB;AACA,MAAMmP,cAAc,GAAG,IAAIzL,cAAJ,CACrBxC,CADqB,EAErB,EAFqB,EAGrB,CAHqB,EAIrB,EAJqB,EAKrB,UALqB,EAMrBzW,gBAAS,CAACmV,IAAV,CAAe,CAAf,CANqB,EAOrB,IAPqB,EAQrB,IARqB,EASrB,GATqB,CAAvB;AAYA,MAAMoH,MAAM,GAAG,CACb,IAAIrb,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4W,QAAzB,CAAP,EAA2CvlB,QAA3C,EADa,EAEb2O,OAAO,CAACwB,SAFK,EAGbxB,OAAO,CAACoS,SAHK,EAIbpS,OAAO,CAACrE,SAAR,CAAkBpG,OAJL,EAKbyK,OAAO,CAACpE,QAAR,CAAiBrG,OALJ,EAMbyK,OAAO,CAACrE,SAAR,CAAkBvD,MANL,EAOb4H,OAAO,CAACpE,QAAR,CAAiBxD,MAPJ,EAQb4H,OAAO,CAACmW,UARK,EASbnW,OAAO,CAACgD,UATK,EAUbhD,OAAO,CAAC2X,cAAR,GAAyB,CAAzB,GAA6B,CAVhB,EAWb,IAAIvmB,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4X,KAAzB,CAAP,EAAwCvmB,QAAxC,EAXa,CAAf;AAaA,MAAIwjB,YAAJ;AACAA,EAAAA,YAAY,GAAG,EAAf;;AACA,OAAK,IAAI1tB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,MAAM,CAACvlB,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,QAAMqJ,KAAK,GAAGic,MAAM,CAACtlB,CAAD,CAApB;AACA0tB,IAAAA,YAAY,CAAC1J,IAAb,CAAkBjb,gBAAS,CAACmV,IAAV,CAAe7U,KAAf,CAAlB;AACD;;AACD,MAAMggB,IAAI,GAAG5G,WAAW,CAAC4C,QAAZ,CAAqBqI,YAArB,EAAmCD,cAAnC,CAAb;AACA,MAAIiD,SAAS,GAAGrH,IAAI,CAACI,WAAL,EAAhB;AACA,SAAOiH,SAAP;AACD;AAED,SAAgBC,qBACd3xB,MACAgsB;AAEA,MAAM/rB,OAAO,GAAG;AACdgZ,IAAAA,KAAK,EAAEjZ,IAAI,CAACiZ,KADE;AAEd6W,IAAAA,SAAS,EAAE9vB,IAAI,CAACisB,SAFF;AAGd2F,IAAAA,OAAO,EAAE5xB,IAAI,CAAC2R,KAAL,CAAWvC,OAHN;AAIdyiB,IAAAA,MAAM,EAAE7xB,IAAI,CAAC2R,KAAL,CAAWM,MAJL;AAKd8d,IAAAA,UAAU,EAAE/vB,IAAI,CAACya,MAAL,CAAYrL,OALV;AAMdqL,IAAAA,MAAM,EAAEza,IAAI,CAACya,MAAL,CAAYxI,MANN;AAOdmf,IAAAA,EAAE,EAAEpxB,IAAI,CAACoxB,EAPK;AAQdC,IAAAA,SAAS,EAAErxB,IAAI,CAACqxB,SAAL,GAAiBrxB,IAAI,CAACqxB,SAAtB,GAAkC,EAR/B;AASdF,IAAAA,MAAM,EAAEnxB,IAAI,CAACmxB,MATC;AAUdnB,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB,UAVH;AAWd8B,IAAAA,SAAS,EAAE9xB,IAAI,CAACqb;AAXF,GAAhB;AAcA,MAAM0T,SAAS,GAAoB;AACjCmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOL8iB,MAAAA,UAAU,EAAE,CACV;AAAEjjB,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,IAAI,EAAE;AAAvB,OADU,EAEV;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OAFU,EAGV;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHU,EAIV;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OAJU,EAKV;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OALU,EAMV;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OANU,EAOV;AAAEH,QAAAA,IAAI,EAAE,IAAR;AAAcG,QAAAA,IAAI,EAAE;AAApB,OAPU,EAQV;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OARU,EASV;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OATU,EAUV;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAVU,EAWV;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OAXU;AAPP,KAD0B;AAsBjCohB,IAAAA,WAAW,EAAE,YAtBoB;AAuBjCC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE,mBADA;AAENyhB,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAEA,OAHH;AAINwE,MAAAA,iBAAiB,EAAExwB,IAAI,CAACywB;AAJlB,KAvByB;AA6BjCxwB,IAAAA,OAAO,EAAEA;AA7BwB,GAAnC;AA+BA,SAAO8uB,SAAP;AACD;AAED,SAAsBiD,qCAAtB;AAAA;AAAA;;;0FAAO,kBACLnG,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLC,SALK,EAMLL,kBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCmD,YAAAA,SARD,GAQa4C,oBAAoB,CAAChB,UAAD,EAAa3E,OAAb,CARjC;AAAA;AAAA,mBASgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAAC+D,aAJc,EAK9BpD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAT3B;;AAAA;AASC/K,YAAAA,MATD;AAAA,8CAoBEA,MApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAuBP,SAAsBoR,wCAAtB;AAAA;AAAA;;;6FAAO,kBACLpG,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASkB4C,oBAAoB,CAAChB,UAAD,EAAa3E,OAAb,CATtC;AAAA;AAAA,mBAUgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACgE,iBAJc,EAK9BrD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9BH,UAR8B,EAS9BF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,8CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsBqR,gDAAtB;AAAA;AAAA;;;qGAAO,mBACLrG,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLC,SALK,EAMLL,kBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCmD,YAAAA,SARD,GAQa4C,oBAAoB,CAAChB,UAAD,EAAa3E,OAAb,CARjC;AAAA;AAAA,mBASgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACiE,QAJc,EAK9BtD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAT3B;;AAAA;AASC/K,YAAAA,MATD;AAAA,+CAoBEA,MApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAgBsR,0BACdtY,SACAmX;AAEA,MAAMC,eAAe,GAAGC,gBAAA,CAEpB,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAFoB,EAGpB,CACErX,OAAO,CAACsX,MADV,EAEE,IAAIlmB,EAAJ,CAAOqG,cAAA,CAAkBuI,OAAO,CAACuX,EAA1B,CAAP,EAAsC,EAAtC,CAFF,EAGE1mB,gBAAA,CAAiBmP,OAAO,CAACwX,SAAzB,CAHF,CAHoB,EASrBnlB,KATqB,CASf,CATe,EASZ,EATY,CAAxB;AAWA,MAAMolB,YAAY,GAAGhgB,YAAA,CAAgB2f,eAAe,CAAC/lB,QAAhB,CAAyB,KAAzB,CAAhB,CAArB;AAEA,MAAMob,MAAM,GAAG,CACb,IAAIrb,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4W,QAAzB,CAAP,EAA2CvlB,QAA3C,EADa,EAEb2O,OAAO,CAACoS,SAFK,EAGbpS,OAAO,CAAClI,KAAR,CAAcvC,OAHD,EAIbyK,OAAO,CAAClI,KAAR,CAAckgB,MAJD,EAKbhY,OAAO,CAACY,MAAR,CAAerL,OALF,EAMbyK,OAAO,CAACY,MAAR,CAAeoX,MANF,EAObP,YAPa,EAQbzX,OAAO,CAACmW,UARK,EASbnW,OAAO,CAACwB,SATK,CAAf;AAYA,SAAOmT,uBAAuB,CAAClI,MAAD,EAAS0K,QAAT,CAA9B;AACD;AAED,SAAgBoB,WAAWvY;AACzB,MAAM2G,CAAC,GAAGvB,KAAK,CAACK,kBAAhB;AACA,MAAMmP,cAAc,GAAG,IAAIzL,cAAJ,CACrBxC,CADqB,EAErB,CAFqB,EAGrB,CAHqB,EAIrB,EAJqB,EAKrB,UALqB,EAMrBzW,gBAAS,CAACmV,IAAV,CAAe,CAAf,CANqB,EAOrB,IAPqB,EAQrB,IARqB,EASrB,GATqB,CAAvB;AAWA,MAAMmT,MAAM,GAAG/gB,cAAA,CAAkBuI,OAAO,CAACyY,KAA1B,CAAf;AACA,MAAIC,OAAJ,EAAaC,OAAb;;AACA,MAAIH,MAAM,CAACtxB,MAAP,GAAgB,EAApB,EAAwB;AACtBwxB,IAAAA,OAAO,GAAG,IAAItnB,EAAJ,CAAOonB,MAAM,CAACvxB,MAAP,CAAcuxB,MAAM,CAACtxB,MAAP,GAAgB,EAA9B,EAAkC,EAAlC,CAAP,EAA8C,EAA9C,EAAkDmK,QAAlD,CAA2D,EAA3D,CAAV;AACAsnB,IAAAA,OAAO,GAAG,IAAIvnB,EAAJ,CAAOonB,MAAM,CAACvxB,MAAP,CAAc,CAAd,EAAiBuxB,MAAM,CAACtxB,MAAP,GAAgB,EAAjC,CAAP,EAA6C,EAA7C,EAAiDmK,QAAjD,CAA0D,EAA1D,CAAV;AACD,GAHD,MAGO;AACLqnB,IAAAA,OAAO,GAAG,IAAItnB,EAAJ,CAAOonB,MAAM,CAACvxB,MAAP,CAAc,CAAd,EAAiBuxB,MAAM,CAACtxB,MAAxB,CAAP,EAAwC,EAAxC,EAA4CmK,QAA5C,CAAqD,EAArD,CAAV;AACAsnB,IAAAA,OAAO,GAAG,CAAV;AACD;;AACDphB,EAAAA,KAAK,CAAC,SAAD,EAAYmhB,OAAZ,EAAqB,SAArB,EAAgCC,OAAhC,CAAL;AAEA,MAAMlM,MAAM,GAAG,CACbzM,OAAO,CAAC4Y,aADK,EAEb5Y,OAAO,CAAC6Y,OAFK,EAGb7Y,OAAO,CAAC8Y,YAHK,EAIbJ,OAJa,EAKbC,OALa,EAMb3Y,OAAO,CAAC+Y,iBANK,CAAf;AASA,MAAIlE,YAAJ;AACAA,EAAAA,YAAY,GAAG,EAAf;;AACA,OAAK,IAAI1tB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,MAAM,CAACvlB,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,QAAMqJ,KAAK,GAAGic,MAAM,CAACtlB,CAAD,CAApB;AACA0tB,IAAAA,YAAY,CAAC1J,IAAb,CAAkBjb,gBAAS,CAACmV,IAAV,CAAe7U,KAAf,CAAlB;AACD;;AACD,MAAMggB,IAAI,GAAG5G,WAAW,CAAC4C,QAAZ,CAAqBqI,YAArB,EAAmCD,cAAnC,CAAb;;AAEA,SAAOpE,IAAP;AACD;AAED,SAAgBwI,oBACd7yB,MACAgsB,SACAH;AAEA,MAAIyG,KAAK,GAAGtyB,IAAI,CAACsyB,KAAjB;;AACA,MAAItyB,IAAI,CAACsyB,KAAL,CAAWzxB,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;AAC/ByxB,IAAAA,KAAK,GAAGzG,IAAI,CAACiH,KAAL,CAAWC,iBAAX,CAA6B/yB,IAAI,CAACsyB,KAAlC,CAAR;AACD;;AACD,MAAMryB,OAAO,GAAG;AACdwyB,IAAAA,aAAa,EAAEzyB,IAAI,CAACyyB,aADN;AAEdO,IAAAA,WAAW,EAAEhzB,IAAI,CAACgzB,WAFJ;AAGdN,IAAAA,OAAO,EAAE1yB,IAAI,CAAC0yB,OAAL,CAAaxnB,QAAb,EAHK;AAId2mB,IAAAA,MAAM,EAAE7xB,IAAI,CAAC6xB,MAJC;AAKdS,IAAAA,KAAK,EAAEA,KALO;AAMdW,IAAAA,UAAU,EAAEjzB,IAAI,CAAC2yB,YANH;AAOd5C,IAAAA,UAAU,EAAE/vB,IAAI,CAACya,MAAL,CAAYrL,OAPV;AAQdqL,IAAAA,MAAM,EAAEza,IAAI,CAACya,MAAL,CAAYoX,MARN;AASd7B,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB,UATH;AAUd8B,IAAAA,SAAS,EAAE9xB,IAAI,CAACqb;AAVF,GAAhB;AAaA,MAAM0T,SAAS,GAAoB;AACjCmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOLikB,MAAAA,IAAI,EAAE,CACJ;AAAEpkB,QAAAA,IAAI,EAAE,eAAR;AAAyBG,QAAAA,IAAI,EAAE;AAA/B,OADI,EAEJ;AAAEH,QAAAA,IAAI,EAAE,aAAR;AAAuBG,QAAAA,IAAI,EAAE;AAA7B,OAFI,EAGJ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHI,EAIJ;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OAJI,EAKJ;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,IAAI,EAAE;AAAvB,OALI,EAMJ;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OANI,EAOJ;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAPI,EAQJ;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OARI,EASJ;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OATI,EAUJ;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OAVI;AAPD,KAD0B;AAqBjCohB,IAAAA,WAAW,EAAE,MArBoB;AAsBjCC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE,mBADA;AAENyhB,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAEA,OAHH;AAINwE,MAAAA,iBAAiB,EAAExwB,IAAI,CAACywB;AAJlB,KAtByB;AA4BjCxwB,IAAAA,OAAO,EAAEA;AA5BwB,GAAnC;AA8BA,SAAO8uB,SAAP;AACD;AAED,SAAgBoE,wBACdnzB,MACAgsB;AAEA,MAAM/rB,OAAO,GAAG;AACdgZ,IAAAA,KAAK,EAAEjZ,IAAI,CAACiZ,KADE;AAEd6W,IAAAA,SAAS,EAAE9vB,IAAI,CAACisB,SAFF;AAGd2F,IAAAA,OAAO,EAAE5xB,IAAI,CAAC2R,KAAL,CAAWvC,OAHN;AAIdyiB,IAAAA,MAAM,EAAE7xB,IAAI,CAAC2R,KAAL,CAAWkgB,MAJL;AAKd9B,IAAAA,UAAU,EAAE/vB,IAAI,CAACya,MAAL,CAAYrL,OALV;AAMdqL,IAAAA,MAAM,EAAEza,IAAI,CAACya,MAAL,CAAYoX,MANN;AAOdT,IAAAA,EAAE,EAAEpxB,IAAI,CAACoxB,EAPK;AAQdC,IAAAA,SAAS,EAAErxB,IAAI,CAACqxB,SAAL,GAAiBrxB,IAAI,CAACqxB,SAAtB,GAAkC,EAR/B;AASdF,IAAAA,MAAM,EAAEnxB,IAAI,CAACmxB,MATC;AAUdnB,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB,UAVH;AAWd8B,IAAAA,SAAS,EAAE9xB,IAAI,CAACqb;AAXF,GAAhB;AAcA,MAAM0T,SAAS,GAAoB;AACjCmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOL8iB,MAAAA,UAAU,EAAE,CACV;AAAEjjB,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,IAAI,EAAE;AAAvB,OADU,EAEV;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OAFU,EAGV;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHU,EAIV;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OAJU,EAKV;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OALU,EAMV;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OANU,EAOV;AAAEH,QAAAA,IAAI,EAAE,IAAR;AAAcG,QAAAA,IAAI,EAAE;AAApB,OAPU,EAQV;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OARU,EASV;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OATU,EAUV;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAVU,EAWV;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OAXU;AAPP,KAD0B;AAsBjCohB,IAAAA,WAAW,EAAE,YAtBoB;AAuBjCC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE,mBADA;AAENyhB,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAEA,OAHH;AAINwE,MAAAA,iBAAiB,EAAExwB,IAAI,CAACywB;AAJlB,KAvByB;AA6BjCxwB,IAAAA,OAAO,EAAEA;AA7BwB,GAAnC;AA+BA,SAAO8uB,SAAP;AACD;AAED,SAAsBqE,gCAAtB;AAAA;AAAA;;;qFAAO,mBACLvH,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASaoE,uBAAuB,CAACxC,UAAD,EAAa3E,OAAb,CATpC;AAAA;AAAA,mBAUgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAAC+D,aAJc,EAK9BpD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,+CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsBwS,mCAAtB;AAAA;AAAA;;;wFAAO,mBACLxH,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASkBoE,uBAAuB,CAACxC,UAAD,EAAa3E,OAAb,CATzC;AAAA;AAAA,mBAUgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACgE,iBAJc,EAK9BrD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9BH,UAR8B,EAS9BF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,+CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsByS,2CAAtB;AAAA;AAAA;;;gGAAO,mBACLzH,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLC,SALK,EAMLL,kBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCmD,YAAAA,SARD,GAQaoE,uBAAuB,CAACxC,UAAD,EAAa3E,OAAb,CARpC;AAAA;AAAA,mBASgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACiE,QAJc,EAK9BtD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAT3B;;AAAA;AASC/K,YAAAA,MATD;AAAA,+CAoBEA,MApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAgB0S,sBACd1Z,SACAmX;AAEA,MAAM1K,MAAM,GAAG,CACb,IAAIrb,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4W,QAAzB,CAAP,EAA2CvlB,QAA3C,EADa,EAEb2O,OAAO,CAAC2Z,QAFK,EAGb3Z,OAAO,CAACmZ,WAHK,EAIbZ,UAAU,CAACvY,OAAD,CAJG,EAKbA,OAAO,CAACgY,MALK,EAMbhY,OAAO,CAACY,MAAR,CAAerL,OANF,EAObyK,OAAO,CAACY,MAAR,CAAeoX,MAPF,EAQbhY,OAAO,CAACmW,UARK,EASbnW,OAAO,CAACwB,SATK,CAAf;AAWA,SAAOmT,uBAAuB,CAAClI,MAAD,EAAS0K,QAAT,CAA9B;AACD;AAED,SAAgByC,iBAAiBrkB;AAC/B,SAAOA,OAAO,IAAIkc,eAAlB;AACD;;AAGD,SAAgBoI,uBACd7Z,SACAmX;;;AAEA,MAAIQ,cAAc,GAAG,CAArB;;AACA,MAAI3X,OAAO,CAAC2X,cAAZ,EAA4B;AAC1BA,IAAAA,cAAc,GAAG,CAAjB;AACD;;AACD,MAAMlL,MAAM,GAAG,CACb,IAAIrb,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4W,QAAzB,CAAP,EAA2CvlB,QAA3C,EADa,EAEb2O,OAAO,CAACwB,SAFK,EAGbxB,OAAO,CAACoS,SAHK,EAIb,sBAAApS,OAAO,CAACrE,SAAR,gCAAmBpG,OAAnB,GAA6ByK,OAAO,CAACrE,SAAR,CAAkBpG,OAA/C,GAAyD,EAJ5C,EAKZ,qBAAAyK,OAAO,CAACpE,QAAR,+BAA0Bke,OAA1B,GACI9Z,OAAO,CAACpE,QAAR,CAAwCke,OAD5C,GAEG9Z,OAAO,CAACpE,QAAR,CAAiBrG,OAPR,EAQb,uBAAAyK,OAAO,CAACrE,SAAR,iCAAmBqc,MAAnB,GAA4BhY,OAAO,CAACrE,SAAR,CAAkBqc,MAA9C,GAAuD,CAR1C,EASb,sBAAAhY,OAAO,CAACpE,QAAR,gCAAkBoc,MAAlB,GAA2BhY,OAAO,CAACpE,QAAR,CAAiBoc,MAA5C,GAAqD,CATxC,EAUbhY,OAAO,CAACmW,UAVK,EAWbnW,OAAO,CAACgD,UAXK,EAYb2U,cAZa,EAab,IAAIvmB,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4X,KAAzB,CAAP,EAAwCvmB,QAAxC,EAba,CAAf;AAeA,SAAOsjB,uBAAuB,CAAClI,MAAD,EAAS0K,QAAT,CAA9B;AACD;AAED,SAAgB4C,wBACd/Z,SACAmX;AAEA,MAAM1K,MAAM,GAAG,CACb,IAAIrb,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4W,QAAzB,CAAP,EAA2CvlB,QAA3C,EADa,EAEb2O,OAAO,CAACwB,SAFK,EAGbxB,OAAO,CAACoS,SAHK,EAIbpS,OAAO,CAACrE,SAAR,CAAkBpG,OAJL,EAKbyK,OAAO,CAACpE,QAAR,CAAiBrG,OALJ,EAMbyK,OAAO,CAACrE,SAAR,CAAkBvD,MANL,EAOb4H,OAAO,CAACpE,QAAR,CAAiBxD,MAPJ,EAQb4H,OAAO,CAACmW,UARK,EASbnW,OAAO,CAACgD,UATK,EAUbhD,OAAO,CAAC2X,cAAR,GAAyB,CAAzB,GAA6B,CAVhB,EAWb,CAXa,CAAf;AAcA,SAAOhD,uBAAuB,CAAClI,MAAD,EAAS0K,QAAT,CAA9B;AACD;AAED,SAAsB6C,4BAAtB;AAAA;AAAA;;;iFAAO,mBACLhI,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASa8D,mBAAmB,CAAClC,UAAD,EAAa3E,OAAb,EAAsBH,IAAtB,CAThC;AAAA;AAAA,mBAUgBoD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAAC+D,aAJc,EAK9BpD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,+CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsBiT,+BAAtB;AAAA;AAAA;;;oFAAO,mBACLjI,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASkB8D,mBAAmB,CAAClC,UAAD,EAAa3E,OAAb,EAAsBH,IAAtB,CATrC;AAAA;AAAA,mBAUgBoD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACgE,iBAJc,EAK9BrD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9BH,UAR8B,EAS9BF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,+CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsBkT,uCAAtB;AAAA;AAAA;;;4FAAO,mBACLlI,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLC,SALK,EAMLL,kBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCmD,YAAAA,SARD,GAQa8D,mBAAmB,CAAClC,UAAD,EAAa3E,OAAb,EAAsBH,IAAtB,CARhC;AAAA;AAAA,mBASgBoD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACiE,QAJc,EAK9BtD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAT3B;;AAAA;AASC/K,YAAAA,MATD;AAAA,+CAoBEA,MApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAgBmT,sBACdna,SACAmX;AAEA,MAAM1K,MAAM,GAAG,CACb,IAAIrb,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4W,QAAzB,CAAP,EAA2CvlB,QAA3C,EADa,EAEb2O,OAAO,CAACoa,OAFK,EAGbpa,OAAO,CAACqa,OAHK,EAIbra,OAAO,CAAClI,KAAR,CAAcvC,OAJD,EAKbyK,OAAO,CAAClI,KAAR,CAAcM,MALD,EAMb4H,OAAO,CAACY,MAAR,CAAerL,OANF,EAObyK,OAAO,CAACY,MAAR,CAAexI,MAPF,EAQb,IAAIhH,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAACsa,SAAzB,CAAP,EAA4CjpB,QAA5C,EARa,EASb,CATa,EAUb,CAVa,EAWb2O,OAAO,CAACmW,UAXK,EAYbnW,OAAO,CAACwB,SAZK,CAAf;AAcA,SAAOmT,uBAAuB,CAAClI,MAAD,EAAS0K,QAAT,CAA9B;AACD;AACD,SAAgBoD,wBACdp0B,MACAgsB;AAEA,MAAM/rB,OAAO,GAAG;AACdif,IAAAA,IAAI,EAAElf,IAAI,CAACq0B,SADG;AAEdjD,IAAAA,EAAE,EAAEpxB,IAAI,CAACm0B,SAFK;AAGdvC,IAAAA,OAAO,EAAE5xB,IAAI,CAAC2R,KAAL,CAAWvC,OAHN;AAIdyiB,IAAAA,MAAM,EAAE7xB,IAAI,CAAC2R,KAAL,CAAWM,MAJL;AAKd8d,IAAAA,UAAU,EAAE/vB,IAAI,CAACya,MAAL,CAAYrL,OALV;AAMdqL,IAAAA,MAAM,EAAEza,IAAI,CAACya,MAAL,CAAYxI,MANN;AAOd+d,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB,UAPH;AAQd8B,IAAAA,SAAS,EAAE9xB,IAAI,CAACqb;AARF,GAAhB;AAUA,MAAM0T,SAAS,GAAoB;AACjCmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOLqlB,MAAAA,QAAQ,EAAE,CACR;AAAExlB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADQ,EAER;AAAEH,QAAAA,IAAI,EAAE,IAAR;AAAcG,QAAAA,IAAI,EAAE;AAApB,OAFQ,EAGR;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHQ,EAIR;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OAJQ,EAKR;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OALQ,EAMR;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OANQ,EAOR;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAPQ,EAQR;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OARQ;AAPL,KAD0B;AAmBjCohB,IAAAA,WAAW,EAAE,UAnBoB;AAoBjCC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE,mBADA;AAENyhB,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAEA,OAHH;AAINwE,MAAAA,iBAAiB,EAAExwB,IAAI,CAACywB;AAJlB,KApByB;AA0BjCxwB,IAAAA,OAAO,EAAEA;AA1BwB,GAAnC;AA4BA,SAAO8uB,SAAP;AACD;AAED,SAAgBwF,qBACdv0B,MACAgsB;AAEA,MAAM/rB,OAAO,GAAG;AACdif,IAAAA,IAAI,EAAElf,IAAI,CAACq0B,SADG;AAEdjD,IAAAA,EAAE,EAAEpxB,IAAI,CAACm0B,SAFK;AAGdvC,IAAAA,OAAO,EAAE5xB,IAAI,CAAC2R,KAAL,CAAWvC,OAHN;AAIdyiB,IAAAA,MAAM,EAAE7xB,IAAI,CAAC2R,KAAL,CAAWM,MAJL;AAKd8d,IAAAA,UAAU,EAAE/vB,IAAI,CAACya,MAAL,CAAYrL,OALV;AAMdqL,IAAAA,MAAM,EAAEza,IAAI,CAACya,MAAL,CAAYxI,MANN;AAOd+d,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB,UAPH;AAQd8B,IAAAA,SAAS,EAAE9xB,IAAI,CAACqb;AARF,GAAhB;AAUA,MAAM0T,SAAS,GAAoB;AACjCmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOLqlB,MAAAA,QAAQ,EAAE,CACR;AAAExlB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADQ,EAER;AAAEH,QAAAA,IAAI,EAAE,IAAR;AAAcG,QAAAA,IAAI,EAAE;AAApB,OAFQ,EAGR;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHQ,EAIR;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OAJQ,EAKR;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OALQ,EAMR;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OANQ,EAOR;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAPQ,EAQR;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OARQ;AAPL,KAD0B;AAmBjCohB,IAAAA,WAAW,EAAE,UAnBoB;AAoBjCC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE,mBADA;AAENyhB,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAEA,OAHH;AAINwE,MAAAA,iBAAiB,EAAExwB,IAAI,CAACywB;AAJlB,KApByB;AA0BjCxwB,IAAAA,OAAO,EAAEA;AA1BwB,GAAnC;AA4BA,SAAO8uB,SAAP;AACD;AAED,SAAsByF,6BAAtB;AAAA;AAAA;;;kFAAO,mBACL3I,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASawF,oBAAoB,CAAC5D,UAAD,EAAa3E,OAAb,CATjC;AAAA;AAAA,mBAUgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAAC+D,aAJc,EAK9BpD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,+CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsB4T,gCAAtB;AAAA;AAAA;;;qFAAO,mBACL5I,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASkBwF,oBAAoB,CAAC5D,UAAD,EAAa3E,OAAb,CATtC;AAAA;AAAA,mBAUgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACgE,iBAJc,EAK9BrD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9BH,UAR8B,EAS9BF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,+CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsB6T,wCAAtB;AAAA;AAAA;;;6FAAO,mBACL7I,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLC,SALK,EAMLL,kBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCmD,YAAAA,SARD,GAQawF,oBAAoB,CAAC5D,UAAD,EAAa3E,OAAb,CARjC;AAAA;AAAA,mBASgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACiE,QAJc,EAK9BtD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAT3B;;AAAA;AASC/K,YAAAA,MATD;AAAA,+CAoBEA,MApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAuBP,SAAgB8T,0BACd9a,SACAmX;AAEA,MAAM1K,MAAM,GAAG,CACb,IAAIrb,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAAC4W,QAAzB,CAAP,EAA2CvlB,QAA3C,EADa,EAEb2O,OAAO,CAAC+a,aAFK,EAGb/a,OAAO,CAACmZ,WAHK,EAIbnZ,OAAO,CAAClI,KAAR,CAAcvC,OAJD,EAKbyK,OAAO,CAAClI,KAAR,CAAckgB,MALD,EAMbhY,OAAO,CAACY,MAAR,CAAerL,OANF,EAObyK,OAAO,CAACY,MAAR,CAAeoX,MAPF,EAQb,IAAI5mB,EAAJ,CAAOP,gBAAA,CAAiBmP,OAAO,CAACgb,SAAzB,CAAP,EAA4C3pB,QAA5C,EARa,EASb,CATa,EAUb,CAVa,EAWb2O,OAAO,CAACmW,UAXK,EAYbnW,OAAO,CAACwB,SAZK,CAAf;AAcA,SAAOmT,uBAAuB,CAAClI,MAAD,EAAS0K,QAAT,CAA9B;AACD;AAED,SAAgB8D,gBAAgBjb;AAC9B,MAAM2G,CAAC,GAAGvB,KAAK,CAACK,kBAAhB;AACA,MAAMmP,cAAc,GAAG,IAAIzL,cAAJ,CACrBxC,CADqB,EAErB,CAFqB,EAGrB,CAHqB,EAIrB,EAJqB,EAKrB,UALqB,EAMrBzW,gBAAS,CAACmV,IAAV,CAAe,CAAf,CANqB,EAOrB,IAPqB,EAQrB,IARqB,EASrB,GATqB,CAAvB;AAYA,MAAMoH,MAAM,GAAG,CACbzM,OAAO,CAAC4X,KAAR,CAAcxF,SADD,EAEbpS,OAAO,CAAC4X,KAAR,CAAcjc,SAAd,CAAwBpG,OAFX,EAGbyK,OAAO,CAAC4X,KAAR,CAAcpW,SAHD,EAIbxB,OAAO,CAACkb,KAAR,CAAc9I,SAJD,EAKbpS,OAAO,CAACkb,KAAR,CAAcvf,SAAd,CAAwBpG,OALX,EAMbyK,OAAO,CAACkb,KAAR,CAAc1Z,SAND,CAAf;AAQA,MAAIqT,YAAJ;AACAA,EAAAA,YAAY,GAAG,EAAf;;AACA,OAAK,IAAI1tB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,MAAM,CAACvlB,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,QAAMqJ,KAAK,GAAGic,MAAM,CAACtlB,CAAD,CAApB;AACA0tB,IAAAA,YAAY,CAAC1J,IAAb,CAAkBjb,gBAAS,CAACmV,IAAV,CAAe7U,KAAf,CAAlB;AACD;;AACD,MAAMggB,IAAI,GAAG5G,WAAW,CAAC4C,QAAZ,CAAqBqI,YAArB,EAAmCD,cAAnC,CAAb;AACA,MAAIiD,SAAS,GAAGrH,IAAI,CAACI,WAAL,EAAhB;AACA,SAAOiH,SAAP;AACD;AAED,SAAgBsD,wBACdh1B,MACAgsB;AAEA,MAAM/rB,OAAO,GAAG;AACdif,IAAAA,IAAI,EAAElf,IAAI,CAACi1B,WADG;AAEd7D,IAAAA,EAAE,EAAEpxB,IAAI,CAAC60B,SAFK;AAGdjD,IAAAA,OAAO,EAAE5xB,IAAI,CAAC2R,KAAL,CAAWvC,OAHN;AAIdyiB,IAAAA,MAAM,EAAE7xB,IAAI,CAAC2R,KAAL,CAAWkgB,MAJL;AAKd9B,IAAAA,UAAU,EAAE/vB,IAAI,CAACya,MAAL,CAAYrL,OALV;AAMdqL,IAAAA,MAAM,EAAEza,IAAI,CAACya,MAAL,CAAYoX,MANN;AAOd7B,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB,UAPH;AAQd8B,IAAAA,SAAS,EAAE9xB,IAAI,CAACqb;AARF,GAAhB;AAUA,MAAM0T,SAAS,GAAoB;AACjCmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOLqlB,MAAAA,QAAQ,EAAE,CACR;AAAExlB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADQ,EAER;AAAEH,QAAAA,IAAI,EAAE,IAAR;AAAcG,QAAAA,IAAI,EAAE;AAApB,OAFQ,EAGR;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHQ,EAIR;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OAJQ,EAKR;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OALQ,EAMR;AAAEH,QAAAA,IAAI,EAAE,QAAR;AAAkBG,QAAAA,IAAI,EAAE;AAAxB,OANQ,EAOR;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAPQ,EAQR;AAAEH,QAAAA,IAAI,EAAE,WAAR;AAAqBG,QAAAA,IAAI,EAAE;AAA3B,OARQ;AAPL,KAD0B;AAmBjCohB,IAAAA,WAAW,EAAE,UAnBoB;AAoBjCC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE,mBADA;AAENyhB,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAEA,OAHH;AAINwE,MAAAA,iBAAiB,EAAExwB,IAAI,CAACywB;AAJlB,KApByB;AA0BjCxwB,IAAAA,OAAO,EAAEA;AA1BwB,GAAnC;AA4BA,SAAO8uB,SAAP;AACD;AAED,SAAsBmG,gCAAtB;AAAA;AAAA;;;qFAAO,mBACLrJ,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASaiG,uBAAuB,CAACrE,UAAD,EAAa3E,OAAb,CATpC;AAAA;AAAA,mBAUgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAAC+D,aAJc,EAK9BpD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,+CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBP,SAAsBsU,mCAAtB;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;;;wFA7BO,mBACLtJ,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLF,UALK,EAMLG,SANK,EAOLL,kBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCmD,YAAAA,SATD,GASkBiG,uBAAuB,CAACrE,UAAD,EAAa3E,OAAb,CATzC;AAAA;AAAA,mBAUgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACgE,iBAJc,EAK9BrD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9BH,UAR8B,EAS9BF,kBAT8B,CAV3B;;AAAA;AAUC/K,YAAAA,MAVD;AAAA,+CAqBEA,MArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA+BP,SAAsBuU,2CAAtB;AAAA;AAAA;;;gGAAO,mBACLvJ,IADK,EAEL5S,KAFK,EAGL0X,UAHK,EAIL3E,OAJK,EAKLC,SALK,EAMLL,kBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCmD,YAAAA,SARD,GAQaiG,uBAAuB,CAACrE,UAAD,EAAa3E,OAAb,CARpC;AAAA;AAAA,mBASgBiD,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACiE,QAJc,EAK9BtD,OAL8B,EAM9BC,SAN8B,EAO9B,EAP8B,EAQ9B5pB,sBAAc,CAACuuB,OARe,EAS9BhF,kBAT8B,CAT3B;;AAAA;AASC/K,YAAAA,MATD;AAAA,+CAoBEA,MApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAuBP,SAAgBwU,UAAUtG,WAAgBiC;AACxC,MAAM3G,IAAI,GAAG/Y,KAAA,CAASke,sBAAA,CAAuBnH,IAAvB,CAA4B0G,SAA5B,CAAT,CAAb;AACA3d,EAAAA,KAAK,CAAC,WAAD,EAAciZ,IAAd,CAAL;AACA,MAAMiL,OAAO,GAAGhkB,KAAA,CAAS,IAAIoP,SAAJ,CAAe2J,IAAf,EAAqB,EAArB,EAAyBkL,IAAzB,CAA8B,CAA9B,CAAT,CAAhB;AACA,MAAMvI,SAAS,GAAG7C,SAAS,CAAC9B,IAAV,CAAe2I,QAAf,EAAyBsE,OAAzB,CAAlB;AACA,SAAO;AACLE,IAAAA,QAAQ,EACNlkB,cAAA,CAAkBA,KAAA,CAASA,KAAA,CAAS0b,SAAS,CAACE,EAAnB,CAAT,CAAlB,IACA5b,cAAA,CAAkBA,cAAA,CAAkBA,KAAA,CAASA,KAAA,CAAS0b,SAAS,CAACM,EAAnB,CAAT,CAAlB,CAAlB,CADA,GAEAhc,cAAA,CAAkBA,cAAA,CAAkBA,KAAA,CAASA,KAAA,CAAS0b,SAAS,CAACrG,CAAnB,CAAT,CAAlB,CAAlB;AAJG,GAAP;AAMD;AAED,SAAgB8O,oBACdC,WACArF,aACApwB,SACAiwB,OACAc;AAEA,MAAM5jB,KAAK,GAAG,CAAC3C,MAAM,CAACyU,IAAP,CAAY,MAAZ,EAAoB,KAApB,CAAD,CAAd;AACA9R,EAAAA,KAAK,CAAC4X,IAAN,CAAWva,MAAM,CAACyU,IAAP,CAAYwW,SAAS,CAACxpB,KAAV,CAAgB,CAAhB,CAAZ,EAAgC,KAAhC,CAAX;AACAkB,EAAAA,KAAK,CAAC4X,IAAN,CAAWwK,sBAAA,CAAuBmG,UAAvB,CAAkCtF,WAAlC,EAA+CpwB,OAA/C,EAAwDiwB,KAAxD,CAAX;AACA,MAAM7F,IAAI,GAAG/Y,KAAA,CAAS5G,YAAA,CAAaD,MAAM,CAAC8b,MAAP,CAAcnZ,KAAd,CAAb,CAAT,CAAb;AACA,MAAMkoB,OAAO,GAAGhkB,KAAA,CAAS,IAAIoP,SAAJ,CAAe2J,IAAf,EAAqB,EAArB,EAAyBkL,IAAzB,CAA8B,CAA9B,CAAT,CAAhB;AACA,MAAMvI,SAAS,GAAG7C,SAAS,CAAC9B,IAAV,CAAe2I,QAAf,EAAyBsE,OAAzB,CAAlB;AACA,SAAO;AACLE,IAAAA,QAAQ,EACNlkB,cAAA,CAAkBA,KAAA,CAASA,KAAA,CAAS0b,SAAS,CAACE,EAAnB,CAAT,CAAlB,IACA5b,cAAA,CAAkBA,cAAA,CAAkBA,KAAA,CAASA,KAAA,CAAS0b,SAAS,CAACM,EAAnB,CAAT,CAAlB,CAAlB,CADA,GAEAhc,cAAA,CAAkBA,cAAA,CAAkBA,KAAA,CAASA,KAAA,CAAS0b,SAAS,CAACrG,CAAnB,CAAT,CAAlB,CAAlB;AAJG,GAAP;AAMD;AAED,SAAgBiP,yBACd51B,MACA61B;AAEA,MAAM51B,OAAO,GAAG;AACdgZ,IAAAA,KAAK,EAAEjZ,IAAI,CAACiZ,KADE;AAEd6c,IAAAA,WAAW,EAAE,CACX91B,IAAI,CAAC8Z,UAAL,CAAgBlK,MAAhB,CAAuB,CAAvB,EAA0BqC,MADf,EAEXjS,IAAI,CAAC8Z,UAAL,CAAgBlK,MAAhB,CAAuB,CAAvB,EAA0BqC,MAFf,CAFC;AAMd8jB,IAAAA,cAAc,EAAE/1B,IAAI,CAACga,UANP;AAOdgc,IAAAA,aAAa,EAAEh2B,IAAI,CAAC8Z,UAAL,CAAgBC,SAAhB,CAA0B9H,MAP3B;AAQdsH,IAAAA,GAAG,EAAEvZ,IAAI,CAACuZ,GARI;AASdyW,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB;AATH,GAAhB;;AAaA,MAAMjB,SAAS,GAAG;AAChBmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOLgnB,MAAAA,QAAQ,EAAE,CACR;AAAEnnB,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,IAAI,EAAE;AAAvB,OADQ,EAER;AAAEH,QAAAA,IAAI,EAAE,aAAR;AAAuBG,QAAAA,IAAI,EAAE;AAA7B,OAFQ,EAGR;AAAEH,QAAAA,IAAI,EAAE,gBAAR;AAA0BG,QAAAA,IAAI,EAAE;AAAhC,OAHQ,EAIR;AAAEH,QAAAA,IAAI,EAAE,eAAR;AAAyBG,QAAAA,IAAI,EAAE;AAA/B,OAJQ,EAKR;AAAEH,QAAAA,IAAI,EAAE,KAAR;AAAeG,QAAAA,IAAI,EAAE;AAArB,OALQ,EAMR;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OANQ;AAPL,KADS;AAiBhBohB,IAAAA,WAAW,EAAE,UAjBG;AAkBhBC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE+mB,KAAK,CAACK,OADN;AAEN3F,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAE6J,KAAK,CAAC7J,OAHT;AAINwE,MAAAA,iBAAiB,EAAEqF,KAAK,CAAClxB;AAJnB,KAlBQ;AAwBhB1E,IAAAA,OAAO,EAAEA;AAxBO,GAAlB;AA0BA,SAAO8uB,SAAP;AACD;;AAGD,SAAgBoH,yBACdn2B,MACA61B;AAEA,MAAI71B,IAAI,CAACo2B,eAAT,EAA0B;AACxB,QAAMrH,SAAS,GAAG6G,wBAAwB,CAAC51B,IAAD,EAAO61B,KAAP,CAA1C;AACA,WAAOJ,mBAAmB,CACxBz1B,IAAI,CAACo2B,eADmB,EAExBrH,SAAS,CAACsB,WAFc,EAGxBtB,SAAS,CAAC9uB,OAHc,EAIxB8uB,SAAS,CAACmB,KAJc,EAKxB2F,KAAK,CAAC7E,QALkB,CAA1B;AAOD,GATD,MASO;AACL,QAAMjC,UAAS,GAAG6G,wBAAwB,CAAC51B,IAAD,EAAO61B,KAAP,CAA1C;;AACA,WAAOR,SAAS,CAACtG,UAAD,EAAY8G,KAAK,CAAC7E,QAAlB,CAAhB;AACD;AACF;AAED,SAAgBqF,yBACdr2B,MACA61B;AAEA,MAAM51B,OAAO,GAAQ;AACnBgZ,IAAAA,KAAK,EAAEjZ,IAAI,CAACiZ,KADO;AAEnBqd,IAAAA,UAAU,EAAEt2B,IAAI,CAACkb,UAAL,CAAgBE,MAAhB,CAAuBnJ,MAFhB;AAGnBskB,IAAAA,aAAa,EAAEv2B,IAAI,CAACqb,SAHD;AAInBmb,IAAAA,cAAc,EAAE,CACdx2B,IAAI,CAACkb,UAAL,CAAgBC,QAAhB,CAAyB,CAAzB,EAA4BlJ,MADd,EAEdjS,IAAI,CAACkb,UAAL,CAAgBC,QAAhB,CAAyB,CAAzB,EAA4BlJ,MAFd,CAJG;AAQnBsH,IAAAA,GAAG,EAAEvZ,IAAI,CAACya,MARS;AASnBuV,IAAAA,UAAU,EAAEhwB,IAAI,CAACgwB;AATE,GAArB;AAWA,MAAMjB,SAAS,GAAoB;AACjCmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE,CACZ;AAAErhB,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OADY,EAEZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAFY,EAGZ;AAAEH,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,IAAI,EAAE;AAAzB,OAHY,EAIZ;AAAEH,QAAAA,IAAI,EAAE,mBAAR;AAA6BG,QAAAA,IAAI,EAAE;AAAnC,OAJY,CADT;AAOLwnB,MAAAA,QAAQ,EAAE,CACR;AAAE3nB,QAAAA,IAAI,EAAE,OAAR;AAAiBG,QAAAA,IAAI,EAAE;AAAvB,OADQ,EAER;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAFQ,EAGR;AAAEH,QAAAA,IAAI,EAAE,eAAR;AAAyBG,QAAAA,IAAI,EAAE;AAA/B,OAHQ,EAIR;AAAEH,QAAAA,IAAI,EAAE,gBAAR;AAA0BG,QAAAA,IAAI,EAAE;AAAhC,OAJQ,EAKR;AAAEH,QAAAA,IAAI,EAAE,KAAR;AAAeG,QAAAA,IAAI,EAAE;AAArB,OALQ,EAMR;AAAEH,QAAAA,IAAI,EAAE,YAAR;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OANQ;AAPL,KAD0B;AAiBjCohB,IAAAA,WAAW,EAAE,UAjBoB;AAkBjCC,IAAAA,MAAM,EAAE;AACNxhB,MAAAA,IAAI,EAAE+mB,KAAK,CAACK,OADN;AAEN3F,MAAAA,OAAO,EAAE,OAFH;AAGNvE,MAAAA,OAAO,EAAE6J,KAAK,CAAC7J,OAHT;AAINwE,MAAAA,iBAAiB,EAAEqF,KAAK,CAAClxB;AAJnB,KAlByB;AAwBjC1E,IAAAA,OAAO,EAAEA;AAxBwB,GAAnC;AA0BA,SAAO8uB,SAAP;AACD;;AAGD,SAAgB2H,yBACd12B,MACA61B;AAEA,MAAI71B,IAAI,CAACo2B,eAAT,EAA0B;AACxB,QAAMrH,SAAS,GAAGsH,wBAAwB,CAACr2B,IAAD,EAAO61B,KAAP,CAA1C;AACA,WAAOJ,mBAAmB,CACxBz1B,IAAI,CAACo2B,eADmB,EAExBrH,SAAS,CAACsB,WAFc,EAGxBtB,SAAS,CAAC9uB,OAHc,EAIxB8uB,SAAS,CAACmB,KAJc,EAKxB2F,KAAK,CAAC7E,QALkB,CAA1B;AAOD,GATD,MASO;AACL,QAAMjC,WAAS,GAAGsH,wBAAwB,CAACr2B,IAAD,EAAO61B,KAAP,CAA1C;;AACA,WAAOR,SAAS,CAACtG,WAAD,EAAY8G,KAAK,CAAC7E,QAAlB,CAAhB;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5uDO,IAAM2F,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD;AAAA,SACxBnzB,MAAM,CAACC,IAAP,CAAYkzB,CAAZ,EACGhpB,IADH,GAEGipB,MAFH,CAEU,UAACtO,CAAD,EAASjB,CAAT;AAAA,WAAiBiB,CAAC,CAACjB,CAAD,CAAD,GAAOsP,CAAC,CAACtP,CAAD,CAAT,EAAeiB,CAA/B;AAAA,GAFV,EAE6C,EAF7C,CADwB;AAAA,CAAnB;;ACQP;;;;;AAIA,AAAO,IAAMuO,eAAe,GAAG,SAAlBA,eAAkB,CAAU/mB,GAAV;AAC7B,MAAMgnB,YAAY,GAAG,IAAIC,eAAJ,CAAoBjnB,GAAG,CAACknB,MAAxB,CAArB;;oCADoDC;AAAAA,IAAAA;;;AAGpD,8BAAqBA,OAArB,8BAA8B;AAAzB,QAAMC,MAAM,eAAZ;;AACH,QAAIA,MAAJ,EAAY;AACV,UAAMC,SAAS,GAAGT,UAAU,CAACQ,MAAD,CAA5B;;AACA,WAAK,IAAMvzB,GAAX,IAAkBwzB,SAAlB,EAA6B;AAC3B,YAAIA,SAAS,CAACxzB,GAAD,CAAT,IAAkBjD,SAAtB,EAAiCo2B,YAAY,CAAC/oB,GAAb,CAAiBpK,GAAjB,EAAsBwzB,SAAS,CAACxzB,GAAD,CAA/B;AAClC;AACF;AACF;;AAEDmM,EAAAA,GAAG,CAACknB,MAAJ,GAAaF,YAAY,CAAC7rB,QAAb,EAAb;AACD,CAbM;AAeP,AAQO,IAAMmsB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAUzrB,KAAV;AACnC,MAAM0rB,SAAS,GAAG,OAAO1rB,KAAP,KAAiB,QAAnC;AAEA,SAAO0rB,SAAS,GACZ5J,IAAI,CAACC,SAAL,CAAe/hB,KAAK,KAAKjL,SAAV,GAAsBg2B,UAAU,CAAC/qB,KAAD,CAAhC,GAA0C,EAAzD,CADY,GAEZA,KAAK,IAAI,EAFb;AAGD,CANM;AAQP;;;;;AAIA,AAAO,IAAM2rB,YAAY,GAAG,SAAfA,YAAe,CAAUxnB,GAAV;AAC1B,SAAOA,GAAG,CAACynB,QAAJ,GAAeznB,GAAG,CAACknB,MAAnB,GAA4BlnB,GAAG,CAACsa,IAAvC;AACD,CAFM;AAIP,IAAaoN,OAAb;AASE,mBAAYC,OAAZ,EAA6BC,OAA7B;AANQ,oBAAA,GAAmB,EAAnB;AAQN,SAAKC,WAAL,GAAmB;AACjBC,MAAAA,OAAO,EAAEH,OADQ;AAEjBC,MAAAA,OAAO,EAAEA,OAFQ;AAIjBG,MAAAA,OAAO,EAAE;AACP;AACA;AACAC,QAAAA,UAAU,EAAE,IAHL;AAIP,wBAAgB,kBAJT;AAKPC,QAAAA,EAAE,EAAE;AALG,OAJQ;AAYjBC,MAAAA,cAAc,EAAE,wBAAUvnB,MAAV;AACd,YAAKA,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAA3B,IAAmCA,MAAM,KAAK,GAAlD,EAAuD;AACrD,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AAED,OAlBgB;AAoBjBwnB,MAAAA,QAAQ,EAAE;AApBO,KAAnB;AAuBA,SAAKC,MAAL,GAAcC,KAAK,CAACC,MAAN,CAAa,KAAKT,WAAlB,CAAd;AACD;;AAnCH;;AAAA,SAKSU,MALT,GAKS;AACL,WAAO,KAAKH,MAAZ;AACD,GAPH;;AAAA,SAqCete,OArCf;AAAA,+EAqCS,iBAAcgM,MAAd,EAAiC0S,OAAjC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiCA,OAAjC;AAAiCA,gBAAAA,OAAjC,GAAgD,EAAhD;AAAA;;AACCC,cAAAA,QADD,GACY,IAAIC,GAAJ,CAAQ5S,MAAM,CAAC9V,GAAf,EAAoB,KAAK6nB,WAAL,CAAiBC,OAArC,CADZ;AAGCa,cAAAA,sBAHD;AAG4B5K,gBAAAA,MAAM,EAAEjI,MAAM,CAACiI;AAH3C,iBAGsDyK,OAHtD;AAKLzB,cAAAA,eAAe,CAAC0B,QAAD,EAAW3S,MAAX,oBAAWA,MAAM,CAAE8S,WAAnB,CAAf;AAEMC,cAAAA,UAPD,GAOcrB,YAAY,CAACiB,QAAD,CAP1B;AASDV,cAAAA,OATC,GASc,EATd;;AAWL,kBAAIjS,MAAJ,YAAIA,MAAM,CAAEgT,MAAZ,EAAoB;AAClBf,gBAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBjS,MAAvB,oBAAuBA,MAAM,CAAEgT,MAA/B;AACD;;AAEG9R,cAAAA,GAfC,qBAeUlB,MAAM,CAACiT,MAfjB,qBAeU,eAAe/R,GAfzB;;AAAA,oBAiBDlB,MAAM,CAACkT,OAAP,KAAmBnyB,gBAAQ,CAACoyB,MAA5B,IAAsC,EAACnT,MAAD,+BAACA,MAAM,CAAEiT,MAAT,aAAC,gBAAgBtrB,SAAjB,CAjBrC;AAAA;AAAA;AAAA;;AAAA,oBAkBGlD,KAAK,CAAC,qBAAD,CAlBR;;AAAA;AAAA,4BAqBGub,MAAM,CAACkT,OArBV;AAAA,8CAsBEnyB,gBAAQ,CAACoyB,MAtBX,wBAwBEpyB,gBAAQ,CAACqyB,kBAxBX,wBA8BEryB,gBAAQ,CAACsyB,SA9BX;AAAA;;AAAA;AAAA;;AAAA;AAyBDnS,cAAAA,GAAG,GAAGyH,uBAAuB,oBAC3B3I,MAAM,CAACiT,MADoB,qBAC3B,gBAAetrB,SADY,qBAE3BqY,MAAM,CAACiT,MAFoB,qBAE3B,gBAAe1O,UAFY,CAAvB,CAGJvJ,MAHF;AAzBC;;AAAA;AA+BDkG,cAAAA,GAAG,GAAG8G,WAAW,CACfhI,MAAM,CAACiI,MADQ,EAEf,KAAK8J,WAAL,CAAiBC,OAFF,EAGfhS,MAAM,CAAC9V,GAHQ,qBAIf8V,MAAM,CAACiT,MAJQ,qBAIf,gBAAetrB,SAJA,qBAKfqY,MAAM,CAACiT,MALQ,qBAKf,gBAAe1O,UALA,CAAjB;AA/BC;;AAAA;AAAA;;AAAA;AA2CL,kBAAIrD,GAAJ,EAAS;AACP+Q,gBAAAA,OAAO,CAAC,WAAD,CAAP,GAAuB/Q,GAAvB;AACD,eAFD,MAEO,IAAIlB,MAAJ,YAAIA,MAAM,CAAEsT,cAAZ,EAA4B;AACjCrB,gBAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBjS,MAAvB,oBAAuBA,MAAM,CAAEsT,cAA/B;AACD,eAFM,MAEA,IAAItT,MAAJ,YAAIA,MAAM,CAAEuT,cAAZ,EAA4B;AACjCtB,gBAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBjS,MAAvB,oBAAuBA,MAAM,CAAEuT,cAA/B;AACD,eAjDI;;;AAmDL,kBAAIvT,MAAJ,YAAIA,MAAM,CAAE8K,UAAZ,EAAwB;AAChBA,gBAAAA,UADgB,GACH9K,MADG,oBACHA,MAAM,CAAE8K,UADL;;AAEtB,oBAAI5J,GAAG,uBAAIlB,MAAM,CAACiT,MAAX,aAAI,gBAAeO,QAA1B,EAAoC;AAClC1I,kBAAAA,UAAU,oBAAC9K,MAAM,CAACiT,MAAR,qBAAC,gBAAeO,QAAhB,CAAV,GAAsCtS,GAAtC;AACD;;AAED,oBAAIlB,MAAJ,YAAIA,MAAM,CAAEsT,cAAZ,EAA4B;AAC1BxI,kBAAAA,UAAU,CAACwI,cAAX,GAA4BtT,MAA5B,oBAA4BA,MAAM,CAAEsT,cAApC;AACD;;AAED,oBAAItT,MAAJ,YAAIA,MAAM,CAAEuT,cAAZ,EAA4B;AAC1BzI,kBAAAA,UAAU,CAACyI,cAAX,GAA4BvT,MAA5B,oBAA4BA,MAAM,CAAEuT,cAApC;AACD;;AAEDV,gBAAAA,sBAAsB,CAAC14B,IAAvB,GAA8Bq3B,qBAAqB,CAAC1G,UAAD,CAAnD;AACD;;AAEDmH,cAAAA,OAAO,gBAAQ,KAAKF,WAAL,CAAiBE,OAAzB,EAAqCA,OAArC,CAAP;AAEMwB,cAAAA,QAtED,gBAuEA,KAAK1B,WAvEL,EAwEA;AAAEE,gBAAAA,OAAO,EAAPA;AAAF,eAxEA,EAyEAY,sBAzEA;AA0EH3oB,gBAAAA,GAAG,EAAE,KAAK6nB,WAAL,CAAiBC,OAAjB,GAA2Be;AA1E7B;AA+EL;;AA/EK;AAAA,qBAgFQ,KAAKT,MAAL,CAAYte,OAAZ,CAAoByf,QAApB,CAhFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwHSC,SAxHT,GAwHS,mBAAUC,MAAV;AACL,SAAKrB,MAAL,CAAYsB,YAAZ,CAAyB5f,OAAzB,CAAiC6f,GAAjC,CAAqC,UAACC,GAAD;AACnC,UAAIH,MAAJ,YAAIA,MAAM,CAAE9B,OAAZ,EAAqB;AACnBiC,QAAAA,GAAG,CAAC9B,OAAJ,GAAc2B,MAAd,oBAAcA,MAAM,CAAE9B,OAAtB;AACD;;AACD,UAAI8B,MAAJ,YAAIA,MAAM,CAAEzpB,GAAZ,EAAiB;AACf4pB,QAAAA,GAAG,CAAC5pB,GAAJ,GAAUypB,MAAV,oBAAUA,MAAM,CAAEzpB,GAAlB;AACD;;AACD,UAAIypB,MAAJ,YAAIA,MAAM,CAAEX,MAAZ,EAAoB;AAClBc,QAAAA,GAAG,CAAC7B,OAAJ,CAAY,WAAZ,IAA2B0B,MAA3B,oBAA2BA,MAAM,CAAEX,MAAnC;AACD;;AACD,UAAIW,MAAJ,YAAIA,MAAM,CAAExM,SAAZ,EAAuB;AACrB2M,QAAAA,GAAG,CAAC7B,OAAJ,CAAY,WAAZ,IAA2B0B,MAA3B,oBAA2BA,MAAM,CAAExM,SAAnC;AACD;;AACD,aAAO2M,GAAP;AACD,KAdD;;AAeA,WAAO,IAAP;AACD,GAzIH;;AAAA,SA2ISC,SA3IT,GA2IS,mBAAUf,MAAV;AACL,WAAO,KAAKU,SAAL,CAAe;AAAEV,MAAAA,MAAM,EAANA;AAAF,KAAf,CAAP;AACD,GA7IH;;AAAA,SA+ISgB,MA/IT,GA+IS,gBAAO7M,SAAP;AACL,WAAO,KAAKuM,SAAL,CAAe;AAAEvM,MAAAA,SAAS,EAATA;AAAF,KAAf,CAAP;AACD,GAjJH;;AAAA,SAmJS8M,aAnJT,GAmJS,uBAAcpC,OAAd;AACL,WAAO,KAAK6B,SAAL,CAAe;AAAE7B,MAAAA,OAAO,EAAPA;AAAF,KAAf,CAAP;AACD,GArJH;;AAAA,SAuJSqC,SAvJT,GAuJS,mBAAUC,QAAV;QAAUA;AAAAA,MAAAA,WAAgBr5B;;;AAC/B,SAAKw3B,MAAL,CAAYsB,YAAZ,CAAyB35B,QAAzB,CAAkC45B,GAAlC,CAAsC,UAACO,GAAD;AACpC,UAAIA,GAAG,CAACvpB,MAAJ,IAAc,GAAlB,EAAuB;AACrB;AACA9Q,QAAAA,OAAO,CAACkK,GAAR,CAAYmwB,GAAG,CAACpgB,OAAJ,GAAc,OAAd,GAAwBogB,GAAG,CAACC,UAAxC;AACD;;AAED,UAAIF,QAAJ,EAAc;AACZA,QAAAA,QAAQ;AACT;;AAED,aAAOC,GAAP;AACD,KAXD;AAYD,GApKH;;AAAA;AAAA;;IC1CqBE;AACnB,6BAAiD;AAAA,QAAnC7T,MAAmC,QAAnCA,MAAmC;AAAA,QAA3BxX,IAA2B,QAA3BA,IAA2B;AAAA,QAArBsrB,OAAqB,QAArBA,OAAqB;AAAA,QAAZC,QAAY,QAAZA,QAAY;AAC/C,SAAKvrB,IAAL,GAAYA,IAAZ;AACA,SAAKwrB,UAAL,GAAkBhU,MAAM,CAACoG,GAAP,CAAW;AAAA,UAAGzd,IAAH,SAAGA,IAAH;AAAA,aAAcA,IAAd;AAAA,KAAX,CAAlB;AACA,SAAKqX,MAAL,GAAcA,MAAd;AACA,SAAKiU,WAAL,GAAmBH,OAAO,CAAC1N,GAAR,CAAY;AAAA,UAAGzd,IAAH,SAAGA,IAAH;AAAA,aAAcA,IAAd;AAAA,KAAZ,CAAnB;AACA,SAAKmrB,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKG,aAAL,GAAqBxvB,KAAK,CAACyvB,YAAQ,CAAC3rB,IAAD,EAAO,KAAKwrB,UAAZ,CAAT,CAA1B;AACD;AAED;AACF;AACA;AACA;AACA;;;;;SACEI,eAAA,sBAAapU,MAAb,EAAqB;AACnB,QAAMqU,SAAS,GAAG,KAAKC,WAAL,CAAiBtU,MAAjB,CAAlB;AACA,WACE,KAAKkU,aAAL,GACApuB,cAAc,CAACpB,KAAK,CAAC6vB,aAAS,CAAC,KAAKP,UAAN,EAAkBK,SAAlB,CAAV,CAAN,CAFhB;AAID;AAED;AACF;AACA;AACA;AACA;;;SACEG,gBAAA,uBAAcV,OAAd,EAAuB;AACrB,WAAO,KAAKW,YAAL,CAAkBC,aAAS,CAAC,KAAKT,WAAN,EAAmBhwB,QAAQ,CAAC6vB,OAAD,CAA3B,CAA3B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;SACEa,sBAAA,6BAAoBC,OAApB,EAA6B;AAC3B,WAAO,KAAKH,YAAL,CACLC,aAAS,CAAC,KAAKV,UAAN,EAAkB/vB,QAAQ,CAACH,YAAY,CAAC8wB,OAAD,CAAb,CAA1B,CADJ,CAAP;AAGD;;SAEDN,cAAA,qBAAYtU,MAAZ,EAAyB;AAAA,QAAbA,MAAa;AAAbA,MAAAA,MAAa,GAAJ,EAAI;AAAA;;AACvB,WAAO,KAAKA,MAAL,CAAYoG,GAAZ,CAAgB,iBAAoB;AAAA,UAAjB5d,IAAiB,SAAjBA,IAAiB;AAAA,UAAXG,IAAW,SAAXA,IAAW;;AACzC,UAAIqX,MAAM,CAACxX,IAAD,CAAN,KAAiBnO,SAArB,EAAgC;AAC9B,cAAM,IAAI2J,KAAJ,gBAAuBwE,IAAvB,iBAAuCG,IAAvC,mBAAN;AACD;;AACD,aAAOqX,MAAM,CAACxX,IAAD,CAAb;AACD,KALM,CAAP;AAMD;;SAEDisB,eAAA,sBAAaX,OAAb,EAAsB;AACpB,WAAOA,OAAO,CAAC1N,GAAR,CAAY,UAACvY,MAAD,EAAY;AAC7B,UAAIA,MAAM,YAAYlJ,EAAtB,EAA0B;AACxB,eAAOD,KAAK,CAACmJ,MAAD,CAAZ;AACD;;AACD,aAAOA,MAAP;AACD,KALM,CAAP;AAMD;;;;;ICjEkBmb;AACnB,oBAAY4B,KAAZ,EAAiB;AACf,QAAMiK,MAAM,GAAGjK,KAAG,CAACkK,MAAJ,CAAW;AAAA,UAAGnsB,IAAH,QAAGA,IAAH;AAAA,aAAcA,IAAI,KAAK,UAAvB;AAAA,KAAX,CAAf;AACA,SAAKosB,YAAL,GAAoBF,MAAM,CAACtE,MAAP,CAAc,UAACyE,GAAD,EAAM7sB,IAAN,EAAe;AAAA;;AAC/C,UAAM6rB,UAAU,GAAG7rB,IAAI,CAAC6X,MAAL,CAAYoG,GAAZ,CAAgB;AAAA,YAAGzd,IAAH,SAAGA,IAAH;AAAA,eAAcA,IAAd;AAAA,OAAhB,CAAnB;AACA,UAAMrL,GAAG,GAAM6K,IAAI,CAACK,IAAX,SAAmBwrB,UAAU,CAACpvB,QAAX,EAAnB,MAAT;AACA,UAAMqwB,UAAU,GAAGd,YAAQ,CAAChsB,IAAI,CAACK,IAAN,EAAYwrB,UAAZ,CAA3B;AACA,0BACKgB,GADL,6BAEG7sB,IAAI,CAACK,IAFR,IAEe,IAAIqrB,WAAJ,CAAgB1rB,IAAhB,CAFf,YAGG7K,GAHH,IAGS,IAAIu2B,WAAJ,CAAgB1rB,IAAhB,CAHT,YAIG8sB,UAJH,IAIgB,IAAIpB,WAAJ,CAAgB1rB,IAAhB,CAJhB;AAMD,KAVmB,EAUjB,EAViB,CAApB;AAWD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;SACEisB,eAAA,sBAAa5M,MAAb,EAAqBxH,MAArB,EAA6B;AAC3B,QAAMkV,WAAW,GAAG,KAAKH,YAAL,CAAkBvN,MAAlB,CAApB;;AACA,QAAI0N,WAAJ,EAAiB;AACf,aAAOA,WAAW,CAACd,YAAZ,CAAyBpU,MAAzB,CAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAIhc,KAAJ,UAAiBwjB,MAAjB,+BAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;SACEgN,gBAAA,uBAAchN,MAAd,EAAsBsM,OAAtB,EAA+B;AAC7B,QAAMoB,WAAW,GAAG,KAAKH,YAAL,CAAkBvN,MAAlB,CAApB;;AACA,QAAI0N,WAAJ,EAAiB;AACf,aAAOA,WAAW,CAACV,aAAZ,CAA0BV,OAA1B,CAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAI9vB,KAAJ,UAAiBwjB,MAAjB,+BAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;SACE2N,qBAAA,4BAAmBxX,MAAnB,EAA2B;AACzBA,IAAAA,MAAM,GAAGjZ,KAAK,CAACiZ,MAAD,CAAd;AACA,QAAMyX,QAAQ,GAAGzX,MAAM,CAAC/X,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAjB;AACA,QAAMsvB,WAAW,GAAG,KAAKH,YAAL,CAAkBK,QAAlB,CAApB;;AACA,QAAIF,WAAJ,EAAiB;AACf,aAAOA,WAAW,CAACP,mBAAZ,CAAgChX,MAAM,CAAC/X,KAAP,CAAa,EAAb,CAAhvDH,IAAMqxB,UAAU,gBAAG,IAAIrM,QAAJ,CAAasM,QAAb,CAAnB;AACA,IAAMC,gBAAgB,gBAAG,IAAIvM,QAAJ,CAAawM,aAAb,CAAzB;AACA,IAAMC,cAAc,gBAAG,IAAIzM,QAAJ,CAAa0M,iBAAb,CAAvB;AACA,IAAMC,OAAO,gBAAG,IAAI3M,QAAJ,CAAa4M,UAAb,CAAhB;AACA,IAAMC,MAAM,gBAAG,IAAI7M,QAAJ,CAAa8M,SAAb,CAAf;AACA,IAAMC,KAAK,gBAAG,IAAI/M,QAAJ,CAAagN,OAAb,CAAd;AAEA,gBAAe;AACbX,EAAAA,UAAU,EAAVA,UADa;AAEbM,EAAAA,OAAO,EAAPA,OAFa;AAGbE,EAAAA,MAAM,EAANA,MAHa;AAIbN,EAAAA,gBAAgB,EAAhBA,gBAJa;AAKbE,EAAAA,cAAc,EAAdA,cALa;AAMbK,EAAAA,SAAS,EAAEA,SANE;AAObF,EAAAA,UAAU,EAAEA,UAPC;AAQbG,EAAAA,KAAK,EAALA;AARa,CAAf;;ACZA,gBAAe;AACblC,EAAAA,WAAW,EAAXA,WADa;AAEb7K,EAAAA,QAAQ,EAARA,QAFa;AAGbiN,EAAAA,SAAS,EAATA;AAHa,CAAf;;IC2BaC,WAAW,GACtB,oDACA,oBADA,GAEA,mBAFA,GAGA,UAJK;AAKP,IAAaC,OAAb;AAmEE,mBACEC,KADF,EAEE/E,OAFF,EAGEgF,UAHF;QAEEhF;AAAAA,MAAAA,UAAkB;;;QAClBgF;;;AAAAA,MAAAA,4CACGx6B,eAAO,CAACK,WAAU,wCAClBL,eAAO,CAACM,UAAS;;;AAtEZ,gBAAA,GAAU,EAAV;AACA,gBAAA,GAAmBN,eAAO,CAACK,OAA3B;;AAwER,QAAIk6B,KAAK,CAAChF,OAAV,EAAmB;AACjB,WAAKA,OAAL,GAAegF,KAAK,CAAChF,OAArB;AACD,KAFD,MAEO,IAAIgF,KAAK,CAAC1Q,OAAN,KAAkBrrB,SAAtB,EAAiC;AACtC,WAAKi8B,UAAL,CAAgBF,KAAK,CAAC1Q,OAAtB;AACD,KAFM,MAEA;AACL,WAAK4Q,UAAL,CAAgBz6B,eAAO,CAACM,MAAxB;AACD;;AACD,SAAKk6B,UAAL,GAAkBA,UAAlB;AACA,SAAKhF,OAAL,GAAeA,OAAf;AACD;;AApFH;;AAAA,SAISkF,MAJT,GAIS,gBAAOv7B,GAAP;AACL,QAAIA,GAAG,CAACw7B,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;AACjC;AACA;AACE;AACA78B,QAAAA,OAAO,EAAEwI,sBAAc,CAACs0B;AAF1B,SAGKz7B,GAHL;AAIEwd,QAAAA,GAAG,EAAErW,sBAAc,CAACs0B,UAJtB;AAKEhe,QAAAA,IAAI,EAAEvW,yBAAiB,CAACu0B;AAL1B;AAOAz7B,AACD,KAVD,MAUO,IAAI,CAACA,GAAD,IAAQ,EAACA,GAAD,YAACA,GAAG,CAAErB,OAAN,CAAZ,EAA2B;AAChC,aAAO;AACLA,QAAAA,OAAO,EAAE,SADJ;AAEL8e,QAAAA,IAAI,EAAEvW,yBAAiB,CAACw0B;AAFnB,OAAP;AAID,KALM,MAKA;AACL,UAAMp5B,GAAG,GAAG8J,OAAO,CAACC,OAAR,CAAgBlF,sBAAhB,EAAgCw0B,IAAhC,CACV,UAACr5B,GAAD;AAAA,eACE,CAAAtC,GAAG,QAAH,YAAAA,GAAG,CAAErB,OAAL,CAAag3B,MAAb,CACExuB,sBAAc,CAAC7E,GAAD,CADhB,OAEM,CAAC,CAHT;AAAA,OADU,CAAZ;;AAMA,UAAIA,GAAJ,EAAS;AACP,4BACKtC,GADL;AAEErB,UAAAA,OAAO,EAAE2D,GAFX;AAGEmb,UAAAA,IAAI,EAAEvW,yBAAiB,CAAC5E,GAAD;AAHzB;AAKD;;AACD,0BACMtC,GAAG,YAAYgJ,KAAf,GACAoD,OAAO,CAACC,OAAR,CAAgBrM,GAAhB,EAAqBu1B,MAArB,CAA4B,UAACqG,IAAD,EAAOzuB,IAAP;;;AAC1B;AACA,4BAAYyuB,IAAZ,6BAAmBzuB,IAAnB,IAA0BnN,GAAG,CAACmN,IAAI,CAACvD,QAAL,EAAD,CAA7B;AACD,OAHD,EAGG,EAHH,CADA,GAKA5J,GANN;AAOEyd,QAAAA,IAAI,EAAEvW,yBAAiB,CAACw0B;AAP1B;AASD;AACF,GA5CH;;AAAA,SA6CYG,YA7CZ,GA6CY,sBACRjvB,QADQ;AAKR,QAAIA,QAAJ,YAAIA,QAAQ,CAAEkvB,UAAd,EAA0B;AAAA;;AACxB,0BACKlvB,QAAQ,CAACkvB,UADd;AAEEn9B,QAAAA,OAAO,EAAE,wBAAAiO,QAAQ,CAACkvB,UAAT,kCAAqBte,GAArB,4BACL5Q,QAAQ,CAACkvB,UADJ,qBACL,sBAAqBte,GADhB,GAEL5Q,QAFK,oBAELA,QAAQ,CAAEkvB,UAAV,CAAqBn9B;AAJ3B;AAMD;;AACD,wBACKiO,QADL;AAEEA,MAAAA,QAAQ,EAARA;AAFF;AAID,GA9DH;;AAAA,SAsFemvB,kBAtFf;AAAA,0FAsFS,iBACLxjB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCyjB,cAAAA,SAHD,GAGwB;AAC3BvE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MADS;AAE3BL,gBAAAA,WAAW,EAAE9e,OAFc;AAG3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAAC04B,oBAHQ;AAI3BzP,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B;AAJS,eAHxB;AAAA;AAAA,qBASiB,KAAKC,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CATjB;;AAAA;AASCzc,cAAAA,MATD,iBASoD7gB,IATpD;AAAA,+CAUE6gB,MAVF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmGe6c,qBAnGf;AAAA,6FAmGS,kBACL7jB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyjB,cAAAA,SAPD,GAOwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC84B,oBADQ;AAE3BhF,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAPxB;AAAA;AAAA,qBAcmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAdnB;;AAAA;AAcCpvB,cAAAA,QAdD,kBAcsDlO,IAdtD;AAiBDD,cAAAA,KAjBC,GAiBgCY,SAjBhC;;AAmBL,kBAAIuN,QAAQ,IAAIA,QAAJ,YAAIA,QAAQ,CAAEkvB,UAA1B,EAAsC;AACpCr9B,gBAAAA,KAAK,GAAGmO,QAAH,oBAAGA,QAAQ,CAAEkvB,UAAlB;AACD,eAFD,MAEO;AACLxR,gBAAAA,kBAAkB,gBACb1d,QADa,CAAlB;AAGD;;AAzBI,gDA2BE;AACL0d,gBAAAA,kBAAkB,EAAlBA,kBADK;AAEL7rB,gBAAAA,KAAK,EAALA,KAFK;AAGLmO,gBAAAA,QAAQ,EAARA;AAHK,eA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqIS0uB,UArIT,GAqIS,oBAAW5Q,OAAX;AACL,SAAK0L,OAAL,GACE,KAAKiF,UAAL,IAAmB,KAAKA,UAAL,CAAgB,CAAhB,CAAnB,GACIiB,mBAAmB,CAAC5R,OAAD,EAAU,KAAK2Q,UAAf,CADvB,GAEIiB,mBAAmB,CAAC5R,OAAD,CAHzB;AAIA,SAAKA,OAAL,GAAeA,OAAf;AACD,GA3IH;;AAAA,SA6IS6R,UA7IT,GA6IS,oBAAWnG,OAAX;AACL,SAAKA,OAAL,GAAeA,OAAf;AACD,GA/IH;;AAAA,SAiJY+F,OAjJZ,GAiJY;AACR,WAAO,IAAIhG,OAAJ,CAAY,KAAKC,OAAjB,EAA0B,KAAKC,OAA/B,CAAP;AACD,GAnJH;;AAAA;AAAA;AACS8E,mBAAA,GAAsBD,WAAtB;AAqJT,SAAsBsB,SAAtB;AAAA;AAAA;;;8DAAO,kBACLjS,IADK,EAEL9oB,OAFK,EAGL+b,GAHK,EAILiI,GAJK;AAAA;AAAA;AAAA;AAAA;AAAA,8CAME,IAAI3mB,OAAJ,CAAY,UAACC,OAAD;AACjB,kBAAI;AACFwrB,gBAAAA,IAAI,CAACkS,GAAL,CAASC,QAAT,CAAkBF,SAAlB,CACEhf,GADF,EAEEiI,GAFF,EAGE,UAAUzlB,GAAV,EAAoBuN,OAApB;AACE,sBAAI,CAACvN,GAAD,IAAQuN,OAAZ,EAAqB;AACnBxO,oBAAAA,OAAO,CAAC;AACNwgB,sBAAAA,MAAM,EAAEhS,OAAO,CAACM,WAAR,OAA0BpM,OAAO,CAACoM,WAAR;AAD5B,qBAAD,CAAP;AAGD,mBAJD,MAIO;AACL9O,oBAAAA,OAAO,CAAC;AACNN,sBAAAA,KAAK,EAAE,iBAAiBuB,GAAjB,GAAuB,gBAAvB,GAA0CuN;AAD3C,qBAAD,CAAP;AAGAuC,oBAAAA,KAAK,CAAC,iBAAD,EAAoB9P,GAApB,CAAL;AACD;AACF,iBAdH;AAgBD,eAjBD,CAiBE,OAAOA,GAAP,EAAY;AACZ8P,gBAAAA,KAAK,CAAC,iBAAD,EAAoB9P,GAApB,CAAL;AACAjB,gBAAAA,OAAO,CAAC;AAAEN,kBAAAA,KAAK,EAAG,iBAAiBuB;AAA3B,iBAAD,CAAP;AACD;AACF,aAtBM,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA+BP,SAAsB28B,wBAAtB;AAAA;AAAA;;;2EAAO,kBACLpS,IADK,EAEL9oB,OAFK,EAGL+b,GAHK,EAILiI,GAJK;AAAA;AAAA;AAAA;AAAA;AAAA,8CAME,IAAI3mB,OAAJ,CAAY,UAACC,OAAD;AACjB,kBAAMgqB,IAAI,GAAG6T,2BAAmB,CAAC3zB,QAAQ,CAACuU,GAAD,CAAT,CAAhC;AACA,kBAAM9e,IAAI,GAAGm+B,SAAG,CAAC5B,SAAJ,CAAcR,cAAd,CAA6BrB,YAA7B,CACX,iCADW,EAEX;AACE0D,gBAAAA,KAAK,EAAE/T,IADT;AAEEgU,gBAAAA,UAAU,EAAE9zB,QAAQ,CAACwc,GAAD;AAFtB,eAFW,CAAb;AAQA8E,cAAAA,IAAI,CAACkS,GAAL,CAASO,IAAT,CACE;AACElN,gBAAAA,EAAE,EAAEruB,OADN;AAEE/C,gBAAAA,IAAI,EAAEA;AAFR,eADF,EAKE,UAAUsB,GAAV,EAAoBuf,MAApB;AACE,oBAAI,CAACvf,GAAL,EAAU;AACR,sBAAMi9B,KAAK,GAAGJ,SAAG,CAAC5B,SAAJ,CAAcR,cAAd,CAA6BjB,aAA7B,CACZ,iCADY,EAEZja,MAFY,CAAd;AAIAxgB,kBAAAA,OAAO,CAAC;AACNwgB,oBAAAA,MAAM,EAAE7V,KAAK,CAACT,QAAQ,CAACg0B,KAAK,CAAC,CAAD,CAAN,CAAT,CAAL,KAA8Bv+B,IAAI,CAACkM,KAAL,CAAW,CAAX,EAAc,EAAd;AADhC,mBAAD,CAAP;AAGD,iBARD,MAQO7L,OAAO,CAAC;AAAEN,kBAAAA,KAAK,EAAEuB;AAAT,iBAAD,CAAP;AACR,eAfH;AAiBD,aA3BM,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAoCP,SAAsBk9B,gBAAtB;AAAA;AAAA;;;qEAAO,kBACL3S,IADK,EAEL9oB,OAFK,EAGL+b,GAHK,EAILiI,GAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMC0X,YAAAA,aAND,GAMiB,4CANjB;AAAA,8CAOE,IAAIr+B,OAAJ,CAAY,UAACC,OAAD;AACjBwrB,cAAAA,IAAI,CAACkS,GAAL,CAASO,IAAT,CACE;AACElN,gBAAAA,EAAE,EAAEqN,aADN;AAEEz+B,gBAAAA,IAAI,EAAEm+B,SAAG,CAAC5B,SAAJ,CAAcR,cAAd,CAA6BrB,YAA7B,CAA0C,YAA1C,EAAwD;AAC5DgE,kBAAAA,QAAQ,EAAE37B,OADkD;AAE5D47B,kBAAAA,MAAM,EAAE;AAFoD,iBAAxD;AAFR,eADF,EAQE,UAAUr9B,GAAV,EAAoB24B,GAApB;AACE,oBAAI,CAAC34B,GAAL,EAAU;AACR,sBAAM0rB,SAAS,GAAG4R,kBAAU,CAAC7X,GAAD,CAA5B;AACA,sBAAMsD,IAAI,GAAG6T,2BAAmB,CAACW,iBAAS,CAACt0B,QAAQ,CAACuU,GAAD,CAAT,CAAV,CAAhC;AACA,sBAAMjQ,OAAO,GAAGzE,YAAY,CAC1B+zB,SAAG,CAAC5B,SAAJ,CAAcR,cAAd,CAA6BjB,aAA7B,CAA2C,YAA3C,EAAyDb,GAAzD,EAA8D,CAA9D,CAD0B,CAA5B;AAGA,sBAAM6E,UAAU,GAAG9zB,KAAK,CACtB+zB,oBAAY,CAACC,iBAAS,CAAC3U,IAAD,EAAO2C,SAAS,CAACiS,CAAjB,EAAoBjS,SAAS,CAACzE,CAA9B,EAAiCyE,SAAS,CAACrG,CAA3C,CAAV,CADU,CAAxB;AAGAtmB,kBAAAA,OAAO,CAAC;AACNwgB,oBAAAA,MAAM,EAAEie,UAAU,CAAC3vB,WAAX,OAA6BN,OAAO,CAACM,WAAR;AAD/B,mBAAD,CAAP;AAGD,iBAZD,MAYO;AACL9O,kBAAAA,OAAO,CAAC;AAAEN,oBAAAA,KAAK,EAAEuB;AAAT,mBAAD,CAAP;AACD;AACF,eAxBH;AA0BD,aA3BM,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAqCP,SAAsB49B,UAAtB;AAAA;AAAA;;;+DAAO,kBACLn8B,OADK,EAEL9C,OAFK,EAGL+sB,SAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCmS,YAAAA,aALD,GAKiB10B,MAAM,CAACyU,IAAP,CAAYjf,OAAZ,EAAqB,MAArB,CALjB;AAQL;;AAEA+sB,YAAAA,SAAS,GAAGA,SAAS,CAAC3f,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAZ;AAEMD,YAAAA,KAZD,GAYS,CACZ3C,MAAM,CAACyU,IAAP,oCACmCigB,aAAa,CAACp+B,MADjD,EAEE,MAFF,CADY,EAKZo+B,aALY,CAZT;AAoBCC,YAAAA,SApBD,GAoBaC,cAAM,CAAC50B,MAAM,CAAC8b,MAAP,CAAcnZ,KAAd,CAAD,CApBnB;AAsBCmb,YAAAA,CAtBD,GAsBK9d,MAAM,CAACyU,IAAP,CAAY8N,SAAS,CAACtd,SAAV,CAAoB,CAApB,EAAuB,EAAvB,CAAZ,EAAwC,KAAxC,CAtBL;AAuBCiX,YAAAA,CAvBD,GAuBKlc,MAAM,CAACyU,IAAP,CAAY8N,SAAS,CAACtd,SAAV,CAAoB,EAApB,EAAwB,GAAxB,CAAZ,EAA0C,KAA1C,CAvBL;AAyBC4vB,YAAAA,KAzBD,GAyBS9zB,MAAM,CAACpB,YAAY,CAAC4iB,SAAS,CAACtd,SAAV,CAAoB,GAApB,EAAyB,GAAzB,CAAD,CAAb,CAzBf;AA2BDuvB,YAAAA,CA3BC,GA2BGK,KA3BH;AA6BL,gBAAIL,CAAC,IAAI,CAAT,EAAYA,CAAC,IAAI,EAAL;AAENM,YAAAA,GA/BD,GA+BOP,iBAAS,CAACI,SAAD,EAAYH,CAAZ,EAAe1W,CAAf,EAAkB5B,CAAlB,CA/BhB;AAiCC6Y,YAAAA,gBAjCD,GAiCoB,OAAOT,oBAAY,CAACQ,GAAD,CAAZ,CAAkBr0B,QAAlB,CAA2B,KAA3B,CAjC3B;;AAmCL,gBAAInI,OAAO,CAACoM,WAAR,OAA0BqwB,gBAAgB,CAACrwB,WAAjB,EAA9B,EAA8D;AAC5DiC,cAAAA,KAAK,CAAC,IAAD,EAAO6tB,CAAP,EAAU,QAAV,EAAoBK,KAApB,EAA2B,oBAA3B,EAAiDE,gBAAjD,CAAL;AACD;;AArCI,8CAuCE,IAAIp/B,OAAJ,CAAY,UAACC,OAAD;AAAA,qBACjBA,OAAO,CAAC;AACNwgB,gBAAAA,MAAM,EAAE9d,OAAO,CAACoM,WAAR,OAA0BqwB,gBAAgB,CAACrwB,WAAjB;AAD5B,eAAD,CADU;AAAA,aAAZ,CAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA8CP,IAAMyuB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1Bn8B,EAD0B,EAE1Bk7B,UAF0B;MAE1BA;;;AAAAA,IAAAA,8CACGx6B,eAAO,CAACK,WAAU,yCAClBL,eAAO,CAACM,UAAS;;;AAGpB,MAAIi1B,OAAO,GAAG,EAAd;;AACA,UAAQj2B,EAAR;AACE,SAAKU,eAAO,CAACK,OAAb;AACEk1B,MAAAA,OAAO,GAAGiF,UAAU,CAACx6B,eAAO,CAACK,OAAT,CAApB;AACA;;AACF;AACEk1B,MAAAA,OAAO,GAAGiF,UAAU,CAACx6B,eAAO,CAACM,MAAT,CAApB;AACA;AANJ;;AAQA,SAAOi1B,OAAP;AACD,CAjBD;;AA2BA,SAAgB+H,UAAUC;AACxB,MAAM3Y,GAAG,GAAG6X,kBAAU,CAACc,MAAD,CAAtB;AACA,SAAOC,gBAAQ,CAAC5Y,GAAG,CAACkY,CAAL,EAAQlY,GAAG,CAACwB,CAAZ,EAAexB,GAAG,CAACJ,CAAnB,CAAf;AACD;AACD,SAAgBiZ,gBACd/T,MACA9oB,SACA+b,KACAiI;AAEA,MAAM8Y,UAAU,GAAQ/B,SAAS,CAACjS,IAAD,EAAO9oB,OAAP,EAAgB+b,GAAhB,EAAqBiI,GAArB,CAAjC;;AAEA,MAAI8Y,UAAU,CAAChf,MAAf,EAAuB;AACrB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF;AAED,SAAsBsL,YAAtB;AAAA;AAAA;;;iEAAO,kBACLN,IADK,EAEL9oB,OAFK,EAGLmsB,GAHK,EAILpQ,GAJK,EAKLgN,UALK,EAMLE,OANK,EAOLC,SAPK,EAQLL,kBARK,EASLM,QATK;AAAA;AAAA;AAAA;AAAA;AAAA,gBAWAnpB,OAXA;AAAA;AAAA;AAAA;;AAAA,8CAYI;AAAEhD,cAAAA,KAAK,EAAE;AAAT,aAZJ;;AAAA;AAAA,8CAcE,IAAIK,OAAJ,CAAY,UAACC,OAAD;AACjB,kBAAI;AACFwrB,gBAAAA,IAAI,CAACkS,GAAL,CAASC,QAAT,CAAkB3V,IAAlB,CACEvJ,GADF,EAEE/b,OAFF,EAGEmsB,GAHF;AAAA,4EAIE,kBAAgB5tB,GAAhB,EAA0Buf,MAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCACOvf,GADP;AAAA;AAAA;AAAA;;AAEI;AACA8P,4BAAAA,KAAK,CACH,kBADG,EAEH,KAFG,EAGH0N,GAHG,EAIH,QAJG,EAKH+B,MALG,EAMH+K,kBANG,CAAL,CAHJ;;AAAA,kCAYQA,kBAAkB,IAAIK,SAZ9B;AAAA;AAAA;AAAA;;AAaM7a,4BAAAA,KAAK,CAAC,6CAAD,CAAL;AAbN;AAAA,mCAc4B0uB,aAAa,CACjCjU,IADiC,EAEjC9oB,OAFiC,EAGjC+b,GAHiC,EAIjC+B,MAJiC,EAKjCoL,SALiC,EAMjCD,OANiC,EAOjCJ,kBAPiC,CAdzC;;AAAA;AAcYmU,4BAAAA,OAdZ;;AAAA,iCAuBUA,OAAO,CAAClf,MAvBlB;AAAA;AAAA;AAAA;;AAwBQxgB,4BAAAA,OAAO,CAAC;AACN0mB,8BAAAA,GAAG,EAAElG,MADC;AAEN+K,8BAAAA,kBAAkB,EAAEmU,OAAO,CAACnU;AAFtB,6BAAD,CAAP;AAxBR;;AAAA;AAAA,kCAkCM,OAAOniB,MAAP,KAAkB,WAAlB,KACC,WAAAA,MAAM,SAAN,gCAAQC,QAAR,8BAAkBC,SAAlB,gBAA+BF,MAA/B,kCAA+B,SAAQC,QAAvC,aAA+B,kBAAkBs2B,UADlD,KAEA9T,QAFA;AAIAJ,4BAAAA,UAAU,KAAKzpB,sBAAc,CAAC49B,QAtCpC;AAAA;AAAA;AAAA;;AAAA;AAAA,wDAwCsCx2B,MAAM,CAACC,QAxC7C,qBAwCsC,kBAAiBmQ,OAAjB,CAAyB;AACvDiU,8BAAAA,MAAM,EAAE;AAD+C,6BAAzB,CAxCtC;;AAAA;AAwCYjf,4BAAAA,OAxCZ;;AAAA,kCA4CQA,OA5CR,YA4CQA,OAAO,CAAEouB,IAAT,CACE,UAACxuB,IAAD;AAAA,qCAAUA,IAAI,CAACU,WAAL,OAAuBpM,OAAO,CAACoM,WAAR,EAAjC;AAAA,6BADF,CA5CR;AAAA;AAAA;AAAA;;AAAA,8DAgDe9O,OAAO,CAAC;AAAE0mB,8BAAAA,GAAG,EAAElG;AAAP,6BAAD,CAhDtB;;AAAA;AAAA,kCAsDMgL,IAAI,QAAJ,6BAAAA,IAAI,CAAE+C,eAAN,mCAAuBsR,YAAvB,IACArU,IADA,sCACAA,IAAI,CAAE+C,eADN,aACA,uBAAuBuR,WAvD7B;AAAA;AAAA;AAAA;;AAyDMp9B,4BAAAA,OAAO,gCAAK8oB,IAAI,CAAC+C,eAAV,qBAAK,uBAAsBwR,eAA3B,CAAP;AAzDN,8DA0Da//B,OAAO,CAAC;AAAE0mB,8BAAAA,GAAG,EAAElG;AAAP,6BAAD,CA1DpB;;AAAA;AAAA;AAAA,mCA4D+Bid,SAAS,CAACjS,IAAD,EAAO9oB,OAAP,EAAgB+b,GAAhB,EAAqB+B,MAArB,CA5DxC;;AAAA;AA4DY0d,4BAAAA,KA5DZ;AA6DMntB,4BAAAA,KAAK,CAAC,iBAAD,EAAoBmtB,KAAK,CAAC1d,MAA1B,CAAL;;AA7DN,iCA8DU0d,KAAK,CAAC1d,MA9DhB;AAAA;AAAA;AAAA;;AAAA,8DA+DexgB,OAAO,CAAC;AAAE0mB,8BAAAA,GAAG,EAAElG;AAAP,6BAAD,CA/DtB;;AAAA;AAAA;AAAA,mCAoEoCod,wBAAwB,CACtDpS,IADsD,EAEtD9oB,OAFsD,EAGtD+b,GAHsD,EAItD+B,MAJsD,CApE5D;;AAAA;AAoEUwf,4BAAAA,YApEV;;AAAA,iCA2EQA,YAAY,CAACxf,MA3ErB;AAAA;AAAA;AAAA;;AAAA,8DA4EaxgB,OAAO,CAAC;AAAE0mB,8BAAAA,GAAG,EAAElG;AAAP,6BAAD,CA5EpB;;AAAA;AAAA,iCAgFQoL,SAhFR;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAiF4B6T,aAAa,CACjCjU,IADiC,EAEjC9oB,OAFiC,EAGjC+b,GAHiC,EAIjC+B,MAJiC,EAKjCoL,SALiC,EAMjCD,OANiC,CAjFzC;;AAAA;AAiFY+T,4BAAAA,QAjFZ;;AAAA,iCAyFUA,QAAO,CAAClf,MAzFlB;AAAA;AAAA;AAAA;;AAAA,8DA0FexgB,OAAO,CAAC;AACb0mB,8BAAAA,GAAG,EAAElG,MADQ;AAEb+K,8BAAAA,kBAAkB,EAAEmU,QAAO,CAACnU;AAFf,6BAAD,CA1FtB;;AAAA;AAAA;AAAA,mCAkGkC4S,gBAAgB,CAC5C3S,IAD4C,EAE5C9oB,OAF4C,EAG5C+b,GAH4C,EAI5C+B,MAJ4C,CAlGlD;;AAAA;AAkGUyf,4BAAAA,UAlGV;;AAAA,iCAyGQA,UAAU,CAACzf,MAzGnB;AAAA;AAAA;AAAA;;AAAA,8DA0GaxgB,OAAO,CAAC;AAAE0mB,8BAAAA,GAAG,EAAElG;AAAP,6BAAD,CA1GpB;;AAAA;AA6GI;AACA;AACAjhB,4BAAAA,OAAO,CAACkK,GAAR,CACE,yDADF;AA/GJ,8DAkHWzJ,OAAO,CAAC;AACbN,8BAAAA,KAAK,EAAE;AADM,6BAAD,CAlHlB;;AAAA;AAAA,8DAsHWM,OAAO,CAAC;AACbN,8BAAAA,KAAK,EAAE,sCAAsCuB;AADhC,6BAAD,CAtHlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF;;AAAA;AAAA;AAAA;AAAA;AAgID,eAjID,CAiIE,OAAOA,GAAP,EAAY;AACZjB,gBAAAA,OAAO,CAAC;AAAEN,kBAAAA,KAAK,EAAEuB;AAAT,iBAAD,CAAP;AACD;AACF,aArIM,CAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAsJP,SAAsBw+B,aAAtB;AAAA;AAAA;;;kEAAO,kBACLjU,IADK,EAEL9oB,OAFK,EAGL+b,GAHK,EAIL+B,MAJK,EAKLoL,SALK,EAMLD,OANK,EAOLJ,kBAPK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaC2U,YAAAA,GAbD,GAaO,IAAI9D,OAAJ,CAAY;AAAEzQ,cAAAA,OAAO,EAAPA;AAAF,aAAZ,CAbP;;AAAA,kBAcDJ,kBAAkB,KAAKjrB,SAAvB,IAAoC,CAACirB,kBAAkB,CAAC4U,WAdvD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiByBD,GAAG,CAAC7C,qBAAJ,CAA0B;AAAEzR,cAAAA,SAAS,EAATA;AAAF,aAA1B,CAjBzB;;AAAA;AAiBHL,YAAAA,kBAjBG,kBAkBAA,kBAlBA;;AAAA;AAAA,kBAqBDA,kBAAkB,IAAIA,kBAAkB,CAAC4U,WArBxC;AAAA;AAAA;AAAA;;AAuBH,gBAAI3f,MAAM,CAAChgB,UAAP,CAAkB,IAAlB,CAAJ,EAA6B;AAC3B4/B,cAAAA,OAAO,GAAG5f,MAAM,CAAC3U,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAV;AACD,aAFD,MAEO;AACLu0B,cAAAA,OAAO,GAAG5f,MAAV;AACD;;AA3BE;AAAA,mBA4BsBid,SAAS,CAChCjS,IADgC,EAEhCD,kBAAkB,CAAC4U,WAFa,EAGhC1hB,GAHgC,EAIhC2hB,OAJgC,CA5B/B;;AAAA;AA4BGlC,YAAAA,KA5BH;;AAAA,iBAkCCA,KAAK,CAAC1d,MAlCP;AAAA;AAAA;AAAA;;AAmCDzP,YAAAA,KAAK,CAAC,kBAAD,EAAqByP,MAArB,EAA6B+K,kBAA7B,CAAL;AAnCC,8CAoCM;AAAE/K,cAAAA,MAAM,EAANA,MAAF;AAAU+K,cAAAA,kBAAkB,EAAlBA;AAAV,aApCN;;AAAA;AAAA,8CAsCM;AAAE7rB,cAAAA,KAAK,EAAE;AAAT,aAtCN;;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAyCI;AAAEA,cAAAA,KAAK,EAAE;AAAT,aAzCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;IC5gBM2gC,KAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACE;;;AADF,SAIeC,QAJf;AAAA;AAAA;AAAA,gFAIS;AAAA;AAAA;AAAA;AAAA;AAAA;AACCrD,cAAAA,SADD,GACwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC+7B,UADQ;AAE3B9S,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eADxB;AAAA;AAAA,qBAOmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAPnB;;AAAA;AAOCpvB,cAAAA,QAPD,iBAOsDlO,IAPtD;;AAAA,oBAQDkO,QARC,YAQDA,QAAQ,CAAEkvB,UART;AAAA;AAAA;AAAA;;AAAA,4DAUElvB,QAVF,oBAUEA,QAAQ,CAAEkvB,UAVZ;;AAAA;AAaCyD,cAAAA,KAbD,GAaS3yB,QAAQ,CAACtK,GAblB;AAAA,+CAcE;AACLi9B,gBAAAA,KAAK,EAALA,KADK;AAEL3yB,gBAAAA,QAAQ,EAARA;AAFK,eAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA2BuuB,OAA3B;;ACwCA,IAAMqE,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD;AACf,MAAIA,MAAM,CAACruB,IAAP,OAAkB,EAAtB,EAA0B;AACxB,WAAO,GAAP;AACD;;AACD,SAAOquB,MAAP;AACD,CALD;;AAOA,SAASC,SAAT,CAAmBC,MAAnB,EAAkChyB,IAAlC;MAAkCA;AAAAA,IAAAA,OAAO;;;AACvC,MAAMiyB,OAAO,GAAQ,EAArB;;AAEA,MAAID,MAAM,YAAYzyB,KAAtB,EAA6B;AAC3ByyB,IAAAA,MAAM,CAACt9B,OAAP,CAAe,UAAC8K,IAAD,EAAYuO,KAAZ,EAA2B2K,KAA3B;AACb,UAAI/jB,GAAG,GAAG,EAAV;;AACA,cAAQqL,IAAR;AACE,aAAK,CAAL;AACErL,UAAAA,GAAG,GAAG6K,IAAI,CAACQ,IAAX;AACA;;AACF;AACErL,UAAAA,GAAG,GAAG6K,IAAI,CAACkD,KAAX;AALJ;;;AAQAuvB,MAAAA,OAAO,CAACt9B,GAAD,CAAP,GAAe6K,IAAI,CAAC8K,GAApB;AACD,KAXD;AAYD;;AAED,SAAO2nB,OAAP;AACD;;AAED,SAASC,KAAT,CAAenhC,IAAf,EAA4BiU,SAA5B;MAA4BA;AAAAA,IAAAA,YAAY;;;AACtC,MAAMmtB,MAAM,GAAa,EAAzB;AACA,MAAIC,QAAQ,GAAc,IAAIt3B,SAAJ,CAAc,CAAd,CAA1B;AACA,MAAIu3B,QAAQ,GAAc,IAAIv3B,SAAJ,CAAc,CAAd,CAA1B;AAEA,MAAMw3B,SAAS,GAAa,EAA5B;AACA,MAAMC,YAAY,GAAa,EAA/B;AACA,MAAMC,YAAY,GAAa,EAA/B;AAEA,MAAMC,IAAI,GAAG,CAAb;;AAEA,MAAI1hC,IAAI,YAAYwO,KAApB,EAA2B;AACzBxO,IAAAA,IAAI,CAAC2D,OAAL,CAAa,UAAC8K,IAAD;AACX,UAAMkzB,KAAK,GAAGC,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CAAxB;AACA,UAAMgG,GAAG,GAAG,IAAI1K,SAAJ,CAAc0E,IAAI,CAAC,CAAD,CAAlB,CAAZ;;AACA,UAAMmG,GAAG,GAAG,IAAI7K,SAAJ,CAAc0E,IAAI,CAAC,CAAD,CAAlB,CAAZ;;AACA4yB,MAAAA,QAAQ,GAAGA,QAAQ,CAAC5tB,IAAT,CAAcgB,GAAd,CAAX;AACA6sB,MAAAA,QAAQ,GAAGA,QAAQ,CAAC7tB,IAAT,CAAcmB,GAAd,CAAX;AACAwsB,MAAAA,MAAM,CAACpc,IAAP,CAAY;AACV2c,QAAAA,KAAK,EAAEA,KADG;AAEVltB,QAAAA,GAAG,EAAEA,GAAG,CAACvJ,QAAJ,EAFK;AAGV0J,QAAAA,GAAG,EAAEA,GAAG,CAAC1J,QAAJ,EAHK;AAIVm2B,QAAAA,QAAQ,EAAEA,QAAQ,CAACn2B,QAAT,EAJA;AAKVo2B,QAAAA,QAAQ,EAAEA,QAAQ,CAACp2B,QAAT;AALA,OAAZ;AAOAq2B,MAAAA,SAAS,CAACvc,IAAV,CAAe2c,KAAf;AACAH,MAAAA,YAAY,CAACxc,IAAb,CAAkBqc,QAAQ,CAACn2B,QAAT,EAAlB;AACAu2B,MAAAA,YAAY,CAACzc,IAAb,CAAkBsc,QAAQ,CAACp2B,QAAT,EAAlB;AACD,KAhBD;AAiBD;;AAED,MAAI+I,SAAJ,EAAe;AACbmtB,IAAAA,MAAM,CAACja,OAAP;AACAoa,IAAAA,SAAS,CAACpa,OAAV;AACAqa,IAAAA,YAAY,CAACra,OAAb;AACAsa,IAAAA,YAAY,CAACta,OAAb;AACD;;AAED,SAAO;AACLia,IAAAA,MAAM,EAANA,MADK;AAELG,IAAAA,SAAS,EAATA,SAFK;AAGLF,IAAAA,QAAQ,EAARA,QAHK;AAILC,IAAAA,QAAQ,EAARA,QAJK;AAKLE,IAAAA,YAAY,EAAZA,YALK;AAMLC,IAAAA,YAAY,EAAZA,YANK;AAOLC,IAAAA,IAAI,EAAJA;AAPK,GAAP;AASD;;AAED,SAAgBG;MACdC,aAAAA;MACAC,kBAAAA;MACAC,aAAAA;MACAC,kBAAAA;;AAOA,MAAIF,UAAU,KAAKphC,SAAnB,EAA8B;AAC5BohC,IAAAA,UAAU,GAAG,KAAb;AACD;;AAED,MAAIE,UAAU,KAAKthC,SAAnB,EAA8B;AAC5BshC,IAAAA,UAAU,GAAG,IAAb;AACD;;AAED,MAAM5tB,IAAI,GAAG8sB,KAAK,CAACa,KAAD,EAAQC,UAAR,CAAlB;AACA,MAAMjtB,IAAI,GAAGmsB,KAAK,CAACW,KAAD,EAAQC,UAAR,CAAlB;AAEA,MAAM5qB,SAAS,GACb,CAAC9C,IAAI,CAACktB,SAAL,CAAeltB,IAAI,CAACktB,SAAL,CAAexgC,MAAf,GAAwB,CAAvC,IAA4CiU,IAAI,CAACusB,SAAL,CAAe,CAAf,CAA7C,IAAkE,CADpE;AAGA,SAAO;AACLltB,IAAAA,IAAI,EAAJA,IADK;AAELW,IAAAA,IAAI,EAAJA,IAFK;AAGLmC,IAAAA,SAAS,EAATA;AAHK,GAAP;AAKD;AAED,IAAa+qB,WAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACE;;;AADF,SAIeC,qBAJf;AAAA;AAAA;AAAA,6FAIS;AAAA;AAAA;AAAA;AAAA;AAAA;AAKC7E,cAAAA,SALD,GAKwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACu9B,wBADQ;AAE3BtU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eALxB;AAAA;AAAA,qBAWmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAXnB;;AAAA;AAWCpvB,cAAAA,QAXD,iBAWsDlO,IAXtD;;AAAA,oBAYDkO,QAZC,YAYDA,QAAQ,CAAEkvB,UAZT;AAAA;AAAA;AAAA;;AAAA,4DAcElvB,QAdF,oBAcEA,QAAQ,CAAEkvB,UAdZ;;AAAA;AAAA,4DAkBAlvB,QAlBA;AAmBHA,gBAAAA,QAAQ,EAARA;AAnBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2BE;;;AA3BF;;AAAA,SA8Bem0B,mBA9Bf;AAAA;AAAA;AAAA,2FA8BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAKC/E,cAAAA,SALD,GAKwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACy9B,qBADQ;AAE3BxU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eALxB;AAAA;AAAA,qBAWmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAXnB;;AAAA;AAWCpvB,cAAAA,QAXD,kBAWsDlO,IAXtD;;AAAA,oBAYDkO,QAZC,YAYDA,QAAQ,CAAEkvB,UAZT;AAAA;AAAA;AAAA;;AAAA,6DAcElvB,QAdF,oBAcEA,QAAQ,CAAEkvB,UAdZ;;AAAA;AAAA,6DAkBAlvB,QAlBA;AAmBHA,gBAAAA,QAAQ,EAARA;AAnBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqDE;;;AArDF;;AAAA,SAwDeq0B,kBAxDf;AAAA;AAAA;AAAA,0FAwDS;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCjF,cAAAA,SAPD,GAOwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC29B,oBADQ;AAE3B1U,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAPxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,kBAasDlO,IAbtD;;AAAA,oBAcDkO,QAdC,YAcDA,QAAQ,CAAEkvB,UAdT;AAAA;AAAA;AAAA;;AAAA,6DAgBElvB,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAAA,gDAmBE;AACLqF,gBAAAA,8BAA8B,EAAEv0B,QAAQ,CACtC9I,oBAAY,CAACs9B,iCADyB,CADnC;AAILC,gBAAAA,oBAAoB,EAAEz0B,QAAQ,CAC5B9I,oBAAY,CAACw9B,sBADe,CAJzB;AAOLC,gBAAAA,cAAc,EAAE30B,QAAQ,CACtB9I,oBAAY,CAAC09B,gBADS,CAPnB;AAULC,gBAAAA,SAAS,EAAE70B,QAAQ,CAAC9I,oBAAY,CAAC49B,UAAd,CAVd;AAWL90B,gBAAAA,QAAQ,EAARA;AAXK,eAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0Fe+0B,mBA1Ff;AAAA,2FA0FS,kBACLppB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAACq+B,qBAFQ;AAG3BpV,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,kBAasDlO,IAbtD;;AAAA,oBAcDkO,QAdC,YAcDA,QAAQ,CAAEkvB,UAdT;AAAA;AAAA;AAAA;;AAAA,6DAgBElvB,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBC+F,cAAAA,eAnBD,GAmB2C,EAnB3C;;AAqBL,kBAAIj1B,QAAQ,IAAIA,QAAQ,CAACnN,MAAT,GAAkB,CAAlC,EAAqC;AACnCmN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACf,sBAAIA,IAAI,CAAChO,MAAT,EAAiB;AACf0iC,oBAAAA,eAAe,CAAC10B,IAAI,CAAChO,MAAN,CAAf,GAA+BgO,IAA/B;AACD;AACF,iBAJD;AAKD;;AA3BI,gDA6BE;AACL00B,gBAAAA,eAAe,EAAfA,eADK;AAELj1B,gBAAAA,QAAQ,EAARA;AAFK,eA7BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1FT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6Hek1B,qBA7Hf;AAAA,6FA6HS;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC9F,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACw+B,sBADQ;AAE3BvV,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,kBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,6DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAgBDkG,cAAAA,WAhBC,GAgBa,EAhBb;;AAkBL,kBAAIp1B,QAAJ,YAAIA,QAAQ,CAAEo1B,WAAd,EAA2B;AACzB,oBAAI,OAAOp1B,QAAQ,CAACo1B,WAAhB,KAAgC,QAApC,EAA8C;AAC5CA,kBAAAA,WAAW,GAAGp1B,QAAQ,CAACo1B,WAAT,CAAqBj2B,KAArB,CAA2B,GAA3B,CAAd;AACD,iBAFD,MAEO;AACLi2B,kBAAAA,WAAW,GAAGp1B,QAAQ,CAACo1B,WAAvB;AACD;AACF;;AAxBI,gDA0BE;AACLA,gBAAAA,WAAW,EAAXA,WADK;AAELp1B,gBAAAA,QAAQ,EAARA;AAFK,eA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7HT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6JE;;;AA7JF;;AAAA,SAgKeq1B,UAhKf;AAAA;AAAA;AAAA,kFAgKS,kBAAoBxzB,GAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoBA,GAApB;AAAoBA,gBAAAA,GAApB,GAAkClL,qBAAa,CAACmL,WAAhD;AAAA;;AASCstB,cAAAA,SATD,GASwB;AAC3BvtB,gBAAAA,GAAG,EAAHA,GAD2B;AAE3B+d,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eATxB;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,kBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,6DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAAA,6BAsBHttB,WAAW,CAAC5B,QAAD,EAAW6B,GAAX,CAtBR,EAqBGE,OArBH,gBAqBGA,OArBH,EAqBYV,KArBZ,gBAqBYA,KArBZ,EAqBmByB,QArBnB,gBAqBmBA,QArBnB,EAqB6BC,WArB7B,gBAqB6BA,WArB7B,EAqB0CtP,SArB1C,gBAqB0CA,SArB1C,EAqBqDuP,YArBrD,gBAqBqDA,YArBrD;AAAA,gDAwBE;AACLjB,gBAAAA,OAAO,EAAPA,OADK;AAELV,gBAAAA,KAAK,EAALA,KAFK;AAGLyB,gBAAAA,QAAQ,EAARA,QAHK;AAILC,gBAAAA,WAAW,EAAXA,WAJK;AAKL;AACAtP,gBAAAA,SAAS,EAATA,SANK;AAOLuP,gBAAAA,YAAY,EAAZA,YAPK;AAQL;AACAhD,gBAAAA,QAAQ,EAARA;AATK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqME;;;AArMF;;AAAA,SAwMes1B,aAxMf;AAAA;AAAA;AAAA,qFAwMS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBASQ,KAAKD,UAAL,CAAgB1+B,qBAAa,CAACsL,eAA9B,CATR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxMT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoNE;;;AApNF;;AAAA,SAuNeszB,SAvNf;AAAA;AAAA;AAAA,iFAuNS;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCnG,cAAAA,SALD,GAKwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC6+B,UADQ;AAE3B5V,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eALxB;AAAA;AAAA,qBAWmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAXnB;;AAAA;AAWCpvB,cAAAA,QAXD,kBAWsDlO,IAXtD;;AAAA,oBAYDkO,QAZC,YAYDA,QAAQ,CAAEkvB,UAZT;AAAA;AAAA;AAAA;;AAAA,6DAcElvB,QAdF,oBAcEA,QAAQ,CAAEkvB,UAdZ;;AAAA;AAAA,6DA8DAnvB,UAAU,CAACC,QAAD,CA9DV;AA+DH;AACA;AACA;AACA;AACA;AACAA,gBAAAA,QAAQ,EAARA;AApEG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvNT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgSE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AA5TF;;AAAA,SA+Tey1B,cA/Tf;AAAA;AAAA;AAAA,sFA+TS,kBAAwB9pB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyjB,cAAAA,SAJD,GAIwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAAC++B,gBAFQ;AAG3B9V,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAJxB;AAAA;AAAA,qBAWmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAXnB;;AAAA;AAWCpvB,cAAAA,QAXD,kBAWsDlO,IAXtD;;AAAA,oBAYDkO,QAZC,YAYDA,QAAQ,CAAEkvB,UAZT;AAAA;AAAA;AAAA;;AAAA,6DAcElvB,QAdF,oBAcEA,QAAQ,CAAEkvB,UAdZ;;AAAA;AAiBCyG,cAAAA,UAjBD,GAiBc31B,QAAQ,CAAC2jB,MAjBvB;AAAA,gDAmBE;AACLgS,gBAAAA,UAAU,EAAVA,UADK;AAEL31B,gBAAAA,QAAQ,EAARA;AAFK,eAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/TT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwVE;;;AAxVF;;AAAA,SA2Ve41B,gBA3Vf;AAAA;AAAA;AAAA,wFA2VS,mBACLjqB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3B3E,gBAAAA,WAAW,eAAO9e,OAAP;AAAgBlI,kBAAAA,KAAK,EAAEkI,OAAO,CAAClI,KAAR,CAAcrE,IAAd,CAAmB/F,GAAnB;AAAvB,kBADgB;AAE3BwI,gBAAAA,GAAG,EAAElL,qBAAa,CAACk/B,kBAFQ;AAG3BjW,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,mBAasDlO,IAbtD;;AAAA,oBAcDkO,QAdC,YAcDA,QAAQ,CAAEkvB,UAdT;AAAA;AAAA;AAAA;;AAAA,8DAgBElvB,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBC4G,cAAAA,aAnBD,GAmBiC,IAAIv2B,GAAJ,EAnBjC;;AAqBL,kBAAI,CAAAS,QAAQ,QAAR,YAAAA,QAAQ,CAAE2jB,MAAV,aAA4BrjB,KAAhC,EAAuC;AACrCN,gBAAAA,QAAQ,CAAC2jB,MAAT,CAAgBluB,OAAhB,CAAwB,UAACiI,KAAD,EAAaoR,KAAb;AACtB;AACAgnB,kBAAAA,aAAa,CAACh2B,GAAd,CAAkB6L,OAAO,CAAClI,KAAR,CAAcqL,KAAd,CAAlB,EAAwDpR,KAAxD;AACD,iBAHD;AAID;;AA1BI,iDA4BE;AACLo4B,gBAAAA,aAAa,EAAbA,aADK;AAEL91B,gBAAAA,QAAQ,EAARA;AAFK,eA5BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3VT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4Xe+1B,mBA5Xf;AAAA,2FA4XS,mBACLpqB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3B3E,gBAAAA,WAAW,eAAO9e,OAAP,CADgB;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAACq/B,sBAFQ;AAG3BpW,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,mBAasDlO,IAbtD;;AAAA,oBAcDkO,QAdC,YAcDA,QAAQ,CAAEkvB,UAdT;AAAA;AAAA;AAAA;;AAAA,8DAgBElvB,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAAA,iDAmBE;AACL4G,gBAAAA,aAAa,EAAE91B,QADV;AAELA,gBAAAA,QAAQ,EAARA;AAFK,eAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5XT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqZE;;;AArZF;;AAAA,SAwZei2B,aAxZf;AAAA;AAAA;AAAA,qFAwZS,mBACLtqB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyjB,cAAAA,SAPD,GAOwB;AAC3B3E,gBAAAA,WAAW,eACN9e,OADM;AAETlI,kBAAAA,KAAK,EAAEkI,OAAO,CAAClI,KAAR,CAAcrE,IAAd,CAAmB/F,GAAnB;AAFE,kBADgB;AAK3BwI,gBAAAA,GAAG,EAAElL,qBAAa,CAACu/B,cALQ;AAM3BtW,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GANS;AAO3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAPS,eAPxB;AAAA;AAAA,qBAiBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAjBnB;;AAAA;AAiBCpvB,cAAAA,QAjBD,mBAiBsDlO,IAjBtD;;AAAA,oBAkBDkO,QAlBC,YAkBDA,QAAQ,CAAEkvB,UAlBT;AAAA;AAAA;AAAA;;AAAA,8DAoBElvB,QApBF,oBAoBEA,QAAQ,CAAEkvB,UApBZ;;AAAA;AAuBCiH,cAAAA,eAvBD,GAuBmC,IAAI52B,GAAJ,EAvBnC;;AAyBL,kBAAI,CAAAS,QAAQ,QAAR,YAAAA,QAAQ,CAAEo2B,UAAV,aAAgC91B,KAApC,EAA2C;AACzCN,gBAAAA,QAAQ,CAACo2B,UAAT,CAAoB3gC,OAApB,CAA4B,UAACiI,KAAD,EAAaoR,KAAb;AAC1BqnB,kBAAAA,eAAe,CAACr2B,GAAhB,CAAoB6L,OAAO,CAAClI,KAAR,CAAcqL,KAAd,CAApB,EAA0DpR,KAA1D;AACD,iBAFD;AAGD;;AA7BI,iDA+BE;AACLy4B,gBAAAA,eAAe,EAAfA,eADK;AAELn2B,gBAAAA,QAAQ,EAARA;AAFK,eA/BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxZT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6bE;;;AA7bF;;AAAA,SAgceq2B,eAhcf;AAAA;AAAA;AAAA,uFAgcS;AAAA;AAAA;AAAA;AAAA;AAAA;AAICjH,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC2/B,iBADQ;AAE3B1W,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,mBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,8DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAgBCqH,cAAAA,YAhBD,GAgB8B;AACjCC,gBAAAA,WAAW,EAAE1D,SAAS,CAAC9yB,QAAQ,CAACw2B,WAAV,CADW;AAEjC1Y,gBAAAA,OAAO,EAAE9d,QAAQ,CAAC8d,OAFe;AAGjC2Y,gBAAAA,cAAc,EAAEz2B,QAAQ,CAACy2B,cAHQ;AAIjCC,gBAAAA,eAAe,EAAE12B,QAAQ,CAAC02B,eAJO;AAKjCC,gBAAAA,kBAAkB,EAAE7D,SAAS,CAAC9yB,QAAQ,CAAC22B,kBAAV,CALI;AAMjCC,gBAAAA,WAAW,EAAE9D,SAAS,CAAC9yB,QAAQ,CAAC42B,WAAV,EAAuB,CAAvB,CANW;AAOjCC,gBAAAA,eAAe,EAAE/D,SAAS,CAAC9yB,QAAQ,CAAC62B,eAAV,CAPO;AAQjCC,gBAAAA,YAAY,EAAEhE,SAAS,CAAC9yB,QAAQ,CAAC82B,YAAV,CARU;AASjCC,gBAAAA,UAAU,EAAEjE,SAAS,CAAC9yB,QAAQ,CAAC+2B,UAAV,CATY;AAUjCC,gBAAAA,cAAc,EAAElE,SAAS,CAAC9yB,QAAQ,CAACg3B,cAAV;AAVQ,eAhB9B;AAAA,iDA6BE;AACLT,gBAAAA,YAAY,EAAZA,YADK;AAELv2B,gBAAAA,QAAQ,EAARA;AAFK,eA7BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhcT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmeei3B,WAnef;AAAA,mFAmeS,mBAAqBtrB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKurB,QAAL,CAAiBvrB,OAAjB,EAA0BhV,qBAAa,CAACwgC,aAAxC,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAneT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAueE;;;AAveF;;AAAA,SA0eeD,QA1ef;AAAA;AAAA;AAAA,gFA0eS,mBACLvrB,OADK,EAEL9J,GAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAELA,GAFK;AAELA,gBAAAA,GAFK,GAESlL,qBAAa,CAACygC,SAFvB;AAAA;;AAOL,kBAAI,CAAAzrB,OAAO,QAAP,YAAAA,OAAO,CAAEzW,KAAT,MAAmBzC,SAAvB,EAAkC;AAChCkZ,gBAAAA,OAAO,CAACzW,KAAR,GAAgB,CAAhB;AACD;;AAED,kBAAI,CAAAyW,OAAO,QAAP,YAAAA,OAAO,CAAE0rB,KAAT,MAAmB5kC,SAAvB,EAAkC;AAChCkZ,gBAAAA,OAAO,CAAC0rB,KAAR,GAAgB,EAAhB;AACD;;AAEKjI,cAAAA,SAfD,GAewB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAHA,GAF2B;AAG3B+d,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAfxB;AAAA;AAAA,qBAsBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAtBnB;;AAAA;AAsBCpvB,cAAAA,QAtBD,mBAsBsDlO,IAtBtD;;AAAA,oBAuBDkO,QAvBC,YAuBDA,QAAQ,CAAEkvB,UAvBT;AAAA;AAAA;AAAA;;AAAA,8DAyBElvB,QAzBF,oBAyBEA,QAAQ,CAAEkvB,UAzBZ;;AAAA;AA4BCoI,cAAAA,SA5BD,GA4Bat3B,QAAQ,CAAC,WAAD,CA5BrB;AAAA,6BA8B6B2zB,WAAW,CAAC;AAC5CC,gBAAAA,KAAK,EAAE5zB,QAAQ,CAAC,MAAD,CAD6B;AAE5C8zB,gBAAAA,KAAK,EAAE9zB,QAAQ,CAAC,MAAD;AAF6B,eAAD,CA9BxC,EA8BG8G,IA9BH,gBA8BGA,IA9BH,EA8BSX,IA9BT,gBA8BSA,IA9BT,EA8Be8C,SA9Bf,gBA8BeA,SA9Bf;AAmCCjD,cAAAA,KAnCD,GAmCoB;AACvBzT,gBAAAA,MAAM,EAAEyN,QAAQ,CAACtM,MADM;AAEvB2uB,gBAAAA,OAAO,EAAExf,QAAQ,CAAC7C,QAAQ,CAACqiB,OAAV,CAFM;AAGvBiV,gBAAAA,SAAS,EAATA,SAHuB;AAIvBruB,gBAAAA,SAAS,EAATA,SAJuB;AAKvB9C,gBAAAA,IAAI,EAAEA,IAAI,CAAC+sB,MALY;AAMvBqE,gBAAAA,WAAW,EAAEpxB,IAAI,CAACktB,SANK;AAOvBmE,gBAAAA,cAAc,EAAErxB,IAAI,CAACmtB,YAPE;AAQvBmE,gBAAAA,cAAc,EAAEtxB,IAAI,CAACotB,YARE;AASvBvpB,gBAAAA,aAAa,EAAE7D,IAAI,CAACgtB,QAAL,CAAcn2B,QAAd,EATQ;AAUvBoN,gBAAAA,aAAa,EAAEjE,IAAI,CAACitB,QAAL,CAAcp2B,QAAd,EAVQ;AAWvB8J,gBAAAA,IAAI,EAAEA,IAAI,CAACosB,MAXY;AAYvBwE,gBAAAA,WAAW,EAAE5wB,IAAI,CAACusB,SAZK;AAavBsE,gBAAAA,cAAc,EAAE7wB,IAAI,CAACwsB,YAbE;AAcvBsE,gBAAAA,cAAc,EAAE9wB,IAAI,CAACysB,YAdE;AAevBlpB,gBAAAA,aAAa,EAAEvD,IAAI,CAACqsB,QAAL,CAAcn2B,QAAd,EAfQ;AAgBvBiN,gBAAAA,aAAa,EAAEnD,IAAI,CAACssB,QAAL,CAAcp2B,QAAd;AAhBQ,eAnCpB;AAAA,iDAsDE;AACLgJ,gBAAAA,KAAK,EAALA,KADK;AAELhG,gBAAAA,QAAQ,EAARA;AAFK,eAtDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1eT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsiBe63B,YAtiBf;AAAA,oFAsiBS,mBAAsBlsB,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKQ,KAAKmsB,SAAL,CAAkBnsB,OAAlB,EAA2BhV,qBAAa,CAACohC,cAAzC,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtiBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8iBE;;;;AA9iBF;;AAAA,SAkjBeD,SAljBf;AAAA;AAAA;AAAA,iFAkjBS,mBACLnsB,OADK,EAEL9J,GAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAELA,GAFK;AAELA,gBAAAA,GAFK,GAESlL,qBAAa,CAACqhC,UAFvB;AAAA;;AAQC5I,cAAAA,SARD,GAQwB;AAC3BvtB,gBAAAA,GAAG,EAAHA,GAD2B;AAE3B4oB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eARxB;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,mBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,8DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAqBC+I,cAAAA,OArBD,GAqBWj4B,QAAQ,CAACi4B,OArBpB;AAsBCC,cAAAA,OAtBD,GAsBoC,EAtBpC;AAuBCC,cAAAA,QAvBD,GAuB0B,EAvB1B;;AAyBL,kBAAIF,OAAO,IAAIA,OAAO,CAACplC,MAAvB,EAA+B;AAC7BolC,gBAAAA,OAAO,CAACxiC,OAAR,CAAgB,UAAC8K,IAAD,EAAYxN,GAAZ,EAAyBqlC,GAAzB;AACd,sBAAMC,IAAI,GAAG3E,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CAAvB;AACA,sBAAM+3B,KAAK,GAAG5E,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CAAxB;AAEA,sBAAMhO,MAAM,GAAGgO,IAAI,CAAC,CAAD,CAAJ,CAAQvB,OAAR,CAAgB,UAAhB,EAA4B,EAA5B,CAAf;;AAEA,sCAAwB1M,YAAY,CAACC,MAAD,CAApC;AAAA,sBAAQC,IAAR,iBAAQA,IAAR;AAAA,sBAAcE,KAAd,iBAAcA,KAAd;;AAEA,sBAAI6lC,MAAM,GAAG,CAAb;;AACA,sBAAI,CAACt5B,KAAK,CAACo5B,IAAD,CAAN,IAAgB,CAACp5B,KAAK,CAACq5B,KAAD,CAA1B,EAAmC;AACjCC,oBAAAA,MAAM,GAAG,CAACD,KAAK,GAAGD,IAAT,IAAiBA,IAA1B;AACD;;AAED,sBAAMf,SAAS,GAAGz0B,QAAQ,CAACtC,IAAI,CAAC,CAAD,CAAL,CAA1B;AAEA,sBAAMi4B,IAAI,GAAe;AACvBjmC,oBAAAA,MAAM,EAANA,MADuB;AAEvBC,oBAAAA,IAAI,EAAJA,IAFuB;AAGvBE,oBAAAA,KAAK,EAALA,KAHuB;AAIvB4kC,oBAAAA,SAAS,EAATA,SAJuB;AAKvBmB,oBAAAA,iBAAiB,EAAEl4B,IAAI,CAAC,CAAD,CALA;AAMvBm4B,oBAAAA,kBAAkB,EAAEn4B,IAAI,CAAC,CAAD,CAND;AAOvB83B,oBAAAA,IAAI,EAAJA,IAPuB;AAQvBM,oBAAAA,IAAI,EAAEjF,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CARO;AASvBq4B,oBAAAA,GAAG,EAAElF,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CATQ;AAUvB+3B,oBAAAA,KAAK,EAALA,KAVuB;AAWvBnjC,oBAAAA,KAAK,EAAE0N,QAAQ,CAACtC,IAAI,CAAC,CAAD,CAAL,CAXQ;AAYvBs4B,oBAAAA,GAAG,EAAEnF,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CAZQ;AAavBu4B,oBAAAA,GAAG,EAAEpF,UAAU,CAACnzB,IAAI,CAAC,EAAD,CAAL,CAbQ;AAcvBw4B,oBAAAA,YAAY,EAAEnG,QAAQ,CAACryB,IAAI,CAAC,EAAD,CAAL,CAdC;AAevBy4B,oBAAAA,aAAa,EAAEpG,QAAQ,CAACryB,IAAI,CAAC,EAAD,CAAL,CAfA;AAgBvBg4B,oBAAAA,MAAM,EAANA;AAhBuB,mBAAzB;AAmBAL,kBAAAA,OAAO,CAAC3lC,MAAD,CAAP,GAAkBimC,IAAlB;AACAL,kBAAAA,QAAQ,CAACrhB,IAAT,CAAc0hB,IAAd;AACD,iBApCD;AAqCD;;AA/DI,iDAiEE;AACLN,gBAAAA,OAAO,EAAPA,OADK;AAELC,gBAAAA,QAAQ,EAARA,QAFK;AAGLn4B,gBAAAA,QAAQ,EAARA;AAHK,eAjEF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAljBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0nBei5B,gBA1nBf;AAAA,wFA0nBS,mBAAuBl3B,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuBA,OAAvB;AAAuBA,gBAAAA,OAAvB,GAAqDtP,SAArD;AAAA;;AAAA,kBAEAsP,OAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGkB,KAAKuzB,aAAL,EAHlB;;AAAA;AAGG3iB,cAAAA,MAHH;;AAAA,mBAICA,MAAM,CAAC3P,YAJR;AAAA;AAAA;AAAA;;AAKD2I,cAAAA,OAAO,GAAG;AACRjY,gBAAAA,MAAM,EAAEif,MAAM,CAAC3P;AADP,eAAV;AALC;AAAA;;AAAA;AAAA,iDASM2P,MATN;;AAAA;AAAA;AAAA;;AAAA;AAYHhH,cAAAA,OAAO,GAAG;AACRjY,gBAAAA,MAAM,EAAEqO;AADA,eAAV;;AAZG;AAAA;AAAA,qBAiBQ,KAAK81B,YAAL,CAAkBlsB,OAAlB,CAjBR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1nBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8oBeutB,aA9oBf;AAAA,qFA8oBS,mBAAoBn3B,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoBA,OAApB;AAAoBA,gBAAAA,OAApB,GAAkDtP,SAAlD;AAAA;;AAAA,kBAEAsP,OAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGkB,KAAKszB,UAAL,EAHlB;;AAAA;AAGG1iB,cAAAA,MAHH;;AAAA,mBAICA,MAAM,CAAC3P,YAJR;AAAA;AAAA;AAAA;;AAKD2I,cAAAA,OAAO,GAAG;AACRjY,gBAAAA,MAAM,EAAEif,MAAM,CAAC3P;AADP,eAAV;AALC;AAAA;;AAAA;AAAA,iDASM2P,MATN;;AAAA;AAAA;AAAA;;AAAA;AAYHhH,cAAAA,OAAO,GAAG;AACRjY,gBAAAA,MAAM,EAAEqO;AADA,eAAV;;AAZG;AAAA;AAAA,qBAiBQ,KAAK+1B,SAAL,CAAensB,OAAf,CAjBR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9oBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkqBewtB,iBAlqBf;AAAA,yFAkqBS,mBAA2BxtB,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,KAAKytB,cAAL,CACXztB,OADW,EAEXhV,qBAAa,CAAC0iC,mBAFH,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlqBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyqBE;;;AAzqBF;;AAAA,SA4qBeD,cA5qBf;AAAA;AAAA;AAAA,sFA4qBS,mBACLztB,OADK,EAEL9J,GAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAELA,GAFK;AAELA,gBAAAA,GAFK,GAESlL,qBAAa,CAAC2iC,eAFvB;AAAA;;AAOClK,cAAAA,SAPD,GAOwB;AAC3BvtB,gBAAAA,GAAG,EAAHA,GAD2B;AAE3B4oB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAPxB;AAAA;AAAA,qBAcmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAdnB;;AAAA;AAcCpvB,cAAAA,QAdD,mBAcsDlO,IAdtD;;AAAA,oBAeDkO,QAfC,YAeDA,QAAQ,CAAEkvB,UAfT;AAAA;AAAA;AAAA;;AAAA,8DAiBElvB,QAjBF,oBAiBEA,QAAQ,CAAEkvB,UAjBZ;;AAAA;AAoBDqK,cAAAA,MApBC,GAoBQ,KApBR;AAAA,8BAsBG5tB,OAAO,CAAC6tB,QAtBX;AAAA,kDAuBE/hC,uBAAe,CAACgiC,IAvBlB,0BAyBEhiC,uBAAe,CAACiiC,IAzBlB,0BA4BEjiC,uBAAe,CAACkiC,KA5BlB,0BA+BEliC,uBAAe,CAACmiC,KA/BlB,0BAkCEniC,uBAAe,CAACoiC,GAlClB,0BAqCEpiC,uBAAe,CAACqiC,GArClB,0BAwCEriC,uBAAe,CAACsiC,GAxClB,0BA2CEtiC,uBAAe,CAACuiC,IA3ClB,0BA8CEviC,uBAAe,CAACwiC,EA9ClB,0BAiDExiC,uBAAe,CAACyiC,EAjDlB;AAAA;;AAAA;AAAA;;AAAA;AA0BDX,cAAAA,MAAM,GAAG,MAAT;AA1BC;;AAAA;AA6BDA,cAAAA,MAAM,GAAG,MAAT;AA7BC;;AAAA;AAgCDA,cAAAA,MAAM,GAAG,OAAT;AAhCC;;AAAA;AAmCDA,cAAAA,MAAM,GAAG,OAAT;AAnCC;;AAAA;AAsCDA,cAAAA,MAAM,GAAG,OAAT;AAtCC;;AAAA;AAyCDA,cAAAA,MAAM,GAAG,QAAT;AAzCC;;AAAA;AA4CDA,cAAAA,MAAM,GAAG,QAAT;AA5CC;;AAAA;AA+CDA,cAAAA,MAAM,GAAG,QAAT;AA/CC;;AAAA;AAkDDA,cAAAA,MAAM,GAAG,SAAT;AAlDC;;AAAA;AAAA;;AAAA;AAwDDY,cAAAA,YAxDC,GAwD6B,EAxD7B;;AA0DL,kBAAI,CAAAn6B,QAAQ,QAAR,YAAAA,QAAQ,CAAEm6B,YAAV,aAAkC75B,KAAtC,EAA6C;AACrC85B,gBAAAA,eADqC,GACnBp6B,QAAQ,CAACm6B,YAAT,CAAsBlhB,OAAtB,EADmB;AAGvCohB,gBAAAA,eAHuC,GAGI5nC,SAHJ;AAIvC6nC,gBAAAA,MAJuC,GAI9B,CAAC,CAJ6B;AAM3CF,gBAAAA,eAAe,CAAC3kC,OAAhB,CAAwB,UAAC8K,IAAD;AACtB,sBAAMg6B,KAAK,GAAG13B,QAAQ,CAACtC,IAAI,CAAC,CAAD,CAAL,CAAtB;;AAEA,sBAAI85B,eAAe,KAAK5nC,SAAxB,EAAmC;AACjC6nC,oBAAAA,MAAM,GAAGC,KAAT;AAEA,wBAAMhkC,WAAW,GAAgB;AAC/B+gC,sBAAAA,SAAS,EAAEiD,KADoB;AAE/BC,sBAAAA,GAAG,EAAE33B,QAAQ,CAACtC,IAAI,CAAC,CAAD,CAAL,CAFkB;AAG/B83B,sBAAAA,IAAI,EAAE3E,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CAHe;AAI/B+3B,sBAAAA,KAAK,EAAE5E,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CAJc;AAK/Bo4B,sBAAAA,IAAI,EAAEjF,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CALe;AAM/Bq4B,sBAAAA,GAAG,EAAElF,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CANgB;AAO/Bk6B,sBAAAA,OAAO,EAAEl6B,IAAI,CAAC,CAAD,CAPkB;AAQ/Bm6B,sBAAAA,QAAQ,EAAEn6B,IAAI,CAAC,CAAD;AARiB,qBAAjC;AAWA85B,oBAAAA,eAAe,GAAG9jC,WAAlB;AAEA4jC,oBAAAA,YAAY,CAACrjB,IAAb,CAAkBvgB,WAAlB;AACD,mBAjBD,MAiBO;AACL,wBAAMokC,OAAO,GAAG,CAACJ,KAAK,GAAGD,MAAT,IAAmBf,MAAnC,CADK;;AAKL,yBAAK,IAAIzmC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI6nC,OAArB,EAA8B7nC,CAAC,EAA/B,EAAmC;AACjC,0BAAIyD,YAAwB,SAA5B;;AAEA,0BAAIzD,CAAC,KAAK6nC,OAAV,EAAmB;AACjBpkC,wBAAAA,YAAW,GAAG;AACZ+gC,0BAAAA,SAAS,EAAEgD,MAAM,GAAGxnC,CAAC,GAAGymC,MADZ;AAEZiB,0BAAAA,GAAG,EAAE33B,QAAQ,CAACtC,IAAI,CAAC,CAAD,CAAL,CAFD;AAGZ83B,0BAAAA,IAAI,EAAE3E,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CAHJ;AAIZ+3B,0BAAAA,KAAK,EAAE5E,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CAJL;AAKZo4B,0BAAAA,IAAI,EAAEjF,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CALJ;AAMZq4B,0BAAAA,GAAG,EAAElF,UAAU,CAACnzB,IAAI,CAAC,CAAD,CAAL,CANH;AAOZk6B,0BAAAA,OAAO,EAAEl6B,IAAI,CAAC,CAAD,CAPD;AAQZm6B,0BAAAA,QAAQ,EAAEn6B,IAAI,CAAC,CAAD;AARF,yBAAd;AAWA+5B,wBAAAA,MAAM,GAAGC,KAAT;AACAF,wBAAAA,eAAe,GAAG9jC,YAAlB;AACD,uBAdD,MAcO;AACLA,wBAAAA,YAAW,GAAG;AACZ+gC,0BAAAA,SAAS,EAAEgD,MAAM,GAAGxnC,CAAC,GAAGymC,MADZ;AAEZiB,0BAAAA,GAAG,EAAE,CAFO;AAGZnC,0BAAAA,IAAI,EAAEgC,eAAe,CAAC/B,KAHV;AAIZA,0BAAAA,KAAK,EAAE+B,eAAe,CAAC/B,KAJX;AAKZK,0BAAAA,IAAI,EAAE0B,eAAe,CAAC/B,KALV;AAMZM,0BAAAA,GAAG,EAAEyB,eAAe,CAAC/B,KANT;AAOZmC,0BAAAA,OAAO,EAAE,GAPG;AAQZC,0BAAAA,QAAQ,EAAE;AARE,yBAAd;AAUD;;AAEDP,sBAAAA,YAAY,CAACrjB,IAAb,CAAkBvgB,YAAlB;AACD;AACF;AACF,iBA1DD;AA2DD;;AAED4jC,cAAAA,YAAY,GAAGA,YAAY,CAAClhB,OAAb,EAAf;AA7HK,iDA+HE;AACLkhB,gBAAAA,YAAY,EAAZA,YADK;AAELn6B,gBAAAA,QAAQ,EAARA;AAFK,eA/HF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5qBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAizBE;;;AAjzBF;;AAAA,SAozBe46B,YApzBf;AAAA;AAAA;AAAA,oFAozBS,mBAAsBjvB,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCyjB,cAAAA,SADD,GACwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACkkC,cADQ;AAE3BpQ,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eADxB;AAAA;AAAA,qBAQmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CARnB;;AAAA;AAQCpvB,cAAAA,QARD,mBAQsDlO,IARtD;;AAAA,oBASDkO,QATC,YASDA,QAAQ,CAAEkvB,UATT;AAAA;AAAA;AAAA;;AAAA,8DAWElvB,QAXF,oBAWEA,QAAQ,CAAEkvB,UAXZ;;AAAA;AAcC4L,cAAAA,UAdD,GAc0C,EAd1C;;AAgBL,kBAAI,CAAA96B,QAAQ,QAAR,YAAAA,QAAQ,CAAE+6B,MAAV,aAA4Bz6B,KAAhC,EAAuC;AACrCN,gBAAAA,QAAQ,CAAC+6B,MAAT,CAAgBtlC,OAAhB,CAAwB,UAAC8K,IAAD;AACtBu6B,kBAAAA,UAAU,CAACv6B,IAAI,CAAChO,MAAN,CAAV,GAA0BgO,IAA1B;AACD,iBAFD;AAGD;;AApBI,iDAsBE;AACLu6B,gBAAAA,UAAU,EAAVA,UADK;AAEL96B,gBAAAA,QAAQ,EAARA;AAFK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApzBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAg1BE;;;AAh1BF;;AAAA,SAm1Beg7B,wBAn1Bf;AAAA;AAAA;AAAA,gGAm1BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC5L,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACskC,mBADQ;AAE3Brb,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,mBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,8DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAgBC8L,cAAAA,wBAhBD,aAgBgCh7B,QAhBhC;AAAA,iDAiBE;AACLg7B,gBAAAA,wBAAwB,EAAxBA,wBADK;AAELh7B,gBAAAA,QAAQ,EAARA;AAFK,eAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAn1BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA02BE;;;AA12BF;;AAAA,SA62Bek7B,eA72Bf;AAAA;AAAA;AAAA,uFA62BS,mBAAyBvvB,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAKL,kBAAIA,OAAO,CAAC0rB,KAAR,KAAkB5kC,SAAtB,EAAiC;AAC/BkZ,gBAAAA,OAAO,CAAC0rB,KAAR,GAAgB,EAAhB;AACD;;AAEKjI,cAAAA,SATD,GASwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACwkC,UADQ;AAE3B1Q,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eATxB;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBCkM,cAAAA,YAtBD,GAsBmC,EAtBnC;;AAwBL,kBAAI,CAAAp7B,QAAQ,QAAR,YAAAA,QAAQ,CAAEq7B,MAAV,aAA4B/6B,KAAhC,EAAuC;AACrCN,gBAAAA,QAAQ,CAACq7B,MAAT,CAAgB5lC,OAAhB,CAAwB,UAAC8K,IAAD;AACtB66B,kBAAAA,YAAY,CAACtkB,IAAb,CAAkB;AAChBwkB,oBAAAA,SAAS,EAAEz4B,QAAQ,CAACtC,IAAI,CAAC,CAAD,CAAL,CADH;AAEhBg7B,oBAAAA,OAAO,EAAEh7B,IAAI,CAAC,CAAD,CAFG;AAGhBi7B,oBAAAA,IAAI,EAAEj7B,IAAI,CAAC,CAAD,CAHM;AAIhBwD,oBAAAA,MAAM,EAAExD,IAAI,CAAC,CAAD,CAJI;AAKhBkzB,oBAAAA,KAAK,EAAElzB,IAAI,CAAC,CAAD,CALK;AAMhB7M,oBAAAA,MAAM,EAAE6M,IAAI,CAAC,CAAD,CANI;AAOhB8K,oBAAAA,GAAG,EAAE9K,IAAI,CAAC,CAAD,CAPO;AAQhBQ,oBAAAA,IAAI,EAAER,IAAI,CAAC,EAAD;AARM,mBAAlB;AAUD,iBAXD;AAYD;;AArCI,iDAuCE;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QADd;AAELL,gBAAAA,YAAY,EAAZA,YAFK;AAGLp7B,gBAAAA,QAAQ,EAARA;AAHK,eAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA72BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA25BE;;;AA35BF;;AAAA,SA85Be07B,UA95Bf;AAAA;AAAA;AAAA,kFA85BS,mBAAoB/vB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyjB,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACglC,cADQ;AAE3BlR,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAJxB;AAAA;AAAA,qBAWmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAXnB;;AAAA;AAWCpvB,cAAAA,QAXD,mBAWsDlO,IAXtD;;AAAA,oBAYDkO,QAZC,YAYDA,QAAQ,CAAEkvB,UAZT;AAAA;AAAA;AAAA;;AAAA,8DAcElvB,QAdF,oBAcEA,QAAQ,CAAEkvB,UAdZ;;AAAA;AAiBC0M,cAAAA,OAjBD,GAiBwB57B,QAjBxB;AAAA,iDAkBE;AACL47B,gBAAAA,OAAO,EAAPA,OADK;AAEL57B,gBAAAA,QAAQ,EAARA;AAFK,eAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA95BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAs7BE;;AAt7BF;;AAAA,SAw7Be67B,WAx7Bf;AAAA;AAAA;AAAA,mFAw7BS,mBACLlwB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCyjB,cAAAA,SAHD,GAGwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAACmlC,aAFQ;AAG3Blc,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAHxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,mBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,8DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAAA,iDAgBE;AACLnN,gBAAAA,KAAK,EAAE/hB,QAAF,oBAAEA,QAAQ,CAAE+hB,KADZ;AAEL/hB,gBAAAA,QAAQ,EAARA;AAFK,eAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAx7BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA88BE;;AA98BF;;AAAA,SAg9Be+7B,WAh9Bf;AAAA;AAAA;AAAA,mFAg9BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC3M,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACqlC,aADQ;AAE3Bpc,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,mBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,8DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAiBC+M,cAAAA,QAjBD,GAiBYj8B,QAjBZ,oBAiBYA,QAAQ,CAAEyzB,KAjBtB;AAAA,iDAmBE;AACLwI,gBAAAA,QAAQ,EAARA,QADK;AAELj8B,gBAAAA,QAAQ,EAARA;AAFK,eAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAh9BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAy+BE;;AAz+BF;;AAAA,SA2+Bek8B,gBA3+Bf;AAAA;AAAA;AAAA,wFA2+BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC9M,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACwlC,mBADQ;AAE3Bvc,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,mBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,8DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAgBCkN,cAAAA,cAhBD,GAgBkBp8B,QAhBlB,oBAgBkBA,QAAQ,CAAEq8B,MAhB5B;AAAA,iDAkBE;AACLD,gBAAAA,cAAc,EAAdA,cADK;AAELp8B,gBAAAA,QAAQ,EAARA;AAFK,eAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3+BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmgCes8B,kBAngCf;AAAA,0FAmgCS,mBACL3wB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAUCyjB,cAAAA,SAVD,GAUwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAAC4lC,oBAFQ;AAG3B3c,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAVxB;AAAA;AAAA,qBAiBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAjBnB;;AAAA;AAiBCpvB,cAAAA,QAjBD,mBAiBsDlO,IAjBtD;;AAAA,oBAkBDkO,QAlBC,YAkBDA,QAAQ,CAAEkvB,UAlBT;AAAA;AAAA;AAAA;;AAAA,8DAoBElvB,QApBF,oBAoBEA,QAAQ,CAAEkvB,UApBZ;;AAAA;AAAA,8DAwBAlvB,QAxBA;AAyBHw8B,gBAAAA,QAAQ,EAAEx8B,QAAF,oBAAEA,QAAQ,CAAEw8B,QAzBjB;AA0BHznC,gBAAAA,KAAK,EAAEiL,QAAF,oBAAEA,QAAQ,CAAEjL,KA1Bd;AA2BH0nC,gBAAAA,OAAO,EAAEz8B,QAAF,oBAAEA,QAAQ,CAAEy8B,OA3BhB;AA4BHC,gBAAAA,SAAS,EAAE18B,QAAF,oBAAEA,QAAQ,CAAE08B,SA5BlB;AA6BHC,gBAAAA,KAAK,EAAE38B,QAAF,oBAAEA,QAAQ,CAAE08B,SA7Bd;AA8BH18B,gBAAAA,QAAQ,EAARA;AA9BG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAngCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAiCuuB,OAAjC;;IChHaqO,UAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACE;;;AADF,SAIeC,cAJf;AAAA;AAAA;AAAA,sFAIS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKCzN,cAAAA,SALD,GAKwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACmmC,kBADQ;AAE3Bld,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eALxB;AAAA;AAAA,qBAWmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAXnB;;AAAA;AAWCpvB,cAAAA,QAXD,iBAWsDlO,IAXtD;;AAAA,oBAYDkO,QAZC,YAYDA,QAAQ,CAAEkvB,UAZT;AAAA;AAAA;AAAA;;AAAA,4DAcElvB,QAdF,oBAcEA,QAAQ,CAAEkvB,UAdZ;;AAAA;AAAA,6BAkBuB/tB,WAAW,CAACnB,QAAD,CAlBlC,EAkBGoB,QAlBH,gBAkBGA,QAlBH,EAkBaC,KAlBb,gBAkBaA,KAlBb;AAoBL;AACA;AACA;AACA;;AAvBK,+CAyBE;AACLD,gBAAAA,QAAQ,EAARA,QADK;AAELC,gBAAAA,KAAK,EAALA,KAFK;AAGLrB,gBAAAA,QAAQ,EAARA;AAHK,eAzBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoCE;;AApCF;;AAAA,SAsCe+8B,qBAtCf;AAAA;AAAA;AAAA,6FAsCS,kBACLpxB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAACqmC,mBAFQ;AAG3Bpd,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,kBAasDlO,IAbtD;;AAAA,oBAeDkO,QAfC,YAeDA,QAAQ,CAAEkvB,UAfT;AAAA;AAAA;AAAA;;AAAA,6DAiBElvB,QAjBF,oBAiBEA,QAAQ,CAAEkvB,UAjBZ;;AAAA;AAqBC+N,cAAAA,gBArBD,GAqBsC,EArBtC;;AAuBL,kBAAIj9B,QAAJ,YAAIA,QAAQ,CAAEk9B,OAAd,EAAuB;AACrBl9B,gBAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAEk9B,OAAV,CAAkBznC,OAAlB,CAA0B,UAAC8K,IAAD;AACxB08B,kBAAAA,gBAAgB,CAAC18B,IAAI,CAAC7M,MAAN,CAAhB,GAAgC;AAC9BwpC,oBAAAA,OAAO,EAAE38B,IADqB;AAE9B48B,oBAAAA,OAAO,EAAE1qC;AAFqB,mBAAhC;AAID,iBALD;AAMD;;AACD,kBAAIuN,QAAJ,YAAIA,QAAQ,CAAEm9B,OAAd,EAAuB;AACrBn9B,gBAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAEm9B,OAAV,CAAkB1nC,OAAlB,CAA0B,UAAC8K,IAAD;AACxB08B,kBAAAA,gBAAgB,CAAC18B,IAAI,CAAC7M,MAAN,CAAhB,gBACKupC,gBAAgB,CAAC18B,IAAI,CAAC7M,MAAN,CADrB;AAEEypC,oBAAAA,OAAO,EAAE58B;AAFX;AAID,iBALD;AAMD;;AAtCI,gDAwCE;AACL08B,gBAAAA,gBAAgB,EAAhBA,gBADK;AAELj9B,gBAAAA,QAAQ,EAARA;AAFK,eAxCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoFE;;AApFF;;AAAA,SAsFeo9B,kBAtFf;AAAA;AAAA;AAAA,0FAsFS,kBACLzxB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyjB,cAAAA,SAPD,GAOwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0mC,qBAFQ;AAG3Bzd,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAPxB;AAAA;AAAA,qBAcmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAdnB;;AAAA;AAcCpvB,cAAAA,QAdD,kBAcsDlO,IAdtD;;AAAA,oBAeDkO,QAfC,YAeDA,QAAQ,CAAEkvB,UAfT;AAAA;AAAA;AAAA;;AAAA,6DAiBElvB,QAjBF,oBAiBEA,QAAQ,CAAEkvB,UAjBZ;;AAAA;AAoBCoO,cAAAA,YApBD,GAoBiCt9B,QAAQ,QAAR,IAAAA,QAAQ,CAAEs9B,YAAV,GAClCt9B,QAAQ,CAACs9B,YADyB,GAElC,EAtBC;AAwBCC,cAAAA,YAxBD,GAwBgCv9B,QAAQ,QAAR,IAAAA,QAAQ,CAAEu9B,YAAV,GACjCv9B,QAAQ,CAACu9B,YADwB,GAEjC,EA1BC;AAAA,gDA4BE;AACLD,gBAAAA,YAAY,EAAZA,YADK;AAELC,gBAAAA,YAAY,EAAZA,YAFK;AAGLv9B,gBAAAA,QAAQ,EAARA;AAHK,eA5BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyHE;;AAzHF;;AAAA,SA2Hew9B,sBA3Hf;AAAA;AAAA;AAAA,8FA2HS,kBACL7xB,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyE,cAAAA,SAPD,GAOwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3Bgf,gBAAAA,MAAM,EAANA,MAF2B;AAG3B9oB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8mC,0BAHQ;AAI3B7d,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAPxB;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,kBAesDlO,IAftD;;AAAA,oBAgBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAhB5C;AAAA;AAAA;AAAA;;AAAA,6DAkBE7Q,QAAQ,CAACkvB,UAlBX;;AAAA;AAqBCwO,cAAAA,QArBD,GAqB0B19B,QAAQ,CAAClO,IArBnC;AAAA,gDAuBE;AACL4rC,gBAAAA,QAAQ,EAARA,QADK;AAEL19B,gBAAAA,QAAQ,EAAEA,QAAQ,CAAClO;AAFd,eAvBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3HT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwJU6rC,YAxJV,GAwJU,sBAAaC,GAAb,EAAyC7oC,KAAzC;AACN,WAAO6oC,GAAG,CAACl+B,IAAJ,CAAS,UAACC,CAAD,EAAyBC,CAAzB;AACd,UAAI7K,KAAK,KAAKwD,iBAAS,CAACslC,GAAxB,EAA6B;AAC3B,eAAOl+B,CAAC,CAACm+B,SAAF,GAAcl+B,CAAC,CAACk+B,SAAhB,GAA4B,CAA5B,GAAgC,CAAvC;AACD;;AAED,aAAOn+B,CAAC,CAACm+B,SAAF,GAAcl+B,CAAC,CAACk+B,SAAhB,GAA4B,CAA5B,GAAgC,CAAvC;AACD,KANM,CAAP;AAOD;AAED;;AAlKF;;AAAA,SAoKeC,uBApKf;AAAA;AAAA;AAAA,+FAoKS;AAAA;AAAA;AAAA;AAAA;AAAA;AAYC3O,cAAAA,SAZD,GAYwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACqnC,sBADQ;AAE3Bpe,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAZxB;AAAA;AAAA,qBAkBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlBnB;;AAAA;AAkBCpvB,cAAAA,QAlBD,kBAkBsDlO,IAlBtD;;AAAA,oBAoBDkO,QApBC,YAoBDA,QAAQ,CAAEkvB,UApBT;AAAA;AAAA;AAAA;;AAAA,6DAsBElvB,QAtBF,oBAsBEA,QAAQ,CAAEkvB,UAtBZ;;AAAA;AA0BD+O,cAAAA,uBA1BC,GA2BH,EA3BG;AA4BCC,cAAAA,eA5BD,GAgCA,EAhCA;;AAmCCC,cAAAA,eAnCD,GAmCuD,EAnCvD;AAqCDC,cAAAA,wBArCC,GAuCD,EAvCC;AAyCCC,cAAAA,qBAzCD,GAyC6D,EAzC7D;AA2CCC,cAAAA,SA3CD,GA2Ca,IAAIC,IAAJ,GAAWC,OAAX,EA3Cb;;AA6CL,kBAAIx+B,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;;;AACf,sBAAMiC,MAAM,GACV87B,SAAS,GAAG/9B,IAAI,CAACu9B,SAAjB,GACIrlC,6BAAqB,CAACgmC,UAD1B,GAEIH,SAAS,IAAI/9B,IAAI,CAACu9B,SAAlB,IAA+BQ,SAAS,IAAI/9B,IAAI,CAACm+B,OAAjD,GACAjmC,6BAAqB,CAACkmC,UADtB,GAEAlmC,6BAAqB,CAACmmC,SAL5B;AAOAr+B,kBAAAA,IAAI,CAACiC,MAAL,GAAcA,MAAd;;AACA,sBAAIA,MAAM,KAAK/J,6BAAqB,CAACkmC,UAArC,EAAiD;AAAA;;AAC/C,wBAAME,QAAQ,GAAGZ,uBAAuB,CAAC19B,IAAI,CAAC7M,MAAN,CAAvB,aACTuqC,uBAAuB,CAAC19B,IAAI,CAAC7M,MAAN,CAAvB,CAAqCmrC,QAD5B,GACsCt+B,IAAI,CAACs+B,QAD3C,KAEb,CAACt+B,IAAI,CAACs+B,QAAN,CAFJ;AAGAZ,oBAAAA,uBAAuB,gBAClBA,uBADkB,6BAEpB19B,IAAI,CAAC7M,MAFe,iBAED6M,IAFC;AAEKs+B,sBAAAA,QAAQ,EAARA;AAFL,mCAAvB;AAID;;AACDV,kBAAAA,eAAe,CAAC59B,IAAI,CAACs+B,QAAN,CAAf,aACMV,eAAe,CAAC59B,IAAI,CAACs+B,QAAN,CAAf,GACAV,eAAe,CAAC59B,IAAI,CAACs+B,QAAN,CADf,GAEA,EAHN,GAIEt+B,IAJF;AAMA89B,kBAAAA,qBAAqB,CAAC77B,MAAD,CAArB,aACM67B,qBAAqB,CAAC77B,MAAD,CAArB,GACA67B,qBAAqB,CAAC77B,MAAD,CADrB,GAEA,EAHN,GAIEjC,IAJF;AAMA29B,kBAAAA,eAAe,CAAC39B,IAAI,CAACu9B,SAAN,CAAf,gBACMI,eAAe,CAAC39B,IAAI,CAACu9B,SAAN,CAAf,GACAI,eAAe,CAAC39B,IAAI,CAACu9B,SAAN,CADf,GAEA,EAHN,6BAIGv9B,IAAI,CAACs+B,QAJR,iBAKQX,eAAe,CAAC39B,IAAI,CAACu9B,SAAN,CAAf,GACAI,eAAe,CAAC39B,IAAI,CAACu9B,SAAN,CAAf,CAAgCv9B,IAAI,CAACs+B,QAArC,IACEX,eAAe,CAAC39B,IAAI,CAACu9B,SAAN,CAAf,CAAgCv9B,IAAI,CAACs+B,QAArC,CADF,GAEE,EAHF,GAIA,EATR,6BAUKt+B,IAAI,CAAC7M,MAVV,IAUmB6M,IAVnB;AAaA69B,kBAAAA,wBAAwB,gBACnBA,wBADmB,6BAErB79B,IAAI,CAACs+B,QAFgB,iBAGhBT,wBAAwB,CAAC79B,IAAI,CAACs+B,QAAN,CAAxB,GACAT,wBAAwB,CAAC79B,IAAI,CAACs+B,QAAN,CADxB,GAEA,EALgB,6BAMnBr8B,MANmB,cAOd47B,wBAAwB,CAAC79B,IAAI,CAACs+B,QAAN,CAAxB,GACAT,wBAAwB,CAAC79B,IAAI,CAACs+B,QAAN,CAAxB,CAAwCr8B,MAAxC,IACE47B,wBAAwB,CAAC79B,IAAI,CAACs+B,QAAN,CAAxB,CAAwCr8B,MAAxC,CADF,GAEE,EAHF,GAIA,EAXc,GAYlBjC,IAZkB,4BAAxB;AAgBD,iBA3DD;AA4DD;;AA1GI,gDA4GE;AACL09B,gBAAAA,uBAAuB,EAAvBA,uBADK;AAELC,gBAAAA,eAAe,EAAfA,eAFK;AAGLC,gBAAAA,eAAe,EAAfA,eAHK;AAILE,gBAAAA,qBAAqB,EAArBA,qBAJK;AAKLD,gBAAAA,wBAAwB,EAAxBA,wBALK;AAMLp+B,gBAAAA,QAAQ,EAARA;AANK,eA5GF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApKT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0RE;;AA1RF;;AAAA,SA4Re8+B,kBA5Rf;AAAA;AAAA;AAAA,0FA4RS,kBAA4BnzB,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAACooC,qBAFQ;AAG3Bnf,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,kBAasDlO,IAbtD;;AAAA,oBAcDkO,QAdC,YAcDA,QAAQ,CAAEkvB,UAdT;AAAA;AAAA;AAAA;;AAAA,6DAgBElvB,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBCz4B,cAAAA,WAnBD,GAmBeuJ,QAAQ,CAACvJ,WAnBxB;AAoBC/C,cAAAA,MApBD,GAoBUsM,QAAQ,CAACtM,MApBnB;AAqBCsrC,cAAAA,UArBD,GAqBch/B,QAAQ,CAAClO,IArBvB;AAAA,gDAuBE;AACL2E,gBAAAA,WAAW,EAAXA,WADK;AAEL/C,gBAAAA,MAAM,EAANA,MAFK;AAGLsrC,gBAAAA,UAAU,EAAVA,UAHK;AAILh/B,gBAAAA,QAAQ,EAARA;AAJK,eAvBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5RT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2TE;;AA3TF;;AAAA,SA6Tei/B,eA7Tf;AAAA;AAAA;AAAA,uFA6TS;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC7P,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACuoC,kBADQ;AAE3Btf,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,kBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAX5C;AAAA;AAAA;AAAA;;AAAA,6DAaE7Q,QAAQ,CAACkvB,UAbX;;AAAA;AAgBCiQ,cAAAA,YAhBD,GAgB0C,EAhB1C;;AAkBL,kBAAIn/B,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACf4+B,kBAAAA,YAAY,CAAC5+B,IAAI,CAAC7M,MAAN,CAAZ,GAA4B6M,IAA5B;AACD,iBAFD;AAGD;;AAtBI,gDAwBE;AACL4+B,gBAAAA,YAAY,EAAZA,YADK;AAELn/B,gBAAAA,QAAQ,EAARA;AAFK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7TT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2VE;;AA3VF;;AAAA,SA6Veo/B,kBA7Vf;AAAA;AAAA;AAAA,0FA6VS,kBACLzzB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0oC,sBADQ;AAE3B5U,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,kBAasDlO,IAbtD;;AAAA,oBAeDkO,QAfC,YAeDA,QAAQ,CAAEkvB,UAfT;AAAA;AAAA;AAAA;;AAAA,6DAiBElvB,QAjBF,oBAiBEA,QAAQ,CAAEkvB,UAjBZ;;AAAA;AAoBC7nB,cAAAA,eApBD,GAoBoCrH,QApBpC;AAAA,gDAsBE;AACLqH,gBAAAA,eAAe,EAAfA,eADK;AAELrH,gBAAAA,QAAQ,EAARA;AAFK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7VT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyXE;;AAzXF;;AAAA,SA2Xes/B,kBA3Xf;AAAA;AAAA;AAAA,0FA2XS;AAAA;AAAA;AAAA;AAAA;AAAA;AAIClQ,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC4oC,sBADQ;AAE3B3f,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,kBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,6DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAgBCsQ,cAAAA,gBAhBD,GAgBiD,EAhBjD;;AAkBL,kBAAIx/B,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACf,sBAAMk/B,UAAU,GAAQ,EAAxB;;AAEA,sBAAI,CAAAl/B,IAAI,QAAJ,YAAAA,IAAI,CAAEmB,MAAN,aAAwBpB,KAA5B,EAAmC;AACjCC,oBAAAA,IAAI,CAACmB,MAAL,CAAYjM,OAAZ,CAAoB,UAACiqC,KAAD;AAClBD,sBAAAA,UAAU,CAACC,KAAK,CAACx+B,OAAP,CAAV,GAA4Bw+B,KAA5B;AACD,qBAFD;AAGD;;AAEDn/B,kBAAAA,IAAI,CAACuD,SAAL,GAAiB27B,UAAjB;AAEA,sBAAIE,QAAQ,GAAGp/B,IAAI,CAACo/B,QAApB;;AACA,sBAAIA,QAAQ,CAAC3sC,OAAT,CAAiB,QAAjB,KAA8B,CAAlC,EAAqC;AACnC2sC,oBAAAA,QAAQ,GAAG,aAAX;AACD;;AAEDH,kBAAAA,gBAAgB,CAACG,QAAD,CAAhB,GAA6Bp/B,IAA7B;AACD,iBAjBD;AAkBD;;AArCI,gDAuCE;AACLi/B,gBAAAA,gBAAgB,EAAhBA,gBADK;AAELx/B,gBAAAA,QAAQ,EAARA;AAFK,eAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3XT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwaE;;AAxaF;;AAAA,SA0ae4/B,kBA1af;AAAA;AAAA;AAAA,0FA0aS,mBACLj0B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyE,cAAAA,SAPD,GAOwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3Bgf,gBAAAA,MAAM,EAANA,MAF2B;AAG3B9oB,gBAAAA,GAAG,EAAElL,qBAAa,CAACkpC,oBAHQ;AAI3BjgB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAPxB;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,mBAesDlO,IAftD;;AAAA,oBAgBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAhB5C;AAAA;AAAA;AAAA;;AAAA,8DAkBE7Q,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAAA,iDAqBE;AACL4Q,gBAAAA,OAAO,EAAE9/B,QAAQ,QAAR,IAAAA,QAAQ,CAAElO,IAAV,GAAkBkO,QAAQ,CAAClO,IAA3B,GAAmD,EADvD;AAGLkO,gBAAAA,QAAQ,EAARA;AAHK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1aT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAscE;;AAtcF;;AAAA,SAwce+/B,6BAxcf;AAAA;AAAA;AAAA,qGAwcS,mBACLp0B,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAG3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAACqpC,iCAHQ;AAI3BpgB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eANxB;AAAA;AAAA,qBAcmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAdnB;;AAAA;AAcCpvB,cAAAA,QAdD,mBAcsDlO,IAdtD;;AAAA,oBAeDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAf5C;AAAA;AAAA;AAAA;;AAAA,8DAiBE7Q,QAjBF,oBAiBEA,QAAQ,CAAEkvB,UAjBZ;;AAAA;AAAA,iDAqBE;AACL+Q,gBAAAA,eAAe,EAAEjgC,QAAQ,CAAClO,IADrB;AAELkO,gBAAAA,QAAQ,EAARA;AAFK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxcT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmeE;;AAneF;;AAAA,SAqeekgC,iBAref;AAAA;AAAA;AAAA,yFAqeS,mBACLv0B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3Bgf,gBAAAA,MAAM,EAANA,MAF2B;AAG3B9oB,gBAAAA,GAAG,EAAElL,qBAAa,CAACwpC,qBAHQ;AAI3BvgB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eARxB;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAAA,iDAuBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QADd;AAEL2E,gBAAAA,cAAc,EAAEpgC,QAAQ,CAACqgC,YAFpB;AAGLrgC,gBAAAA,QAAQ,EAARA;AAHK,eAvBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAreT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmgBE;;AAngBF;;AAAA,SAqgBesgC,aArgBf;AAAA;AAAA;AAAA,qFAqgBS,mBAAuB30B,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCyjB,cAAAA,SALD,GAKwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAAC4pC,gBAFQ;AAG3B3gB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eALxB;AAAA;AAAA,qBAYmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,mBAYsDlO,IAZtD;;AAAA,oBAcDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAd5C;AAAA;AAAA;AAAA;;AAAA,8DAgBE7Q,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAoBDmR,cAAAA,YApBC,GAoBc5tC,SApBd;;AAsBL,kBAAIuN,QAAJ,YAAIA,QAAQ,CAAEqgC,YAAd,EAA4B;AAC1BA,gBAAAA,YAAY,GAAGrgC,QAAH,oBAAGA,QAAQ,CAAEqgC,YAAzB;AACD;;AAxBI,iDA0BE;AACL5E,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QADd;AAEL4E,gBAAAA,YAAY,EAAEA,YAFT;AAGLrgC,gBAAAA,QAAQ,EAARA;AAHK,eA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArgBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsiBE;;AAtiBF;;AAAA,SAwiBewgC,gBAxiBf;AAAA;AAAA;AAAA,wFAwiBS,mBAA0B70B,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCyjB,cAAAA,SALD,GAKwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8pC,sBAFQ;AAG3B7gB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eALxB;AAAA;AAAA,qBAYmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,mBAYsDlO,IAZtD;;AAAA,oBAaDkO,QAbC,YAaDA,QAAQ,CAAEkvB,UAbT;AAAA;AAAA;AAAA;;AAAA,8DAeElvB,QAfF,oBAeEA,QAAQ,CAAEkvB,UAfZ;;AAAA;AAAA,iDAkBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QADd;AAELiF,gBAAAA,aAAa,EAAE1gC,QAAQ,CAACqgC,YAFnB;AAGLrgC,gBAAAA,QAAQ,EAARA;AAHK,eAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxiBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAikBE;;AAjkBF;;AAAA,SAmkBe2gC,WAnkBf;AAAA;AAAA;AAAA,mFAmkBS,mBACLh1B,OADK,EAELgc,KAFK,EAGLgD,MAHK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQL,kBAAI,EAAChf,OAAD,YAACA,OAAO,CAAEmW,UAAV,CAAJ,EAA0BnW,OAAO,CAACmW,UAAR,GAAqByc,IAAI,CAACqC,GAAL,EAArB;AAEpBxR,cAAAA,SAVD,GAUwB;AAC3B3M,gBAAAA,UAAU,EAAE9W,OADe;AAE3Bgf,gBAAAA,MAAM,EAANA,MAF2B;AAG3B9oB,gBAAAA,GAAG,EAAElL,qBAAa,CAACkqC,kBAHQ;AAI3BjhB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJS;AAK3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAVxB;AAAA,sCAkBgBiW,wBAAA,CAAoCp1B,OAApC,EAA6Cgc,KAA7C,CAlBhB,EAkBGL,QAlBH,yBAkBGA,QAlBH;AAoBL3b,cAAAA,OAAO,CAACuf,cAAR,GAAyB5D,QAAzB;AApBK;AAAA,qBAsBmB,KAAKiI,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAtBnB;;AAAA;AAsBCpvB,cAAAA,QAtBD,mBAsBsDlO,IAtBtD;;AAAA,oBAuBDkO,QAvBC,YAuBDA,QAAQ,CAAEkvB,UAvBT;AAAA;AAAA;AAAA;;AAAA,8DAyBElvB,QAzBF,oBAyBEA,QAAQ,CAAEkvB,UAzBZ;;AAAA;AAAA,iDA4BE;AACL8R,gBAAAA,iBAAiB,EAAEhhC,QADd;AAELA,gBAAAA,QAAQ,EAARA;AAFK,eA5BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnkBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqmBE;;AArmBF;;AAAA,SAumBeihC,WAvmBf;AAAA;AAAA;AAAA,mFAumBS,mBACLt1B,OADK,EAELgc,KAFK,EAGLgD,MAHK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQL,kBAAI,EAAChf,OAAD,YAACA,OAAO,CAAEmW,UAAV,CAAJ,EAA0BnW,OAAO,CAACmW,UAAR,GAAqByc,IAAI,CAACqC,GAAL,EAArB;AAEpBxR,cAAAA,SAVD,GAUwB;AAC3B3M,gBAAAA,UAAU,EAAE9W,OADe;AAE3Bgf,gBAAAA,MAAM,EAANA,MAF2B;AAG3B9oB,gBAAAA,GAAG,EAAElL,qBAAa,CAACuqC,kBAHQ;AAI3BthB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJS;AAK3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAVxB;AAAA,uCAkBgBiW,wBAAA,CAAoCp1B,OAApC,EAA6Cgc,KAA7C,CAlBhB,EAkBGL,QAlBH,0BAkBGA,QAlBH;AAoBL3b,cAAAA,OAAO,CAACuf,cAAR,GAAyB5D,QAAzB;AApBK;AAAA,qBAsBmB,KAAKiI,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAtBnB;;AAAA;AAsBCpvB,cAAAA,QAtBD,mBAsBsDlO,IAtBtD;;AAAA,oBAuBDkO,QAvBC,YAuBDA,QAAQ,CAAEkvB,UAvBT;AAAA;AAAA;AAAA;;AAAA,8DAyBElvB,QAzBF,oBAyBEA,QAAQ,CAAEkvB,UAzBZ;;AAAA;AAAA,iDA4BE;AACLiS,gBAAAA,iBAAiB,EAAEnhC,QADd;AAELA,gBAAAA,QAAQ,EAARA;AAFK,eA5BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvmBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAgCuuB,OAAhC;;AChCA,WAAY6S;AACVA,EAAAA,sBAAA,YAAA;AACAA,EAAAA,sBAAA,YAAA;AACAA,EAAAA,4BAAA,kBAAA;AACD,CAJD,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;AAMA,IAAaC,UAAU,GAAG;AACxBC,EAAAA,IAAI,EAAE,KADkB;AAExBC,EAAAA,GAAG,EAAE;AAFmB,CAAnB;;AAKP,SAASC,SAAT,CAAmB7jB,IAAnB;AACE,MAAI,CAACA,IAAL,EAAW,MAAM,IAAIvhB,KAAJ,CAAU,oBAAV,CAAN;AACZ;AAED;;;;;;;;;AAOA,SAAsB+d,IAAtB;AAAA;AAAA;AAuBA;;;;;;;;;yDAvBO,iBACLwD,IADK,EAEL9oB,OAFK,EAGLmsB,GAHK,EAIL7E,IAJK;AAAA;AAAA;AAAA;AAAA;AAMLqlB,YAAAA,SAAS,CAAC7jB,IAAD,CAAT;AANK,6CAOE,IAAIzrB,OAAJ,CAAY,UAACC,OAAD;AACjBwrB,cAAAA,IAAI,CAACkS,GAAL,CAAS1V,IAAT,CAAcgC,IAAd,EAAoBtnB,OAApB,EAA6BmsB,GAA7B,EAAkC,UAAU5tB,GAAV,EAAoBuf,MAApB;AAChC,oBAAI,CAACvf,GAAL,EAAU;AACR,sBAAMinB,CAAC,GAAG1H,MAAM,CAAC3U,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAV;AACA,sBAAMya,CAAC,GAAGvc,YAAY,CAACyW,MAAM,CAAC3U,KAAP,CAAa,EAAb,EAAiB,GAAjB,CAAD,CAAtB;AACA,sBAAI+yB,CAAC,GAAG1zB,QAAQ,CAACnB,YAAY,CAACyW,MAAM,CAAC3U,KAAP,CAAa,GAAb,EAAkB,GAAlB,CAAD,CAAb,CAAhB;AACA,sBAAI+yB,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAArB,EAAwBA,CAAC,GAAGA,CAAC,GAAG,EAAR,CAJhB;;AAI4B;AACpC5+B,kBAAAA,OAAO,CAAC;AAAEwgB,oBAAAA,MAAM,EAAE;AAAE0H,sBAAAA,CAAC,EAADA,CAAF;AAAK5B,sBAAAA,CAAC,EAADA,CAAL;AAAQsY,sBAAAA,CAAC,EAADA;AAAR;AAAV,mBAAD,CAAP;AACD,iBAND,MAMO;AACL,sBAAM0Q,QAAQ,GAAGruC,GAAG,CAACrB,OAAJ,CAAYyP,SAAZ,CAAsB,CAAtB,EAAyBpO,GAAG,CAACrB,OAAJ,CAAYiB,OAAZ,CAAoB,MAApB,CAAzB,CAAjB;AACAb,kBAAAA,OAAO,CAAC;AAAEN,oBAAAA,KAAK,EAAE;AAAEE,sBAAAA,OAAO,EAAE0vC;AAAX;AAAT,mBAAD,CAAP;AACD;AACF,eAXD;AAYD,aAbM,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA8BP,SAAsBC,cAAtB;AAAA;AAAA;;;mEAAO,kBACL/jB,IADK,EAEL9oB,OAFK,EAGL8sC,KAHK,EAIL7jB,OAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMC8jB,YAAAA,KAND,GAMSC,cAAW,CAACC,gBAAZ,CAA6BH,KAA7B,CANT;AAOCxlB,YAAAA,IAPD,GAOQrf,KAAK,CAAC8kC,KAAK,CAACzlB,IAAN,EAAD,CAPb;AAAA;AAAA;AAAA,mBASyBhC,IAAI,CAACwD,IAAD,EAAO9oB,OAAP,EAAgB,EAAhB,EAAoBsnB,IAApB,CAT7B;;AAAA;AASGvqB,YAAAA,QATH;;AAAA,gBAUEA,QAAQ,CAACC,KAVX;AAAA;AAAA;AAAA;;AAWKitB,YAAAA,SAXL,GAWiBltB,QAAQ,CAAC,QAAD,CAXzB;AAYDktB,YAAAA,SAAS,CAACiS,CAAV,IAAejT,OAAO,GAAG,CAAV,GAAc,CAA7B;AAEMikB,YAAAA,MAdL,GAccxsC,MAAM,CAACysC,MAAP,CAAcJ,KAAK,CAACvrB,MAAN,EAAd,EAA8ByI,SAA9B,CAdd;AAgBDijB,YAAAA,MAAM,CAAC/wB,IAAP,GAAc2wB,KAAK,CAAC3wB,IAApB;AAhBC,8CAkBM;AAAE2B,cAAAA,MAAM,EAAEvP,KAAA,CAASoc,IAAI,CAACC,SAAL,CAAesiB,MAAf,CAAT,CAAV;AAA4CJ,cAAAA,KAAK,EAAEI;AAAnD,aAlBN;;AAAA;AAAA,8CAoBM;AAAElwC,cAAAA,KAAK,EAAED,QAAQ,CAACC;AAAlB,aApBN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAwBI;AAAEA,cAAAA,KAAK;AAAP,aAxBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA4BP,SAAsBowC,QAAtB;AAAA;AAAA;;;6DAAO,kBAAwBtkB,IAAxB,EAAoCukB,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDvkB,IADC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBACkBA,IAAI,CAACkS,GAAL,CAASsS,mBAAT,CAA6BD,IAA7B,CADlB;;AAAA;AAAA;;AAAA;AAAA,8CAEE,CAAC,CAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKP,SAAsBE,SAAtB;AAAA;AAAA;;;8DAAO,kBACLzkB,IADK,EAEL3M,IAFK,EAGLkS,EAHK,EAILxlB,KAJK,EAKL5L,IALK,EAMLgsB,OANK,EAOLiE,KAPK,EAQLka,QARK,EASLoG,QATK,EAULC,cAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAULA,cAVK;AAULA,cAAAA,cAVK,GAUY,IAVZ;AAAA;;AAYLd,YAAAA,SAAS,CAAC7jB,IAAD,CAAT;AAEAse,YAAAA,QAAQ,GAAG74B,QAAA,CAAY64B,QAAZ,EAAsB5+B,QAAtB,EAAX;AACMskC,YAAAA,KAfD,GAeS;AACZ3wB,cAAAA,IAAI,EAAJA,IADY;AAEZkS,cAAAA,EAAE,EAAFA,EAFY;AAGZxlB,cAAAA,KAAK,EAALA,KAHY;AAIZ5L,cAAAA,IAAI,EAAJA,IAJY;AAKZgsB,cAAAA,OAAO,EAAPA,OALY;AAMZiE,cAAAA,KAAK,EAALA,KANY;AAOZka,cAAAA,QAAQ,EAARA,QAPY;AAQZoG,cAAAA,QAAQ,EAARA;AARY,aAfT;;AAAA,iBA0BDC,cA1BC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2BUC,eAAe,CAAC5kB,IAAD,EAAOgkB,KAAP,CA3BzB;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA8BaD,cAAc,CAAC/jB,IAAD,EAAO3M,IAAP,EAAa2wB,KAAb,EAAoB7jB,OAApB,CA9B3B;;AAAA;AA8BCiO,YAAAA,GA9BD;;AAAA,kBAgCDA,GAhCC,YAgCDA,GAAG,CAAE4V,KAhCJ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiCUY,eAAe,CAAC5kB,IAAD,EAAOoO,GAAG,CAAC4V,KAAX,CAjCzB;;AAAA;AAAA;;AAAA;AAAA,8CAoCE5V,GApCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAuCP,SAASyW,gBAAT,CAA0BphB,QAA1B,EAAyCxB,MAAzC,EAAyD9tB,IAAzD;AACE,SAAOsvB,QAAQ,CAACoL,YAAT,CAAsB5M,MAAtB,EAA8B9tB,IAA9B,CAAP;AACD;;AAED,SAAS2wC,YAAT,CAAsB7iB,MAAtB,EAAsC9tB,IAAtC;AACE,SAAO0wC,gBAAgB,CAACnU,SAAS,CAACZ,UAAX,EAAuB7N,MAAvB,EAA+B9tB,IAA/B,CAAvB;AACD;;AAED,SAAgB4wC,gBAAgB9iB,QAAgB9tB;AAC9C,SAAO0wC,gBAAgB,CAACnU,SAAS,CAACV,gBAAX,EAA6B/N,MAA7B,EAAqC9tB,IAArC,CAAvB;AACD;AAED,SAAsB6wC,OAAtB;AAAA;AAAA;;AAgCA;;;;;;;;;4DAhCO,kBACLhlB,IADK,EAEL3M,IAFK,EAGLkS,EAHK,EAILuT,cAJK,EAKLmM,MALK,EAML9kB,OANK,EAOLiE,KAPK,EAQLka,QARK,EASLoG,QATK,EAULC,cAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAYCxwC,YAAAA,IAZD,GAYQ2wC,YAAY,CAACrB,mBAAW,CAACyB,OAAb,EAAsB;AAC7CC,cAAAA,QAAQ,EAAErM,cADmC;AAE7CmM,cAAAA,MAAM,EAANA;AAF6C,aAAtB,CAZpB;AAAA;AAAA,mBAiBQR,SAAS,CACpBzkB,IADoB,EAEpB3M,IAFoB,EAGpBkS,EAHoB,EAIpB,GAJoB,EAKpBpxB,IALoB,EAMpBgsB,OANoB,EAOpBiE,KAPoB,EAQpBka,QARoB,EASpBoG,QAToB,EAUpBC,cAVoB,CAjBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAuCP,SAAsBS,WAAtB;AAAA;AAAA;;AA0BA;;;;;;;;;gEA1BO,kBACLplB,IADK,EAEL5S,KAFK,EAGL0Z,YAHK,EAILgS,cAJK,EAKLwF,QALK,EAMLoG,QANK,EAOLvkB,OAPK,EAQLiE,KARK,EASLugB,cATK;AAAA;AAAA;AAAA;AAAA;AAAA,gBAOLxkB,OAPK;AAOLA,cAAAA,OAPK,GAOc7pB,eAAO,CAACM,MAPtB;AAAA;;AAAA,gBASL+tC,cATK;AASLA,cAAAA,cATK,GASY,KATZ;AAAA;;AAAA;AAAA,mBAWQK,OAAO,CAClBhlB,IADkB,EAElB5S,KAFkB,EAGlB0Z,YAHkB,EAIlBgS,cAJkB,EAKlB4K,UAAU,CAACC,IALO,EAMlBxjB,OANkB,EAOlBiE,KAPkB,EAQlBka,QARkB,EASlBoG,QATkB,EAUlBC,cAVkB,CAXf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAiCP,SAAsBU,UAAtB;AAAA;AAAA;;AA0BA;;;;;+DA1BO,kBACLrlB,IADK,EAEL5S,KAFK,EAGL0Z,YAHK,EAILgS,cAJK,EAKLwF,QALK,EAMLoG,QANK,EAOLvkB,OAPK,EAQLiE,KARK,EASLugB,cATK;AAAA;AAAA;AAAA;AAAA;AAAA,gBAOLxkB,OAPK;AAOLA,cAAAA,OAPK,GAOc7pB,eAAO,CAACM,MAPtB;AAAA;;AAAA,gBASL+tC,cATK;AASLA,cAAAA,cATK,GASY,KATZ;AAAA;;AAAA;AAAA,mBAWQK,OAAO,CAClBhlB,IADkB,EAElB5S,KAFkB,EAGlB0Z,YAHkB,EAIlBgS,cAJkB,EAKlB4K,UAAU,CAACE,GALO,EAMlBzjB,OANkB,EAOlBiE,KAPkB,EAQlBka,QARkB,EASlBoG,QATkB,EAUlBC,cAVkB,CAXf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA6BP,SAAsBW,OAAtB;AAAA;AAAA;AA8CA;;;;;4DA9CO,kBACLtlB,IADK,EAEL3M,IAFK,EAGL0lB,eAHK,EAILjzB,KAJK,EAKL/F,KALK,EAML2N,GANK,EAOL4wB,QAPK,EAQLoG,QARK,EASLvkB,OATK,EAULiE,KAVK,EAWLugB,cAXK,EAYLpf,EAZK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBASLpF,OATK;AASLA,cAAAA,OATK,GASc7pB,eAAO,CAACM,MATtB;AAAA;;AAAA,gBAWL+tC,cAXK;AAWLA,cAAAA,cAXK,GAWY,IAXZ;AAAA;;AAcDY,YAAAA,MAdC,GAcQ9/B,KAAA,CAAS1F,KAAT,EAAgBC,KAAhB,CAAsB,OAAO8F,KAAK,CAACW,QAAnC,CAdR;AAgBCuf,YAAAA,MAhBD,GAgBUvgB,KAAA,CAAS8/B,MAAT,CAhBV;AAkBCpxC,YAAAA,IAlBD,GAkBQ4wC,eAAe,CAACtB,mBAAW,CAAC+B,OAAb,EAAsB;AAChD1e,cAAAA,YAAY,EAAEhhB,KAAK,CAAC9C,OAD4B;AAEhDgjB,cAAAA,MAAM,EAANA,MAFgD;AAGhD3S,cAAAA,IAAI,EAAJA,IAHgD;AAIhDkS,cAAAA,EAAE,EAAEA,EAAE,GAAGA,EAAH,GAAQlS,IAJkC;AAKhDmS,cAAAA,SAAS,EAAE;AALqC,aAAtB,CAlBvB;;AA0BL,gBAAI1f,KAAK,CAAC1C,IAAN,KAAe,KAAnB,EAA0B;AACxBmiC,cAAAA,MAAM,GAAGA,MAAM,CAAC39B,IAAP,CAAY8F,GAAZ,CAAT;AACD,aAFD,MAEO;AACL63B,cAAAA,MAAM,GAAG9/B,KAAA,CAASiI,GAAT,CAAT;AACD;;AA9BI;AAAA,mBAgCQ+2B,SAAS,CACpBzkB,IADoB,EAEpB3M,IAFoB,EAGpB0lB,eAHoB,EAIpBwM,MAAM,CAACtlC,OAAP,EAJoB,EAKpB9L,IALoB,EAMpBgsB,OANoB,EAOpBiE,KAPoB,EAQpBka,QARoB,EASpBoG,QAToB,EAUpBC,cAVoB,CAhCjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAiDP,SAAsBc,eAAtB;AAAA;AAAA;AAiCA;;;;;;;;oEAjCO,kBACLzlB,IADK,EAEL3M,IAFK,EAGL4Q,SAHK,EAIL8U,eAJK,EAKLjzB,KALK,EAML4H,GANK,EAOL4wB,QAPK,EAQLoG,QARK,EASLvkB,OATK,EAULiE,KAVK,EAWLugB,cAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBASLxkB,OATK;AASLA,cAAAA,OATK,GASc7pB,eAAO,CAACM,MATtB;AAAA;;AAAA,gBAWL+tC,cAXK;AAWLA,cAAAA,cAXK,GAWY,KAXZ;AAAA;;AAaCY,YAAAA,MAbD,GAaU9/B,KAAA,CAASiI,GAAT,CAbV;AAcCvZ,YAAAA,IAdD,GAcQ4wC,eAAe,CAACtB,mBAAW,CAACiC,aAAb,EAA4B;AACtDt4B,cAAAA,KAAK,EAAEiG,IAD+C;AAEtDyT,cAAAA,YAAY,EAAEhhB,KAAK,CAAC9C,OAFkC;AAGtDihB,cAAAA,SAAS,EAATA;AAHsD,aAA5B,CAdvB;AAAA;AAAA,mBAmBQwgB,SAAS,CACpBzkB,IADoB,EAEpB3M,IAFoB,EAGpB0lB,eAHoB,EAIpBwM,MAAM,CAACtlC,OAAP,EAJoB,EAKpB9L,IALoB,EAMpBgsB,OANoB,EAOpBiE,KAPoB,EAQpBka,QARoB,EASpBoG,QAToB,EAUpBC,cAVoB,CAnBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAuCP,SAAsBC,eAAtB;AAAA;AAAA;;;oEAAO,mBAA+B5kB,IAA/B,EAA0C2lB,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,mBAAOA,EAAE,CAACrH,QAAV,CADK;;AAAA;AAAA,mBAGuB,IAAI/pC,OAAJ,CAAY,UAACC,OAAD;AACtCwrB,cAAAA,IAAI,CAACkS,GAAL,CAAS0S,eAAT,CAAyBe,EAAzB,EAA6B,UAAUlwC,GAAV,EAAoBmwC,eAApB;AAC3B,oBAAI,CAACnwC,GAAL,EAAU;AACRjB,kBAAAA,OAAO,CAAC;AAAEwgB,oBAAAA,MAAM,EAAE4wB;AAAV,mBAAD,CAAP;AACD,iBAFD,MAEO;AACLpxC,kBAAAA,OAAO,CAAC;AAAEN,oBAAAA,KAAK,EAAE;AAAEE,sBAAAA,OAAO,EAAEqB,GAAG,CAACrB;AAAf;AAAT,mBAAD,CAAP;AACD;AACF,eAND;AAOD,aAR2B,CAHvB;;AAAA;AAGCH,YAAAA,QAHD;;AAAA,iBAaDA,QAAQ,CAAC,QAAD,CAbP;AAAA;AAAA;AAAA;;AAAA,+CAcIA,QAdJ;;AAAA;AAAA,kBAgBG,IAAIwK,KAAJ,CAAUxK,QAAQ,CAAC,OAAD,CAAR,CAAkB,SAAlB,CAAV,CAhBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAoBP,SAAsB4xC,UAAtB;AAAA;AAAA;;;+DAAO,mBAA0B7lB,IAA1B,EAAqChd,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcgd,IAAI,CAACkS,GAAL,CAAS4T,OAAT,CAAiB9iC,OAAjB,CADd;;AAAA;AACCkQ,YAAAA,IADD;AAAA,+CAEEA,IAAI,IAAIA,IAAI,CAAChe,MAAL,GAAc,CAFxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;ICxUM6wC,OAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACE;;;;AADF,SAKeC,gBALf;AAAA;AAAA;AAAA,wFAKS,iBACLh4B,OADK,EAELgf,MAFK,EAGL7H,QAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCxjB,cAAAA,SALD,GAK+B,IAAIC,GAAJ,EAL/B;AAOLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,WAAd,EAA2B6L,OAAO,CAACoS,SAAnC;AAEMqR,cAAAA,SATD,GASsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACitC,cADsB;AAEzCnhB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANiC,eATtC;AAAA;AAAA,qBAqBmB,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CArBnB;;AAAA;AAqBCpvB,cAAAA,QArBD,iBAqBsDlO,IArBtD;;AAAA,oBAsBDkO,QAtBC,YAsBDA,QAAQ,CAAEkvB,UAtBT;AAAA;AAAA;AAAA;;AAAA,4DAwBElvB,QAxBF,oBAwBEA,QAAQ,CAAEkvB,UAxBZ;;AAAA;AAAA,+CA2BE;AACLlvB,gBAAAA,QAAQ,EAARA;AADK,eA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqCE;;;;;;AArCF;;AAAA,SA2Ce6jC,gBA3Cf;AAAA;AAAA;AAAA,wFA2CS,kBACLl4B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyE,cAAAA,SAJD,GAIsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACmtC,mBADsB;AAEzCrZ,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAJtC;AAAA;AAAA,qBAYmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,kBAYsDlO,IAZtD;;AAAA,oBAaDkO,QAbC,YAaDA,QAAQ,CAAEkvB,UAbT;AAAA;AAAA;AAAA;;AAAA,6DAeElvB,QAfF,oBAeEA,QAAQ,CAAEkvB,UAfZ;;AAAA;AAkBG6U,cAAAA,OAlBH,GAkB2B/jC,QAlB3B,CAkBG+jC,OAlBH,EAkBYl3B,UAlBZ,GAkB2B7M,QAlB3B,CAkBY6M,UAlBZ;AAAA,gDAmBE;AACLk3B,gBAAAA,OAAO,EAAPA,OADK;AAELl3B,gBAAAA,UAAU,EAAVA,UAFK;AAGL7M,gBAAAA,QAAQ,EAARA;AAHK,eAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqEE;;;AArEF;;AAAA,SAwEegkC,eAxEf;AAAA;AAAA;AAAA,uFAwES,kBACLr4B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyE,cAAAA,SAJD,GAIsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACstC,YADsB;AAEzCxZ,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAJtC;AAAA;AAAA,qBAYmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,kBAYsDlO,IAZtD;;AAAA,oBAcDkO,QAdC,YAcDA,QAAQ,CAAEkvB,UAdT;AAAA;AAAA;AAAA;;AAAA,6DAgBElvB,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAAA,gDAmBE;AACLgV,gBAAAA,WAAW,EAAElkC,QADR;AAELA,gBAAAA,QAAQ,EAARA;AAFK,eAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiGemkC,SAjGf;AAAA,iFAiGS,kBACLx4B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACytC,gBADsB;AAEzC3Z,gBAAAA,WAAW,eACN9e,OADM;AAETnJ,kBAAAA,MAAM,EAAEmJ,OAAO,CAACnJ,MAAR,GAAiBmJ,OAAO,CAACnJ,MAAR,CAAepD,IAAf,CAAoB,GAApB,CAAjB,GAA4C;AAF3C,kBAF8B;AAMzCurB,gBAAAA,MAAM,EAANA,MANyC;AAOzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAPuB;AAQzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AARuB,eARtC;AAAA;AAAA,qBAmBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnBnB;;AAAA;AAmBCpvB,cAAAA,QAnBD,kBAmBsDlO,IAnBtD;;AAAA,oBAoBDkO,QApBC,YAoBDA,QAAQ,CAAEkvB,UApBT;AAAA;AAAA;AAAA;;AAAA,6DAsBElvB,QAtBF,oBAsBEA,QAAQ,CAAEkvB,UAtBZ;;AAAA;AAyBCuM,cAAAA,QAzBD,GAyBoBz7B,QAAQ,CAACy7B,QAzB7B;AA0BC4I,cAAAA,MA1BD,GA0BuCrkC,QAAQ,CAACqkC,MA1BhD;AAAA,gDA4BE;AACL5I,gBAAAA,QAAQ,EAARA,QADK;AAEL4I,gBAAAA,MAAM,EAANA,MAFK;AAGLrkC,gBAAAA,QAAQ,EAARA;AAHK,eA5BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoIE;;;AApIF;;AAAA,SAuIeskC,WAvIf;AAAA;AAAA;AAAA,mFAuIS,kBACLC,YADK,EAELC,UAFK,EAGL7Z,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKL,kBAAI,CAAC4Z,YAAY,CAACE,YAAlB,EAAgC;AAC9BF,gBAAAA,YAAY,CAACE,YAAb,GAA4BttC,oBAAY,CAACutC,KAAzC;AACD;;AAEKplC,cAAAA,SATD,GASa,CAChBilC,YAAY,CAAChiB,QADG,EAEhBgiB,YAAY,CAACp3B,SAFG,EAGhBo3B,YAAY,CAACxmB,SAHG,EAIhBwmB,YAAY,CAACj9B,SAAb,CAAuBpG,OAJP,EAKhBqjC,YAAY,CAACh9B,QAAb,CAAsBrG,OALN,EAMhBqjC,YAAY,CAACj9B,SAAb,CAAuBvD,MANP,EAOhBwgC,YAAY,CAACh9B,QAAb,CAAsBxD,MAPN,EAQhBwgC,YAAY,CAACziB,UARG,EAShByiB,YAAY,CAAC51B,UATG,EAUhB41B,YAAY,CAACjhB,cAAb,GAA8B,CAA9B,GAAkC,CAVlB,EAWhB,CAXgB,CATb;AAuBC8L,cAAAA,SAvBD,GAuBsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACstC,YADsB;AAEzCxhB,gBAAAA,UAAU,EAAE8hB,YAF6B;AAGzC5Z,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACqyB,kBALuB;AAMzCH,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN6rB,kBAAAA,QAAQ,EAAEn0B,qBAAa,CAAC2tC,cAFlB;AAGNzoB,kBAAAA,UAAU,EAAEsoB;AAHN;AANiC,eAvBtC;AAAA;AAAA,qBAoCmB,KAAKjV,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CApCnB;;AAAA;AAoCCpvB,cAAAA,QApCD,kBAoCsDlO,IApCtD;AAAA,gDAsCE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAtCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgLE;;;AAhLF;;AAAA,SAmLe4kC,WAnLf;AAAA;AAAA;AAAA,mFAmLS,kBACLj5B,OADK,EAELuQ,UAFK,EAGLyO,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCrrB,cAAAA,SALD,GAK+B,IAAIC,GAAJ,EAL/B;AAOLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,WAAd,EAA2B6L,OAAO,CAACoS,SAAnC;AACA,kBAAIpS,OAAO,CAACk5B,SAAZ,EAAuBvlC,SAAS,CAACQ,GAAV,CAAc,WAAd,EAA2B6L,OAAO,CAACk5B,SAAnC;AACvB,kBAAIl5B,OAAO,CAACm5B,aAAZ,EACExlC,SAAS,CAACQ,GAAV,CAAc,eAAd,EAA+B6L,OAAO,CAACm5B,aAAvC;AAEI1V,cAAAA,SAZD,GAYsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACstC,YADsB;AAEzCxZ,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACguC,MAJuB;AAKzCla,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAVA;AAFM;AANiC,eAZtC;AAAA;AAAA,qBAwBmB,KAAKqT,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAxBnB;;AAAA;AAwBCpvB,cAAAA,QAxBD,kBAwBsDlO,IAxBtD;;AAAA,oBAyBDkO,QAzBC,YAyBDA,QAAQ,CAAEkvB,UAzBT;AAAA;AAAA;AAAA;;AAAA,6DA2BElvB,QA3BF,oBA2BEA,QAAQ,CAAEkvB,UA3BZ;;AAAA;AAAA,gDA8BE;AACLlvB,gBAAAA,QAAQ,EAARA;AADK,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnLT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsNE;;;AAtNF;;AAAA,SAyNeglC,uBAzNf;AAAA;AAAA;AAAA,+FAyNS,kBACLr5B,OADK,EAELuQ,UAFK,EAGLyO,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCrrB,cAAAA,SALD,GAK+B,IAAIC,GAAJ,EAL/B;AAMLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,WAAd,EAA2B6L,OAAO,CAACoS,SAAnC;AACAze,cAAAA,SAAS,CAACQ,GAAV,CAAc,WAAd,EAA2B6L,OAAO,CAACk5B,SAAnC;AACMzV,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACsuC,sBADsB;AAEzCxa,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACguC,MAJuB;AAKzCla,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAVA;AAFM;AANiC,eARtC;AAAA;AAAA,qBAoBmB,KAAKqT,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CApBnB;;AAAA;AAoBCpvB,cAAAA,QApBD,kBAoBsDlO,IApBtD;;AAAA,oBAqBDkO,QArBC,YAqBDA,QAAQ,CAAEkvB,UArBT;AAAA;AAAA;AAAA;;AAAA,6DAuBElvB,QAvBF,oBAuBEA,QAAQ,CAAEkvB,UAvBZ;;AAAA;AAAA,gDA0BE;AACLlvB,gBAAAA,QAAQ,EAARA;AADK,eA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzNT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwPE;;;AAxPF;;AAAA,SA2PeklC,gCA3Pf;AAAA;AAAA;AAAA,wGA2PS,kBACLv5B,OADK,EAELuQ,UAFK,EAGLyO,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCrrB,cAAAA,SALD,GAK+B,IAAIC,GAAJ,EAL/B;AAMLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,WAAd,EAA2B6L,OAAO,CAACoS,SAAnC;AACAze,cAAAA,SAAS,CAACQ,GAAV,CAAc,eAAd,EAA+B6L,OAAO,CAACm5B,aAAvC;AACM1V,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACwuC,iCADsB;AAEzC1a,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACguC,MAJuB;AAKzCla,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAVA;AAFM;AANiC,eARtC;AAAA;AAAA,qBAoBmB,KAAKqT,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CApBnB;;AAAA;AAoBCpvB,cAAAA,QApBD,kBAoBsDlO,IApBtD;;AAAA,oBAqBDkO,QArBC,YAqBDA,QAAQ,CAAEkvB,UArBT;AAAA;AAAA;AAAA;;AAAA,6DAuBElvB,QAvBF,oBAuBEA,QAAQ,CAAEkvB,UAvBZ;;AAAA;AAAA,gDA0BE;AACLlvB,gBAAAA,QAAQ,EAARA;AADK,eA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3PT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0RE;;;AA1RF;;AAAA,SA6ReolC,aA7Rf;AAAA;AAAA;AAAA,qFA6RS,kBACLz5B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0uC,gBADsB;AAEzC5a,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,kBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,6DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBCoW,cAAAA,UAtBD,GAsByCtlC,QAAQ,CAACqgC,YAtBlD;AAAA,gDAuBE;AACL5E,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QADd;AAEL6J,gBAAAA,UAAU,EAAVA,UAFK;AAGLtlC,gBAAAA,QAAQ,EAARA;AAHK,eAvBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7RT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2TE;;;AA3TF;;AAAA,SA8TeulC,kBA9Tf;AAAA;AAAA;AAAA,0FA8TS,mBACL55B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC6uC,iBADsB;AAEzC/a,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBCuW,cAAAA,eAtBD,GAuBHzlC,QAAQ,CAACqgC,YAvBN;AAAA,iDAwBE;AACL5E,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QADd;AAELgK,gBAAAA,eAAe,EAAfA,eAFK;AAGLzlC,gBAAAA,QAAQ,EAARA;AAHK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9TT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6VE;;;AA7VF;;AAAA,SAgWe0lC,eAhWf;AAAA;AAAA;AAAA,uFAgWS,mBACL/5B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyE,cAAAA,SAPD,GAOsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACgvC,0BADsB;AAEzClb,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAPtC;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,mBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,8DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAqBC0W,cAAAA,YArBD,GAsBH,EAtBG;;AAwBL,kBAAI5lC,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACfqlC,kBAAAA,YAAY,CAACrlC,IAAI,CAACW,OAAN,CAAZ,GAA6BX,IAA7B;AACD,iBAFD;AAGD;;AA5BI,iDA8BE;AACLqlC,gBAAAA,YAAY,EAAZA,YADK;AAEL5lC,gBAAAA,QAAQ,EAARA;AAFK,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhWT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoYe6lC,mBApYf;AAAA,2FAoYS,mBACLl6B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyE,cAAAA,SAPD,GAOsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACmvC,sBADsB;AAEzCrb,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAPtC;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,mBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,8DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAqBC0W,cAAAA,YArBD,GAsBH,EAtBG;;AAwBL,kBAAI5lC,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACfqlC,kBAAAA,YAAY,CAACrlC,IAAI,CAACW,OAAN,CAAZ,GAA6BX,IAA7B;AACD,iBAFD;AAGD;;AA5BI,iDA8BE;AACLqlC,gBAAAA,YAAY,EAAZA,YADK;AAEL5lC,gBAAAA,QAAQ,EAARA;AAFK,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApYT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwaE;;;AAxaF;;AAAA,SA2ae+lC,qBA3af;AAAA;AAAA;AAAA,6FA2aS,mBACLp6B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACqvC,yBADsB;AAEzCvb,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAAA,iDAsBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELwK,gBAAAA,kBAAkB,EAChBjmC,QAAQ,CAACqgC,YAHN;AAILrgC,gBAAAA,QAAQ,EAARA;AAJK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3aT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAycE;;;AAzcF;;AAAA,SA4cekmC,+BA5cf;AAAA;AAAA;AAAA,uGA4cS,mBACLv6B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACwvC,kBADsB;AAEzC1b,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAAA,iDAsBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAEL2K,gBAAAA,4BAA4B,EAC1BpmC,QAAQ,CAACqgC,YAHN;AAILrgC,gBAAAA,QAAQ,EAARA;AAJK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5cT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0eE;;;AA1eF;;AAAA,SA6eeqmC,mBA7ef;AAAA;AAAA;AAAA,2FA6eS,mBACL16B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC2vC,uBADsB;AAEzC7b,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAAA,iDAsBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAEL8K,gBAAAA,aAAa,EACXvmC,QAAQ,CAACqgC,YAHN;AAILrgC,gBAAAA,QAAQ,EAARA;AAJK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7eT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2gBE;;;AA3gBF;;AAAA,SA8gBewmC,UA9gBf;AAAA;AAAA;AAAA,kFA8gBS,mBACL76B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8vC,YADsB;AAEzChc,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAjB5C;AAAA;AAAA;AAAA;;AAAA,8DAmBE7Q,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBCwX,cAAAA,OAtBD,GAsBmC,EAtBnC;;AAwBL,kBAAI,CAAA1mC,QAAQ,QAAR,YAAAA,QAAQ,CAAEqgC,YAAV,aAAkC//B,KAAtC,EAA6C;AAC3CN,gBAAAA,QAAQ,CAACqgC,YAAT,CAAsB5qC,OAAtB,CAA8B,UAAC8K,IAAD;AAC5BmmC,kBAAAA,OAAO,CAAC5vB,IAAR,CAAavW,IAAb;AACD,iBAFD;AAGD;;AA5BI,iDA8BE;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELiL,gBAAAA,OAAO,EAAPA,OAFK;AAGL1mC,gBAAAA,QAAQ,EAARA;AAHK,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9gBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmjBE;;;AAnjBF;;AAAA,SAsjBe2mC,aAtjBf;AAAA;AAAA;AAAA,qFAsjBS,mBACLh7B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACiwC,sBADsB;AAEzCnc,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAjB5C;AAAA;AAAA;AAAA;;AAAA,8DAmBE7Q,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBC2X,cAAAA,UAtBD,GAsByC,EAtBzC;;AAwBL,kBAAI,CAAA7mC,QAAQ,QAAR,YAAAA,QAAQ,CAAEq7B,MAAV,aAA4B/6B,KAAhC,EAAuC;AACrCN,gBAAAA,QAAQ,CAACq7B,MAAT,CAAgB5lC,OAAhB,CAAwB,UAAC8K,IAAD;AACtBsmC,kBAAAA,UAAU,CAAC/vB,IAAX,CAAgB;AACdwkB,oBAAAA,SAAS,EAAE/6B,IAAI,CAAC,CAAD,CADD;AAEdg7B,oBAAAA,OAAO,EAAEh7B,IAAI,CAAC,CAAD,CAFC;AAGdi7B,oBAAAA,IAAI,EAAEj7B,IAAI,CAAC,CAAD,CAHI;AAIdwD,oBAAAA,MAAM,EAAExD,IAAI,CAAC,CAAD,CAJE;AAKdkzB,oBAAAA,KAAK,EAAElzB,IAAI,CAAC,CAAD,CALG;AAMd7M,oBAAAA,MAAM,EAAE6M,IAAI,CAAC,CAAD,CANE;AAOd8K,oBAAAA,GAAG,EAAE9K,IAAI,CAAC,CAAD,CAPK;AAQdQ,oBAAAA,IAAI,EAAER,IAAI,CAAC,EAAD;AARI,mBAAhB;AAUD,iBAXD;AAYD;;AArCI,iDAuCE;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QADd;AAELoL,gBAAAA,UAAU,EAAVA,UAFK;AAGL7mC,gBAAAA,QAAQ,EAARA;AAHK,eAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtjBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAomBE;;;;AApmBF;;AAAA,SAwmBe8mC,cAxmBf;AAAA;AAAA;AAAA,sFAwmBS,mBACLn7B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyE,cAAAA,SAPD,GAOsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACowC,iBADsB;AAEzCtc,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAPtC;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,mBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,8DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAsBC8X,cAAAA,eAtBD,GAuBH,EAvBG;;AAyBL,kBAAIhnC,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACfymC,kBAAAA,eAAe,CAACzmC,IAAI,CAAChO,MAAN,CAAf,GAA+BgO,IAA/B;AACD,iBAFD;AAGD;;AA7BI,iDA+BE;AACLymC,gBAAAA,eAAe,EAAfA,eADK;AAELhnC,gBAAAA,QAAQ,EAARA;AAFK,eA/BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxmBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6oBE;;;AA7oBF;;AAAA,SAgpBeinC,mBAhpBf;AAAA;AAAA;AAAA,2FAgpBS,mBACLt7B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACuwC,uBADsB;AAEzCzc,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBC+M,cAAAA,QAtBD,GAsBYp5B,QAAQ,CAAC7C,QAAQ,CAACi8B,QAAV,CAtBpB;AAAA,iDAwBE;AACLkL,gBAAAA,OAAO,EAAEnnC,QAAQ,CAACmnC,OADb;AAELlL,gBAAAA,QAAQ,EAARA,QAFK;AAGLj8B,gBAAAA,QAAQ,EAARA;AAHK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhpBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA+qBE;;;AA/qBF;;AAAA,SAkrBeonC,kBAlrBf;AAAA;AAAA;AAAA,0FAkrBS,mBACLz7B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAUCyE,cAAAA,SAVD,GAUsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0wC,qBADsB;AAEzC5c,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAVtC;AAAA;AAAA,qBAkBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlBnB;;AAAA;AAkBCpvB,cAAAA,QAlBD,mBAkBsDlO,IAlBtD;;AAAA,oBAmBDkO,QAnBC,YAmBDA,QAAQ,CAAEkvB,UAnBT;AAAA;AAAA;AAAA;;AAAA,8DAqBElvB,QArBF,oBAqBEA,QAAQ,CAAEkvB,UArBZ;;AAAA;AAwBC+M,cAAAA,QAxBD,GAwBYp5B,QAAQ,CAAC7C,QAAQ,CAACi8B,QAAV,CAxBpB;AA0BCqL,cAAAA,OA1BD,GA2BHtnC,QA3BG,oBA2BHA,QAAQ,CAAEsnC,OA3BP;AA6BCC,cAAAA,SA7BD,GA6BmE,EA7BnE;;AA+BL,kBAAID,OAAO,YAAYhnC,KAAvB,EAA8B;AAC5BgnC,gBAAAA,OAAO,CAAC7xC,OAAR,CAAgB,UAAC8K,IAAD;AACdgnC,kBAAAA,SAAS,CAAChnC,IAAI,CAACinC,WAAN,CAAT,GAA8BjnC,IAA9B;AACD,iBAFD;AAGD;;AAnCI,iDAqCE;AACL+mC,gBAAAA,OAAO,EAAPA,OADK;AAELC,gBAAAA,SAAS,EAATA,SAFK;AAGLtL,gBAAAA,QAAQ,EAARA,QAHK;AAILwL,gBAAAA,cAAc,EAAEznC,QAAQ,CAACynC,cAJpB;AAKLznC,gBAAAA,QAAQ,EAARA;AALK,eArCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlrBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAguBE;;;AAhuBF;;AAAA,SAmuBe0nC,iBAnuBf;AAAA;AAAA;AAAA,yFAmuBS,mBACL/7B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACgxC,oBADsB;AAEzCld,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBC+M,cAAAA,QAtBD,GAsBYp5B,QAAQ,CAAC7C,QAAQ,CAACi8B,QAAV,CAtBpB;AAwBCjxB,cAAAA,IAxBD,GAwBkE,EAxBlE;;AA0BL,kBAAI,CAAAhL,QAAQ,QAAR,YAAAA,QAAQ,CAAEgL,IAAV,aAA0B1K,KAA9B,EAAqC;AACnCN,gBAAAA,QAAQ,CAACgL,IAAT,CAAcvV,OAAd,CAAsB,UAAC8K,IAAD;AACpByK,kBAAAA,IAAI,CAACzK,IAAI,CAACkD,KAAN,CAAJ,GAAmBlD,IAAnB;AACD,iBAFD;AAGD;;AA9BI,iDAgCE;AACLyK,gBAAAA,IAAI,EAAJA,IADK;AAELixB,gBAAAA,QAAQ,EAARA,QAFK;AAGLj8B,gBAAAA,QAAQ,EAARA;AAHK,eAhCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnuBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0wBE;;;AA1wBF;;AAAA,SA6wBe4nC,oBA7wBf;AAAA;AAAA;AAAA,4FA6wBS,mBACLj8B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOCyE,cAAAA,SAPD,GAOsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACkxC,wBADsB;AAEzCpd,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAPtC;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,mBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,8DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAsBClkB,cAAAA,IAtBD,GAsBkE,EAtBlE;;AAuBL,kBAAI,CAAAhL,QAAQ,QAAR,YAAAA,QAAQ,CAAEgL,IAAV,aAA0B1K,KAA9B,EAAqC;AACnCN,gBAAAA,QAAQ,CAACgL,IAAT,CAAcvV,OAAd,CAAsB,UAAC8K,IAAD;AACpByK,kBAAAA,IAAI,CAACzK,IAAI,CAACkD,KAAN,CAAJ,GAAmBlD,IAAnB;AACD,iBAFD;AAGD;;AA3BI,iDA6BE;AACLyK,gBAAAA,IAAI,EAAJA,IADK;AAELhL,gBAAAA,QAAQ,EAARA;AAFK,eA7BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7wBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgzBE;;;AAhzBF;;AAAA,SAmzBe8nC,sBAnzBf;AAAA;AAAA;AAAA,8FAmzBS,mBACLrc,GADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGG9f,cAAAA,OAHH,GAGiC8f,GAHjC,CAGG9f,OAHH,EAGYmX,QAHZ,GAGiC2I,GAHjC,CAGY3I,QAHZ,EAGsB6H,MAHtB,GAGiCc,GAHjC,CAGsBd,MAHtB;AAKLhf,cAAAA,OAAO,CAACuf,cAAR,GAAyB6V,sBAAA,CACvBp1B,OADuB,EAEvBmX,QAFuB,EAGvBnQ,MAHF;AAKMyc,cAAAA,SAVD,GAUsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACoxC,uBADsB;AAEzCtlB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAVtC;;AAAA;AAAA,qBAkBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlBnB;;AAAA;AAkBCpvB,cAAAA,QAlBD,mBAkBsDlO,IAlBtD;AAAA,iDAoBE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnzBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA00BE;;;AA10BF;;AAAA,SA60BegoC,cA70Bf;AAAA;AAAA;AAAA,sFA60BS,mBACLvc,GADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGG9f,cAAAA,OAHH,GAGiC8f,GAHjC,CAGG9f,OAHH,EAGYgf,MAHZ,GAGiCc,GAHjC,CAGYd,MAHZ,EAGoB7H,QAHpB,GAGiC2I,GAHjC,CAGoB3I,QAHpB;AAKCxjB,cAAAA,SALD,GAK+B,IAAIC,GAAJ,EAL/B;AAMLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,OAAd,EAAuB6L,OAAO,CAACkb,KAA/B;AACAvnB,cAAAA,SAAS,CAACQ,GAAV,CAAc,cAAd,EAA8B6L,OAAO,CAACs8B,YAAtC;AACA3oC,cAAAA,SAAS,CAACQ,GAAV,CAAc,OAAd,EAAuB6L,OAAO,CAAC4X,KAA/B;AACAjkB,cAAAA,SAAS,CAACQ,GAAV,CAAc,cAAd,EAA8B6L,OAAO,CAACu8B,YAAtC,EATK;AAWL;AACA;AACA;;AACM9Y,cAAAA,SAdD,GAcsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACwxC,cADsB;AAEzC1lB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN;AACA4c,kBAAAA,UAAU,EAAE4G;AAHN;AANiC,eAdtC;;AAAA;AAAA,qBA2BmB,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA3BnB;;AAAA;AA2BCpvB,cAAAA,QA3BD,mBA2BsDlO,IA3BtD;AAAA,iDA6BE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CA7BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA70BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA62BQooC,qBA72BR;AAAA,6FA62BE,mBACEz8B,OADF,EAEEgf,MAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQyE,cAAAA,SAJR,GAIoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0xC,kBADH;AAEhB5d,gBAAAA,WAAW,EAAE9e,OAFG;AAGhBgf,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJF;AAKhBzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALF,eAJpB;AAAA;AAAA,qBAW0B,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAX1B;;AAAA;AAWQpvB,cAAAA,QAXR,mBAW6DlO,IAX7D;;AAAA,oBAcIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IAjBxB;AAAA;AAAA;AAAA;;AAAA,8DAoBS7Q,QAAQ,CAACkvB,UApBlB;;AAAA;AAAA,iDAwBS;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACy7B,QAD1C;AAEL6M,gBAAAA,WAAW,EAAEtoC,QAAQ,CAACsoC,WAAT,CAAqB9pB,GAArB,CAAyB;sBAAG+pB,kBAAAA;sBAAeh9B;;AACtD,sCACKg9B,UADL;AAEEC,oBAAAA,OAAO,eACFj9B,IADE;AAFT;AAMD,iBAPY,CAFR;AAULvL,gBAAAA,QAAQ,EAARA;AAVK,eAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA72BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAm5BQyoC,uBAn5BR;AAAA,+FAm5BE,mBACE98B,OADF,EAEEgf,MAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQyE,cAAAA,SAJR,GAIoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC+xC,yBADH;AAEhBje,gBAAAA,WAAW,EAAE9e,OAFG;AAGhBgf,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJF;AAKhBzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALF,eAJpB;AAAA;AAAA,qBAW0B,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAX1B;;AAAA;AAWQpvB,cAAAA,QAXR,mBAW6DlO,IAX7D;;AAAA,oBAcIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IAjBxB;AAAA;AAAA;AAAA;;AAAA,8DAoBS7Q,QAAQ,CAACkvB,UApBlB;;AAAA;AAAA,iDAwBS;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACy7B,QAD1C;AAEL6M,gBAAAA,WAAW,EAAEtoC,QAAQ,CAACsoC,WAAT,CAAqB9pB,GAArB,CAAyB;sBAAG+pB,mBAAAA;sBAAeh9B;;AACtD,sCACKg9B,UADL;AAEEC,oBAAAA,OAAO,eACFj9B,IADE;AAFT;AAMD,iBAPY,CAFR;AAULvL,gBAAAA,QAAQ,EAARA;AAVK,eAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAn5BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAy7BQ2oC,oBAz7BR;AAAA,4FAy7BE,mBACEh9B,OADF,EAEEgf,MAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQyE,cAAAA,SAJR,GAIoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACiyC,yBADH;AAEhBne,gBAAAA,WAAW,EAAE9e,OAFG;AAGhBgf,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJF;AAKhBzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALF,eAJpB;AAAA;AAAA,qBAW0B,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAX1B;;AAAA;AAWQpvB,cAAAA,QAXR,mBAW6DlO,IAX7D;;AAAA,oBAcIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IAjBxB;AAAA;AAAA;AAAA;;AAAA,8DAoBS7Q,QAAQ,CAACkvB,UApBlB;;AAAA;AAAA,iDAwBS;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACy7B,QAD1C;AAEL6M,gBAAAA,WAAW,EAAEtoC,QAAQ,CAACsoC,WAAT,CAAqB9pB,GAArB,CAAyB;sBAAG+pB,mBAAAA;sBAAeh9B;;AACtD,sCACKg9B,UADL;AAEEC,oBAAAA,OAAO,eACFj9B,IADE;AAFT;AAMD,iBAPY,CAFR;AAULvL,gBAAAA,QAAQ,EAARA;AAVK,eAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAz7BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+9BQ6oC,4BA/9BR;AAAA,oGA+9BE,mBACEl9B,OADF,EAEEgf,MAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQyE,cAAAA,SAJR,GAIoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACmyC,2BADH;AAEhBre,gBAAAA,WAAW,EAAE9e,OAFG;AAGhBgf,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJF;AAKhBzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALF,eAJpB;AAAA;AAAA,qBAW0B,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAX1B;;AAAA;AAWQpvB,cAAAA,QAXR,mBAW6DlO,IAX7D;;AAAA,oBAcIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IAjBxB;AAAA;AAAA;AAAA;;AAAA,8DAoBS7Q,QAAQ,CAACkvB,UApBlB;;AAAA;AAAA,iDAwBS;AACLvc,gBAAAA,MAAM,EAAE3S,QAAQ,CAAC+oC,SADZ;AAEL/oC,gBAAAA,QAAQ,EAARA;AAFK,eAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/9BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6/BE;;;AA7/BF;;AAAA,SAggCegpC,wBAhgCf;AAAA;AAAA;AAAA,gGAggCS,mBACLr9B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACsyC,4BADsB;AAEzCxe,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAAA,iDAsBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELyN,gBAAAA,qBAAqB,EACnBlpC,QAAQ,CAACmpC,QAHN;AAILnpC,gBAAAA,QAAQ,EAARA;AAJK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhgCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8hCE;;;AA9hCF;;AAAA,SAiiCeopC,2BAjiCf;AAAA;AAAA;AAAA,mGAiiCS,mBACLz9B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0yC,6BADsB;AAEzC5e,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAAA,iDAsBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAEL6N,gBAAAA,wBAAwB,EACtBtpC,QAAQ,CAACupC,WAHN;AAILvpC,gBAAAA,QAAQ,EAARA;AAJK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjiCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA+jCE;;;AA/jCF;;AAAA,SAkkCewpC,yBAlkCf;AAAA;AAAA;AAAA,iGAkkCS,mBACL79B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8yC,6BADsB;AAEzChf,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAAA,iDAsBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELiO,gBAAAA,gBAAgB,EACd1pC,QAAQ,CAAC2pC,SAHN;AAIL3pC,gBAAAA,QAAQ,EAARA;AAJK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlkCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgmCE;;;;;AAhmCF;;AAAA,SAqmCe4pC,qBArmCf;AAAA;AAAA;AAAA,6FAqmCS,mBACLj+B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACkzC,yBADsB;AAEzCpf,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,mBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,8DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAAA,iDAqBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELqO,gBAAAA,YAAY,EAAE9pC,QAAQ,CAAC2pC,SAFlB;AAGL3pC,gBAAAA,QAAQ,EAARA;AAHK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArmCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAioCE;;;;AAjoCF;;AAAA,SAqoCe+pC,4BAroCf;AAAA;AAAA;AAAA,oGAqoCS,mBACLp+B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACqzC,gCADsB;AAEzCvf,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAkBDkO,QAlBC,YAkBDA,QAAQ,CAAEkvB,UAlBT;AAAA;AAAA;AAAA;;AAAA,8DAoBElvB,QApBF,oBAoBEA,QAAQ,CAAEkvB,UApBZ;;AAAA;AAwBL,kBACEvjB,OAAO,CAACs+B,QAAR,KAAqB,IAArB,IACAjqC,QAAQ,CAACqgC,YAAT,CAAsBxtC,MAFxB;AAIE;AACA;AALF,gBAME;AACAmN,gBAAAA,QAAQ,CAACqgC,YAAT,GAAwBrgC,QAAQ,CAACqgC,YAAT,CAAsB1X,MAAtB,CACtB,UACEqG,IADF,EAEEzuB,IAFF;AAIE,sBACEA,IAAI,CAAC0pC,QAAL,IACA1pC,IAAI,CAAC0pC,QAAL,CAAc7lB,KADd,IAEA7jB,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,CAAoBzxB,UAApB,CAA+B,IAA/B,CAHF,EAIE;AACA,wBAAMu3C,MAAM,GAAG,IAAIntC,EAAJ,CAAOwD,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,CAAoBplB,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,CAAP,EAA8C,EAA9C,CAAf;AACAuB,oBAAAA,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,GACE,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CADT;AAED;;AAED,mCAAWmyB,IAAX,GAAiBzuB,IAAjB;AACD,iBAhBqB,EAiBtB,EAjBsB,CAAxB,CADA;AAqBA;AACD;;AApDI,iDAqDE;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAEL0O,gBAAAA,UAAU,EAAEnqC,QAAQ,CAACqgC,YAFhB;AAGLrgC,gBAAAA,QAAQ,EAARA;AAHK,eArDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAroCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgsCeoqC,sBAhsCf;AAAA,8FAgsCS,mBACLz+B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAWCyE,cAAAA,SAXD,GAWa;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0zC,0BADH;AAEhB5f,gBAAAA,WAAW,eAAO9e,OAAP,CAFK;AAGhBgf,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJF;AAKhBzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALF,eAXb;AAAA;AAAA,qBAkBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlBnB;;AAAA;AAkBCpvB,cAAAA,QAlBD,mBAkBsDlO,IAlBtD;;AAAA,oBAoBDkO,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACkvB,UApB5B;AAAA;AAAA;AAAA;;AAAA,8DAsBElvB,QAAQ,CAACkvB,UAtBX;;AAAA;AA0BDmM,cAAAA,MA1BC,GA0BQr7B,QAAQ,CAACq7B,MA1BjB;AAAA,iDA2BE;AACLI,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELJ,gBAAAA,MAAM,EAANA,MAFK;AAGLr7B,gBAAAA,QAAQ,EAARA;AAHK,eA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhsCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkuCesqC,WAluCf;AAAA,mFAkuCS,mBACL3+B,OADK,EAELmX,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICxjB,cAAAA,SAJD,GAI+B,IAAIC,GAAJ,EAJ/B;AAMLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,SAAd,EAAyB6L,OAAO,CAAChL,OAAjC;AACArB,cAAAA,SAAS,CAACQ,GAAV,CAAc,eAAd,EAA+B6L,OAAO,CAAC4+B,aAAvC;AACAjrC,cAAAA,SAAS,CAACQ,GAAV,CAAc,YAAd,EAA4B6L,OAAO,CAACqR,UAApC;AACA1d,cAAAA,SAAS,CAACQ,GAAV,CAAc,YAAd,EAA4B6L,OAAO,CAACsR,UAApC;AACA3d,cAAAA,SAAS,CAACQ,GAAV,CAAc,UAAd,EAA0B6L,OAAO,CAAC6+B,QAAlC;AAEMpb,cAAAA,SAZD,GAYsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8zC,YADsB;AAEzChoB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHuB;AAIzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SAJuB;AAKzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AALiC,eAZtC;AAAA;AAAA,qBAuBmB,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAvBnB;;AAAA;AAuBCpvB,cAAAA,QAvBD,mBAuBsDlO,IAvBtD;;AAAA,oBAwBDkO,QAxBC,YAwBDA,QAAQ,CAAEkvB,UAxBT;AAAA;AAAA;AAAA;;AAAA,8DA0BElvB,QA1BF,oBA0BEA,QAAQ,CAAEkvB,UA1BZ;;AAAA;AAAA,iDA6BE;AACLvc,gBAAAA,MAAM,EAAE3S,QAAF,oBAAEA,QAAQ,CAAE2S,MADb;AAEL3S,gBAAAA,QAAQ,EAARA;AAFK,eA7BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAluCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,SAuwCe0qC,kBAvwCf;AAAA;AAAA;AAAA,0FAuwCS,mBACL/+B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACg0C,qBADsB;AAEzClgB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBL,kBAAIlvB,QAAQ,CAAClO,IAAT,CAAce,MAAlB,EAA0B;AACxBmN,gBAAAA,QAAQ,CAAClO,IAAT,GAAgBkO,QAAQ,CAAClO,IAAT,CAAc62B,MAAd,CACd,UACEqG,IADF,EAEEzuB,IAFF;AAIE,sBAAIA,IAAI,CAAC6jB,KAAL,IAAc7jB,IAAI,CAAC6jB,KAAL,CAAWzxB,UAAX,CAAsB,IAAtB,CAAlB,EAA+C;AAC7C,wBAAMu3C,MAAM,GAAG,IAAIntC,EAAJ,CAAOwD,IAAI,CAAC6jB,KAAL,CAAWplB,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAP,EAAqC,EAArC,CAAf;AACAuB,oBAAAA,IAAI,CAAC6jB,KAAL,GAAa,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CAApB;;AACA,wBACE8O,OAAO,CAACs+B,QAAR,KAAqB,IAArB,IACA1pC,IAAI,CAAC0pC,QADL,IAEA1pC,IAAI,CAAC0pC,QAAL,CAAc7lB,KAFd,IAGA7jB,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,CAAoBzxB,UAApB,CAA+B,IAA/B,CAJF,EAKE;AACA;AACA4N,sBAAAA,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,GACE,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CADT;AAED;AACF;;AACD,mCAAWmyB,IAAX,GAAiBzuB,IAAjB;AACD,iBApBa,EAqBd,EArBc,CAAhB,CADwB;AAyBxB;AACD,eAhDI;AAkDL;AACA;AACA;;;AApDK,iDAqDE;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELmP,gBAAAA,eAAe,EAAE5qC,QAAQ,CAAClO,IAFrB;AAGLkO,gBAAAA,QAAQ,EAARA;AAHK,eArDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvwCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAm0Ce6qC,8BAn0Cf;AAAA,sGAm0CS,mBACLl/B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACm0C,mCADsB;AAEzCrgB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBL,kBAAIlvB,QAAQ,CAAClO,IAAT,CAAce,MAAlB,EAA0B;AACxBmN,gBAAAA,QAAQ,CAAClO,IAAT,GAAgBkO,QAAQ,CAAClO,IAAT,CAAc62B,MAAd,CACd,UACEqG,IADF,EAEEzuB,IAFF;AAIE,sBAAIA,IAAI,CAAC6jB,KAAL,IAAc7jB,IAAI,CAAC6jB,KAAL,CAAWzxB,UAAX,CAAsB,IAAtB,CAAlB,EAA+C;AAC7C,wBAAMu3C,MAAM,GAAG,IAAIntC,EAAJ,CAAOwD,IAAI,CAAC6jB,KAAL,CAAWplB,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAP,EAAqC,EAArC,CAAf;AACAuB,oBAAAA,IAAI,CAAC6jB,KAAL,GAAa,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CAApB;;AACA,wBACE8O,OAAO,CAACs+B,QAAR,KAAqB,IAArB,IACA1pC,IAAI,CAAC0pC,QADL,IAEA1pC,IAAI,CAAC0pC,QAAL,CAAc7lB,KAFd,IAGA7jB,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,CAAoBzxB,UAApB,CAA+B,IAA/B,CAJF,EAKE;AACA;AACA4N,sBAAAA,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,GACE,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CADT;AAED;AACF;;AACD,mCAAWmyB,IAAX,GAAiBzuB,IAAjB;AACD,iBApBa,EAqBd,EArBc,CAAhB,CADwB;AAyBxB;AACD,eAhDI;AAkDL;AACA;AACA;;;AApDK,iDAqDE;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELmP,gBAAAA,eAAe,EAAE5qC,QAAQ,CAAClO,IAFrB;AAGLkO,gBAAAA,QAAQ,EAARA;AAHK,eArDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAn0CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+3Ce+qC,uBA/3Cf;AAAA,+FA+3CS,mBACLp/B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACq0C,sBADsB;AAEzCvgB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBL,kBAAIlvB,QAAQ,CAAClO,IAAT,CAAce,MAAlB,EAA0B;AACxBmN,gBAAAA,QAAQ,CAAClO,IAAT,GAAgBkO,QAAQ,CAAClO,IAAT,CAAc62B,MAAd,CACd,UACEqG,IADF,EAEEzuB,IAFF;AAIE,sBAAIA,IAAI,CAAC6jB,KAAL,IAAc7jB,IAAI,CAAC6jB,KAAL,CAAWzxB,UAAX,CAAsB,IAAtB,CAAlB,EAA+C;AAC7C,wBAAMu3C,MAAM,GAAG,IAAIntC,EAAJ,CAAOwD,IAAI,CAAC6jB,KAAL,CAAWplB,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAP,EAAqC,EAArC,CAAf;AACAuB,oBAAAA,IAAI,CAAC6jB,KAAL,GAAa,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CAApB;;AACA,wBACE8O,OAAO,CAACs+B,QAAR,KAAqB,IAArB,IACA1pC,IAAI,CAAC0pC,QADL,IAEA1pC,IAAI,CAAC0pC,QAAL,CAAc7lB,KAFd,IAGA7jB,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,CAAoBzxB,UAApB,CAA+B,IAA/B,CAJF,EAKE;AACA;AACA4N,sBAAAA,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,GACE,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CADT;AAED;AACF;;AACD,mCAAWmyB,IAAX,GAAiBzuB,IAAjB;AACD,iBApBa,EAqBd,EArBc,CAAhB,CADwB;AAyBxB;AACD,eAhDI;AAkDL;AACA;AACA;;;AApDK,iDAqDE;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELmP,gBAAAA,eAAe,EAAE5qC,QAAQ,CAAClO,IAFrB;AAGLkO,gBAAAA,QAAQ,EAARA;AAHK,eArDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/3CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA07CeirC,gBA17Cf;AAAA,wFA07CS,mBACLt/B,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCyjB,cAAAA,SAHD,GAGsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACu0C,mBADsB;AAEzCzgB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHuB;AAIzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJuB,eAHtC;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,mBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,8DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAAA,iDAgBE;AACLic,gBAAAA,QAAQ,EAAEnrC,QAAQ,CAAClO,IAAT,GAAgBkO,QAAQ,CAAClO,IAAzB,GAAgCkO,QADrC;AAELA,gBAAAA,QAAQ,EAARA;AAFK,eAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA17CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAg9CeorC,cAh9Cf;AAAA,sFAg9CS,mBACLz/B,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAYCyE,cAAAA,SAZD,GAYsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC00C,iBADsB;AAEzC5gB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHuB;AAIzC3E,gBAAAA,MAAM,EAAEA,MAJiC;AAKzCE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAZtC;AAAA;AAAA,qBAoBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CApBnB;;AAAA;AAoBCpvB,cAAAA,QApBD,mBAoBsDlO,IApBtD;;AAAA,oBAqBDkO,QArBC,YAqBDA,QAAQ,CAAEkvB,UArBT;AAAA;AAAA;AAAA;;AAAA,8DAuBElvB,QAvBF,oBAuBEA,QAAQ,CAAEkvB,UAvBZ;;AAAA;AA0BCoc,cAAAA,OA1BD,GA0BW;AACd1oC,gBAAAA,SAAS,EAAE5C,QAAQ,CAACurC,UADN;AAEdC,gBAAAA,OAAO,EAAExrC,QAAQ,CAACyrC,QAFJ;AAGdC,gBAAAA,GAAG,EAAE1rC,QAAQ,CAAC0rC,GAHA;AAIdC,gBAAAA,MAAM,EAAE3rC,QAAQ,CAAC4rC;AAJH,eA1BX;AAAA,iDAiCE;AACLN,gBAAAA,OAAO,EAAPA,OADK;AAELtrC,gBAAAA,QAAQ,EAARA;AAFK,eAjCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAh9CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAu/Ce6rC,aAv/Cf;AAAA,qFAu/CS,0BAQLhvB,SARK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHC,cAAAA,OAFG,SAEHA,OAFG,EAGHnR,OAHG,SAGHA,OAHG;;AAAA,kBAQLkR,SARK;AAQLA,gBAAAA,SARK,GAQ6CpqB,SAR7C;AAAA;;AAAA;AAAA;AAAA,qBA0BcgqB,eAAe,CAACK,OAAD,EAAUD,SAAV,CA1B7B;;AAAA;AA0BHiG,cAAAA,QA1BG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA8BDA,QA9BC;AAAA;AAAA;AAAA;;AA+BGxjB,cAAAA,SA/BH,GA+BiCD,iBAAiB,CAACsM,OAAD,CA/BlD;AAgCGyjB,cAAAA,SAhCH,GAgCwC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACitC,cADsB;AAEzCnZ,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzC8W,gBAAAA,UAAU,EAAE9W,OAH6B;AAIzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G,QAAQ,CAACrF;AAFf;AANiC,eAhCxC;AAAA;AAAA;AAAA,qBA6CiB,KAAK8R,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA7CjB;;AAAA;AA6CDpvB,cAAAA,QA7CC,mBA6CoDlO,IA7CpD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAiDCkO,QAjDD,aAiDC,UAAUkvB,UAjDX;AAAA;AAAA;AAAA;;AAAA,+CAmDIlvB,QAnDJ,qBAmDI,WAAUkvB,UAnDd;;AAAA;AAAA,iDAsDM;AACLvE,gBAAAA,MAAM,EAAE3qB,QAAQ,CAAC2qB,MADZ;AAEL3qB,gBAAAA,QAAQ,EAARA,QAFK;AAGL8iB,gBAAAA,QAAQ,EAARA;AAHK,eAtDN;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBA6DG;AACJjS,gBAAAA,IAAI,EAAEvW,yBAAiB,CAACwxC,YADpB;AAEJ/5C,gBAAAA,OAAO,EAAEwI,sBAAc,CAACuxC;AAFpB,eA7DH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAv/CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2jDE;;;AA3jDF;;AAAA,SA8jDeC,sBA9jDf;AAAA;AAAA;AAAA,8FA8jDS,mBACLtgB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAAA,sBAa0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAfC,EAaGA,SAbH,SAaGA,SAbH,EAacL,kBAbd,SAacA,kBAbd;AAgBCuuB,cAAAA,QAhBD,GAgBY,CAAC,CAACD,WAhBd;AAiBD/gB,cAAAA,cAjBC,GAiBgBx4B,SAjBhB;;AAmBCy5C,cAAAA,KAnBD;AAAA,2EAmBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,wCAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAACZ,KAFW,EAGnBY,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAnBT;;AAAA,gCAmBCD,KAnBD;AAAA;AAAA;AAAA;;;AAAA,oBAkCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cApC3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBAuCGJ,QAvCH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAwCOC,KAAK,EAxCZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA0CsBnL,qCAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAACZ,KAFW,EAGnBY,OAHmB,EAInBmS,OAJmB,EAKnBC,SALmB,EAMnBL,kBANmB,CA1CtB;;AAAA;AA0CO/K,cAAAA,MA1CP;AAkDCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AAlDD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAsDI,KAAK3d,MAAL,eAtDJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA0D2B6U,UAAU,CAAC7lB,IAAD,EAAOhS,OAAO,CAACZ,KAAf,CA1DrC;;AAAA;AA0DGwhC,cAAAA,eA1DH;AAAA;;AAAA,mBA4DGA,eA5DH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA8DSxL,gDAAA,CACJpjB,IADI,EAEJhS,OAAO,CAACZ,KAFJ,EAGJY,OAHI,EAIJmS,OAJI,EAKJC,SALI,CA9DT;;AAAA;AA6DOpL,cAAAA,OA7DP;AAqECsY,cAAAA,cAAc,GAAGtY,OAAM,CAAC0O,QAAxB;AArED;AAAA;;AAAA;AAAA,mBAsEU3D,kBAtEV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAwESqjB,gDAAA,CACJpjB,IADI,EAEJhS,OAAO,CAACZ,KAFJ,EAGJY,OAHI,EAIJmS,OAJI,EAKJC,SALI,EAMJL,kBANI,CAxET;;AAAA;AAuEO/K,cAAAA,QAvEP;AAgFCsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB,CAhFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAmFO6qB,KAAK,EAnFZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAuFI,KAAKvd,MAAL,eAvFJ;;AAAA;AA4FLhjB,cAAAA,OAAO,CAACuf,cAAR,GAAyB6V,6BAAA,CACvBp1B,OADuB,EAEvBmX,QAFuB,EAGvBnQ,MAHF;;AAKA,kBAAI+K,kBAAJ,EAAwB;AACtB/R,gBAAAA,OAAO,CAAC+R,kBAAR,GAA6BA,kBAA7B;AACD;;AACK0R,cAAAA,SApGD,GAoGsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACwvC,kBADsB;AAEzC1jB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MALuB;AAMzCG,gBAAAA,cAAc,EAAdA;AANyC,eApGtC;AAAA;AAAA;AAAA,qBA8Ge,KAAKsE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA9Gf;;AAAA;AA8GHpvB,cAAAA,QA9GG,mBA8GkDlO,IA9GlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAkHE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAlHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9jDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmrDE;;;AAnrDF;;AAAA,SAsrDewsC,sBAtrDf;AAAA;AAAA;AAAA,8FAsrDS,mBACL/gB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAAA,sBAa0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAfC,EAaGA,SAbH,SAaGA,SAbH,EAacL,kBAbd,SAacA,kBAbd;AAiBCuuB,cAAAA,QAjBD,GAiBY,CAAC,CAACD,WAjBd;AAkBD/gB,cAAAA,cAlBC,GAkBgBx4B,SAlBhB;;AAoBCy5C,cAAAA,KApBD;AAAA,2EAoBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,gCAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAACwa,SAFW,EAGnBxa,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBApBT;;AAAA,gCAoBCD,KApBD;AAAA;AAAA;AAAA;;AAAA,oBAiCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cAnC3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBAuCGJ,QAvCH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAwCOC,KAAK,EAxCZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA2CsBnL,6BAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAACwa,SAFW,EAGnBxa,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CA3CtB;;AAAA;AA2CO/K,cAAAA,MA3CP;AAoDCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AApDD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAwDI,KAAK3d,MAAL,eAxDJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA4D2B6U,UAAU,CAAC7lB,IAAD,EAAOhS,OAAO,CAACwa,SAAf,CA5DrC;;AAAA;AA4DGomB,cAAAA,eA5DH;AAAA;;AAAA,mBA8DGA,eA9DH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAgESxL,wCAAA,CACJpjB,IADI,EAEJhS,OAAO,CAACwa,SAFJ,EAGJxa,OAHI,EAIJmS,OAJI,EAKJC,SALI,CAhET;;AAAA;AA+DOpL,cAAAA,QA/DP;AAuECsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB;AAvED;AAAA;;AAAA;AAAA,mBAwEU3D,kBAxEV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA0ESqjB,wCAAA,CACJpjB,IADI,EAEJhS,OAAO,CAACwa,SAFJ,EAGJxa,OAHI,EAIJmS,OAJI,EAKJC,SALI,EAMJL,kBANI,CA1ET;;AAAA;AAyEO/K,cAAAA,QAzEP;AAkFCsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB,CAlFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAqFO6qB,KAAK,EArFZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAyFI,KAAKvd,MAAL,eAzFJ;;AAAA;AA8FLhjB,cAAAA,OAAO,CAACuf,cAAR,GAAyB6V,qBAAA,CACvBp1B,OADuB,EAEvBmX,QAFuB,EAGvBnQ,MAHF;;AAIA,kBAAI+K,kBAAJ,EAAwB;AACtB/R,gBAAAA,OAAO,CAAC+R,kBAAR,GAA6BA,kBAA7B;AACD;;AACK0R,cAAAA,SArGD,GAqGsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC81C,sBADsB;AAEzChqB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MALuB;AAMzCG,gBAAAA,cAAc,EAAdA;AANyC,eArGtC;AAAA;AAAA;AAAA,qBAgHe,KAAKsE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhHf;;AAAA;AAgHHpvB,cAAAA,QAhHG,mBAgHkDlO,IAhHlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAoHE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CApHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtrDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6yDE;;;AA7yDF;;AAAA,SAgzDe0sC,sBAhzDf;AAAA;AAAA;AAAA,8FAgzDS,mBACLjhB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAAA,sBAa0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAfC,EAaGA,SAbH,SAaGA,SAbH,EAacL,kBAbd,SAacA,kBAbd;AAgBGivB,cAAAA,QAhBH,GAgBgBhhC,OAhBhB,CAgBGghC,QAhBH;AAkBCV,cAAAA,QAlBD,GAkBY,CAAC,CAACD,WAlBd;AAmBD/gB,cAAAA,cAnBC,GAmBgBx4B,SAnBhB;AAoBLk6C,cAAAA,QAAQ,CAAC3mB,OAAT,GAAmB,CAAnB;AACA2mB,cAAAA,QAAQ,CAACC,IAAT,yBAAoCjhC,OAAO,CAACkhC,gBAA5C;AACAF,cAAAA,QAAQ,CAACpgC,MAAT,GAAkB;AAChBxI,gBAAAA,MAAM,EAAE,GADQ;AAEhB7C,gBAAAA,OAAO,EAAEyrC,QAAQ,CAAClpC,KAAT,CAAevC;AAFR,eAAlB;;AAKMgrC,cAAAA,KA3BD;AAAA,4EA2BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,gCAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA3BT;;AAAA,gCA2BCD,KA3BD;AAAA;AAAA;AAAA;;AAAA,oBAwCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cA1C3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBA8CGJ,QA9CH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA+COC,KAAK,EA/CZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAkDsBnL,6BAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CAlDtB;;AAAA;AAkDO/K,cAAAA,MAlDP;AA2DCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AA3DD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA+DI,KAAK3d,MAAL,eA/DJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAmE2B6U,UAAU,CAAC7lB,IAAD,EAAOgvB,QAAQ,CAACxmB,SAAhB,CAnErC;;AAAA;AAmEGomB,cAAAA,eAnEH;AAAA;;AAAA,mBAqEGA,eArEH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAuESxL,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,CAvET;;AAAA;AAsEOpL,cAAAA,QAtEP;AA8ECsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB;AA9ED;AAAA;;AAAA;AAAA,mBA+EU3D,kBA/EV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAiFSqjB,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,EAMJL,kBANI,CAjFT;;AAAA;AAgFO/K,cAAAA,QAhFP;AAyFCsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB,CAzFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA4FO6qB,KAAK,EA5FZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAgGI,KAAKvd,MAAL,eAhGJ;;AAAA;AAqGL,kBAAIjR,kBAAJ,EAAwB;AACtBivB,gBAAAA,QAAQ,CAACjvB,kBAAT,GAA8BA,kBAA9B;AACD;;AACDivB,cAAAA,QAAQ,CAACzhB,cAAT,GAA0B6V,qBAAA,CACxB4L,QADwB,EAExB7pB,QAFwB,EAGxBnQ,MAHF;AAIAg6B,cAAAA,QAAQ,CAAC1hB,cAAT,GAA0BA,cAA1B;AACM3rB,cAAAA,SA7GD,GA6G+B,IAAIC,GAAJ,EA7G/B;AA8GLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,kBAAd,EAAkC6L,OAAO,CAACkhC,gBAA1C;AACAvtC,cAAAA,SAAS,CAACQ,GAAV,CAAc,SAAd,EAAyB6L,OAAO,CAACzK,OAAjC;AACA5B,cAAAA,SAAS,CAACQ,GAAV,CAAc,UAAd,EAA0B6L,OAAO,CAACghC,QAAlC;AACArtC,cAAAA,SAAS,CAACQ,GAAV,CAAc,iBAAd,EAAiC6L,OAAO,CAACmhC,eAAzC;AACM1d,cAAAA,SAlHD,GAkHsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACo2C,sBADsB;AAEzCtqB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANiC,eAlHtC;AAAA;AAAA;AAAA,qBAgIe,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhIf;;AAAA;AAgIHpvB,cAAAA,QAhIG,mBAgIkDlO,IAhIlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAoIE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CApIF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhzDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAu7DE;;;AAv7DF;;AAAA,SA07DegtC,eA17Df;AAAA;AAAA;AAAA,uFA07DS,mBACLvhB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAAA,uBAa0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAfC,EAaGA,SAbH,UAaGA,SAbH,EAacL,kBAbd,UAacA,kBAbd;AAgBGivB,cAAAA,QAhBH,GAgBgBhhC,OAhBhB,CAgBGghC,QAhBH;AAkBCV,cAAAA,QAlBD,GAkBY,CAAC,CAACD,WAlBd;AAmBD/gB,cAAAA,cAnBC,GAmBgBx4B,SAnBhB;AAoBLk6C,cAAAA,QAAQ,CAAC3mB,OAAT,GAAmB,CAAnB;AACA2mB,cAAAA,QAAQ,CAACC,IAAT,6BAAwCjhC,OAAO,CAAC8Y,YAAhD;AACAkoB,cAAAA,QAAQ,CAACpgC,MAAT,GAAkB;AAChBxI,gBAAAA,MAAM,EAAE,GADQ;AAEhB7C,gBAAAA,OAAO,EAAEyrC,QAAQ,CAAClpC,KAAT,CAAevC;AAFR,eAAlB;;AAKMgrC,cAAAA,KA3BD;AAAA,4EA2BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,gCAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA3BT;;AAAA,gCA2BCD,KA3BD;AAAA;AAAA;AAAA;;AAAA,oBAwCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cA1C3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBA8CGJ,QA9CH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA+COC,KAAK,EA/CZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAkDsBnL,6BAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CAlDtB;;AAAA;AAkDO/K,cAAAA,MAlDP;AA2DCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AA3DD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA+DI,KAAK3d,MAAL,eA/DJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAmE2B6U,UAAU,CAAC7lB,IAAD,EAAOgvB,QAAQ,CAACxmB,SAAhB,CAnErC;;AAAA;AAmEGomB,cAAAA,eAnEH;AAAA;;AAAA,mBAqEGA,eArEH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAuESxL,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,CAvET;;AAAA;AAsEOpL,cAAAA,QAtEP;AA8ECsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB;AA9ED;AAAA;;AAAA;AAAA,mBA+EU3D,kBA/EV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAiFSqjB,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,EAMJL,kBANI,CAjFT;;AAAA;AAgFO/K,cAAAA,QAhFP;AAyFCsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB,CAzFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA4FO6qB,KAAK,EA5FZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAgGI,KAAKvd,MAAL,eAhGJ;;AAAA;AAqGL,kBAAIjR,kBAAJ,EAAwB;AACtBivB,gBAAAA,QAAQ,CAACjvB,kBAAT,GAA8BA,kBAA9B;AACD;;AACDivB,cAAAA,QAAQ,CAACzhB,cAAT,GAA0B6V,qBAAA,CACxB4L,QADwB,EAExB7pB,QAFwB,EAGxBnQ,MAHF;AAIAg6B,cAAAA,QAAQ,CAAC1hB,cAAT,GAA0BA,cAA1B;AACM3rB,cAAAA,SA7GD,GA6G+B,IAAIC,GAAJ,EA7G/B;AA8GLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,SAAd,EAAyB6L,OAAO,CAAC8Z,OAAjC;AACAnmB,cAAAA,SAAS,CAACQ,GAAV,CAAc,cAAd,EAA8B6L,OAAO,CAAC8Y,YAAtC;AACAnlB,cAAAA,SAAS,CAACQ,GAAV,CAAc,UAAd,EAA0B6L,OAAO,CAACghC,QAAlC;AACMvd,cAAAA,SAjHD,GAiHsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACs2C,wBADsB;AAEzCxqB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANiC,eAjHtC;AAAA;AAAA;AAAA,qBA+He,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA/Hf;;AAAA;AA+HHpvB,cAAAA,QA/HG,mBA+HkDlO,IA/HlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAmIE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAnIF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA17DT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA+jEE;;;AA/jEF;;AAAA,SAkkEektC,mBAlkEf;AAAA;AAAA;AAAA,2FAkkES,mBACLzhB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAAA,uBAa0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAfC,EAaGA,SAbH,UAaGA,SAbH,EAacL,kBAbd,UAacA,kBAbd;AAiBCuuB,cAAAA,QAjBD,GAiBY,CAAC,CAACD,WAjBd;AAkBD/gB,cAAAA,cAlBC,GAkBgBx4B,SAlBhB;;AAoBCy5C,cAAAA,KApBD;AAAA,4EAoBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,mCAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAACob,WAFW,EAGnBpb,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBApBT;;AAAA,gCAoBCD,KApBD;AAAA;AAAA;AAAA;;AAAA,oBAkCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cApC3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBAuCGJ,QAvCH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAwCOC,KAAK,EAxCZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA0CsBnL,gCAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAACob,WAFW,EAGnBpb,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CA1CtB;;AAAA;AA0CO/K,cAAAA,MA1CP;AAmDCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AAnDD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAuDI,KAAK3d,MAAL,eAvDJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA2D2B6U,UAAU,CAAC7lB,IAAD,EAAOhS,OAAO,CAACob,WAAf,CA3DrC;;AAAA;AA2DGwlB,cAAAA,eA3DH;AAAA;;AAAA,mBA6DGA,eA7DH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAgESxL,2CAAA,CACJpjB,IADI,EAEJhS,OAAO,CAACob,WAFJ,EAGJpb,OAHI,EAIJmS,OAJI,EAKJC,SALI,CAhET;;AAAA;AA+DOpL,cAAAA,QA/DP;AAuECsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB;AAvED;AAAA;;AAAA;AAAA,mBAwEU3D,kBAxEV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA0ESqjB,2CAAA,CACJpjB,IADI,EAEJhS,OAAO,CAACob,WAFJ,EAGJpb,OAHI,EAIJmS,OAJI,EAKJC,SALI,EAMJL,kBANI,CA1ET;;AAAA;AAyEO/K,cAAAA,SAzEP;AAkFCsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB,CAlFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAqFO6qB,KAAK,EArFZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAyFI,KAAKvd,MAAL,eAzFJ;;AAAA;AA8FLhjB,cAAAA,OAAO,CAACuf,cAAR,GAAyB6V,yBAAA,CACvBp1B,OADuB,EAEvBmX,QAFuB,EAGvBnQ,MAHF;;AAIA,kBAAI+K,kBAAJ,EAAwB;AACtB/R,gBAAAA,OAAO,CAAC+R,kBAAR,GAA6BA,kBAA7B;AACD;;AACK0R,cAAAA,SArGD,GAqGsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACw2C,0BADsB;AAEzC1qB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MALuB;AAMzCG,gBAAAA,cAAc,EAAdA;AANyC,eArGtC;AAAA;AAAA;AAAA,qBAgHe,KAAKsE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhHf;;AAAA;AAgHHpvB,cAAAA,QAhHG,mBAgHkDlO,IAhHlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAoHE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CApHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlkET;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyrEE;;;AAzrEF;;AAAA,SA4rEeotC,iBA5rEf;AAAA;AAAA;AAAA,yFA4rES,mBACL3hB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAAA,uBAa0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAfC,EAaGA,SAbH,UAaGA,SAbH,EAacL,kBAbd,UAacA,kBAbd;AAiBCuuB,cAAAA,QAjBD,GAiBY,CAAC,CAACD,WAjBd;AAkBD/gB,cAAAA,cAlBC,GAkBgBx4B,SAlBhB;;AAoBCy5C,cAAAA,KApBD;AAAA,4EAoBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,mCAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAACZ,KAFW,EAGnBY,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBApBT;;AAAA,gCAoBCD,KApBD;AAAA;AAAA;AAAA;;;AAAA,oBAmCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cArC3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBAwCGJ,QAxCH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAyCOC,KAAK,EAzCZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA2CsBnL,gCAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAACZ,KAFW,EAGnBY,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CA3CtB;;AAAA;AA2CO/K,cAAAA,MA3CP;AAoDCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AApDD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAwDI,KAAK3d,MAAL,eAxDJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA4D2B6U,UAAU,CAAC7lB,IAAD,EAAOhS,OAAO,CAACZ,KAAf,CA5DrC;;AAAA;AA4DGwhC,cAAAA,eA5DH;AAAA;;AAAA,mBA+DGA,eA/DH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAmESxL,2CAAA,CACJpjB,IADI,EAEJhS,OAAO,CAACZ,KAFJ,EAGJY,OAHI,EAIJmS,OAJI,EAKJC,SALI,CAnET;;AAAA;AAkEOpL,cAAAA,SAlEP;AA0ECsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB;AA1ED;AAAA;;AAAA;AAAA,mBA2EU3D,kBA3EV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA6ESqjB,2CAAA,CACJpjB,IADI,EAEJhS,OAAO,CAACZ,KAFJ,EAGJY,OAHI,EAIJmS,OAJI,EAKJC,SALI,EAMJL,kBANI,CA7ET;;AAAA;AA4EO/K,cAAAA,SA5EP;AAqFCsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB,CArFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAwFO6qB,KAAK,EAxFZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA4FI,KAAKvd,MAAL,eA5FJ;;AAAA;AAiGLhjB,cAAAA,OAAO,CAACuf,cAAR,GAAyB6V,yBAAA,CACvBp1B,OADuB,EAEvBmX,QAFuB,EAGvBnQ,MAHF;;AAIA,kBAAI+K,kBAAJ,EAAwB;AACtB/R,gBAAAA,OAAO,CAAC+R,kBAAR,GAA6BA,kBAA7B;AACD;;AACK0R,cAAAA,SAxGD,GAwGsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC02C,oBADsB;AAEzC5qB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MALuB;AAMzCG,gBAAAA,cAAc,EAAdA;AANyC,eAxGtC;AAAA;AAAA;AAAA,qBAmHe,KAAKsE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnHf;;AAAA;AAmHHpvB,cAAAA,QAnHG,mBAmHkDlO,IAnHlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAuHE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAvHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5rET;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqzEE;;;AArzEF;;AAAA,SAwzEestC,aAxzEf;AAAA;AAAA;AAAA,qFAwzES,mBACL7hB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AASH1e,cAAAA,OATG,GAgBD8f,GAhBC,CASH9f,OATG,EAUHgS,IAVG,GAgBD8N,GAhBC,CAUH9N,IAVG,EAWHG,OAXG,GAgBD2N,GAhBC,CAWH3N,OAXG,EAYHF,UAZG,GAgBD6N,GAhBC,CAYH7N,UAZG,EAaHkF,QAbG,GAgBD2I,GAhBC,CAaH3I,QAbG,EAcH6H,MAdG,GAgBDc,GAhBC,CAcHd,MAdG,EAeOqhB,WAfP,GAgBDvgB,GAhBC,CAeHwgB,QAfG;AAAA,uBAiBoD5hB,OAAO,GAC5DA,OAD4D,GAE5D;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAnBC,EAiBGA,SAjBH,UAiBGA,SAjBH,EAiBcL,kBAjBd,UAiBcA,kBAjBd,EAiBkC6vB,QAjBlC,UAiBkCA,QAjBlC;;AAoBL,kBAAI5hC,OAAO,CAAC6hC,qBAAR,KAAkC/6C,SAAtC,EAAiD;AAC/CkZ,gBAAAA,OAAO,CAAC6hC,qBAAR,GAAgC;AAC9BC,kBAAAA,UAAU,EAAEp5C,UAAU,CAACypB,OAAD,CADQ;AAE9B4vB,kBAAAA,QAAQ,EAAE/hC,OAAO,CAAC4Y,aAFY;AAG9BopB,kBAAAA,UAAU,EAAE;AAHkB,iBAAhC;AAKD;;AAEDhiC,cAAAA,OAAO,CAAC+Y,iBAAR,GAA4B/Y,OAAO,CAAC+Y,iBAAR,GACxB/Y,OAAO,CAAC+Y,iBADgB,GAExB,CAFJ;AAGMunB,cAAAA,QA/BD,GA+BY,CAAC,CAACD,WA/Bd;AAgCD/gB,cAAAA,cAhCC,GAgCgBx4B,SAhChB;;AAkCCy5C,cAAAA,KAlCD;AAAA,4EAkCS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,+BAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAAC4Y,aAFW,EAGnB5Y,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAlCT;;AAAA,gCAkCCD,KAlCD;AAAA;AAAA;AAAA;;;AAAA,kBAgDAqB,QAhDA;AAAA;AAAA;AAAA;;AAAA,oBAkDD3vB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cApD7B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBAuDKJ,QAvDL;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAwDSC,KAAK,EAxDd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA0DwBnL,4BAAA,CACnBpjB,IADmB,EAEnBhS,OAAO,CAAC4Y,aAFW,EAGnB5Y,OAHmB,EAInBmS,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CA1DxB;;AAAA;AA0DS/K,cAAAA,MA1DT;AAmEGsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AAnEH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAuEM,KAAK3d,MAAL,eAvEN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,qBA4E+B6U,UAAU,CAAC7lB,IAAD,EAAOhS,OAAO,CAAC4Y,aAAf,CA5EzC;;AAAA;AA4EOgoB,cAAAA,eA5EP;;AAAA,mBA8EKA,eA9EL;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAkFWxL,uCAAA,CACJpjB,IADI,EAEJhS,OAAO,CAAC4Y,aAFJ,EAGJ5Y,OAHI,EAIJmS,OAJI,EAKJC,SALI,CAlFX;;AAAA;AAiFSpL,cAAAA,SAjFT;AAyFGsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB;AAzFH;AAAA;;AAAA;AAAA,mBA0FY3D,kBA1FZ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA4FWqjB,uCAAA,CACJpjB,IADI,EAEJhS,OAAO,CAAC4Y,aAFJ,EAGJ5Y,OAHI,EAIJmS,OAJI,EAKJC,SALI,EAMJL,kBANI,CA5FX;;AAAA;AA2FS/K,cAAAA,SA3FT;AAoGGsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB,CApGH;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAuGS6qB,KAAK,EAvGd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA2GM,KAAKvd,MAAL,eA3GN;;AAAA;AAiHLhjB,cAAAA,OAAO,CAACuf,cAAR,GAAyB6V,qBAAA,CACvBp1B,OADuB,EAEvBmX,QAFuB,EAGvBnQ,MAHF;;AAIA,kBAAI+K,kBAAJ,EAAwB;AACtB/R,gBAAAA,OAAO,CAAC+R,kBAAR,GAA6BA,kBAA7B;AACD;;AACK0R,cAAAA,SAxHD,GAwHsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACi3C,aADsB;AAEzCnrB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MALuB;AAMzCG,gBAAAA,cAAc,EAAdA;AANyC,eAxHtC;AAAA;AAAA;AAAA,qBAkIe,KAAKsE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlIf;;AAAA;AAkIHpvB,cAAAA,QAlIG,mBAkIkDlO,IAlIlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAsIE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAtIF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxzET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAi8EQ6tC,mBAj8ER;AAAA,2FAi8EE,mBACEpiB,GADF,EAEE3N,OAFF,EAGE6M,MAHF,EAIE7H,QAJF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQgrB,cAAAA,IANR,GAMeriB,GAAG,CAACgiB,UAAJ,GACThiB,GADS,gBAEJA,GAFI;AAECgiB,gBAAAA,UAAU,EAAEj5C,qBAAqB,CAACspB,OAAD;AAFlC,gBANf;AASQxe,cAAAA,SATR,GASsCD,iBAAiB,CAACyuC,IAAD,CATvD;AAUQ1e,cAAAA,SAVR,GAUoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACo3C,0BADH;AAEhBtrB,gBAAAA,UAAU,EAAEltB,MAAM,CAACmpB,WAAP,CAAmBpf,SAAnB,CAFI;AAGhBqrB,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJF;AAKhBjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALF;AAMhBJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANQ,eAVpB;AAAA;AAAA,qBAqB0B,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CArB1B;;AAAA;AAqBQpvB,cAAAA,QArBR,mBAqB6DlO,IArB7D;;AAAA,oBAwBIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IA3BxB;AAAA;AAAA;AAAA;;AAAA,8DA8BS7Q,QAAQ,CAACkvB,UA9BlB;;AAAA;AAAA,iDAkCS;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELguC,gBAAAA,eAAe,EAAEhuC,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACguC;AAFjD,eAlCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAj8EF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAy+EQC,mBAz+ER;AAAA,2FAy+EE,mBACExiB,GADF,EAEE3N,OAFF,EAGE6M,MAHF,EAIE7H,QAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAMQxjB,cAAAA,SANR,GAMsCD,iBAAiB,CAACosB,GAAD,CANvD;AAOQ2D,cAAAA,SAPR,GAO6C;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACu3C,4BADsB;AAEzCzjB,gBAAAA,WAAW,EAAEgB,GAF4B;AAGzCd,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACguC,MAJuB;AAKzCla,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANiC,eAP7C;AAAA;AAAA,qBAkB0B,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlB1B;;AAAA;AAkBQpvB,cAAAA,QAlBR,mBAkB6DlO,IAlB7D;;AAAA,oBAmBMkO,QAnBN,YAmBMA,QAAQ,CAAEkvB,UAnBhB;AAAA;AAAA;AAAA;;AAAA,8DAqBSlvB,QArBT,oBAqBSA,QAAQ,CAAEkvB,UArBnB;;AAAA;AAAA,iDAwBS;AACLlvB,gBAAAA,QAAQ,EAARA;AADK,eAxBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAz+EF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsgFQmuC,yBAtgFR;AAAA,iGAsgFE,mBACE1iB,GADF,EAEE3N,OAFF,EAGE6M,MAHF,EAIE7H,QAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAME;AACA;AACA;AACMxjB,cAAAA,SATR,GASsCD,iBAAiB,CAACosB,GAAD,CATvD;AAUQ2D,cAAAA,SAVR,GAUoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACy3C,iCADH;AAEhB3rB,gBAAAA,UAAU,EAAEltB,MAAM,CAACmpB,WAAP,CAAmBpf,SAAnB,CAFI;AAGhBqrB,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJF;AAKhBjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALF;AAMhBJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANQ,eAVpB;AAAA;AAAA,qBAqB0B,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CArB1B;;AAAA;AAqBQpvB,cAAAA,QArBR,mBAqB6DlO,IArB7D;;AAAA,oBAwBIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IA3BxB;AAAA;AAAA;AAAA;;AAAA,8DA8BS7Q,QAAQ,CAACkvB,UA9BlB;;AAAA;AAAA,iDAkCS;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAEL2S,gBAAAA,MAAM,EAAE3S,QAAQ,CAAC2S;AAFZ,eAlCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtgFF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8iFQ07B,uBA9iFR;AAAA,+FA8iFE,mBACE5iB,GADF,EAKE3N,OALF,EAME6M,MANF,EAOE7H,QAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AASE;AACMxjB,cAAAA,SAVR,GAUsCD,iBAAiB,CAACosB,GAAD,CAVvD;AAWQ2D,cAAAA,SAXR,GAWoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC23C,wBADH;AAEhB7rB,gBAAAA,UAAU,EAAEltB,MAAM,CAACmpB,WAAP,CAAmBpf,SAAnB,CAFI;AAGhBqrB,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJF;AAKhBjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALF;AAMhBJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANQ,eAXpB;AAAA;AAAA,qBAsB0B,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAtB1B;;AAAA;AAsBQpvB,cAAAA,QAtBR,mBAsB6DlO,IAtB7D;;AAAA,oBAyBIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IA5BxB;AAAA;AAAA;AAAA;;AAAA,8DA+BS7Q,QAAQ,CAACkvB,UA/BlB;;AAAA;AAAA,iDAmCS;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELguC,gBAAAA,eAAe,EAAEhuC,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACguC;AAFjD,eAnCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9iFF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAulFQO,+BAvlFR;AAAA,uGAulFE,mBACE9iB,GADF,EAEE3N,OAFF,EAGE6M,MAHF,EAIE7H,QAJF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQgrB,cAAAA,IANR,gBAMoBriB,GANpB;AAMyB+iB,gBAAAA,SAAS,EAAE/iB,GAAG,CAAC+iB,SAAJ,CAAcpvC,IAAd,CAAmB,GAAnB;AANpC;AAOQE,cAAAA,SAPR,GAOsCD,iBAAiB,CAACyuC,IAAD,CAPvD;AAQQ1e,cAAAA,SARR,GAQoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC83C,iCADH;AAEhBhsB,gBAAAA,UAAU,EAAEltB,MAAM,CAACmpB,WAAP,CAAmBpf,SAAnB,CAFI;AAGhBqrB,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJF;AAKhBjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALF;AAMhBJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANQ,eARpB;AAAA;AAAA,qBAmB0B,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnB1B;;AAAA;AAmBQpvB,cAAAA,QAnBR,mBAmB6DlO,IAnB7D;;AAAA,oBAsBIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IAzBxB;AAAA;AAAA;AAAA;;AAAA,8DA4BS7Q,QAAQ,CAACkvB,UA5BlB;;AAAA;AAAA,iDAgCS;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAEL2S,gBAAAA,MAAM,EAAE3S,QAAQ,CAAC2S;AAFZ,eAhCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvlFF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6nFQ+7B,oBA7nFR;AAAA,4FA6nFE,mBACEjjB,GADF,EAEE3N,OAFF,EAGE6M,MAHF,EAIE7H,QAJF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQgrB,cAAAA,IANR,gBAMoBriB,GANpB;AAMyB+iB,gBAAAA,SAAS,EAAE/iB,GAAG,CAAC+iB,SAAJ,CAAcpvC,IAAd,CAAmB,GAAnB;AANpC;AAOQE,cAAAA,SAPR,GAOsCD,iBAAiB,CAACyuC,IAAD,CAPvD;AAQQ1e,cAAAA,SARR,GAQoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACg4C,yBADH;AAEhBlsB,gBAAAA,UAAU,EAAEltB,MAAM,CAACmpB,WAAP,CAAmBpf,SAAnB,CAFI;AAGhBqrB,gBAAAA,MAAM,EAANA,MAHgB;AAIhB/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJF;AAKhBjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALF;AAMhBJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANQ,eARpB;AAAA;AAAA,qBAmB0B,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnB1B;;AAAA;AAmBQpvB,cAAAA,QAnBR,mBAmB6DlO,IAnB7D;;AAAA,oBAsBIkO,QAAQ,IAAI,IAAZ,IACAA,QAAQ,CAACkvB,UADT,IAEAlvB,QAAQ,IAAI,IAFZ,IAGAA,QAAQ,CAACkvB,UAAT,CAAoBre,IAzBxB;AAAA;AAAA;AAAA;;AAAA,8DA4BS7Q,QAAQ,CAACkvB,UA5BlB;;AAAA;AAAA,iDAgCS;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAEL2S,gBAAAA,MAAM,EAAE3S,QAAQ,CAAC2S;AAFZ,eAhCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7nFF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmqFE;;;AAnqFF;;AAAA,SAsqFei8B,sBAtqFf;AAAA;AAAA;AAAA,8FAsqFS,mBACLnjB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAAA,uBAa0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAfC,EAaGA,SAbH,UAaGA,SAbH,EAacL,kBAbd,UAacA,kBAbd;AAgBGivB,cAAAA,QAhBH,GAgBgBhhC,OAhBhB,CAgBGghC,QAhBH;AAkBCV,cAAAA,QAlBD,GAkBY,CAAC,CAACD,WAlBd;AAmBD/gB,cAAAA,cAnBC,GAmBgBx4B,SAnBhB;AAoBLk6C,cAAAA,QAAQ,CAAC3mB,OAAT,GAAmB,CAAnB;AACA2mB,cAAAA,QAAQ,CAACC,IAAT,6BAAwCjhC,OAAO,CAAC8Y,YAAhD;AACAkoB,cAAAA,QAAQ,CAACpgC,MAAT,GAAkB;AAChBxI,gBAAAA,MAAM,EAAE,GADQ;AAEhB7C,gBAAAA,OAAO,EAAEyrC,QAAQ,CAAClpC,KAAT,CAAevC;AAFR,eAAlB;;AAKMgrC,cAAAA,KA3BD;AAAA,4EA2BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,gCAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA3BT;;AAAA,gCA2BCD,KA3BD;AAAA;AAAA;AAAA;;AAAA,oBAwCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cA1C3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBA8CGJ,QA9CH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA+COC,KAAK,EA/CZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAkDsBnL,6BAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CAlDtB;;AAAA;AAkDO/K,cAAAA,MAlDP;AA2DCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AA3DD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA+DI,KAAK3d,MAAL,eA/DJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAmE2B6U,UAAU,CAAC7lB,IAAD,EAAOgvB,QAAQ,CAACxmB,SAAhB,CAnErC;;AAAA;AAmEGomB,cAAAA,eAnEH;AAAA;;AAAA,mBAqEGA,eArEH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAuESxL,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,CAvET;;AAAA;AAsEOpL,cAAAA,SAtEP;AA8ECsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB;AA9ED;AAAA;;AAAA;AAAA,mBA+EU3D,kBA/EV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAiFSqjB,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,EAMJL,kBANI,CAjFT;;AAAA;AAgFO/K,cAAAA,SAhFP;AAyFCsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB,CAzFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA4FO6qB,KAAK,EA5FZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAgGI,KAAKvd,MAAL,eAhGJ;;AAAA;AAqGL,kBAAIjR,kBAAJ,EAAwB;AACtBivB,gBAAAA,QAAQ,CAACjvB,kBAAT,GAA8BA,kBAA9B;AACD;;AACDivB,cAAAA,QAAQ,CAACzhB,cAAT,GAA0B6V,qBAAA,CACxB4L,QADwB,EAExB7pB,QAFwB,EAGxBnQ,MAHF;AAIAg6B,cAAAA,QAAQ,CAAC1hB,cAAT,GAA0BA,cAA1B;AACM3rB,cAAAA,SA7GD,GA6G+BD,iBAAiB,CAACsM,OAAD,CA7GhD;AA8GCyjB,cAAAA,SA9GD,GA8GsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACk4C,sBADsB;AAEzCpsB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANiC,eA9GtC;AAAA;AAAA;AAAA,qBA4He,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA5Hf;;AAAA;AA4HHpvB,cAAAA,QA5HG,mBA4HkDlO,IA5HlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAgIE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAhIF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtqFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyyFE;;;AAzyFF;;AAAA,SA4yFe8uC,aA5yFf;AAAA;AAAA;AAAA,qFA4yFS,mBACLrjB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIG1e,cAAAA,OAJH,GAIiE8f,GAJjE,CAIG9f,OAJH,EAIYgS,IAJZ,GAIiE8N,GAJjE,CAIY9N,IAJZ,EAIkBG,OAJlB,GAIiE2N,GAJjE,CAIkB3N,OAJlB,EAI2BF,UAJ3B,GAIiE6N,GAJjE,CAI2B7N,UAJ3B,EAIiDouB,WAJjD,GAIiEvgB,GAJjE,CAIuCwgB,QAJvC;AAAA,uBAK0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAPC,EAKGA,SALH,UAKGA,SALH,EAKcL,kBALd,UAKcA,kBALd;AASCuuB,cAAAA,QATD,GASY,CAAC,CAACD,WATd;AAUD/gB,cAAAA,cAVC,GAUgBx4B,SAVhB;;AAYCy5C,cAAAA,KAZD;AAAA,4EAYS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,qCAAA,CACnBpjB,IADmB,EAEnBhS,OAFmB,EAGnBmS,OAHmB,EAInBF,UAJmB,EAKnBG,SALmB,EAMnBL,kBANmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AASZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AATY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAZT;;AAAA,gCAYCD,KAZD;AAAA;AAAA;AAAA;;AAAA,oBAyBHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cA3B3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBA8BGJ,QA9BH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA+BOC,KAAK,EA/BZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAiCsBnL,kCAAA,CACnBpjB,IADmB,EAEnBhS,OAFmB,EAGnBmS,OAHmB,EAInBF,UAJmB,EAKnBG,SALmB,EAMnBL,kBANmB,CAjCtB;;AAAA;AAiCO/K,cAAAA,MAjCP;AAyCCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AAzCD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA6CI,KAAK3d,MAAL,eA7CJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAiD2B6U,UAAU,CAAC7lB,IAAD,EAAOhS,OAAO,CAACZ,KAAf,CAjDrC;;AAAA;AAiDGwhC,cAAAA,eAjDH;AAAA;;AAAA,mBAmDGA,eAnDH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAsDSxL,6CAAA,CACJpjB,IADI,EAEJhS,OAFI,EAGJmS,OAHI,EAIJC,SAJI,CAtDT;;AAAA;AAqDOpL,cAAAA,SArDP;AA4DCsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB,CA5DD;;AAAA;AAAA;;AAAA;AAAA,mBA8DU3D,kBA9DV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAgESqjB,6CAAA,CACJpjB,IADI,EAEJhS,OAFI,EAGJmS,OAHI,EAIJC,SAJI,EAKJL,kBALI,CAhET;;AAAA;AA+DO/K,cAAAA,SA/DP;AAuECsY,cAAAA,cAAc,GAAGtY,SAAM,CAAC0O,QAAxB,CAvED;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA0EO6qB,KAAK,EA1EZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA8EI,KAAKvd,MAAL,eA9EJ;;AAAA;AAkFL,kBAAIjR,kBAAJ,EAAwB;AACtB/R,gBAAAA,OAAO,CAAC+R,kBAAR,GAA6BA,kBAA7B;AACD;;AACK0R,cAAAA,SArFD,GAqFsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACglC,cADsB;AAEzClZ,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHuB;AAIzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MAJuB;AAKzCG,gBAAAA,cAAc,EAAdA;AALyC,eArFtC;AAAA;AAAA;AAAA,qBA+Fe,KAAKsE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA/Ff;;AAAA;AA+FHpvB,cAAAA,QA/FG,mBA+FkDlO,IA/FlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAmGE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAnGF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5yFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAi5FE;;;AAj5FF;;AAAA,SAo5Fe+uC,aAp5Ff;AAAA;AAAA;AAAA,qFAo5FS,mBACLpjC,OADK,EAELmX,QAFK;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAICxjB,cAAAA,SAJD,GAI+B,IAAIC,GAAJ,EAJ/B;AAMLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,WAAd,EAA2B6L,OAAO,CAACoS,SAAnC;AAEMqR,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACitC,cADsB;AAEzCnZ,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHuB;AAIzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SAJuB;AAKzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AALiC,eARtC;AAAA;AAAA;AAAA,qBAqBe,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CArBf;;AAAA;AAqBHpvB,cAAAA,QArBG,mBAqBkDlO,IArBlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,kCAyBDkO,QAzBC,aAyBD,WAAUkvB,UAzBT;AAAA;AAAA;AAAA;;AAAA,+CA2BElvB,QA3BF,qBA2BE,WAAUkvB,UA3BZ;;AAAA;AAAA,iDA8BI;AACLvE,gBAAAA,MAAM,EAAE3qB,QAAQ,CAAC2qB,MADZ;AAEL3qB,gBAAAA,QAAQ,EAARA;AAFK,eA9BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAp5FT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAy7FE;;;AAz7FF;;AAAA,SA47FegvC,YA57Ff;AAAA;AAAA;AAAA,oFA47FS,mBACLrjC,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACs4C,cADsB;AAEzCxkB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eARtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAjB5C;AAAA;AAAA;AAAA;;AAAA,8DAmBE7Q,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBCwX,cAAAA,OAtBD,GAsBmC,EAtBnC;;AAwBL,kBAAI,CAAA1mC,QAAQ,QAAR,YAAAA,QAAQ,CAAEqgC,YAAV,aAAkC//B,KAAtC,EAA6C;AAC3CN,gBAAAA,QAAQ,CAACqgC,YAAT,CAAsB5qC,OAAtB,CAA8B,UAAC8K,IAAD;AAC5BmmC,kBAAAA,OAAO,CAAC5vB,IAAR,CAAavW,IAAb;AACD,iBAFD;AAGD;;AA5BI,iDA8BE;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELiL,gBAAAA,OAAO,EAAPA,OAFK;AAGL1mC,gBAAAA,QAAQ,EAARA;AAHK,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA57FT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA6BuuB,OAA7B;;ICOa2gB,SAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACE;;;AADF,SAIeC,aAJf;AAAA;AAAA;AAAA,qFAIS,iBAAoBxjC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCyjB,cAAAA,SADD,GACwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACy4C,eADQ;AAE3B3kB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eADxB;AAAA;AAAA,qBAQmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CARnB;;AAAA;AAQCpvB,cAAAA,QARD,iBAQsDlO,IARtD;;AAAA,oBASDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAT5C;AAAA;AAAA;AAAA;;AAAA,4DAWE7Q,QAXF,oBAWEA,QAAQ,CAAEkvB,UAXZ;;AAAA;AAeCmgB,cAAAA,WAfD,GAeyB,EAfzB;AAgBCC,cAAAA,eAhBD,GAgB6B,EAhB7B;AAiBCC,cAAAA,UAjBD,GAiBwB,EAjBxB;;AAmBL,kBAAI,CAAAvvC,QAAQ,QAAR,YAAAA,QAAQ,CAAElO,IAAV,aAA0BwO,KAA9B,EAAqC;AACnCN,gBAAAA,QAAQ,CAAClO,IAAT,CAAc2D,OAAd,CAAsB,UAAC8K,IAAD;AACpB8uC,kBAAAA,WAAW,CAACv4B,IAAZ,CAAiBvW,IAAI,CAACojB,MAAtB;AACA2rB,kBAAAA,eAAe,CAACx4B,IAAhB,CAAqBvW,IAAI,CAACqC,SAA1B;AACA2sC,kBAAAA,UAAU,CAACz4B,IAAX,CAAgBvW,IAAI,CAACivC,YAArB;AACD,iBAJD;AAKD;;AAzBI,+CA2BE;AACLH,gBAAAA,WAAW,EAAXA,WADK;AAELC,gBAAAA,eAAe,EAAfA,eAFK;AAGLC,gBAAAA,UAAU,EAAVA,UAHK;AAILE,gBAAAA,UAAU,EAAEzvC,QAAQ,CAAClO,IAJhB;AAKLkO,gBAAAA,QAAQ,EAARA;AALK,eA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0CE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DF;;AAAA,SA2DU0vC,0BA3DV,GA2DU,oCACN5xB,OADM,EAEN6xB,sBAFM,EAGNC,MAHM,EAIN9tB,UAJM,EAKN+tB,QALM;AAON,QAAMhvB,SAAS,GAAG;AAChBmB,MAAAA,KAAK,EAAE;AACLC,QAAAA,YAAY,EAAE,CACZ;AAAErhB,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,IAAI,EAAE;AAAtB,SADY,EAEZ;AAAEH,UAAAA,IAAI,EAAE,SAAR;AAAmBG,UAAAA,IAAI,EAAE;AAAzB,SAFY,EAGZ;AAAEH,UAAAA,IAAI,EAAE,SAAR;AAAmBG,UAAAA,IAAI,EAAE;AAAzB,SAHY,EAIZ;AAAEH,UAAAA,IAAI,EAAE,mBAAR;AAA6BG,UAAAA,IAAI,EAAE;AAAnC,SAJY,CADT;AAOL+uC,QAAAA,OAAO,EAAE,CACP;AAAElvC,UAAAA,IAAI,EAAE,QAAR;AAAkBG,UAAAA,IAAI,EAAE;AAAxB,SADO,EAEP;AAAEH,UAAAA,IAAI,EAAE,YAAR;AAAsBG,UAAAA,IAAI,EAAE;AAA5B,SAFO,EAGP;AAAEH,UAAAA,IAAI,EAAE,UAAR;AAAoBG,UAAAA,IAAI,EAAE;AAA1B,SAHO;AAPJ,OADS;AAchBqhB,MAAAA,MAAM,EAAE;AACNxhB,QAAAA,IAAI,EAAE,gBADA;AAENyhB,QAAAA,OAAO,EAAE,OAFH;AAGNvE,QAAAA,OAAO,EAAEA,OAHH;AAINwE,QAAAA,iBAAiB,EAAEqtB;AAJb,OAdQ;AAoBhBxtB,MAAAA,WAAW,EAAE,SApBG;AAqBhBpwB,MAAAA,OAAO,EAAE;AACP69C,QAAAA,MAAM,EAAEA,MADD;AAEP9tB,QAAAA,UAAU,EAAEA,UAFL;AAGP+tB,QAAAA,QAAQ,EAAEA;AAHH;AArBO,KAAlB;AA2BA,WAAOhvB,SAAP;AACD,GA9FH;;AAAA,SA+FSkvB,4BA/FT,GA+FS,sCACLjyB,OADK,EAEL6xB,sBAFK,EAGLC,MAHK,EAIL9tB,UAJK,EAKL+tB,QALK,EAMLG,YANK;AAQL,QAAMnvB,SAAS,GAAG;AAChBmB,MAAAA,KAAK,EAAE;AACLC,QAAAA,YAAY,EAAE,CACZ;AAAErhB,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,IAAI,EAAE;AAAtB,SADY,EAEZ;AAAEH,UAAAA,IAAI,EAAE,SAAR;AAAmBG,UAAAA,IAAI,EAAE;AAAzB,SAFY,EAGZ;AAAEH,UAAAA,IAAI,EAAE,SAAR;AAAmBG,UAAAA,IAAI,EAAE;AAAzB,SAHY,EAIZ;AAAEH,UAAAA,IAAI,EAAE,mBAAR;AAA6BG,UAAAA,IAAI,EAAE;AAAnC,SAJY,CADT;AAOL+uC,QAAAA,OAAO,EAAE,CACP;AAAElvC,UAAAA,IAAI,EAAE,QAAR;AAAkBG,UAAAA,IAAI,EAAE;AAAxB,SADO,EAEP;AAAEH,UAAAA,IAAI,EAAE,YAAR;AAAsBG,UAAAA,IAAI,EAAE;AAA5B,SAFO,EAGP;AAAEH,UAAAA,IAAI,EAAE,UAAR;AAAoBG,UAAAA,IAAI,EAAE;AAA1B,SAHO,EAIP;AAAEH,UAAAA,IAAI,EAAE,cAAR;AAAwBG,UAAAA,IAAI,EAAE;AAA9B,SAJO;AAPJ,OADS;AAehBqhB,MAAAA,MAAM,EAAE;AACNxhB,QAAAA,IAAI,EAAE,gBADA;AAENyhB,QAAAA,OAAO,EAAE,OAFH;AAGNvE,QAAAA,OAAO,EAAEA,OAHH;AAINwE,QAAAA,iBAAiB,EAAEqtB;AAJb,OAfQ;AAqBhBxtB,MAAAA,WAAW,EAAE,SArBG;AAsBhBpwB,MAAAA,OAAO,EAAE;AACP69C,QAAAA,MAAM,EAAEA,MADD;AAEP9tB,QAAAA,UAAU,EAAEA,UAFL;AAGP+tB,QAAAA,QAAQ,EAAEA,QAHH;AAIPG,QAAAA,YAAY,EAAEA;AAJP;AAtBO,KAAlB;AA6BA,WAAOnvB,SAAP;AACD,GArIH;;AAAA,SAuISovB,iBAvIT,GAuIS,2BAAkBtkC,OAAlB;AACL,QAAMsU,GAAG,GAAGrB,kBAAkB,OACzB,KAAK4K,OAAL,GAAe7yB,qBAAa,CAACu5C,wBADJ,EAA9B;AAGA,QAAMv4B,MAAM,GAAGiH,kBAAkB,CAC/BY,IAAI,CAACC,SAAL,CAAe;AACb0wB,MAAAA,eAAe,EAAExkC,OAAO,CAACwkC,eADZ;AAEbC,MAAAA,MAAM,EAAEzkC,OAAO,CAACykC;AAFH,KAAf,CAD+B,CAAjC;AAMA,QAAMr+C,OAAO,GAAMgF,iBAAS,CAAC+pC,IAAhB,SAAwB7gB,GAAxB,SAA+BtI,MAA5C;AACAzU,IAAAA,KAAK,CAAC,mBAAD,EAAsBnR,OAAtB,CAAL;AACAmR,IAAAA,KAAK,CAAC,wBAAD,EAA2BpG,KAAK,CAACqjB,cAAM,CAAC5jB,MAAM,CAACyU,IAAP,CAAYjf,OAAZ,CAAD,CAAP,CAAhC,CAAL;AACA,WAAO+K,KAAK,CAACqjB,cAAM,CAAC5jB,MAAM,CAACyU,IAAP,CAAYjf,OAAZ,CAAD,CAAP,CAAZ;AACD;AAED;;;;AAvJF;;AAAA,SA2Jes+C,WA3Jf;AAAA;AAAA;AAAA,mFA2JS,kBAAkB5kB,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACG9N,cAAAA,IADH,GACuC8N,GADvC,CACG9N,IADH,EACShd,OADT,GACuC8qB,GADvC,CACS9qB,OADT,EACkBgL,OADlB,GACuC8f,GADvC,CACkB9f,OADlB,EAC2BmS,OAD3B,GACuC2N,GADvC,CAC2B3N,OAD3B;AAECwyB,cAAAA,QAFD,GAEY,KAAKL,iBAAL,CAAuB;AACtCE,gBAAAA,eAAe,EAAExkC,OAAO,CAACwkC,eADa;AAEtCC,gBAAAA,MAAM,EAAEzkC,OAAO,CAACykC;AAFsB,eAAvB,CAFZ;AAAA;AAAA,qBAMqBnyB,YAAY,CACpCN,IADoC,EAEpChd,OAFoC,EAGpC,EAHoC,EAIpC2vC,QAJoC,EAKpCn8C,sBAAc,CAACuuB,OALqB,EAMpC5E,OANoC,CANjC;;AAAA;AAMCnL,cAAAA,MAND;AAcCrT,cAAAA,SAdD,GAc+B,IAAIC,GAAJ,EAd/B;AAeLD,cAAAA,SAAS,CAACQ,GAAV,CAAc,iBAAd,EAAiC6L,OAAO,CAACwkC,eAAzC;AACA7wC,cAAAA,SAAS,CAACQ,GAAV,CAAc,QAAd,EAAwBa,OAAxB;AACMyuB,cAAAA,SAjBD,GAiBwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACu5C,wBADQ;AAE3BzlB,gBAAAA,WAAW,EAAE,EAFc;AAG3B7K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHS;AAI3Bre,gBAAAA,UAAU,EAAE9W,OAJe;AAK3Bgf,gBAAAA,MAAM,EAAE,EALmB;AAM3BE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MANS;AAO3BF,gBAAAA,MAAM,EAAE;AACN/R,kBAAAA,GAAG,EAAElG,MAAF,oBAAEA,MAAM,CAAEkG,GAAR,CAAY7a,KAAZ,CAAkB,CAAlB,EAAqB,GAArB;AADC;AAPmB,eAjBxB;AA6BDme,cAAAA,IA7BC,GA6B0B1pB,SA7B1B;AAAA;AAAA,qBA8BmB,KAAK88B,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA9BnB;;AAAA;AA8BCpvB,cAAAA,QA9BD,kBA8BsDlO,IA9BtD;;AAAA,oBA+BDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IA/B5C;AAAA;AAAA;AAAA;;AAAA,6DAiCE7Q,QAjCF,oBAiCEA,QAAQ,CAAEkvB,UAjCZ;;AAAA;AAoCH/S,cAAAA,IAAI,GAAGnc,QAAQ,CAAClO,IAAhB;;AApCG;AAAA,gDAsCE;AACLqqB,gBAAAA,IAAI,EAAJA,IADK;AAELnc,gBAAAA,QAAQ,EAARA;AAFK,eAtCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3JT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuMeuwC,oCAvMf;AAAA,4GAuMS,kBACL5yB,IADK,EAEL5S,KAFK,EAGLylC,QAHK,EAIL1yB,OAJK,EAKLF,UALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAOgBK,YAAY,CAC/BN,IAD+B,EAE/B5S,KAF+B,EAG/B,EAH+B,EAI/BylC,QAAQ,CAACC,WAJsB,EAK/B7yB,UAL+B,EAM/BE,OAN+B,CAP5B;;AAAA;AAOCnL,cAAAA,MAPD;AAAA,gDAeEA,MAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvMT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyNe+9B,4CAzNf;AAAA,oHAyNS,kBACL/yB,IADK,EAEL5S,KAFK,EAGLylC,QAHK,EAIL1yB,OAJK,EAKL+xB,QALK,EAMLG,YANK,EAOLW,UAPK,EAQLC,sBARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKLf,QALK;AAKLA,gBAAAA,QALK,GAKM,EALN;AAAA;;AAAA,kBAMLG,YANK;AAMLA,gBAAAA,YANK,GAMoCv9C,SANpC;AAAA;;AAAA,kBAOLk+C,UAPK;AAOLA,gBAAAA,UAPK,GAO4Bl+C,SAP5B;AAAA;;AAAA,kBAQLm+C,sBARK;AAQLA,gBAAAA,sBARK,GAQwCn+C,SARxC;AAAA;;AAWLyQ,cAAAA,KAAK,CAAC,wBAAD,EAA2B0tC,sBAA3B,CAAL;;AAEA,kBAAIA,sBAAJ,EAA4B;AAC1B/vB,gBAAAA,SAAS,GAAG,KAAK6uB,0BAAL,CACV5xB,OADU,EAEV8yB,sBAFU,EAGVJ,QAAQ,CAACK,aAAT,CAAuBjB,MAHb,EAIVY,QAAQ,CAACK,aAAT,CAAuB/uB,UAJb,EAKV+tB,QALU,CAAZ;AAOA3sC,gBAAAA,KAAK,CAAC,WAAD,EAAc2d,SAAd,CAAL;AACD,eATD,MASO;AACLA,gBAAAA,SAAS,GAAG,KAAKkvB,4BAAL,CACVjyB,OADU,EAEV6yB,UAFU,EAGVH,QAAQ,CAACK,aAAT,CAAuBjB,MAHb,EAIVY,QAAQ,CAACK,aAAT,CAAuB/uB,UAJb,EAKV+tB,QALU,EAMVG,YANU,CAAZ;AAQA9sC,gBAAAA,KAAK,CAAC,WAAD,EAAc2d,SAAd,CAAL;AACD;;AAhCI;AAAA,qBAkCgBE,WAAW,CAC9BpD,IAD8B,EAE9BkD,SAF8B,EAG9B9V,KAH8B,EAI9BoS,uBAAe,CAACiE,QAJc,EAK9BtD,OAL8B,EAM9BrrB,SAN8B,EAO9B,EAP8B,EAQ9B0B,sBAAc,CAACuuB,OARe;AAAA,eAlC3B;;AAAA;AAkCC/P,cAAAA,MAlCD;AAAA,gDA6CE;AAAEkG,gBAAAA,GAAG,EAAElG,MAAM,CAAC0O;AAAd,eA7CF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzNT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwQSyvB,qBAxQT,GAwQS,+BAAsBC,KAAtB;AACL,QAAMC,OAAO,GAAGz0C,MAAM,CAAC8b,MAAP,CACd04B,KAAK,CAACvyB,GAAN,CAAU,UAAC7e,CAAD;AACR,aAAOpD,MAAM,CAACyU,IAAP,CAAY,KAAKigC,MAAL,CAAY,EAAZ,IAAkBtxC,CAAC,CAAC3B,KAAF,CAAQ,CAAR,CAA9B,EAA0C,KAA1C,CAAP;AACD,KAFD,CADc,CAAhB;AAKAkF,IAAAA,KAAK,CAAC,SAAD,EAAY8tC,OAAO,CAACh0C,QAAR,EAAZ,CAAL;AACA,WAAOg0C,OAAP;AACD,GAhRH;;AAAA,SAiReE,sBAjRf;AAAA,8FAiRS,kBACLzlB,GADK,EAEL0lB,SAFK,EAGLC,mBAHK,EAILT,UAJK,EAKLC,sBALK;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKLA,sBALK;AAKLA,gBAAAA,sBALK,GAK4B,EAL5B;AAAA;;AAQHjlC,cAAAA,OARG,GAeD8f,GAfC,CAQH9f,OARG,EASHgS,IATG,GAeD8N,GAfC,CASH9N,IATG,EAUHG,OAVG,GAeD2N,GAfC,CAUH3N,OAVG,EAWHF,UAXG,GAeD6N,GAfC,CAWH7N,UAXG,EAYH4yB,QAZG,GAeD/kB,GAfC,CAYH+kB,QAZG,EAaH7lB,MAbG,GAeDc,GAfC,CAaHd,MAbG,EAcOqhB,WAdP,GAeDvgB,GAfC,CAcHwgB,QAdG;AAgBCA,cAAAA,QAhBD,GAgBY,CAAC,CAACD,WAhBd;AAiBD/gB,cAAAA,cAjBC,GAiBgBx4B,SAjBhB;;AAmBCy5C,cAAAA,KAnBD;AAAA,0EAmBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACc,KAAI,CAACqE,oCAAL,CACxB5yB,IADwB,EAExBhS,OAAO,CAACykC,MAFgB,EAGxBI,QAHwB,EAIxB1yB,OAJwB,EAKxBF,UALwB,CADd;;AAAA;AACNjL,0BAAAA,MADM;AAQZsY,0BAAAA,cAAc,GAAG,CAAAtY,MAAM,QAAN,YAAAA,MAAM,CAAEkG,GAAR,IAAczkB,iBAAS,CAAC+3C,QAAzC;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAnBT;;AAAA,gCAmBCD,KAnBD;AAAA;AAAA;AAAA;;;AAAA,oBA+BHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk9C,QAF9B,IAGAzzB,UAAU,KAAKzpB,sBAAc,CAACk4C,cAlC3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBAqCGJ,QArCH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAsCOC,KAAK,EAtCZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAwC2B,KAAKqE,oCAAL,CACxB5yB,IADwB,EAExBhS,OAAO,CAACykC,MAFgB,EAGxBI,QAHwB,EAIxB1yB,OAJwB,EAKxBF,UALwB,CAxC3B;;AAAA;AAwCOjL,cAAAA,MAxCP;AA+CCsY,cAAAA,cAAc,GAAG,CAAAtY,MAAM,QAAN,YAAAA,MAAM,CAAEkG,GAAR,IAAczkB,iBAAS,CAAC+3C,QAAzC;;AA/CD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAmDI,KAAKxd,MAAL,cAnDJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAuD2B6U,UAAU,CAAC7lB,IAAD,EAAOhS,OAAO,CAACykC,MAAf,CAvDrC;;AAAA;AAuDG7D,cAAAA,eAvDH;AAAA;;AAAA,mBAyDGA,eAzDH;AAAA;AAAA;AAAA;;AA0DKsD,cAAAA,QA1DL,GA0DgBp9C,SA1DhB,EA2DGu9C,YA3DH,GA2DkB,EA3DlB;AA6DCQ;AAGA,kBACEA,QAAQ,CAACc,gBAAT,IACAd,QAAQ,CAACc,gBAAT,CAA0B5zC,KAD1B,IAEA8yC,QAAQ,CAACc,gBAAT,CAA0B5zC,KAA1B,CAAgCA,KAHlC,EAIE;AACAmyC,gBAAAA,QAAQ,GAAGW,QAAQ,CAACc,gBAAT,CAA0B5zC,KAA1B,CAAgCA,KAAhC,CAAsCmyC,QAAjD;AACAG,gBAAAA,YAAY,GAAGQ,QAAQ,CAACc,gBAAT,CAA0B5zC,KAA1B,CAAgCA,KAAhC,CAAsCsyC,YAArD;AACD;;AACKuB,cAAAA,WAxEP,GAwEqB,KAAKT,qBAAL,CAA2Bd,YAA3B,CAxErB;AAyEOwB,cAAAA,aAzEP,GAyEuBh1C,cAAA,CAAe+0C,WAAf,CAzEvB;AA2EC;;AA3ED;AAAA,qBA6ES,KAAKb,4CAAL,CACJ/yB,IADI,EAEJhS,OAAO,CAACykC,MAFJ,EAGJI,QAHI,EAIJ1yB,OAJI,EAKJ+xB,QALI,EAMJuB,mBAAmB,GAAG3+C,SAAH,GAAe++C,aAN9B,EAOJJ,mBAAmB,GAAG3+C,SAAH,GAAek+C,UAP9B,EAQJC,sBAAsB,GAAGn+C,SAAH,GAAem+C,sBARjC,CA7ET;;AAAA;AA4EOj+B,cAAAA,OA5EP;AAuFCsY,cAAAA,cAAc,GAAGtY,OAAM,CAACkG,GAAxB;AAvFD;AAAA;;AAAA;AAAA;AAAA,qBAyFOqzB,KAAK,EAzFZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA6FI,KAAKvd,MAAL,cA7FJ;;AAAA;AAiGLhjB,cAAAA,OAAO,CAACmT,SAAR,GAAoBmM,cAApB;AACMmE,cAAAA,SAlGD,GAkGsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC86C,wBADsB;AAEzChvB,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAlGtC;AAAA;AAAA;AAAA,qBA4Ge,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA5Gf;;AAAA;AA4GHpvB,cAAAA,QA5GG,kBA4GkDlO,IA5GlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,gDAgHE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAhHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjRT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoYe0xC,eApYf;AAAA,uFAoYS,kBACL/lC,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACg7C,WADQ;AAE3BlnB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,kBAasDlO,IAbtD;;AAAA,oBAcDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAd5C;AAAA;AAAA;AAAA;;AAAA,6DAgBE7Q,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBHvuB,cAAAA,OAAO,GAAGX,QAAQ,CAAClO,IAAnB;;AAnBG;AAAA,gDAqBE;AACL6O,gBAAAA,OAAO,EAAPA,OADK;AAELX,gBAAAA,QAAQ,EAARA;AAFK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApYT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+Ze4xC,aA/Zf;AAAA,qFA+ZS,kBACLjmC,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACk7C,eADQ;AAE3BpnB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,kBAasDlO,IAbtD;;AAAA,oBAcDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAd5C;AAAA;AAAA;AAAA;;AAAA,6DAgBE7Q,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBHtR,cAAAA,UAAU,GAAG5d,QAAQ,CAAClO,IAAtB;;AAnBG;AAAA,gDAqBE;AACL8rB,gBAAAA,UAAU,EAAVA,UADK;AAEL5d,gBAAAA,QAAQ,EAARA;AAFK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/ZT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0be8xC,eA1bf;AAAA,uFA0bS,kBACLnmC,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACo7C,0BADQ;AAE3BtnB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAYmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,kBAYsDlO,IAZtD;;AAAA,oBAcDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAd5C;AAAA;AAAA;AAAA;;AAAA,6DAgBE7Q,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBH8iB,cAAAA,YAAY,GAAGhyC,QAAQ,CAAClO,IAAT,CAAc,CAAd,CAAf;;AAnBG;AAAA,gDAqBE;AACLkgD,gBAAAA,YAAY,EAAZA,YADK;AAELhyC,gBAAAA,QAAQ,EAARA;AAFK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1bT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqdeiyC,gBArdf;AAAA,wFAqdS,mBACLtmC,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACu7C,kBADQ;AAE3BznB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAYmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,mBAYsDlO,IAZtD;;AAAA,oBAcDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAd5C;AAAA;AAAA;AAAA;;AAAA,8DAgBE7Q,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBHijB,cAAAA,YAAY,GAAGnyC,QAAQ,CAAClO,IAAT,CAAc,CAAd,CAAf;;AAnBG;AAAA,iDAqBE;AACLqgD,gBAAAA,YAAY,EAAZA,YADK;AAELnyC,gBAAAA,QAAQ,EAARA;AAFK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArdT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+eeoyC,eA/ef;AAAA,uFA+eS,mBACLzmC,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC07C,YADQ;AAE3B5nB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAAA;AAAA,qBAamB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,mBAasDlO,IAbtD;;AAAA,oBAcDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAd5C;AAAA;AAAA;AAAA;;AAAA,8DAgBE7Q,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBHojB,cAAAA,OAAO,GAAGtyC,QAAQ,CAAClO,IAAnB;;AAnBG;AAAA,iDAqBE;AACLwgD,gBAAAA,OAAO,EAAPA,OADK;AAELtyC,gBAAAA,QAAQ,EAARA;AAFK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/eT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0gBeuyC,eA1gBf;AAAA,uFA0gBS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACL50B,cAAAA,IADK,SACLA,IADK,EAEL3M,IAFK,SAELA,IAFK,EAGLg9B,eAHK,SAGLA,eAHK,EAIL/R,QAJK,SAILA,QAJK,yBAKLoG,QALK,EAKLA,QALK,+BAKM,MALN,yCAMLvkB,OANK,EAMLA,OANK,8BAMK,CANL,kBAOL8xB,MAPK,SAOLA,MAPK,EAQL7tB,KARK,SAQLA,KARK,EASLywB,UATK,SASLA,UATK;;AAAA,mBAYDA,UAZC;AAAA;AAAA;AAAA;;AAaG1gD,cAAAA,IAbH,GAaUugC,SAAG,CAAChE,SAAJ,CAAcF,KAAd,CAAoB3B,YAApB,CAAiC,MAAjC,EAAyC;AACpDojB,gBAAAA,MAAM,EAANA;AADoD,eAAzC,CAbV;AAAA;AAAA,qBAiBUxN,SAAS,CACpBzkB,IADoB,EAEpB3M,IAFoB,EAGpBg9B,eAHoB,EAIpB,CAJoB,EAKpBl8C,IALoB,EAMpBgsB,OANoB,EAOpBiE,KAPoB,EAQpBka,QARoB,EASpB3+B,MAAM,CAAC+kC,QAAD,CATc,EAUpB,IAVoB,CAjBnB;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA+BUD,SAAS,CACpBzkB,IADoB,EAEpB3M,IAFoB,EAGpBg9B,eAHoB,EAIpB,CAJoB,EAKpB,YALoB,EAMpBlwB,OANoB,EAOpBiE,KAPoB,EAQpBka,QARoB,EASpB3+B,MAAM,CAAC+kC,QAAD,CATc,EAUpB,IAVoB,CA/BnB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1gBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwjBeoQ,cAxjBf;AAAA,sFAwjBS,mBAAqB9mC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCyjB,cAAAA,SADD,GACwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC+7C,gBADQ;AAE3BjoB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eADxB;AAAA;AAAA,qBAOmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAPnB;;AAAA;AAOCpvB,cAAAA,QAPD,mBAOsDlO,IAPtD;;AAAA,oBAQDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAR5C;AAAA;AAAA;AAAA;;AAAA,8DAUE7Q,QAVF,oBAUEA,QAAQ,CAAEkvB,UAVZ;;AAAA;AAAA,iDAaE;AAAElvB,gBAAAA,QAAQ,EAAEA,QAAQ,CAAClO;AAArB,eAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxjBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwkBe6gD,UAxkBf;AAAA,kFAwkBS,mBACLhnC,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyE,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACi8C,YADQ;AAE3BjoB,gBAAAA,MAAM,EAANA,MAF2B;AAG3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHS;AAI3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MAJS;AAK3BrI,gBAAAA,UAAU,EAAE9W;AALe,eANxB;AAAA;AAAA,qBAamB,KAAK4jB,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,mBAasDlO,IAbtD;;AAAA,oBAcDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAd5C;AAAA;AAAA;AAAA;;AAAA,8DAgBE7Q,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAAA,iDAmBE;AAAElvB,gBAAAA,QAAQ,EAARA;AAAF,eAnBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxkBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8lBe6yC,sBA9lBf;AAAA,8FA8lBS,mBACLlnC,OADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACm8C,yBADQ;AAE3BroB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eANxB;AAYDioB,cAAAA,cAZC,GAY0B,EAZ1B;AAAA;AAAA,qBAamB,KAAKxjB,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,mBAasDlO,IAbtD;;AAAA,oBAcDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAd5C;AAAA;AAAA;AAAA;;AAAA,8DAgBE7Q,QAhBF,oBAgBEA,QAAQ,CAAEkvB,UAhBZ;;AAAA;AAmBH6jB,cAAAA,cAAc,GAAG/yC,QAAH,sCAAGA,QAAQ,CAAElO,IAAb,qBAAG,eAAgBq/C,SAAhB,CAA0B3yB,GAA1B,CAA8B,UAACnE,CAAD;AAAA;AAC7C24B,kBAAAA,GAAG,EAAE34B,CAAC,CAAC24B,GAAF,GAAQ34B,CAAC,CAAC24B,GAAV,GAAgB,EADwB;AAE7CryC,kBAAAA,OAAO,EAAE0Z,CAAC,CAACu1B,MAFkC;AAG7C7uC,kBAAAA,IAAI,EAAElK,uBAAe,CAACwjB,CAAC,CAAC44B,UAAH,CAHwB;AAI7C1/C,kBAAAA,EAAE,EAAE8mB,CAAC,CAAC64B,SAJuC;AAK7CzC,kBAAAA,WAAW,EAAEp2B,CAAC,CAAC84B,WAL8B;AAM7C7B,kBAAAA,gBAAgB,EAAEj3B,CAAC,CAACi3B,gBANyB;AAO7CT,kBAAAA,aAAa,EAAEx2B,CAAC,CAACw2B;AAP4B,mBAQ1Cx2B,CAR0C;AAAA,eAA9B,CAAjB;;AAnBG;AAAA,iDA8BE;AACL04B,gBAAAA,cAAc,EAAdA,cADK;AAEL/yC,gBAAAA,QAAQ,EAARA;AAFK,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9lBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAooBE;;;;;AApoBF;;AAAA,SAyoBeozC,aAzoBf;AAAA;AAAA;AAAA,qFAyoBS,mBACLznC,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC08C,cADQ;AAE3B1oB,gBAAAA,MAAM,EAAEA,MAFmB;AAG3BF,gBAAAA,WAAW,EAAE9e,OAHc;AAI3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eARxB;AAeDwoB,cAAAA,cAfC,GAe0B,EAf1B;AAAA;AAAA,qBAgBmB,KAAK/jB,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAjB5C;AAAA;AAAA;AAAA;;AAAA,8DAmBE7Q,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBHokB,cAAAA,cAAc,GAAGtzC,QAAH,oBAAGA,QAAQ,CAAElO,IAAV,CAAe0sB,GAAf,CAAmB,UAAClM,CAAD;AAAA;;AAAA,uBAAa;AAC/C0gC,kBAAAA,GAAG,EAAE1gC,CAAC,CAACihC,UADwC;AAE/C5yC,kBAAAA,OAAO,EAAE2R,CAAC,CAACkhC,cAFoC;AAG/CC,kBAAAA,UAAU,qBAAEnhC,CAAC,CAACohC,YAAJ,qBAAE,gBAAgB1zB,WAAhB;AAHmC,iBAAb;AAAA,eAAnB,CAAjB;;AAtBG;AAAA,iDA4BE;AACLszB,gBAAAA,cAAc,EAAdA,cADK;AAELtzC,gBAAAA,QAAQ,EAARA;AAFK,eA5BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzoBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2qBE;;;AA3qBF;;AAAA,SA8qBe2zC,qBA9qBf;AAAA;AAAA;AAAA,6FA8qBS,mBAILhoC,OAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCyjB,cAAAA,SATD,GASwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACi9C,kBADQ;AAE3BnpB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eATxB;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,mBAesDlO,IAftD;;AAAA,oBAgBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAhB5C;AAAA;AAAA;AAAA;;AAAA,8DAkBE7Q,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAAA,iDAqBE;AACL2kB,gBAAAA,cAAc,EAAE7zC,QAAQ,CAAClO,IADpB;AAELkO,gBAAAA,QAAQ,EAARA;AAFK,eArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9qBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAysBE;;;AAzsBF;;AAAA,SA4sBe8zC,kBA5sBf;AAAA;AAAA;AAAA,0FA4sBS,mBAAyBnoC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCyjB,cAAAA,SADD,GACwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACo9C,qBADQ;AAE3BtpB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eADxB;AAAA;AAAA,qBAOmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAPnB;;AAAA;AAOCpvB,cAAAA,QAPD,mBAOsDlO,IAPtD;;AAAA,oBAQDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAR5C;AAAA;AAAA;AAAA;;AAAA,8DAUE7Q,QAVF,oBAUEA,QAAQ,CAAEkvB,UAVZ;;AAAA;AAAA,iDAaE;AACLlvB,gBAAAA,QAAQ,EAARA;AADK,eAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5sBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8tBE;;;;AA9tBF;;AAAA,SAkuBeg0C,cAluBf;AAAA;AAAA;AAAA,sFAkuBS,mBAAqBroC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCyjB,cAAAA,SADD,GACwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACs9C,gBADQ;AAE3BxpB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eADxB;AAAA;AAAA,qBAQmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CARnB;;AAAA;AAQCpvB,cAAAA,QARD,mBAQsDlO,IARtD;;AAAA,oBASDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAT5C;AAAA;AAAA;AAAA;;AAAA,8DAWE7Q,QAXF,oBAWEA,QAAQ,CAAEkvB,UAXZ;;AAAA;AAcCglB,cAAAA,WAdD,GAcyB,EAdzB;AAeC5E,cAAAA,eAfD,GAe6B,EAf7B;;AAiBL,kBAAI,CAAAtvC,QAAQ,QAAR,YAAAA,QAAQ,CAAElO,IAAV,aAA0BwO,KAA9B,EAAqC;AACnCN,gBAAAA,QAAQ,CAAClO,IAAT,CAAc2D,OAAd,CAAsB,UAAC8K,IAAD;AACpB2zC,kBAAAA,WAAW,CAACp9B,IAAZ,CAAiBvW,IAAI,CAACkzB,KAAtB;AACA6b,kBAAAA,eAAe,CAACx4B,IAAhB,CAAqBvW,IAAI,CAACqC,SAA1B;AACD,iBAHD;AAID;;AAtBI,iDAwBE;AACLuxC,gBAAAA,WAAW,EAAEn0C,QAAQ,CAAClO,IADjB;AAELoiD,gBAAAA,WAAW,EAAXA,WAFK;AAGL5E,gBAAAA,eAAe,EAAfA,eAHK;AAILtvC,gBAAAA,QAAQ,EAARA;AAJK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAluBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkwBE;;;;AAlwBF;;AAAA,SAswBeo0C,oBAtwBf;AAAA;AAAA;AAAA,4FAswBS,mBACLzoC,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCyjB,cAAAA,SAHD,GAGwB;AAC3B3E,gBAAAA,WAAW,EAAE9e,OADc;AAE3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAAC09C,uBAFQ;AAG3Bz0B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAHxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,mBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAX5C;AAAA;AAAA;AAAA;;AAAA,8DAaE7Q,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAgBCilB,cAAAA,WAhBD,GAgBkD,EAhBlD;;AAkBL,kBAAI,CAAAn0C,QAAQ,QAAR,YAAAA,QAAQ,CAAElO,IAAV,aAA0BwO,KAA9B,EAAqC;AACnCN,gBAAAA,QAAQ,CAAClO,IAAT,CAAc2D,OAAd,CAAsB,UAAC8K,IAAD;AACpB4zC,kBAAAA,WAAW,CAAC5zC,IAAI,CAACkD,KAAL,CAAWxC,WAAX,EAAD,CAAX,GAAwCyyB,UAAU,CAACnzB,IAAI,CAACkzB,KAAN,CAAlD;AACD,iBAFD;AAGD;;AAtBI,iDAwBE;AACL0gB,gBAAAA,WAAW,EAAXA,WADK;AAELn0C,gBAAAA,QAAQ,EAARA;AAFK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtwBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA+BuuB,OAA/B;;ICzBa+lB,kBAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACE;;;;AADF,SAKgBvI,sBALhB;AAAA;AAAA;AAAA,8FAKU,iBACNpgC,OADM,EAENmX,QAFM,EAGN6H,MAHM;AAAA;AAAA;AAAA;AAAA;AAAA;AAKNhf,cAAAA,OAAO,CAACuf,cAAR,GAAyB6V,6BAAA,CACvBp1B,OADuB,EAEvBmX,QAFuB,EAGvBnQ,MAHF;AAKMyc,cAAAA,SAVA,GAUuB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACwvC,kBADQ;AAE3B1jB,gBAAAA,UAAU,EAAE9W,OAFe;AAG3Bgf,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJS;AAK3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAVvB;AAAA;AAAA,qBAkBkB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlBlB;;AAAA;AAkBApvB,cAAAA,QAlBA,iBAkBqDlO,IAlBrD;;AAAA,oBAmBFkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAnB3C;AAAA;AAAA;AAAA;;AAAA,4DAqBC7Q,QArBD,oBAqBCA,QAAQ,CAAEkvB,UArBX;;AAAA;AAAA,+CAwBC;AACLlvB,gBAAAA,QAAQ,EAARA;AADK,eAxBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkCE;;;AAlCF;;AAAA,SAqCewsC,sBArCf;AAAA;AAAA;AAAA,8FAqCS,kBACL7gC,OADK,EAELmX,QAFK,EAGL6H,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKLhf,cAAAA,OAAO,CAACuf,cAAR,GAAyB6V,qBAAA,CACvBp1B,OADuB,EAEvBmX,QAFuB,EAGvBnQ,MAHF;AAKMyc,cAAAA,SAVD,GAUwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC81C,sBADQ;AAE3BhqB,gBAAAA,UAAU,EAAE9W,OAFe;AAG3Bgf,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJS;AAK3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAVxB;AAAA;AAAA,qBAkBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlBnB;;AAAA;AAkBCpvB,cAAAA,QAlBD,kBAkBsDlO,IAlBtD;;AAAA,oBAmBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAnB5C;AAAA;AAAA;AAAA;;AAAA,6DAqBE7Q,QArBF,oBAqBEA,QAAQ,CAAEkvB,UArBZ;;AAAA;AAAA,gDAwBE;AACLlvB,gBAAAA,QAAQ,EAARA;AADK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAwCuuB,OAAxC;;;ACiBA,IAAMgmB,aAAa,wCAChBtgD,eAAO,CAACM,MADQ,IAEf,gHAFe,iBAGhBN,eAAO,CAACK,OAHQ,IAIf,gHAJe,iBAAnB;AAOA;AAAA,WAAYkgD;AACVA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,8BAAA,WAAA;AACD,CAHD,EAAYA,eAAO,KAAPA,eAAO,KAAA,CAAnB;;AAKA,WAAYC;AACVA,EAAAA,0BAAA,YAAA;AACAA,EAAAA,yBAAA,WAAA;AACD,CAHD,EAAYA,uBAAe,KAAfA,uBAAe,KAAA,CAA3B;;AAKA,WAAYC;AACVA,EAAAA,8BAAA,sBAAA;AACAA,EAAAA,6BAAA,qBAAA;AACAA,EAAAA,gBAAA,QAAA;AACAA,EAAAA,qBAAA,aAAA;AACAA,EAAAA,uBAAA,eAAA;AACAA,EAAAA,sBAAA,cAAA;AACAA,EAAAA,oBAAA,YAAA;AAEA;AACD,CAVD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAYA,IAAaC,MAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACgBC,kBADhB;AAAA,0FACU,iBACNj3B,IADM,EAENiC,MAFM,EAGN9tB,IAHM,EAINk8C,eAJM,EAKNjtC,IALM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKNA,IALM;AAKNA,gBAAAA,IALM,GAKUyzC,eAAO,CAACzmB,OALlB;AAAA;;AAON;AACM8mB,cAAAA,QARA,GAQW,KAAKC,YAAL,CAAkBn3B,IAAlB,EAAwBqwB,eAAxB,EAAyCjtC,IAAzC,CARX;AAAA,+CASC,qBAAA8zC,QAAQ,CAACE,OAAT,EAAiBn1B,MAAjB,2BAA4B9tB,IAA5B,EAAkCs+B,IAAlC,EATD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADV;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAaUoS,gBAbV,GAaU,0BAAiBphB,QAAjB,EAAgCxB,MAAhC,EAAgD9tB,IAAhD;AACN,WAAOsvB,QAAQ,CAACoL,YAAT,CAAsB5M,MAAtB,EAA8B9tB,IAA9B,CAAP;AACD,GAfH;;AAAA,SAiBUkjD,eAjBV,GAiBU,yBAAgBp1B,MAAhB,EAAgC9tB,IAAhC;AACN,WAAO,KAAK0wC,gBAAL,CAAsByS,SAAS,CAAC5mB,SAAV,CAAoBN,OAA1C,EAAmDnO,MAAnD,EAA2D9tB,IAA3D,CAAP;AACD,GAnBH;;AAAA,SAqBUojD,cArBV,GAqBU,wBAAet1B,MAAf,EAA+B9tB,IAA/B;AACN,WAAO,KAAK0wC,gBAAL,CAAsByS,SAAS,CAAC5mB,SAAV,CAAoBJ,MAA1C,EAAkDrO,MAAlD,EAA0D9tB,IAA1D,CAAP;AACD,GAvBH;;AAAA,SAyBUgjD,YAzBV,GAyBU,sBACNn3B,IADM,EAENqwB,eAFM,EAGNjtC,IAHM;QAGNA;AAAAA,MAAAA,OAAgByzC,eAAO,CAACzmB;;;AAExB,WAAO,IAAIpQ,IAAI,CAACkS,GAAL,CAASzO,QAAb,CACLrgB,IAAI,KAAKyzC,eAAO,CAACzmB,OAAjB,GACIknB,SAAS,CAAC5mB,SAAV,CAAoBL,UADxB,GAEIinB,SAAS,CAAC5mB,SAAV,CAAoBH,SAHnB,EAIL8f,eAJK,CAAP;AAMD;AAED;;;;;;;;AAtCF;;AAAA,SA8CemH,aA9Cf;AAAA;AAAA;AAAA,qFA8CS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLx3B,cAAAA,IADK,QACLA,IADK,EAEL8G,YAFK,QAELA,YAFK,EAGL5vB,OAHK,QAGLA,OAHK,EAILuvB,KAJK,QAILA,KAJK,sBAKLI,OALK,EAKLA,OALK,6BAKKgwB,eAAO,CAACzmB,OALb;AAAA;;AAAA,oBAUCvJ,OAAO,KAAKgwB,eAAO,CAACvmB,MAVrB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAW4B,KAAK2mB,kBAAL,CAC3Bj3B,IAD2B,EAE3B+2B,iBAAS,CAACU,OAFiB,EAG3B,CAAChxB,KAAD,CAH2B,EAI3BK,YAJ2B,EAK3BD,OAL2B,CAX5B;;AAAA;AAWK7R,cAAAA,MAXL;;AAAA,oBAkBGA,MAAM,CAAC1R,WAAP,OAAyBpM,OAAO,CAACoM,WAAR,EAlB5B;AAAA;AAAA;AAAA;;AAAA,gDAmBQ;AACL9L,gBAAAA,KAAK,EAAE;AADF,eAnBR;;AAAA;AAAA,gDAuBQ;AACLA,gBAAAA,KAAK,EAAE;AADF,eAvBR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA4B4B,KAAKy/C,kBAAL,CAC3Bj3B,IAD2B,EAE3B+2B,iBAAS,CAACW,SAFiB,EAG3B,CAACxgD,OAAD,EAAU8oB,IAAI,CAACiH,KAAL,CAAWC,iBAAX,CAA6BT,KAA7B,CAAV,CAH2B,EAI3BK,YAJ2B,EAK3BD,OAL2B,CA5B5B;;AAAA;AA4BK7R,cAAAA,OA5BL;AAAA,gDAmCM;AACLxd,gBAAAA,KAAK,EAAEwd,OAAM,CAAC3V,QAAP;AADF,eAnCN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA0CD6T,gBAAAA,IAAI,EAAEvW,yBAAiB,CAACg7C,mBA1CvB;AA2CDvjD,gBAAAA,OAAO,EAAEwI,sBAAc,CAAC+6C;AA3CvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9CT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8FE;;;;AA9FF;;AAAA,SAkGeC,mBAlGf;AAAA;AAAA;AAAA,2FAkGS;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,cAAAA,QADK,SACLA,QADK;AAAA;AAMGpmB,cAAAA,SANH,GAM0B;AAC3BvE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MADS;AAE3BjpB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8+C,aAFQ;AAG3B71B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3B7E,gBAAAA,WAAW,EAAE;AAAE+qB,kBAAAA,QAAQ,EAAEA,QAAQ,CAACp2C,IAAT,CAAc,GAAd;AAAZ;AAJc,eAN1B;AAAA;AAAA,qBAYqB,KAAKmwB,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZrB;;AAAA;AAYGpvB,cAAAA,QAZH,kBAYwDlO,IAZxD;;AAAA,oBAaCkO,QAbD,YAaCA,QAAQ,CAAEkvB,UAbX;AAAA;AAAA;AAAA;;AAAA,6DAeIlvB,QAfJ,oBAeIA,QAAQ,CAAEkvB,UAfd;;AAAA;AAkBGvc,cAAAA,MAlBH,GAkBY3S,QAAQ,CAAC2oB,MAAT,CACb,UAACqG,IAAD,EAAwCzuB,IAAxC;AACE,oBAAIA,IAAI,CAAC6jB,KAAL,IAAc7jB,IAAI,CAAC6jB,KAAL,CAAWzxB,UAAX,CAAsB,IAAtB,CAAlB,EAA+C;AAC7C,sBAAMu3C,MAAM,GAAG,IAAIntC,EAAJ,CAAOwD,IAAI,CAAC6jB,KAAL,CAAWplB,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAP,EAAqC,EAArC,CAAf;AACAuB,kBAAAA,IAAI,CAAC6jB,KAAL,GAAa,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CAApB;AACD;;AACDmyB,gBAAAA,IAAI,CAACzuB,IAAI,CAACklB,OAAN,CAAJ,GAAqBllB,IAArB;AACA,uBAAOyuB,IAAP;AACD,eARY,EASb,EATa,CAlBZ;AAAA,6DA8BErc,MA9BF;AA+BD3S,gBAAAA,QAAQ,EAARA;AA/BC;;AAAA;AAAA;AAAA;AAAA,gDAkCIvN,SAlCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwIeijD,cAxIf;AAAA,sFAwIS,kBACL/pC,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMGyjB,cAAAA,SANH,GAM0B;AAC3BvE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MADS;AAE3BrI,gBAAAA,UAAU,EAAE9W,OAFe;AAG3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAACg/C,6BAHQ;AAI3B/1B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC;AAJS,eAN1B;AAAA;AAAA,qBAYqB,KAAKvR,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZrB;;AAAA;AAYGpvB,cAAAA,QAZH,kBAYwDlO,IAZxD;;AAAA,oBAaCkO,QAbD,YAaCA,QAAQ,CAAEkvB,UAbX;AAAA;AAAA;AAAA;;AAAA,6DAeIlvB,QAfJ,oBAeIA,QAAQ,CAAEkvB,UAfd;;AAAA;AAkBGvc,cAAAA,MAlBH,GAkBY3S,QAAQ,CAAC2oB,MAAT,CACb,UAACqG,IAAD,EAAwCzuB,IAAxC;AACE,oBAAIA,IAAI,CAAC6jB,KAAL,IAAc7jB,IAAI,CAAC6jB,KAAL,CAAWzxB,UAAX,CAAsB,IAAtB,CAAlB,EAA+C;AAC7C,sBAAMu3C,MAAM,GAAG,IAAIntC,EAAJ,CAAOwD,IAAI,CAAC6jB,KAAL,CAAWplB,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAP,EAAqC,EAArC,CAAf;AACAuB,kBAAAA,IAAI,CAAC6jB,KAAL,GAAa,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CAApB;AACD;;AACDmyB,gBAAAA,IAAI,CAACzuB,IAAI,CAACklB,OAAN,CAAJ,GAAqBllB,IAArB;AACA,uBAAOyuB,IAAP;AACD,eARY,EASb,EATa,CAlBZ;AAAA,6DA8BErc,MA9BF;AA+BD3S,gBAAAA,QAAQ,EAARA;AA/BC;;AAAA;AAAA;AAAA;AAAA,gDAkCIvN,SAlCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxIT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8KE;;;;;;;AA9KF;;AAAA,SAqLemjD,kBArLf;AAAA;AAAA;AAAA,0FAqLS,yBAOLC,cAPK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHl4B,cAAAA,IAFG,SAEHA,IAFG,EAGH8G,YAHG,SAGHA,YAHG,EAIHL,KAJG,SAIHA,KAJG,wBAKHI,OALG,EAKHA,OALG,8BAKOgwB,eAAO,CAACzmB,OALf;;AAAA;AAUH7qB,cAAAA,KAAK,CAACuhB,YAAD,EAAe,OAAf,EAAwBL,KAAxB,EAA+BzG,IAAI,CAACiH,KAAL,CAAWC,iBAAX,CAA6BT,KAA7B,CAA/B,CAAL;AAVG;AAAA,qBAYY,KAAKwwB,kBAAL,CACbj3B,IADa,EAEb6G,OAAO,KAAKgwB,eAAO,CAACzmB,OAApB,GAA8B2mB,iBAAS,CAACz0B,GAAxC,GAA8Cy0B,iBAAS,CAACoB,QAF3C,EAGb,CAACn4B,IAAI,CAACiH,KAAL,CAAWC,iBAAX,CAA6BT,KAA7B,CAAD,CAHa,EAIbK,YAJa,EAKbD,OALa,CAZZ;;AAAA;AAYH7R,cAAAA,MAZG;AAmBHA,cAAAA,MAAM,GAAGA,MAAM,CAAC3T,OAAP,CACP,qBADO,EAEPrI,qBAAa,CAACo/C,aAFP,CAAT;AAIApjC,cAAAA,MAAM,GAAGA,MAAM,CAAC3T,OAAP,CAAe,MAAf,EAAuB2e,IAAI,CAACiH,KAAL,CAAWC,iBAAX,CAA6BT,KAA7B,CAAvB,CAAT;AAvBG;AAAA,qBAwBU4xB,KAAK,CAACrjC,MAAD,CAAL,CAAcsjC,IAAd,CAAmB,UAACrkD,QAAD;AAAA,uBAAcA,QAAQ,CAACskD,IAAT,EAAd;AAAA,eAAnB,CAxBV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA2BDrlC,gBAAAA,IAAI,EAAEvW,yBAAiB,CAAC67C,eA3BvB;AA4BDpkD,gBAAAA,OAAO,EAAEwI,sBAAc,CAAC47C;AA5BvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArLT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuNE;;;;;;;;;;;;;AAvNF;;AAAA,SAoOeC,UApOf;AAAA;AAAA;AAAA,kFAoOS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLz4B,cAAAA,IADK,SACLA,IADK,EAEL3M,IAFK,SAELA,IAFK,EAGLylB,cAHK,SAGLA,cAHK,EAILhS,YAJK,SAILA,YAJK,EAKLL,sBACAI,OANK,EAMLA,OANK,8BAMKgwB,eAAO,CAACzmB,OANb,kBAOLkO,QAPK,SAOLA,QAPK,EAQLoG,QARK,SAQLA,QARK,EASLvkB,OATK,SASLA,OATK,EAULiE,KAVK,SAULA,KAVK,yBAWLs0B,QAXK,EAWLA,QAXK,+BAWM,IAXN,gDAYL/T,cAZK,EAYLA,cAZK,qCAYY,IAZZ;;AAgBL,kBAAI9d,OAAO,KAAKgwB,eAAO,CAACzmB,OAAxB,EAAiC;AAC/Bj8B,gBAAAA,IAAI,GAAG,KAAKkjD,eAAL,CAAqBN,iBAAS,CAAC4B,iBAA/B,EAAkD;AACvDC,kBAAAA,QAAQ,EAAE9f,cAD6C;AAEvD4f,kBAAAA,QAAQ,EAARA;AAFuD,iBAAlD,CAAP;AAID,eALD,MAKO,IAAI7xB,OAAO,KAAKgwB,eAAO,CAACvmB,MAAxB,EAAgC;AACrCn8B,gBAAAA,IAAI,GAAG,KAAKojD,cAAL,CAAoBR,iBAAS,CAAC4B,iBAA9B,EAAiD;AACtDC,kBAAAA,QAAQ,EAAE9f,cAD4C;AAEtD4f,kBAAAA,QAAQ,EAARA;AAFsD,iBAAjD,CAAP;AAID;;AA1BI;AAAA;AAAA,qBA4BUjU,SAAS,CACpBzkB,IADoB,EAEpB3M,IAFoB,EAGpByT,YAHoB,EAIpB,GAJoB,EAKpB3yB,IALoB,EAMpBgsB,OANoB,EAOpBiE,KAPoB,EAQpBka,QARoB,EASpBoG,QAToB,EAUpBC,cAVoB,CA5BnB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA2CDzxB,gBAAAA,IAAI,EAAEvW,yBAAiB,CAACk8C,uBA3CvB;AA4CDzkD,gBAAAA,OAAO,EAAEwI,sBAAc,CAACi8C;AA5CvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApOT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoRSC,eApRT,GAoRS,yBAAgBC,QAAhB;AACL;AACA,QAAMC,GAAG,GAAG9hC,OAAO,CAAC,MAAD,CAAnB;;AACA,QAAM+hC,GAAG,GAAG,IAAID,GAAJ,CAAQD,QAAR,CAAZ;AACA,QAAMG,OAAO,GAAGt6C,MAAM,CAACyU,IAAP,CAAY4lC,GAAG,CAACE,SAAJ,CAAc94C,KAAd,CAAoB,CAApB,CAAZ,EAAoChB,QAApC,CAA6C,KAA7C,CAAhB;AACA,QAAMktC,MAAM,GAAG,IAAIntC,EAAJ,CAAO85C,OAAP,EAAgB,EAAhB,CAAf;AACA,WAAO,OAAO3M,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CAAd;AACD;AAED;;;;AA7RF;;AAAA,SAiSSk6C,cAjST,GAiSS,wBAAe3yB,KAAf;AACL,QAAMuyB,GAAG,GAAG9hC,OAAO,CAAC,MAAD,CAAnB;;AACA,QAAMq1B,MAAM,GAAG,IAAIntC,EAAJ,CAAOqnB,KAAK,CAACplB,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAP,EAAgC,EAAhC,CAAf;AACA,QAAMZ,GAAG,GAAG8rC,MAAM,CAACltC,QAAP,CAAgB,EAAhB,EAAoB,EAApB,CAAZ;AACA,QAAMgZ,GAAG,GAAGzZ,MAAM,CAACyU,IAAP,CAAY,SAAS5S,GAArB,EAA0B,KAA1B,CAAZ;AACA,QAAMw4C,GAAG,GAAG,IAAID,GAAJ,CAAQ3gC,GAAR,CAAZ;AACA,WAAO4gC,GAAG,CAAC55C,QAAJ,EAAP;AACD;AACD;;;;;;;;AAzSF;;AAAA,SAiTeg6C,gBAjTf;AAAA;AAAA;AAAA,wFAiTS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLr5B,cAAAA,IADK,SACLA,IADK,EAEL3M,IAFK,SAELA,IAFK,EAGL0lB,eAHK,SAGLA,eAHK,wBAILlS,OAJK,EAILA,OAJK,8BAIKgwB,eAAO,CAACzmB,OAJb,kBAKLtJ,YALK,SAKLA,YALK;AAAA;AAAA;AAAA,qBAQkB,KAAKmwB,kBAAL,CACnBj3B,IADmB,EAEnB+2B,iBAAS,CAACsC,gBAFS,EAGnB,CAAChmC,IAAD,EAAO0lB,eAAP,CAHmB,EAInBjS,YAJmB,EAKnBD,OALmB,CARlB;;AAAA;AAQG7R,cAAAA,MARH;AAAA,gDAeIA,MAfJ;;AAAA;AAAA;AAAA;AAAA;AAmBD9B,gBAAAA,IAAI,EAAEvW,yBAAiB,CAAC28C,sBAnBvB;AAoBDllD,gBAAAA,OAAO,EAAEwI,sBAAc,CAAC08C;AApBvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjTT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0UE;;;;;;;;;;;;;;;;AA1UF;;AAAA,SA0VeC,UA1Vf;AAAA;AAAA;AAAA,kFA0VS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLv5B,cAAAA,IADK,SACLA,IADK,EAEL3M,IAFK,SAELA,IAFK,EAGL0lB,eAHK,SAGLA,eAHK,wBAILlS,OAJK,EAILA,OAJK,8BAIKgwB,eAAO,CAACzmB,OAJb,kBAKLtJ,YALK,SAKLA,YALK,EAMLL,KANK,SAMLA,KANK,EAOLT,MAPK,SAOLA,MAPK,EAQLsY,QARK,SAQLA,QARK,EASLoG,QATK,SASLA,QATK,wBAULvkB,OAVK,EAULA,OAVK,8BAUK7pB,eAAO,CAACK,OAVb,kBAWLytB,KAXK,SAWLA,KAXK,EAYLoB,SAZK,SAYLA,SAZK,+BAaLmf,cAbK,EAaLA,cAbK,qCAaY,IAbZ;AAeCxwC,cAAAA,IAfD,GAeQ4wC,eAAe,CAACgS,iBAAS,CAACwC,UAAX,EAAuB;AACjDlmC,gBAAAA,IAAI,EAAJA,IADiD;AAEjDkS,gBAAAA,EAAE,EAAElS,IAF6C;AAGjDwT,gBAAAA,OAAO,EAAPA,OAHiD;AAIjDC,gBAAAA,YAAY,EAAZA,YAJiD;AAKjDL,gBAAAA,KAAK,EAALA,KALiD;AAMjDT,gBAAAA,MAAM,EAANA,MANiD;AAOjDR,gBAAAA,SAAS,EAAEA,SAAS,GAAGA,SAAH,GAAe;AAPc,eAAvB,CAfvB;;AAAA;AAAA,qBAyBQif,SAAS,CACpBzkB,IADoB,EAEpB3M,IAFoB,EAGpB0lB,eAHoB,EAIpB,GAJoB,EAKpB5kC,IALoB,EAMpBgsB,OANoB,EAOpBiE,KAPoB,EAQpBka,QARoB,EASpBoG,QAToB,EAUpBC,cAVoB,CAzBjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1VT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiYE;;;;;;;;AAjYF;;AAAA,SAyYS6U,iBAzYT,GAyYS;QACLzJ,iBAAAA;iCACAD;QAAAA,2CAAa;iCACbE;QAAAA,2CAAa;;AAMb,QAAI;AACF,UAAI,CAACF,UAAL,EAAiB;AACfA,QAAAA,UAAU,GAAGp5C,UAAU,CAAC,KAAKypB,OAAN,CAAvB;AACD;;AACD,UAAI4vB,QAAQ,CAAC/6C,UAAT,CAAoB,IAApB,CAAJ,EAA+B;AAC7B+6C,QAAAA,QAAQ,GAAGA,QAAQ,CAAC1vC,KAAT,CAAe,CAAf,CAAX;AACD;;AAED,UAAMo5C,OAAO,GAAG76C,MAAM,CAAC8b,MAAP,CAAc,CAC5B9b,MAAM,CAACyU,IAAP,CAAY,uBAAZ,EAAqC,MAArC,CAD4B,EAE5BzU,MAAM,CAACyU,IAAP,CAAY08B,QAAZ,EAAsB,KAAtB,CAF4B,EAG5BnxC,MAAM,CAACyU,IAAP,CAAY28B,UAAZ,EAAwB,MAAxB,CAH4B,CAAd,CAAhB;AAMA,UAAM0J,QAAQ,GAAG76C,cAAA,CACfD,MAAM,CAACyU,IAAP,CAAYujC,aAAa,CAAC,KAAKz2B,OAAN,CAAzB,EAAyC,KAAzC,CADe,CAAjB;AAIA,UAAMw5B,QAAQ,GAAG96C,cAAA,CAAe46C,OAAf,CAAjB;AAEA,UAAMG,MAAM,GAAGh7C,MAAM,CAAC8b,MAAP,CAAc,CAC3B9b,MAAM,CAACyU,IAAP,CAAY,IAAZ,EAAkB,KAAlB,CAD2B,EAE3BzU,MAAM,CAACyU,IAAP,CAAYy8B,UAAU,CAACzvC,KAAX,CAAiB,CAAjB,CAAZ,EAAiC,KAAjC,CAF2B,EAG3Bs5C,QAH2B,EAI3BD,QAJ2B,CAAd,CAAf;AAOA,UAAMnV,IAAI,GAAG1lC,cAAA,CAAe+6C,MAAf,EAAuBv5C,KAAvB,CAA6B,EAA7B,EAAiChB,QAAjC,CAA0C,KAA1C,CAAb;AACA,aAAO;AACLynB,QAAAA,YAAY,EAAEjoB,yBAAA,CAA0B,OAAO0lC,IAAjC;AADT,OAAP;AAGD,KA/BD,CA+BE,OAAO9uC,GAAP,EAAY;AACZ,aAAOA,GAAP;AACD;AACF,GApbH;;AAAA,SAsbeokD,uBAtbf;AAAA,+FAsbS,kBAAwD7rC,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIGyjB,cAAAA,SAJH,GAI0B;AAC3BvE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MADS;AAE3BL,gBAAAA,WAAW,EAAE9e,OAFc;AAG3B9J,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8gD,0BAHQ;AAI3B73B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B;AAJS,eAJ1B;AAAA;AAAA,qBAUqB,KAAKC,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVrB;;AAAA;AAUGpvB,cAAAA,QAVH,kBAUwDlO,IAVxD;;AAAA,oBAWCkO,QAXD,YAWCA,QAAQ,CAAEkvB,UAXX;AAAA;AAAA;AAAA;;AAAA,6DAaIlvB,QAbJ,oBAaIA,QAAQ,CAAEkvB,UAbd;;AAAA;AAgBGvc,cAAAA,MAhBH,GAgBY3S,QAhBZ;AAAA,6DAkBE2S,MAlBF;AAmBD3S,gBAAAA,QAAQ,EAARA;AAnBC;;AAAA;AAAA;AAAA;AAAA;AAwBD6Q,gBAAAA,IAAI,EAAE6mC,OAAO,CAACp9C,iBAAR,CAA0Bw0B;AAxB/B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtbT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmdQ6oB,sBAndR;AAAA,8FAmdE,mBACEhsC,OADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQyjB,cAAAA,SAHR,GAGoB;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACihD,yBADH;AAEhBntB,gBAAAA,WAAW,EAAE9e,OAFG;AAGhBiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHF;AAIhBzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJF,eAHpB;AAAA;AAAA,qBAS0B,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAT1B;;AAAA;AASQpvB,cAAAA,QATR,mBAS6DlO,IAT7D;;AAAA,oBAUMkO,QAVN,YAUMA,QAAQ,CAAEkvB,UAVhB;AAAA;AAAA;AAAA;;AAAA,8DAYSlvB,QAZT,oBAYSA,QAAQ,CAAEkvB,UAZnB;;AAAA;AAeE,kBAAIlvB,QAAQ,CAAC63C,aAAT,CAAuBhlD,MAA3B,EAAmC;AACjCmN,gBAAAA,QAAQ,CAAC63C,aAAT,GAAyB73C,QAAQ,CAAC63C,aAAT,CAAuBlvB,MAAvB,CACvB,UACEqG,IADF,EAEEzuB,IAFF;AAIE,sBAAIA,IAAI,CAAC6jB,KAAL,IAAc7jB,IAAI,CAAC6jB,KAAL,CAAWzxB,UAAX,CAAsB,IAAtB,CAAlB,EAA+C;AAC7C,wBAAMu3C,MAAM,GAAG,IAAIntC,EAAJ,CAAOwD,IAAI,CAAC6jB,KAAL,CAAWplB,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAP,EAAqC,EAArC,CAAf;AACAuB,oBAAAA,IAAI,CAAC6jB,KAAL,GAAa,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CAApB;;AACA,wBACE8O,OAAO,CAACs+B,QAAR,KAAqB,IAArB,IACA1pC,IAAI,CAAC0pC,QADL,IAEA1pC,IAAI,CAAC0pC,QAAL,CAAc7lB,KAFd,IAGA7jB,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,CAAoBzxB,UAApB,CAA+B,IAA/B,CAJF,EAKE;AACA;AACA4N,sBAAAA,IAAI,CAAC0pC,QAAL,CAAc7lB,KAAd,GACE,OAAO8lB,MAAM,CAACltC,QAAP,CAAgB,KAAhB,EAAuBH,QAAvB,CAAgC,EAAhC,EAAoC,GAApC,CADT;AAED;AACF;;AACD,mCAAWmyB,IAAX,GAAiBzuB,IAAjB;AACD,iBApBsB,EAqBvB,EArBuB,CAAzB,CADiC;AAyBjC;AACD;;AAzCH,iDA0CS;AACLk7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELmP,gBAAAA,eAAe,EACb5qC,QAAQ,CAAC63C,aAHN;AAIL73C,gBAAAA,QAAQ,EAARA;AAJK,eA1CT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAndF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA4BuuB,OAA5B;;ACvCA,IAAMupB,UAAU,GAAG;AACjBvjD,EAAAA,MAAM,EAAE;AACNmB,IAAAA,GAAG,EAAE,kEADC;AAENnC,IAAAA,EAAE,EAAE;AAFE,GADS;AAKjBwkD,EAAAA,IAAI,EAAE;AACJriD,IAAAA,GAAG,EAAE,kEADD;AAEJnC,IAAAA,EAAE,EAAE;AAFA;AALW,CAAnB;AAWA,IAAaykD,SAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACeC,gBADf;AAAA,wFACS,iBAAuBtsC,OAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCusC,cAAAA,QADD,GACoD;AACvDn6B,gBAAAA,SAAS,EAAEpS,OAAO,CAACoS,SAAR,GACPpS,OAAO,CAACoS,SADD,GAEP,KAAKD,OAAL,KAAiB7pB,eAAO,CAACK,OAAzB,GACAwjD,UAAU,CAACC,IAAX,CAAgBxkD,EADhB,GAEAukD,UAAU,CAACvjD,MAAX,CAAkBhB,EALiC;AAMvD4kD,gBAAAA,WAAW,EAAE5gD,0BAAkB,CAAC6gD;AANuB,eADpD;AASChpB,cAAAA,SATD,GASwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACgxC,oBADQ;AAE3Bld,gBAAAA,WAAW,EAAEytB,QAFc;AAG3BvtB,gBAAAA,MAAM,EACJ,KAAK7M,OAAL,KAAiB7pB,eAAO,CAACK,OAAzB,GACIwjD,UAAU,CAACC,IAAX,CAAgBriD,GADpB,GAEIoiD,UAAU,CAACvjD,MAAX,CAAkBmB,GANG;AAO3BkqB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAPS;AAQ3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AARS,eATxB;AAAA;AAAA,qBAmBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnBnB;;AAAA;AAmBCpvB,cAAAA,QAnBD,iBAmBsDlO,IAnBtD;;AAAA,oBAoBDkO,QApBC,YAoBDA,QAAQ,CAAEkvB,UApBT;AAAA;AAAA;AAAA;;AAAA,4DAsBElvB,QAtBF,oBAsBEA,QAAQ,CAAEkvB,UAtBZ;;AAAA;AAyBC+M,cAAAA,QAzBD,GAyBYp5B,QAAQ,CAAC7C,QAAQ,CAACi8B,QAAV,CAzBpB;AA0BCjxB,cAAAA,IA1BD,GA0BkE,EA1BlE;;AA2BL,kBAAI,CAAAhL,QAAQ,QAAR,YAAAA,QAAQ,CAAEgL,IAAV,aAA0B1K,KAA9B,EAAqC;AACnCN,gBAAAA,QAAQ,CAACgL,IAAT,CAAcvV,OAAd,CAAsB,UAAC8K,IAAD;AACpByK,kBAAAA,IAAI,CAACzK,IAAI,CAACkD,KAAN,CAAJ,GAAmBlD,IAAnB;AACD,iBAFD;AAGD;;AA/BI,+CAiCE;AACLyK,gBAAAA,IAAI,EAAJA,IADK;AAELixB,gBAAAA,QAAQ,EAARA,QAFK;AAGLj8B,gBAAAA,QAAQ,EAARA;AAHK,eAjCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwCeq4C,oBAxCf;AAAA,4FAwCS,kBAA2B1sC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyjB,cAAAA,SAJD,GAIsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACgvC,0BADsB;AAEzClb,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EACJ,KAAK7M,OAAL,KAAiB7pB,eAAO,CAACK,OAAzB,GACIwjD,UAAU,CAACC,IAAX,CAAgBriD,GADpB,GAEIoiD,UAAU,CAACvjD,MAAX,CAAkBmB,GANiB;AAOzCkqB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAPuB;AAQzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AARuB,eAJtC;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,kBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,6DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAqBC0W,cAAAA,YArBD,GAsBH,EAtBG;;AAwBL,kBAAI5lC,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACfqlC,kBAAAA,YAAY,CAACrlC,IAAI,CAACW,OAAN,CAAZ,GAA6BX,IAA7B;AACD,iBAFD;AAGD;;AA5BI,gDA8BE;AACLqlC,gBAAAA,YAAY,EAAZA,YADK;AAEL5lC,gBAAAA,QAAQ,EAARA;AAFK,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA2Eew9B,sBA3Ef;AAAA,8FA2ES,kBACL7xB,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMCyjB,cAAAA,SAND,GAMsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8mC,0BADsB;AAEzChT,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EACJ,KAAK7M,OAAL,KAAiB7pB,eAAO,CAACK,OAAzB,GACIwjD,UAAU,CAACC,IAAX,CAAgBriD,GADpB,GAEIoiD,UAAU,CAACvjD,MAAX,CAAkBmB,GANiB;AAOzCkqB,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAPuB;AAQzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AARuB,eANtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,kBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAjB5C;AAAA;AAAA;AAAA;;AAAA,6DAmBE7Q,QAAQ,CAACkvB,UAnBX;;AAAA;AAsBCwO,cAAAA,QAtBD,GAsB0B19B,QAAQ,CAAClO,IAtBnC;AAAA,gDAuBE;AACL4rC,gBAAAA,QAAQ,EAARA,QADK;AAEL19B,gBAAAA,QAAQ,EAAEA,QAAQ,CAAClO;AAFd,eAvBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3ET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuGewmD,WAvGf;AAAA,mFAuGS,wBAcLx1B,QAdK,EAeL6H,MAfK;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH/K,cAAAA,MAFG,QAEHA,MAFG,EAGH24B,KAHG,QAGHA,KAHG,EAIHC,OAJG,QAIHA,OAJG,EAKH32C,GALG,QAKHA,GALG,EAMHkc,SANG,QAMHA,SANG;AAoBC0M,cAAAA,WApBD,GAoBe;AAClB1M,gBAAAA,SAAS,EAATA,SADkB;AAElBlc,gBAAAA,GAAG,EAAHA,GAFkB;AAGlB+d,gBAAAA,MAAM,EAAEA,MAAM,CAAC5iB,QAAP,EAHU;AAIlBu7C,gBAAAA,KAAK,EAAEA,KAJW;AAKlBC,gBAAAA,OAAO,EAAEA,OAAO,GAAGA,OAAH,GAAa;AALX,eApBf;AA2BCl5C,cAAAA,SA3BD,GA2BaD,iBAAiB,cAC9BorB,WAD8B;AAEjC5oB,gBAAAA,GAAG,EAAE+c,kBAAkB,CAAC6L,WAAW,CAAC5oB,GAAb,CAFU;AAGjC02C,gBAAAA,KAAK,EAAE35B,kBAAkB,CAAC6L,WAAW,CAAC8tB,KAAb,CAHQ;AAIjCC,gBAAAA,OAAO,EAAE55B,kBAAkB,CAAC6L,WAAW,CAAC+tB,OAAb;AAJM,iBA3B9B;AAiCCppB,cAAAA,SAjCD,GAiCsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC8hD,iBADsB;AAEzC74B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFuB;AAGzC7E,gBAAAA,WAAW,EAAXA,WAHyC;AAIzCE,gBAAAA,MAAM,EAANA,MAJyC;AAKzCE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACN1O,kBAAAA,UAAU,EAAE4G,QADN;AAENxjB,kBAAAA,SAAS,EAAEA;AAFL;AANiC,eAjCtC;AAAA;AAAA,qBA6CmB,KAAKiwB,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA7CnB;;AAAA;AA6CCpvB,cAAAA,QA7CD,kBA6CsDlO,IA7CtD;;AAAA,oBA8CDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IA9C5C;AAAA;AAAA;AAAA;;AAAA,6DAgDE7Q,QAAQ,CAACkvB,UAhDX;;AAAA;AAAA,gDAmDE;AACLvc,gBAAAA,MAAM,EAAE3S,QAAQ,CAAC2S,MADZ;AAEL3S,gBAAAA,QAAQ,EAAEA;AAFL,eAnDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA+BuuB,OAA/B;;ICzBamqB,WAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACejV,OADf;AAAA,+EACS,iBAAc9iC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACCyuB,cAAAA,SADD,GACwB;AAC3BvE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MADS;AAE3BjpB,gBAAAA,GAAG,EAAElL,qBAAa,CAACgiD,qBAFQ;AAG3B/4B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHS;AAI3Bre,gBAAAA,UAAU,EAAE;AAAC9hB,kBAAAA,OAAO,EAAPA;AAAD;AAJe,eADxB;AAAA;AAAA,qBASmB,KAAK4uB,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CATnB;;AAAA;AASCpvB,cAAAA,QATD,iBASsDlO,IATtD;;AAAA,oBAUDkO,QAVC,YAUDA,QAAQ,CAAEkvB,UAVT;AAAA;AAAA;AAAA;;AAAA,4DAYElvB,QAZF,oBAYEA,QAAQ,CAAEkvB,UAZZ;;AAAA;AAAA,+CAeElvB,QAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmBe44C,OAnBf;AAAA,+EAmBS,kBAAcC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACCzpB,cAAAA,SADD,GACwB;AAC3BvE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MADS;AAE3BjpB,gBAAAA,GAAG,EAAElL,qBAAa,CAACmiD,qBAFQ;AAG3Bl5B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3B7E,gBAAAA,WAAW,EAAE;AAACouB,kBAAAA,IAAI,EAAJA;AAAD;AAJc,eADxB;AAAA;AAAA,qBASmB,KAAKtpB,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CATnB;;AAAA;AASCpvB,cAAAA,QATD,kBASsDlO,IATtD;;AAAA,oBAUDkO,QAAQ,QAAR,IAAAA,QAAQ,CAAEkvB,UAAV,IAAwBlvB,QAAxB,YAAwBA,QAAQ,CAAEkvB,UAAV,CAAqBre,IAV5C;AAAA;AAAA;AAAA;;AAAA,6DAYE7Q,QAZF,oBAYEA,QAAQ,CAAEkvB,UAZZ;;AAAA;AAAA,gDAeElvB,QAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqCS+4C,mBArCT,GAqCS;AACL,WAAO,KAAKj7B,OAAL,KAAiB7pB,eAAO,CAACM,MAAzB,GAAkC,iCAAlC,GAAsE,8BAA7E;AACD,GAvCH;;AAAA;AAAA,EAAiCg6B,OAAjC;;;ICkBayqB,OAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACE;;;AADF,SAIeC,YAJf;AAAA;AAAA;AAAA,oFAIS;AAAA;AAAA;AAAA;AAAA;AAAA;AAMC7pB,cAAAA,SAND,GAMwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACuiD,eADQ;AAE3Bt5B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eANxB;AAAA;AAAA,qBAYmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,iBAYsDlO,IAZtD;;AAAA,oBAaDkO,QAbC,YAaDA,QAAQ,CAAEkvB,UAbT;AAAA;AAAA;AAAA;;AAAA,4DAeElvB,QAfF,oBAeEA,QAAQ,CAAEkvB,UAfZ;;AAAA;AAmBC7uB,cAAAA,SAnBD,GAmBiE,EAnBjE;AAoBCF,cAAAA,YApBD,GAqBH,EArBG;AAsBCC,cAAAA,OAtBD,GAsB8C,EAtB9C;;AAuBL,kBAAIJ,QAAQ,YAAYM,KAAxB,EAA+B;AAC7BN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;AACf,sBAAIA,IAAI,CAAChO,MAAL,CAAYI,UAAZ,CAAuB,KAAvB,CAAJ,EAAmC;AACjC4N,oBAAAA,IAAI,CAACC,SAAL,GAAiB,IAAjB;AACD,mBAFD,MAEO;AACLD,oBAAAA,IAAI,CAACC,SAAL,GAAiB,KAAjB;AACD;;AACDH,kBAAAA,SAAS,CAACE,IAAI,CAAChO,MAAN,CAAT,GAAyBgO,IAAzB;AAEA;AAQAJ,kBAAAA,YAAY,CAACI,IAAI,CAACI,OAAL,CAAaM,WAAb,EAAD,CAAZ,GAA2CV,IAAI,CAAChO,MAAhD;AACA6N,kBAAAA,OAAO,CAACG,IAAI,CAACW,OAAN,CAAP,GAAwBX,IAAI,CAAChO,MAA7B;AACD,iBAlBD;AAmBD;;AA3CI,+CA6CE;AACL8N,gBAAAA,SAAS,EAATA,SADK;AAELD,gBAAAA,OAAO,EAAPA,OAFK;AAGLD,gBAAAA,YAAY,EAAZA,YAHK;AAILH,gBAAAA,QAAQ,EAARA;AAJK,eA7CF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyDem5C,cAzDf;AAAA,sFAyDS,kBACLxtC,OADK,EAEL9J,GAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAELA,GAFK;AAELA,gBAAAA,GAFK,GAESlL,qBAAa,CAACyiD,gBAFvB;AAAA;;AAYChqB,cAAAA,SAZD,GAYwB;AAC3BvtB,gBAAAA,GAAG,EAAHA,GAD2B;AAE3B4oB,gBAAAA,WAAW,EAAE,EAFc;AAG3B7K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAZxB;AAAA;AAAA,qBAmBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnBnB;;AAAA;AAmBCpvB,cAAAA,QAnBD,kBAmBsDlO,IAnBtD;;AAAA,oBAoBDkO,QApBC,YAoBDA,QAAQ,CAAEkvB,UApBT;AAAA;AAAA;AAAA;;AAAA,6DAsBElvB,QAtBF,oBAsBEA,QAAQ,CAAEkvB,UAtBZ;;AAAA;AAyBCntB,cAAAA,OAzBD,GAyBoE,EAzBpE;AA2BCV,cAAAA,KA3BD,GA2BoE,EA3BpE;;AA+BL,kBAAI,CAAArB,QAAQ,QAAR,YAAAA,QAAQ,CAAE+B,OAAV,aAA6BzB,KAAjC,EAAwC;AAChC0hB,gBAAAA,KADgC,GACxBrW,OADwB,yCACxBA,OAAO,CAAE0tC,QADe,qBACxB,kBAAmBl6C,KAAnB,CAAyB,GAAzB,CADwB;AAElCm6C,gBAAAA,QAFkC,GAEvB,EAFuB;;AAGtC,oBAAIt3B,KAAJ,EAAW;AACTs3B,kBAAAA,QAAQ,GAAGt5C,QAAQ,CAAC+B,OAAT,CAAiBmrB,MAAjB,CACT,UAAC3sB,IAAD;AAAA;;AAAA,2BACEyhB,KAAK,CAACruB,QAAN,eAAe4M,IAAI,CAACQ,IAApB,qBAAe,WAAWif,WAAX,EAAf,CADF;AAAA,mBADS,CAAX;AAID,iBALD,MAKO;AACLs5B,kBAAAA,QAAQ,GAAGt5C,QAAQ,CAAC+B,OAApB;AACD;;AACDu3C,gBAAAA,QAAQ,CAAC7jD,OAAT,CAAiB,UAAC8K,IAAD;AACf,sBAAM2B,UAAU,gBACX3B,IADW,CAAhB;;AAIAwB,kBAAAA,OAAO,CAACxB,IAAI,CAAC7M,MAAN,CAAP,GAAuBwO,UAAvB;;AAEA,sBAAI3B,IAAI,CAAC6B,OAAT,EAAkB;AAChB,6CACE7B,IAAI,CAAC7M,MAAL,CAAYuH,KAAZ,CAAkB,uBAAlB,CADF;AAAA,wBAAOq+C,AAAUv4C,IAAjB;AAAA,wBAAuBvO,IAAvB;AAAA,wBAA6BE,KAA7B;;AAEA,wBAAIqO,IAAI,KAAK,OAAT,IAAoBvO,IAApB,IAA4BE,KAAhC,EAAuC;AACrC,0BAAI,CAAC2O,KAAK,CAAC7O,IAAD,CAAV,EAAkB;AAChB6O,wBAAAA,KAAK,CAAC7O,IAAD,CAAL,GAAc;AACZ0O,0BAAAA,OAAO,EAAEX,IAAI,CAAC4B,WADF;AAEZR,0BAAAA,SAAS,EAAE,CAACjP,KAAD;AAFC,yBAAd;AAID,uBALD,MAKO;AACL2O,wBAAAA,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAZ,aAA4BN,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAxC,GAAmDjP,KAAnD;AACD;;AACD,0BAAI,CAAC2O,KAAK,CAAC3O,KAAD,CAAV,EAAmB;AACjB2O,wBAAAA,KAAK,CAAC3O,KAAD,CAAL,GAAe;AACbwO,0BAAAA,OAAO,EAAEX,IAAI,CAAC4B,WADD;AAEbR,0BAAAA,SAAS,EAAE,CAACnP,IAAD;AAFE,yBAAf;AAID,uBALD,MAKO;AACL6O,wBAAAA,KAAK,CAAC3O,KAAD,CAAL,CAAaiP,SAAb,aAA6BN,KAAK,CAAC3O,KAAD,CAAL,CAAaiP,SAA1C,GAAqDnP,IAArD;AACD;AACF,qBAjBD,MAiBO,IAAIA,IAAI,IAAIE,KAAZ,EAAmB;AACxB,AAEA;AACA;;AAEA,0BAAI,CAAC2O,KAAK,CAAC7O,IAAD,CAAV,EAAkB;AAChB6O,wBAAAA,KAAK,CAAC7O,IAAD,CAAL,GAAc;AACZ0O,0BAAAA,OAAO,EAAEX,IAAI,CAAC4B,WADF;AAEZR,0BAAAA,SAAS,EAAE,CAACjP,KAAD;AAFC,yBAAd;AAID,uBALD,MAKO;AACL2O,wBAAAA,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAZ,aAA4BN,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAxC,GAAmDjP,KAAnD;AACD;AACF;AACF;AACF,iBA3CD;AA4CD;;AACKe,cAAAA,SAvFD,GAuFuB+L,OAAO,CAACC,OAAR,CAAgBsC,OAAhB,CAvFvB;AAwFCe,cAAAA,QAxFD,GAwFsBtD,OAAO,CAACC,OAAR,CAAgB4B,KAAhB,CAxFtB;AAAA,gDAyFE;AACLU,gBAAAA,OAAO,EAAPA,OADK;AAELV,gBAAAA,KAAK,EAALA,KAFK;AAGLyB,gBAAAA,QAAQ,EAARA,QAHK;AAILC,gBAAAA,WAAW,EAAED,QAAQ,CAAC1D,IAAT,CAAc/F,GAAd,CAJR;AAKL5F,gBAAAA,SAAS,EAATA,SALK;AAMLuP,gBAAAA,YAAY,EAAEvP,SAAS,CAAC2L,IAAV,CAAe/F,GAAf,CANT;AAOL2G,gBAAAA,QAAQ,EAARA;AAPK,eAzFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6Jeu5C,SA7Jf;AAAA,iFA6JS,kBACL5tC,OADK,EAEL64B,UAFK,EAGL7Z,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCrrB,cAAAA,SARD,GAQa,CAChBqM,OAAO,CAAC4W,QADQ,EAEhB5W,OAAO,CAACwB,SAFQ,EAGhBxB,OAAO,CAACoS,SAHQ,EAIhBpS,OAAO,CAACrE,SAAR,CAAkBpG,OAJF,EAKhByK,OAAO,CAACpE,QAAR,CAAiBrG,OALD,EAMhByK,OAAO,CAACrE,SAAR,CAAkBvD,MANF,EAOhB4H,OAAO,CAACpE,QAAR,CAAiBxD,MAPD,EAQhB4H,OAAO,CAACmW,UARQ,EAShBnW,OAAO,CAACgD,UATQ,EAUhBhD,OAAO,CAAC2X,cAAR,GAAyB,CAAzB,GAA6B,CAVb,EAWhB,CAXgB,CARb;AAsBC8L,cAAAA,SAtBD,GAsBwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC6iD,eADQ;AAE3B/2B,gBAAAA,UAAU,EAAE9W,OAFe;AAG3Bgf,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJS;AAK3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACqyB,kBALS;AAM3BH,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN6rB,kBAAAA,QAAQ,EAAEn0B,qBAAa,CAAC2tC,cAFlB;AAGNzoB,kBAAAA,UAAU,EAAEsoB;AAHN;AANmB,eAtBxB;AAAA;AAAA,qBAmCmB,KAAKjV,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnCnB;;AAAA;AAmCCpvB,cAAAA,QAnCD,kBAmCsDlO,IAnCtD;AAAA,gDAoCE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CApCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7JT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoMey5C,aApMf;AAAA,qFAoMS,kBACL9tC,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAaCyE,cAAAA,SAbD,GAasC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC+iD,gBADsB;AAEzCjvB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAbtC;AAAA;AAAA,qBAqBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CArBnB;;AAAA;AAqBCpvB,cAAAA,QArBD,kBAqBsDlO,IArBtD;;AAAA,oBAuBDkO,QAvBC,YAuBDA,QAAQ,CAAEkvB,UAvBT;AAAA;AAAA;AAAA;;AAAA,6DAyBElvB,QAzBF,oBAyBEA,QAAQ,CAAEkvB,UAzBZ;;AAAA;AAAA,6DA8BAlvB,QA9BA;AA+BHA,gBAAAA,QAAQ,EAARA;AA/BG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApMT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuOe25C,kBAvOf;AAAA,0FAuOS,kBACLhuC,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAWCyE,cAAAA,SAXD,GAWsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACijD,qBADsB;AAEzCnvB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAXtC;AAAA;AAAA,qBAmBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnBnB;;AAAA;AAmBCpvB,cAAAA,QAnBD,kBAmBsDlO,IAnBtD;;AAAA,oBAqBDkO,QArBC,YAqBDA,QAAQ,CAAEkvB,UArBT;AAAA;AAAA;AAAA;;AAAA,6DAuBElvB,QAvBF,oBAuBEA,QAAQ,CAAEkvB,UAvBZ;;AAAA;AAAA,gDA2BE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELoe,gBAAAA,WAAW,EAAE75C,QAAQ,CAACqgC,YAFjB;AAGLrgC,gBAAAA,QAAQ,EAARA;AAHK,eA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvOT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyQe85C,YAzQf;AAAA,oFAyQS,kBACLnuC,OADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAeCyjB,cAAAA,SAfD,GAesC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACojD,cADsB;AAEzCtvB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHuB;AAIzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJuB,eAftC;AAAA;AAAA,qBAqBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CArBnB;;AAAA;AAqBCpvB,cAAAA,QArBD,kBAqBsDlO,IArBtD;;AAAA,oBAsBDkO,QAtBC,YAsBDA,QAAQ,CAAEkvB,UAtBT;AAAA;AAAA;AAAA;;AAAA,6DAwBElvB,QAxBF,oBAwBEA,QAAQ,CAAEkvB,UAxBZ;;AAAA;AAAA,gDA2BE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELue,gBAAAA,QAAQ,EAAE;AACRC,kBAAAA,KAAK,EAAEj6C,QAAQ,CAACi6C,KADR;AAERnrC,kBAAAA,KAAK,EAAE9O,QAAQ,CAAC8O,KAFR;AAGRE,kBAAAA,OAAO,EAAEhP,QAAQ,CAACgP,OAHV;AAIRkrC,kBAAAA,KAAK,EAAEl6C,QAAQ,CAACk6C;AAJR,iBAFL;AAQLl6C,gBAAAA,QAAQ,EAARA;AARK,eA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzQT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAgTem6C,cAhTf;AAAA,sFAgTS,kBAAwBxuC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAwBA,OAAxB;AAAwBA,gBAAAA,OAAxB,GAAkClZ,SAAlC;AAAA;;AACC28B,cAAAA,SADD,GACsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACyjD,gBADsB;AAEzC3vB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHuB;AAIzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJuB,eADtC;AAAA;AAAA,qBAOmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAPnB;;AAAA;AAOCpvB,cAAAA,QAPD,kBAOsDlO,IAPtD;;AAAA,oBAQDkO,QARC,YAQDA,QAAQ,CAAEkvB,UART;AAAA;AAAA;AAAA;;AAAA,6DAUElvB,QAVF,oBAUEA,QAAQ,CAAEkvB,UAVZ;;AAAA;AAAA,gDAcE;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELq6C,gBAAAA,cAAc,EAAE,UAAIr6C,QAAJ,EAAc2oB,MAAd,CAAqB,UAACqG,IAAD,EAAOzuB,IAAP;;;AACnC,sCAAYyuB,IAAZ,6BAAmBzuB,IAAI,CAAC+5C,IAAxB,IAA+B/5C,IAA/B;AACD,iBAFe,EAEb,EAFa;AAFX,eAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhTT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuUE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9VF;;AAAA,SAgWeg6C,aAhWf;AAAA;AAAA;AAAA,qFAgWS,kBAAoB5uC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCyjB,cAAAA,SADD,GACsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC6jD,eADsB;AAEzC/vB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHuB;AAIzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJuB,eADtC;AAAA;AAAA,qBAOmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAPnB;;AAAA;AAOCpvB,cAAAA,QAPD,kBAOsDlO,IAPtD;;AAAA,oBASDkO,QATC,YASDA,QAAQ,CAAEkvB,UATT;AAAA;AAAA;AAAA;;AAAA,6DAWElvB,QAXF,oBAWEA,QAAQ,CAAEkvB,UAXZ;;AAAA;AAAA,gDAeE;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELy7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QAFf;AAGLwe,gBAAAA,KAAK,EAAEj6C,QAAQ,CAACi6C;AAHX,eAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhWT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsXeQ,YAtXf;AAAA,oFAsXS,kBAAmB9uC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyjB,cAAAA,SAJD,GAIsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC+jD,cADsB;AAEzCjwB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHuB;AAIzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJuB,eAJtC;AAAA;AAAA,qBAWmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAXnB;;AAAA;AAWCpvB,cAAAA,QAXD,kBAWsDlO,IAXtD;;AAAA,oBAYDkO,QAZC,YAYDA,QAAQ,CAAEkvB,UAZT;AAAA;AAAA;AAAA;;AAAA,6DAcElvB,QAdF,oBAcEA,QAAQ,CAAEkvB,UAdZ;;AAAA;AAAA,gDAiBE;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAEL26C,gBAAAA,SAAS,EAAE36C;AAFN,eAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtXT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6Ye46C,mBA7Yf;AAAA,2FA6YS,mBACLjvC,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyE,cAAAA,SAJD,GAIsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACkkD,qBADsB;AAEzCpwB,gBAAAA,WAAW,EAAE9e,OAF4B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAJtC;AAAA;AAAA,qBAWmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAXnB;;AAAA;AAWCpvB,cAAAA,QAXD,mBAWsDlO,IAXtD;;AAAA,oBAYDkO,QAZC,YAYDA,QAAQ,CAAEkvB,UAZT;AAAA;AAAA;AAAA;;AAAA,8DAcElvB,QAdF,oBAcEA,QAAQ,CAAEkvB,UAdZ;;AAAA;AAAA,iDAkBE;AACLuM,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QADf;AAELqf,gBAAAA,WAAW,EAAE96C,QAAQ,CAACqgC,YAFjB;AAGLrgC,gBAAAA,QAAQ,EAARA;AAHK,eAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7YT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuae+6C,SAvaf;AAAA,iFAuaS,mBACLpvC,OADK,EAEL64B,UAFK,EAGL7Z,MAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCrrB,cAAAA,SALD,GAKa,CAChBqM,OAAO,CAAC4W,QADQ,EAEhB5W,OAAO,CAACwB,SAFQ,EAGhBxB,OAAO,CAACoS,SAHQ,EAIhBpS,OAAO,CAACrE,SAAR,CAAkBpG,OAJF,EAKhByK,OAAO,CAACpE,QAAR,CAAiBrG,OALD,EAMhByK,OAAO,CAACrE,SAAR,CAAkBvD,MANF,EAOhB4H,OAAO,CAACpE,QAAR,CAAiBxD,MAPD,EAQhB4H,OAAO,CAACmW,UARQ,EAShBnW,OAAO,CAACgD,UATQ,EAUhBhD,OAAO,CAAC2X,cAAR,GAAyB,CAAzB,GAA6B,CAVb,EAWhB,CAXgB,CALb;AAmBC8L,cAAAA,SAnBD,GAmBsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACqkD,eADsB;AAEzCv4B,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACqyB,kBALuB;AAMzCH,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN6rB,kBAAAA,QAAQ,EAAEn0B,qBAAa,CAAC2tC,cAFlB;AAGNzoB,kBAAAA,UAAU,EAAEsoB;AAHN;AANiC,eAnBtC;AAAA;AAAA,qBA+BmB,KAAKjV,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA/BnB;;AAAA;AA+BCpvB,cAAAA,QA/BD,mBA+BsDlO,IA/BtD;AAAA,iDAgCE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAhCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvaT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0cei7C,iBA1cf;AAAA,yFA0cS,yBAQLtwB,MARK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCAEHuwB,OAFG,EAEHA,OAFG,6BAEO,CACRC,iBAAA,CAAwBrrC,SADhB,EAERqrC,iBAAA,CAAwBC,aAFhB,CAFP,iBAMAzvC,OANA;AAUCyjB,cAAAA,SAVD,GAUsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0kD,oBADsB;AAEzC5wB,gBAAAA,WAAW,eAAO9e,OAAP;AAAgBuvC,kBAAAA,OAAO,EAAEA,OAAO,CAAC97C,IAAR,CAAa,GAAb;AAAzB,kBAF8B;AAGzCurB,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAVtC;AAAA;AAAA,qBAiBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAjBnB;;AAAA;AAiBCpvB,cAAAA,QAjBD,mBAiBsDlO,IAjBtD;;AAAA,oBAkBDkO,QAlBC,YAkBDA,QAAQ,CAAEkvB,UAlBT;AAAA;AAAA;AAAA;;AAAA,8DAoBElvB,QApBF,oBAoBEA,QAAQ,CAAEkvB,UApBZ;;AAAA;AAAA,iDAwBE;AACLosB,gBAAAA,UAAU,EAAEt7C,QAAQ,CAACs7C,UADhB;AAELt7C,gBAAAA,QAAQ,EAARA;AAFK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1cT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyeeu7C,cAzef;AAAA,sFAyeS,mBACL9vB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAAA,sBAa0C5hB,OAAO,GAClDA,OADkD,GAElD;AAAEtM,gBAAAA,SAAS,EAAE;AAAb,eAfC,EAaGA,SAbH,SAaGA,SAbH,EAacL,kBAbd,SAacA,kBAbd;AAgBGivB,cAAAA,QAhBH,GAgBgBhhC,OAhBhB,CAgBGghC,QAhBH;AAkBCV,cAAAA,QAlBD,GAkBY,CAAC,CAACD,WAlBd;AAmBD/gB,cAAAA,cAnBC,GAmBgBx4B,SAnBhB;AAoBLk6C,cAAAA,QAAQ,CAAC3mB,OAAT,GAAmB,CAAnB;AACA2mB,cAAAA,QAAQ,CAACC,IAAT,qBAAgCjhC,OAAO,CAACoS,SAAxC;;AAEMmuB,cAAAA,KAvBD;AAAA,2EAuBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,gCAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAvBT;;AAAA,gCAuBCD,KAvBD;AAAA;AAAA;AAAA;;AAAA,oBAoCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cAtC3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBA0CGJ,QA1CH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA2COC,KAAK,EA3CZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA8CsBnL,6BAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CA9CtB;;AAAA;AA8CO/K,cAAAA,MA9CP;AAuDCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AAvDD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA2DI,KAAK3d,MAAL,eA3DJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA+D2B6U,UAAU,CAAC7lB,IAAD,EAAOgvB,QAAQ,CAACxmB,SAAhB,CA/DrC;;AAAA;AA+DGomB,cAAAA,eA/DH;AAAA;;AAAA,mBAiEGA,eAjEH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAmESxL,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,CAnET;;AAAA;AAkEOpL,cAAAA,OAlEP;AA0ECsY,cAAAA,cAAc,GAAGtY,OAAM,CAAC0O,QAAxB;AA1ED;AAAA;;AAAA;AAAA,mBA2EU3D,kBA3EV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA6ESqjB,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,EAMJL,kBANI,CA7ET;;AAAA;AA4EO/K,cAAAA,QA5EP;AAqFCsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB,CArFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAwFO6qB,KAAK,EAxFZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA4FI,KAAKvd,MAAL,eA5FJ;;AAAA;AAiGL,kBAAIjR,kBAAJ,EAAwB;AACtBivB,gBAAAA,QAAQ,CAACjvB,kBAAT,GAA8BA,kBAA9B;AACD;;AACDivB,cAAAA,QAAQ,CAACzhB,cAAT,GAA0B6V,qBAAA,CACxB4L,QADwB,EAExB7pB,QAFwB,EAGxBnQ,MAHF;AAIAg6B,cAAAA,QAAQ,CAAC1hB,cAAT,GAA0BA,cAA1B;AACM3rB,cAAAA,SAzGD,GAyG+BD,iBAAiB,CAACsM,OAAD,CAzGhD;AA0GCyjB,cAAAA,SA1GD,GA0GsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC6kD,gBADsB;AAEzC/4B,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN;AANiC,eA1GtC;AAAA;AAAA;AAAA,qBAwHe,KAAKyM,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAxHf;;AAAA;AAwHHpvB,cAAAA,QAxHG,mBAwHkDlO,IAxHlD;;AAAA,iCAyHCkO,QAzHD,aAyHC,UAAUkvB,UAzHX;AAAA;AAAA;AAAA;;AAAA,4EA2HIlvB,QA3HJ,qBA2HI,WAAUkvB,UA3Hd;;AAAA;AAAA;AA8HMlvB,gBAAAA,QAAQ,EAARA;AA9HN,iBA8HmBA,QA9HnB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzeT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+mBey7C,eA/mBf;AAAA,uFA+mBS,mBACL9vC,OADK,EAML64B,UANK,EAOL7Z,MAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCrrB,cAAAA,SATD,GAS+BD,iBAAiB,CAACsM,OAAD,CAThD;AAUCyjB,cAAAA,SAVD,GAUsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC+kD,iBADsB;AAEzCj5B,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAEsoB;AAFN;AANiC,eAVtC;AAAA;AAAA,qBAsBmB,KAAKjV,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAtBnB;;AAAA;AAsBCpvB,cAAAA,QAtBD,mBAsBsDlO,IAtBtD;;AAAA,oBAuBDkO,QAvBC,YAuBDA,QAAQ,CAAEkvB,UAvBT;AAAA;AAAA;AAAA;;AAAA,8DAyBElvB,QAzBF,oBAyBEA,QAAQ,CAAEkvB,UAzBZ;;AAAA;AAAA;AA4BIlvB,gBAAAA,QAAQ,EAARA;AA5BJ,iBA4BiBA,QA5BjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/mBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6oBe27C,SA7oBf;AAAA,iFA6oBS,mBACLhwC,OADK,EAML64B,UANK,EAOL7Z,MAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AASCrrB,cAAAA,SATD,GAS+BD,iBAAiB,CAACsM,OAAD,CAThD;AAUCyjB,cAAAA,SAVD,GAUsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACilD,UADsB;AAEzCn5B,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAEsoB;AAFN;AANiC,eAVtC;AAAA;AAAA,qBAsBmB,KAAKjV,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAtBnB;;AAAA;AAsBCpvB,cAAAA,QAtBD,mBAsBsDlO,IAtBtD;;AAAA,oBAuBDkO,QAvBC,YAuBDA,QAAQ,CAAEkvB,UAvBT;AAAA;AAAA;AAAA;;AAAA,8DAyBElvB,QAzBF,oBAyBEA,QAAQ,CAAEkvB,UAzBZ;;AAAA;AAAA;AA4BIlvB,gBAAAA,QAAQ,EAARA;AA5BJ,iBA4BiBA,QA5BjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7oBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4qBe67C,gBA5qBf;AAAA,wFA4qBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAICzsB,cAAAA,SAJD,GAIsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACmlD,kBADsB;AAEzCl8B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFuB;AAGzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHuB,eAJtC;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,mBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,8DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAAA,iDAgBE;AAAE6sB,gBAAAA,QAAQ,EAAE/7C,QAAZ;AAAsBA,gBAAAA,QAAQ,EAARA;AAAtB,eAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5qBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+rBeg8C,eA/rBf;AAAA,uFA+rBS,mBACLrwC,OADK,EAWLgf,MAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBCyE,cAAAA,SAxBD,GAwBsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACslD,iBADsB;AAEzCxxB,gBAAAA,WAAW,eAAO9e,OAAP,CAF8B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAxBtC;AAAA;AAAA,qBA+BmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA/BnB;;AAAA;AA+BCpvB,cAAAA,QA/BD,mBA+BsDlO,IA/BtD;;AAAA,oBAgCDkO,QAhCC,YAgCDA,QAAQ,CAAEkvB,UAhCT;AAAA;AAAA;AAAA;;AAAA,8DAkCElvB,QAlCF,oBAkCEA,QAAQ,CAAEkvB,UAlCZ;;AAAA;AAAA,8DAqCOlvB,QArCP;AAqCiBk8C,gBAAAA,IAAI,EAAEl8C,QAAQ,CAACm8C,OArChC;AAqCyCn8C,gBAAAA,QAAQ,EAARA;AArCzC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/rBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuuBeo8C,oBAvuBf;AAAA,4FAuuBS,mBACLzwC,OADK,EAWLgf,MAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBCyE,cAAAA,SAjBD,GAiBsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0lD,sBADsB;AAEzC5xB,gBAAAA,WAAW,eAAO9e,OAAP,CAF8B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eAjBtC;AAAA;AAAA,qBAwBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAxBnB;;AAAA;AAwBCpvB,cAAAA,QAxBD,mBAwBsDlO,IAxBtD;;AAAA,oBAyBDkO,QAzBC,YAyBDA,QAAQ,CAAEkvB,UAzBT;AAAA;AAAA;AAAA;;AAAA,8DA2BElvB,QA3BF,oBA2BEA,QAAQ,CAAEkvB,UA3BZ;;AAAA;AAAA,iDA8BE;AACLgtB,gBAAAA,IAAI,EAAEl8C,QADD;AAELy7B,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QAFd;AAGLz7B,gBAAAA,QAAQ,EAARA;AAHK,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvuBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA4wBes8C,cA5wBf;AAAA,sFA4wBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAWCltB,cAAAA,SAXD,GAWa;AAChBvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC4lD,gBADH;AAEhB38B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFF;AAGhBzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHF,eAXb;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAsBCntB,cAAAA,OAtBD,GAwBD,EAxBC;AA0BCV,cAAAA,KA1BD,GA0BoE,EA1BpE;;AA8BL,kBAAIrB,QAAQ,YAAYM,KAAxB,EAA+B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,gBAAAA,QAAQ,CAACvK,OAAT,CAAiB,UAAC8K,IAAD;;;AACf,sBAAM2B,UAAU,gBACX3B,IADW,CAAhB;;AAIAwB,kBAAAA,OAAO,CAACG,UAAU,CAACxO,MAAZ,CAAP,gBAAkCwO,UAAlC;AAA8CnB,oBAAAA,IAAI,EAAE;AAApD;;AACA,uDAAwBmB,UAAxB,oBAAwBA,UAAU,CAAEs6C,SAApC,oCAAiD;AAC/ChqD,oBAAAA,IAAI,EAAE,EADyC;AAE/CE,oBAAAA,KAAK,EAAE;AAFwC,mBAAjD;AAAA,sBAAQF,IAAR,SAAQA,IAAR;AAAA,sBAAcE,KAAd,SAAcA,KAAd;;AAIA,sBAAIwP,UAAU,CAACE,OAAX,IAAsBF,UAAU,CAACs6C,SAAjC,IAA8ChqD,IAA9C,IAAsDE,KAA1D,EAAiE;AAC/D,wBAAI,CAAC2O,KAAK,CAAC7O,IAAD,CAAV,EAAkB;AAChB6O,sBAAAA,KAAK,CAAC7O,IAAD,CAAL,GAAc;AACZ0O,wBAAAA,OAAO,EAAEX,IAAI,CAAC4B,WADF;AAEZR,wBAAAA,SAAS,EAAE,CAACjP,KAAD;AAFC,uBAAd;AAID,qBALD,MAKO;AACL2O,sBAAAA,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAZ,aAA4BN,KAAK,CAAC7O,IAAD,CAAL,CAAYmP,SAAxC,GAAmDjP,KAAnD;AACD;;AACD,wBAAI,CAAC2O,KAAK,CAAC3O,KAAD,CAAV,EAAmB;AACjB2O,sBAAAA,KAAK,CAAC3O,KAAD,CAAL,GAAe;AACbwO,wBAAAA,OAAO,EAAEX,IAAI,CAAC4B,WADD;AAEbR,wBAAAA,SAAS,EAAE,CAACnP,IAAD;AAFE,uBAAf;AAID,qBALD,MAKO;AACL6O,sBAAAA,KAAK,CAAC3O,KAAD,CAAL,CAAaiP,SAAb,aAA6BN,KAAK,CAAC3O,KAAD,CAAL,CAAaiP,SAA1C,GAAqDnP,IAArD;AACD;AACF;AACF,iBA5BD;AA6BD;;AACKiB,cAAAA,SAtED,GAsEuB+L,OAAO,CAACC,OAAR,CAAgBsC,OAAhB,CAtEvB;AAuECe,cAAAA,QAvED,GAuEsBtD,OAAO,CAACC,OAAR,CAAgB4B,KAAhB,CAvEtB;AAAA,iDAwEE;AACLU,gBAAAA,OAAO,EAAPA,OADK;AAELV,gBAAAA,KAAK,EAALA,KAFK;AAGLyB,gBAAAA,QAAQ,EAARA,QAHK;AAILC,gBAAAA,WAAW,EAAED,QAAQ,CAAC1D,IAAT,CAAc/F,GAAd,CAJR;AAKL5F,gBAAAA,SAAS,EAATA,SALK;AAMLuP,gBAAAA,YAAY,EAAEvP,SAAS,CAAC2L,IAAV,CAAe/F,GAAf,CANT;AAOL2G,gBAAAA,QAAQ,EAARA;AAPK,eAxEF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5wBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+1Bey8C,YA/1Bf;AAAA,oFA+1BS;AAAA;;AAAA;AAAA;AAAA;AAAA;AACL9wC,cAAAA,OADK,SACLA,OADK;AAYCyjB,cAAAA,SAZD,GAYsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC+lD,cADsB;AAEzCjyB,gBAAAA,WAAW,eAAO9e,OAAP,CAF8B;AAGzCiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHuB;AAIzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJuB,eAZtC;AAAA;AAAA,qBAkBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAlBnB;;AAAA;AAkBCpvB,cAAAA,QAlBD,mBAkBsDlO,IAlBtD;;AAAA,oBAmBDkO,QAnBC,YAmBDA,QAAQ,CAAEkvB,UAnBT;AAAA;AAAA;AAAA;;AAAA,8DAqBElvB,QArBF,oBAqBEA,QAAQ,CAAEkvB,UArBZ;;AAAA;AAwBCoI,cAAAA,SAxBD,GAwBat3B,QAAQ,CAAC,WAAD,CAxBrB;AAAA,6BA0B6B2zB,WAAW,CAAC;AAC5CC,gBAAAA,KAAK,EAAE5zB,QAAQ,CAAC,MAAD,CAD6B;AAE5C8zB,gBAAAA,KAAK,EAAE9zB,QAAQ,CAAC,MAAD;AAF6B,eAAD,CA1BxC,EA0BG8G,IA1BH,gBA0BGA,IA1BH,EA0BSX,IA1BT,gBA0BSA,IA1BT,EA0Be8C,SA1Bf,gBA0BeA,SA1Bf;AA+BCjD,cAAAA,KA/BD,GA+BoB;AACvBzT,gBAAAA,MAAM,EAAEyN,QAAQ,CAACtM,MADM;AAEvB2uB,gBAAAA,OAAO,EAAExf,QAAQ,CAAC7C,QAAQ,CAACqiB,OAAV,CAFM;AAGvBiV,gBAAAA,SAAS,EAATA,SAHuB;AAIvBruB,gBAAAA,SAAS,EAATA,SAJuB;AAKvB9C,gBAAAA,IAAI,EAAEA,IAAI,CAAC+sB,MALY;AAMvBqE,gBAAAA,WAAW,EAAEpxB,IAAI,CAACktB,SANK;AAOvBmE,gBAAAA,cAAc,EAAErxB,IAAI,CAACmtB,YAPE;AAQvBmE,gBAAAA,cAAc,EAAEtxB,IAAI,CAACotB,YARE;AASvBvpB,gBAAAA,aAAa,EAAE7D,IAAI,CAACgtB,QAAL,CAAcn2B,QAAd,EATQ;AAUvBoN,gBAAAA,aAAa,EAAEjE,IAAI,CAACitB,QAAL,CAAcp2B,QAAd,EAVQ;AAWvB8J,gBAAAA,IAAI,EAAEA,IAAI,CAACosB,MAXY;AAYvBwE,gBAAAA,WAAW,EAAE5wB,IAAI,CAACusB,SAZK;AAavBsE,gBAAAA,cAAc,EAAE7wB,IAAI,CAACwsB,YAbE;AAcvBsE,gBAAAA,cAAc,EAAE9wB,IAAI,CAACysB,YAdE;AAevBlpB,gBAAAA,aAAa,EAAEvD,IAAI,CAACqsB,QAAL,CAAcn2B,QAAd,EAfQ;AAgBvBiN,gBAAAA,aAAa,EAAEnD,IAAI,CAACssB,QAAL,CAAcp2B,QAAd;AAhBQ,eA/BpB;AAAA,iDAkDE;AACLgJ,gBAAAA,KAAK,EAALA,KADK;AAELhG,gBAAAA,QAAQ,EAARA;AAFK,eAlDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/1BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAs5Be28C,aAt5Bf;AAAA,qFAs5BS;AAAA;AAAA;AAAA;AAAA;AAAA;AACLhxC,cAAAA,OADK,SACLA,OADK,EAELgf,MAFK,SAELA,MAFK;AASCyE,cAAAA,SATD,GASsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACimD,eADsB;AAEzCnyB,gBAAAA,WAAW,eAAO9e,OAAP,CAF8B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJuB;AAKzCzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALuB,eATtC;AAAA;AAAA,qBAgBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAhBnB;;AAAA;AAgBCpvB,cAAAA,QAhBD,mBAgBsDlO,IAhBtD;;AAAA,oBAiBDkO,QAjBC,YAiBDA,QAAQ,CAAEkvB,UAjBT;AAAA;AAAA;AAAA;;AAAA,8DAmBElvB,QAnBF,oBAmBEA,QAAQ,CAAEkvB,UAnBZ;;AAAA;AAAA,iDAsBE;AACLgtB,gBAAAA,IAAI,EAAEl8C,QAAQ,CAACqgC,YADV;AAEL5E,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAACy7B,QAFd;AAGLz7B,gBAAAA,QAAQ,EAARA;AAHK,eAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAt5BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAm7Be68C,aAn7Bf;AAAA,qFAm7BS;AAAA;AAAA;AAAA;AAAA;AAAA;AACLlxC,cAAAA,OADK,SACLA,OADK,EAEL64B,UAFK,SAELA,UAFK,EAGL7Z,MAHK,SAGLA,MAHK;AASCrrB,cAAAA,SATD,GAS+BD,iBAAiB,CAACsM,OAAD,CAThD;AAUCyjB,cAAAA,SAVD,GAUsC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACmmD,eADsB;AAEzCr6B,gBAAAA,UAAU,EAAE9W,OAF6B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SALuB;AAMzCJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAEsoB;AAFN;AANiC,eAVtC;AAAA;AAAA,qBAsBmB,KAAKjV,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAtBnB;;AAAA;AAsBCpvB,cAAAA,QAtBD,mBAsBsDlO,IAtBtD;;AAAA,oBAuBDkO,QAvBC,YAuBDA,QAAQ,CAAEkvB,UAvBT;AAAA;AAAA;AAAA;;AAAA,8DAyBElvB,QAzBF,oBAyBEA,QAAQ,CAAEkvB,UAzBZ;;AAAA;AAAA;AA4BIlvB,gBAAAA,QAAQ,EAARA;AA5BJ,iBA4BiBA,QA5BjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAn7BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA6BuuB,OAA7B;;;;ICHawuB,YAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACeC,kBADf;AAAA,0FACS;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC5tB,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACsmD,qBADQ;AAE3Br9B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,iBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,4DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAgBCguB,cAAAA,eAhBD,GAgBmBl9C,QAAQ,CAAC2oB,MAAT,CACtB,UACEqG,IADF,EAEEzuB,IAFF;AAIEyuB,gBAAAA,IAAI,CAACzuB,IAAI,CAACwK,KAAN,CAAJ,GAAmB;AACjBqlC,kBAAAA,MAAM,EAAE7vC,IAAI,CAAC05C,KAAL,CAAW,CAAX,CADS;AAEjBkD,kBAAAA,SAAS,EAAE58C,IAAI,CAAC05C,KAAL,CAAW,CAAX,CAFM;AAGjBmD,kBAAAA,OAAO,EAAE78C,IAAI,CAAC05C,KAAL,CAAW,CAAX,CAHQ;AAIjBrN,kBAAAA,IAAI,EAAErsC,IAAI,CAAC05C,KAAL,CAAW,CAAX;AAJW,iBAAnB;AAMA,uBAAOjrB,IAAP;AACD,eAZqB,EAatB,EAbsB,CAhBnB;AAAA,+CA+BE;AACLhvB,gBAAAA,QAAQ,EAARA,QADK;AAELk9C,gBAAAA,eAAe,EAAfA;AAFK,eA/BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAsCeG,6BAtCf;AAAA,qGAsCS;AAAA;AAAA;AAAA;AAAA;AAAA;AAICjuB,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC2mD,gCADQ;AAE3B19B,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAFS;AAG3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAHS,eAJxB;AAAA;AAAA,qBAUmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAVnB;;AAAA;AAUCpvB,cAAAA,QAVD,kBAUsDlO,IAVtD;;AAAA,oBAWDkO,QAXC,YAWDA,QAAQ,CAAEkvB,UAXT;AAAA;AAAA;AAAA;;AAAA,6DAaElvB,QAbF,oBAaEA,QAAQ,CAAEkvB,UAbZ;;AAAA;AAgBCguB,cAAAA,eAhBD,GAgBmBl9C,QAAQ,CAAC2oB,MAAT,CACtB,UACEqG,IADF,EAEEzuB,IAFF;AAIEyuB,gBAAAA,IAAI,CAACzuB,IAAI,CAACwK,KAAN,CAAJ,GAAmB;AACjBqlC,kBAAAA,MAAM,EAAE7vC,IAAI,CAAC05C,KAAL,CAAW,CAAX,CADS;AAEjBkD,kBAAAA,SAAS,EAAE58C,IAAI,CAAC05C,KAAL,CAAW,CAAX,CAFM;AAGjBmD,kBAAAA,OAAO,EAAE78C,IAAI,CAAC05C,KAAL,CAAW,CAAX,CAHQ;AAIjBrN,kBAAAA,IAAI,EAAErsC,IAAI,CAAC05C,KAAL,CAAW,CAAX;AAJW,iBAAnB;AAMA,uBAAOjrB,IAAP;AACD,eAZqB,EAatB,EAbsB,CAhBnB;AAAA,gDA+BE;AACLhvB,gBAAAA,QAAQ,EAARA,QADK;AAELk9C,gBAAAA,eAAe,EAAfA;AAFK,eA/BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0EeK,wBA1Ef;AAAA,gGA0ES,kBACL5xC,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAQCyE,cAAAA,SARD,GAQwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC6mD,2BADQ;AAE3B/yB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3Bgf,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eARxB;AAAA;AAAA,qBAemB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAfnB;;AAAA;AAeCpvB,cAAAA,QAfD,kBAesDlO,IAftD;;AAAA,oBAgBDkO,QAhBC,YAgBDA,QAAQ,CAAEkvB,UAhBT;AAAA;AAAA;AAAA;;AAAA,6DAkBElvB,QAlBF,oBAkBEA,QAAQ,CAAEkvB,UAlBZ;;AAAA;AAqBCuM,cAAAA,QArBD,GAqBoBz7B,QAAQ,CAACy7B,QArB7B;AAsBCygB,cAAAA,IAtBD,GAsB0Cl8C,QAAQ,CAACk8C,IAtBnD;AAAA,gDAwBE;AACLzgB,gBAAAA,QAAQ,EAARA,QADK;AAELygB,gBAAAA,IAAI,EAAJA,IAFK;AAGLl8C,gBAAAA,QAAQ,EAARA;AAHK,eAxBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1ET;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyGey9C,uBAzGf;AAAA,+FAyGS,kBACL9xC,OADK,EAeLgf,MAfK;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBCyE,cAAAA,SArBD,GAqBwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC+mD,0BADQ;AAE3BjzB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3Bgf,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eArBxB;AAAA;AAAA,qBA6BmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA7BnB;;AAAA;AA6BCpvB,cAAAA,QA7BD,kBA6BsDlO,IA7BtD;;AAAA,oBA8BDkO,QA9BC,YA8BDA,QAAQ,CAAEkvB,UA9BT;AAAA;AAAA;AAAA;;AAAA,6DAgCElvB,QAhCF,oBAgCEA,QAAQ,CAAEkvB,UAhCZ;;AAAA;AAmCCuM,cAAAA,QAnCD,GAmCoBz7B,QAAQ,CAACy7B,QAnC7B;AAoCCygB,cAAAA,IApCD,GAoCkDl8C,QAAQ,CAACk8C,IApC3D;AAAA,gDAsCE;AACLzgB,gBAAAA,QAAQ,EAARA,QADK;AAELygB,gBAAAA,IAAI,EAAJA,IAFK;AAGLl8C,gBAAAA,QAAQ,EAARA;AAHK,eAtCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzGT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqJe29C,kBArJf;AAAA,0FAqJS,kBACLhyC,OADK,EAOLgf,MAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AAYCyE,cAAAA,SAZD,GAYwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACinD,+BADQ;AAE3BnzB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3Bgf,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAZxB;AAAA;AAAA,qBAoBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CApBnB;;AAAA;AAoBCpvB,cAAAA,QApBD,kBAoBsDlO,IApBtD;;AAAA,oBAqBDkO,QArBC,YAqBDA,QAAQ,CAAEkvB,UArBT;AAAA;AAAA;AAAA;;AAAA,6DAuBElvB,QAvBF,oBAuBEA,QAAQ,CAAEkvB,UAvBZ;;AAAA;AAAA,gDA0BE;AAAElvB,gBAAAA,QAAQ,EAARA,QAAF;AAAY69C,gBAAAA,MAAM,EAAE79C;AAApB,eA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArJT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkLe89C,iBAlLf;AAAA,yFAkLS,kBACLnyC,OADK,EAQLgf,MARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAaCyE,cAAAA,SAbD,GAawB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAConD,6BADQ;AAE3BtzB,gBAAAA,WAAW,EAAE9e,OAFc;AAG3Bgf,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAbxB;AAAA;AAAA,qBAqBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CArBnB;;AAAA;AAqBCpvB,cAAAA,QArBD,kBAqBsDlO,IArBtD;;AAAA,oBAsBDkO,QAtBC,YAsBDA,QAAQ,CAAEkvB,UAtBT;AAAA;AAAA;AAAA;;AAAA,6DAwBElvB,QAxBF,oBAwBEA,QAAQ,CAAEkvB,UAxBZ;;AAAA;AAAA,gDA2BE;AAAElvB,gBAAAA,QAAQ,EAARA;AAAF,eA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlLT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkNeg+C,uBAlNf;AAAA,+FAkNS,kBACLryC,OADK,EAWLgf,MAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBCyE,cAAAA,SAjBD,GAiBwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACsnD,0BADQ;AAE3BxzB,gBAAAA,WAAW,eAAO9e,OAAP;AAAgBuyC,kBAAAA,QAAQ,EAAEvyC,OAAO,CAACuyC,QAAR,CAAiB9+C,IAAjB,CAAsB,GAAtB;AAA1B,kBAFgB;AAG3BurB,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAjBxB;AAAA;AAAA,qBAyBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAzBnB;;AAAA;AAyBCpvB,cAAAA,QAzBD,kBAyBsDlO,IAzBtD;;AAAA,oBA0BDkO,QA1BC,YA0BDA,QAAQ,CAAEkvB,UA1BT;AAAA;AAAA;AAAA;;AAAA,6DA4BElvB,QA5BF,oBA4BEA,QAAQ,CAAEkvB,UA5BZ;;AAAA;AAAA,gDA+BE;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELy7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QAFf;AAGL0iB,gBAAAA,iBAAiB,EAAEn+C,QAAQ,CAACk8C;AAHvB,eA/BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlNT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAuPekC,oBAvPf;AAAA,4FAuPS,kBACLzyC,OADK,EAQLgf,MARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBCyE,cAAAA,SAnBD,GAmBwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC0nD,uBADQ;AAE3B5zB,gBAAAA,WAAW,eACN9e,OADM,CAFgB;AAM3Bgf,gBAAAA,MAAM,EAANA,MAN2B;AAO3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAPS;AAQ3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AARS,eAnBxB;AAAA;AAAA,qBA8BmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA9BnB;;AAAA;AA8BCpvB,cAAAA,QA9BD,kBA8BsDlO,IA9BtD;;AAAA,oBA+BDkO,QA/BC,YA+BDA,QAAQ,CAAEkvB,UA/BT;AAAA;AAAA;AAAA;;AAAA,6DAiCElvB,QAjCF,oBAiCEA,QAAQ,CAAEkvB,UAjCZ;;AAAA;AAAA,gDAoCE;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELy7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEnN,MAFf;AAGLyrD,gBAAAA,YAAY,EAAEt+C;AAHT,eApCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvPT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiSeu+C,8BAjSf;AAAA,sGAiSS,kBACL5yC,OADK,EAOLgf,MAPK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAeCyE,cAAAA,SAfD,GAewB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC6nD,iCADQ;AAE3B/zB,gBAAAA,WAAW,eAAO9e,OAAP;AAAgB8yC,kBAAAA,MAAM,EAAE9yC,OAAF,uCAAEA,OAAO,CAAE8yC,MAAX,qBAAE,gBAAiBr/C,IAAjB,CAAsB,GAAtB;AAAxB,kBAFgB;AAG3BurB,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAfxB;AAAA;AAAA,qBAuBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAvBnB;;AAAA;AAuBCpvB,cAAAA,QAvBD,kBAuBsDlO,IAvBtD;;AAAA,oBAwBDkO,QAxBC,YAwBDA,QAAQ,CAAEkvB,UAxBT;AAAA;AAAA;AAAA;;AAAA,6DA0BElvB,QA1BF,oBA0BEA,QAAQ,CAAEkvB,UA1BZ;;AAAA;AAAA,gDA6BE;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELy7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QAFf;AAGLijB,gBAAAA,cAAc,EAAE1+C,QAAQ,CAACk8C;AAHpB,eA7BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjST;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqUeyC,mBArUf;AAAA,2FAqUS,mBAA6Bh0B,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAUCyE,cAAAA,SAVD,GAUwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACioD,sBADQ;AAE3Bj0B,gBAAAA,MAAM,EAANA,MAF2B;AAG3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AAJS,eAVxB;AAAA;AAAA,qBAiBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAjBnB;;AAAA;AAiBCpvB,cAAAA,QAjBD,mBAiBsDlO,IAjBtD;;AAAA,oBAkBDkO,QAlBC,YAkBDA,QAAQ,CAAEkvB,UAlBT;AAAA;AAAA;AAAA;;AAAA,8DAoBElvB,QApBF,oBAoBEA,QAAQ,CAAEkvB,UApBZ;;AAAA;AAAA,iDAuBE;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELy7B,gBAAAA,QAAQ,EAAEz7B,QAAQ,CAAC7K,KAFd;AAGL0pD,gBAAAA,gBAAgB,EAAE7+C,QAAQ,CAAC6+C;AAHtB,eAvBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArUT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmWeC,4BAnWf;AAAA,oGAmWS;AAAA;AAAA;AAAA;AAAA;AAAA;AACLnzC,cAAAA,OADK,QACLA,OADK,EAELgf,MAFK,QAELA,MAFK,EAGL7H,QAHK,QAGLA,QAHK;AAeCxjB,cAAAA,SAfD,GAe+BD,iBAAiB,CAACsM,OAAD,CAfhD;AAiBCyjB,cAAAA,SAjBD,GAiBwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACooD,+BADQ;AAE3Bt8B,gBAAAA,UAAU,EAAE9W,OAFe;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHS;AAI3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SAJS;AAK3BJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN,iBALmB;AAS3B6H,gBAAAA,MAAM,EAANA;AAT2B,eAjBxB;AAAA;AAAA,qBA6BmB,KAAK4E,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA7BnB;;AAAA;AA6BCpvB,cAAAA,QA7BD,mBA6BsDlO,IA7BtD;;AAAA,oBA8BDkO,QA9BC,YA8BDA,QAAQ,CAAEkvB,UA9BT;AAAA;AAAA;AAAA;;AAAA,8DAgCElvB,QAhCF,oBAgCEA,QAAQ,CAAEkvB,UAhCZ;;AAAA;AAAA;AAmCIlvB,gBAAAA,QAAQ,EAARA;AAnCJ,iBAmCiBA,QAnCjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnWT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwYeg/C,0BAxYf;AAAA,kGAwYS;AAAA;AAAA;AAAA;AAAA;AAAA;AACLrzC,cAAAA,OADK,SACLA,OADK,EAELgf,MAFK,SAELA,MAFK,EAGL7H,QAHK,SAGLA,QAHK;AAeCxjB,cAAAA,SAfD,GAe+BD,iBAAiB,CAACsM,OAAD,CAfhD;AAiBCyjB,cAAAA,SAjBD,GAiBwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACsoD,6BADQ;AAE3Bx8B,gBAAAA,UAAU,EAAE9W,OAFe;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHS;AAI3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACsyB,SAJS;AAK3BJ,gBAAAA,MAAM,EAAE;AACNtrB,kBAAAA,SAAS,EAATA,SADM;AAEN4c,kBAAAA,UAAU,EAAE4G;AAFN,iBALmB;AAS3B6H,gBAAAA,MAAM,EAANA;AAT2B,eAjBxB;AAAA;AAAA,qBA6BmB,KAAK4E,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CA7BnB;;AAAA;AA6BCpvB,cAAAA,QA7BD,mBA6BsDlO,IA7BtD;;AAAA,oBA8BDkO,QA9BC,YA8BDA,QAAQ,CAAEkvB,UA9BT;AAAA;AAAA;AAAA;;AAAA,8DAgCElvB,QAhCF,oBAgCEA,QAAQ,CAAEkvB,UAhCZ;;AAAA;AAAA;AAmCIlvB,gBAAAA,QAAQ,EAARA;AAnCJ,iBAmCiBA,QAnCjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxYT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA6aek/C,sBA7af;AAAA,8FA6aS,mBACLzzB,GADK,EAELpB,OAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKH1e,cAAAA,OALG,GAYD8f,GAZC,CAKH9f,OALG,EAMHgS,IANG,GAYD8N,GAZC,CAMH9N,IANG,EAOHG,OAPG,GAYD2N,GAZC,CAOH3N,OAPG,EAQHF,UARG,GAYD6N,GAZC,CAQH7N,UARG,EASHkF,QATG,GAYD2I,GAZC,CASH3I,QATG,EAUH6H,MAVG,GAYDc,GAZC,CAUHd,MAVG,EAWOqhB,WAXP,GAYDvgB,GAZC,CAWHwgB,QAXG;AAaGluB,cAAAA,SAbH,GAa0CsM,OAb1C,CAaGtM,SAbH,EAacL,kBAbd,GAa0C2M,OAb1C,CAac3M,kBAbd;AAeCuuB,cAAAA,QAfD,GAeY,CAAC,CAACD,WAfd;AAgBD/gB,cAAAA,cAhBC,GAgBgBx4B,SAhBhB;AAAA,yBAiBckZ,OAjBd,EAiBCghC,QAjBD,YAiBCA,QAjBD;AAkBLA,cAAAA,QAAQ,CAAC3mB,OAAT,GAAmB,CAAnB;AACA2mB,cAAAA,QAAQ,CAACC,IAAT,6BAAwCjhC,OAAO,CAACwzC,OAAhD;AACAxS,cAAAA,QAAQ,CAACpgC,MAAT,GAAkB;AAChBxI,gBAAAA,MAAM,EAAE,GADQ;AAEhB7C,gBAAAA,OAAO,EAAE;AAFO,eAAlB;;AAKMgrC,cAAAA,KAzBD;AAAA,2EAyBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,gCAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAzBT;;AAAA,gCAyBCD,KAzBD;AAAA;AAAA;AAAA;;AAAA,oBAsCHtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cAxC3B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBA4CGJ,QA5CH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA6COC,KAAK,EA7CZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAgDsBnL,6BAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CAhDtB;;AAAA;AAgDO/K,cAAAA,MAhDP;AAyDCsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AAzDD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA6DI,KAAK3d,MAAL,eA7DJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAiE2B6U,UAAU,CAAC7lB,IAAD,EAAOgvB,QAAQ,CAACxmB,SAAhB,CAjErC;;AAAA;AAiEGomB,cAAAA,eAjEH;AAAA;;AAAA,mBAmEGA,eAnEH;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAqESxL,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,CArET;;AAAA;AAoEOpL,cAAAA,OApEP;AA4ECsY,cAAAA,cAAc,GAAGtY,OAAM,CAAC0O,QAAxB;AA5ED;AAAA;;AAAA;AAAA,mBA6EU3D,kBA7EV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA+ESqjB,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,EAMJL,kBANI,CA/ET;;AAAA;AA8EO/K,cAAAA,QA9EP;AAuFCsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB,CAvFD;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA0FO6qB,KAAK,EA1FZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA8FI,KAAKvd,MAAL,eA9FJ;;AAAA;AAmGL,kBAAIjR,kBAAJ,EAAwB;AACtBivB,gBAAAA,QAAQ,CAACjvB,kBAAT,GAA8BA,kBAA9B;AACD;;AACKnR,cAAAA,MAtGD,GAsGiCogC,QAtGjC,CAsGCpgC,MAtGD,EAsGS9I,KAtGT,GAsGiCkpC,QAtGjC,CAsGSlpC,KAtGT,EAsGmB27C,SAtGnB,iCAsGiCzS,QAtGjC;;AAwGLyS,cAAAA,SAAS,gBACJA,SADI;AAEPC,gBAAAA,YAAY,EAAE9yC,MAAM,CAACxI,MAFd;AAGPu7C,gBAAAA,QAAQ,EAAE/yC,MAAM,CAACrL,OAHV;AAIPyiB,gBAAAA,MAAM,EAAElgB,KAAK,CAACM,MAJP;AAKPN,gBAAAA,KAAK,EAAEA,KAAK,CAACvC,OALN;AAMPq+C,gBAAAA,SAAS,EAAEt0B,cANJ;AAOP3D,gBAAAA,QAAQ,EAAEyZ,qBAAA,CACR4L,QADQ,EAER7pB,QAFQ,EAGRnQ;AAVK,gBAAT;AAaAhH,cAAAA,OAAO,gBACFA,OADE;AAELghC,gBAAAA,QAAQ,EAAEntB,IAAI,CAACC,SAAL,CAAe2/B,SAAf;AAFL,gBAAP;AAKMhwB,cAAAA,SA1HD,GA0HwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC6oD,2BADQ;AAE3B70B,gBAAAA,MAAM,EAANA,MAF2B;AAG3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHS;AAI3Bre,gBAAAA,UAAU,eAAO9W,OAAP,CAJiB;AAK3Bkf,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eA1HxB;AAAA;AAAA;AAAA,qBAmIe,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAnIf;;AAAA;AAmIHpvB,cAAAA,QAnIG,mBAmIkDlO,IAnIlD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAuIE,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CAvIF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7aT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAujBey/C,iBAvjBf;AAAA,yFAujBS,mBAULh0B,GAVK,EAWLpB,OAXK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcH1e,cAAAA,OAdG,GAqBD8f,GArBC,CAcH9f,OAdG,EAeHgS,IAfG,GAqBD8N,GArBC,CAeH9N,IAfG,EAgBHG,OAhBG,GAqBD2N,GArBC,CAgBH3N,OAhBG,EAiBHF,UAjBG,GAqBD6N,GArBC,CAiBH7N,UAjBG,EAkBHkF,QAlBG,GAqBD2I,GArBC,CAkBH3I,QAlBG,EAmBH6H,MAnBG,GAqBDc,GArBC,CAmBHd,MAnBG,EAoBOqhB,WApBP,GAqBDvgB,GArBC,CAoBHwgB,QApBG;AAuBGluB,cAAAA,SAvBH,GAuB0CsM,OAvB1C,CAuBGtM,SAvBH,EAuBcL,kBAvBd,GAuB0C2M,OAvB1C,CAuBc3M,kBAvBd;AAyBCuuB,cAAAA,QAzBD,GAyBY,CAAC,CAACD,WAzBd;AA0BD/gB,cAAAA,cA1BC,GA0BgBx4B,SA1BhB;AAAA,0BAgCDkZ,OAhCC,mCA6BH+zC,UA7BG,EA6BWL,YA7BX,wBA6BWA,YA7BX,EA6ByB57C,KA7BzB,wBA6ByBA,KA7BzB,EA6BgCkgB,MA7BhC,wBA6BgCA,MA7BhC,EA6BwC27B,QA7BxC,wBA6BwCA,QA7BxC,EA6BqD/zC,IA7BrD,sEA+BHka,OA/BG,aA+BHA,OA/BG;AAAA;;AAAA,mBAoCCA,OApCD;AAAA;AAAA;AAAA;;AAqCDknB,cAAAA,QAAQ,gBACHphC,IADG;AAENmb,gBAAAA,aAAa,EAAEnb,IAAI,CAACwa,OAFd;AAGNgB,gBAAAA,WAAW,EAAExb,IAAI,CAAC4a,SAHZ;AAINrB,gBAAAA,WAAW,EAAE,CAJP;AAKN6B,gBAAAA,SAAS,EAAEpb,IAAI,CAAC0a,SALV;AAMN1Z,gBAAAA,MAAM,EAAE;AACNrL,kBAAAA,OAAO,EAAEo+C,QADH;AAEN37B,kBAAAA,MAAM,EAAE07B;AAFF,iBANF;AAUNr5B,gBAAAA,OAAO,EAAE,CAVH;AAWN4mB,gBAAAA,IAAI,sBAAoB7uB,SAXlB;AAYNta,gBAAAA,KAAK,EAAE;AACLgiB,kBAAAA,OAAO,EAAPA,OADK;AAELvkB,kBAAAA,OAAO,EAAEuC,KAFJ;AAGLkgB,kBAAAA,MAAM,EAAEA;AAHH;AAZD,gBAAR;;AAkBMuoB,cAAAA,KAvDL;AAAA,2EAuDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,mCAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAvDb;;AAAA,gCAuDKD,KAvDL;AAAA;AAAA;AAAA;;AAAA,oBAqECtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cAvE/B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBA0EOJ,QA1EP;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA2EWC,KAAK,EA3EhB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA6E0BnL,gCAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CA7E1B;;AAAA;AA6EW/K,cAAAA,MA7EX;AAsFKsY,cAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AAtFL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA0FQ,KAAK3d,MAAL,eA1FR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA8F+B6U,UAAU,CAAC7lB,IAAD,EAAOgvB,QAAQ,CAACxmB,SAAhB,CA9FzC;;AAAA;AA8FOomB,cAAAA,eA9FP;AAAA;;AAAA,mBAgGOA,eAhGP;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAmGaxL,2CAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,CAnGb;;AAAA;AAkGWpL,cAAAA,QAlGX;AA0GKsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB;AA1GL;AAAA;;AAAA;AAAA,mBA2Gc3D,kBA3Gd;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA6GaqjB,2CAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,EAMJL,kBANI,CA7Gb;;AAAA;AA4GW/K,cAAAA,QA5GX;AAqHKsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB,CArHL;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAwHW6qB,KAAK,EAxHhB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCA4HQ,KAAKvd,MAAL,eA5HR;;AAAA;AAgIDrH,cAAAA,QAAQ,GAAGb,yBAAyB,CAACkmB,QAAD,EAAW7pB,QAAX,CAAzB,CAA8CnQ,MAAzD;AAhIC;AAAA;;AAAA;AAkIDg6B,cAAAA,QAAQ,gBACHphC,IADG;AAENgB,gBAAAA,MAAM,EAAE;AACNrL,kBAAAA,OAAO,EAAEo+C,QADH;AAENv7C,kBAAAA,MAAM,EAAEs7C;AAFF,iBAFF;AAMNr5B,gBAAAA,OAAO,EAAE,CANH;AAON4mB,gBAAAA,IAAI,sBAAoB7uB,SAPlB;AAQNta,gBAAAA,KAAK,EAAE;AACLvC,kBAAAA,OAAO,EAAEuC,KADJ;AAELM,kBAAAA,MAAM,EAAE4f;AAFH;AARD,gBAAR;;AAaMuoB,cAAAA,MA/IL;AAAA,2EA+Ia;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACSnL,gCAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CADT;;AAAA;AACN/K,0BAAAA,MADM;AAUZsY,0BAAAA,cAAc,GAAGtY,MAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAAC+3C,QAA7C;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA/Ib;;AAAA,gCA+IKD,MA/IL;AAAA;AAAA;AAAA;;AAAA,oBA4JCtuB,UAAU,KAAKzpB,sBAAc,CAAC49B,QAA9B,IACAnU,UAAU,KAAKzpB,sBAAc,CAACi4C,QAD9B,IAEAxuB,UAAU,KAAKzpB,sBAAc,CAACk4C,cA9J/B;AAAA;AAAA;AAAA;;AAAA;;AAAA,mBAkKOJ,QAlKP;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAmKWC,MAAK,EAnKhB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAsK0BnL,6BAAA,CACnBpjB,IADmB,EAEnBgvB,QAAQ,CAACxmB,SAFU,EAGnBwmB,QAHmB,EAInB7uB,OAJmB,EAKnBF,UALmB,EAMnBG,SANmB,EAOnBL,kBAPmB,CAtK1B;;AAAA;AAsKW/K,cAAAA,QAtKX;AA+KKsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAP,GAAkBjtB,iBAAS,CAACk4C,QAA7C;;AA/KL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAmLQ,KAAK3d,MAAL,eAnLR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAuL+B6U,UAAU,CAAC7lB,IAAD,EAAOgvB,QAAQ,CAACxmB,SAAhB,CAvLzC;;AAAA;AAuLOomB,cAAAA,gBAvLP;AAAA;;AAAA,mBAyLOA,gBAzLP;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA2LaxL,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,CA3Lb;;AAAA;AA0LWpL,cAAAA,QA1LX;AAkMKsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB;AAlML;AAAA;;AAAA;AAAA,mBAmMc3D,kBAnMd;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAqMaqjB,wCAAA,CACJpjB,IADI,EAEJgvB,QAAQ,CAACxmB,SAFL,EAGJwmB,QAHI,EAIJ7uB,OAJI,EAKJC,SALI,EAMJL,kBANI,CArMb;;AAAA;AAoMW/K,cAAAA,QApMX;AA6MKsY,cAAAA,cAAc,GAAGtY,QAAM,CAAC0O,QAAxB,CA7ML;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAgNW6qB,MAAK,EAhNhB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAoNQ,KAAKvd,MAAL,eApNR;;AAAA;AAyND,kBAAIjR,kBAAJ,EAAwB;AACtBivB,gBAAAA,QAAQ,CAACjvB,kBAAT,GAA8BA,kBAA9B;AACD;;AACDivB,cAAAA,QAAQ,CAACzhB,cAAT,GAA0B6V,qBAAA,CACxB4L,QADwB,EAExB7pB,QAFwB,EAGxBnQ,MAHF;AAIA2U,cAAAA,QAAQ,GAAGyZ,qBAAA,CAAiC4L,QAAjC,EAA2C7pB,QAA3C,EAAqDnQ,MAAhE;;AAhOC;AAmOHhH,cAAAA,OAAO,gBACFA,OADE;AAEL8Z,gBAAAA,OAAO,EAAPA,OAFK;AAGLi6B,gBAAAA,UAAU,eACL/zC,OAAO,CAAC+zC,UADH;AAER15B,kBAAAA,OAAO,EAAE,CAFD;AAGR4mB,kBAAAA,IAAI,sBAAoB7uB,SAHhB;AAIRuJ,kBAAAA,QAAQ,EAARA;AAJQ;AAHL,gBAAP;AAUM8H,cAAAA,SA7OH,GA6OwC;AACzCvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACgpD,8BADsB;AAEzCl9B,gBAAAA,UAAU,eAAO9W,OAAP,CAF+B;AAGzCgf,gBAAAA,MAAM,EAANA,MAHyC;AAIzC/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAJuB;AAKzCjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MALuB;AAMzCG,gBAAAA,cAAc,EAAdA;AANyC,eA7OxC;AAAA;AAAA;AAAA,qBAuPiB,KAAKsE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAvPjB;;AAAA;AAuPDpvB,cAAAA,QAvPC,mBAuPoDlO,IAvPpD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDA2PI,KAAKm9B,YAAL,CAAkBjvB,QAAlB,CA3PJ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvjBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwzBe4/C,2BAxzBf;AAAA,mGAwzBS,mBACLj0C,OADK,EAQLgf,MARK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBCyE,cAAAA,SAhBD,GAgBwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACkpD,8BADQ;AAE3Bp1B,gBAAAA,WAAW,eAAO9e,OAAP;AAAgBuyC,kBAAAA,QAAQ,EAAEvyC,OAAF,yCAAEA,OAAO,CAAEuyC,QAAX,qBAAE,kBAAmB9+C,IAAnB,CAAwB,GAAxB;AAA1B,kBAFgB;AAG3BurB,gBAAAA,MAAM,EAANA,MAH2B;AAI3B/K,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAJS;AAK3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB;AALS,eAhBxB;AAAA;AAAA,qBAwBmB,KAAKyE,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAxBnB;;AAAA;AAwBCpvB,cAAAA,QAxBD,mBAwBsDlO,IAxBtD;;AAAA,oBAyBDkO,QAzBC,YAyBDA,QAAQ,CAAEkvB,UAzBT;AAAA;AAAA;AAAA;;AAAA,8DA2BElvB,QA3BF,oBA2BEA,QAAQ,CAAEkvB,UA3BZ;;AAAA;AAAA,iDA8BE;AACLlvB,gBAAAA,QAAQ,EAARA,QADK;AAELy7B,gBAAAA,QAAQ,EAAEz7B,QAAF,oBAAEA,QAAQ,CAAEy7B,QAFf;AAGLygB,gBAAAA,IAAI,EAAEl8C,QAAQ,CAACk8C;AAHV,eA9BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxzBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAkC3tB,OAAlC;;ICLauxB,UAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SAEeC,WAFf;AAAA,mFAES,iBACLp0C,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCyE,cAAAA,SALD,GAKwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACqpD,YADQ;AAE3Bv1B,gBAAAA,WAAW,EAAE9e,OAFc;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACu4B,GAHS;AAI3BzE,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MAJS;AAK3BH,gBAAAA,MAAM,EAANA;AAL2B,eALxB;AAAA;AAAA,qBAamB,KAAK4E,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,iBAasDlO,IAbtD;AAcLJ,cAAAA,OAAO,CAACkK,GAAR,CAAYoE,QAAZ;AAdK,+CAeEA,QAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoBeigD,aApBf;AAAA,qFAoBS,kBACLt0C,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyE,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACupD,cADQ;AAE3Bz9B,gBAAAA,UAAU,EAAE9W,OAFe;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHS;AAI3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MAJS;AAK3BH,gBAAAA,MAAM,EAANA;AAL2B,eAJxB;AAAA;AAAA,qBAYmB,KAAK4E,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,kBAYsDlO,IAZtD;AAAA,gDAaEkO,QAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoCemgD,aApCf;AAAA,qFAoCS,kBACLx0C,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICyE,cAAAA,SAJD,GAIwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAACypD,cADQ;AAE3B39B,gBAAAA,UAAU,EAAE9W,OAFe;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAAC+pC,IAHS;AAI3BjW,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MAJS;AAK3BH,gBAAAA,MAAM,EAANA;AAL2B,eAJxB;AAAA;AAAA,qBAYmB,KAAK4E,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAZnB;;AAAA;AAYCpvB,cAAAA,QAZD,kBAYsDlO,IAZtD;AAAA,gDAaEkO,QAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmDeqgD,aAnDf;AAAA,qFAmDS,kBACL10C,OADK,EAELgf,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCyE,cAAAA,SALD,GAKwB;AAC3BvtB,gBAAAA,GAAG,EAAElL,qBAAa,CAAC2pD,cADQ;AAE3B79B,gBAAAA,UAAU,EAAE9W,OAFe;AAG3BiU,gBAAAA,MAAM,EAAE7oB,iBAAS,CAACguC,MAHS;AAI3Bla,gBAAAA,OAAO,EAAEnyB,gBAAQ,CAACoyB,MAJS;AAK3BH,gBAAAA,MAAM,EAANA;AAL2B,eALxB;AAAA;AAAA,qBAamB,KAAK4E,OAAL,GAAe5jB,OAAf,CAAuByjB,SAAvB,CAbnB;;AAAA;AAaCpvB,cAAAA,QAbD,kBAasDlO,IAbtD;AAAA,gDAcEkO,QAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnDT;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAgCuuB,OAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}