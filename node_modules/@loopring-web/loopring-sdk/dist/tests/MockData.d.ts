import { AmmpoolAPI, ExchangeAPI, UserAPI, WalletAPI, WsAPI, NFTAPI, DelegateAPI, GlobalAPI, WhitelistedUserAPI, DefiAPI } from "../api";
import Web3 from "web3";
import * as sdk from "../index";
import { EIP712TypedData } from "eth-sig-util";
/***
 * LoopringAPIClass
 */
export declare const DEFAULT_TIMEOUT = 30000;
export declare const LoopringAPI: {
    userAPI: UserAPI;
    exchangeAPI: ExchangeAPI;
    globalAPI: GlobalAPI;
    ammpoolAPI: AmmpoolAPI;
    walletAPI: WalletAPI;
    wsAPI: WsAPI;
    whitelistedUserAPI: WhitelistedUserAPI;
    nftAPI: NFTAPI;
    defiAPI: DefiAPI;
    delegate: DelegateAPI;
    __chainId__: sdk.ChainId;
};
export declare const LOOPRING_EXPORTED_ACCOUNT: {
    address: string;
    privateKey: string;
    accountId: number;
    address2: string;
    privateKey2: string;
    accountId2: number;
    addressCF: string;
    accountIdCF: number;
    addressContractWallet: string;
    depositAddress: string;
    exchangeAddress: string;
    whitelistedAddress: string;
    whitelistedEddkey: string;
    chainId: number;
    nftTokenAddress: string;
    nftTokenId: number;
    nftId: string;
    nftData: string;
    testNotOx: string;
    tradeLRCValue: number;
    tradeETHValue: number;
    gasPrice: number;
    gasLimit: number;
    validUntil: number;
};
export declare const web3: Web3;
export declare const web3_2: Web3;
export declare const CUSTOMER_KEY_SEED: string;
export declare let TOKEN_INFO: {
    addressIndex: {
        "0x0000000000000000000000000000000000000000": string;
        "0xfc28028d9b1f6966fe74710653232972f50673be": string;
        "0xd4e71c4bb48850f5971ce40aa428b09f242d3e8a": string;
        "0xfeb069407df0e1e4b365c10992f1bc16c078e34b": string;
        "0x049a02fa9bc6bd54a2937e67d174cc69a9194f8e": string;
        "0xcd2c81b322a5b530b5fa3432e57da6803b0317f7": string;
        "0x47525e6a5def04c9a56706e93f54cc70c2e8f165": string;
        "0xf37cf4ced77b985708d591acc6bfd08586ab3409": string;
    };
    tokenMap: {
        ETH: {
            type: string;
            tokenId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            precision: number;
            precisionForOrder: number;
            orderAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            luckyTokenAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            fastWithdrawLimit: string;
            gasAmounts: {
                distribution: string;
                deposit: string;
            };
            enabled: boolean;
            isLpToken: boolean;
            tradePairs: string[];
        };
        LRC: {
            type: string;
            tokenId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            precision: number;
            precisionForOrder: number;
            orderAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            luckyTokenAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            fastWithdrawLimit: string;
            gasAmounts: {
                distribution: string;
                deposit: string;
            };
            enabled: boolean;
            isLpToken: boolean;
            tradePairs: string[];
        };
        USDT: {
            type: string;
            tokenId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            precision: number;
            precisionForOrder: number;
            orderAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            luckyTokenAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            fastWithdrawLimit: string;
            gasAmounts: {
                distribution: string;
                deposit: string;
            };
            enabled: boolean;
            isLpToken: boolean;
            tradePairs: string[];
        };
        "LP-LRC-ETH": {
            type: string;
            tokenId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            precision: number;
            precisionForOrder: number;
            orderAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            luckyTokenAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            fastWithdrawLimit: string;
            gasAmounts: {
                distribution: string;
                deposit: string;
            };
            enabled: boolean;
            isLpToken: boolean;
        };
        "LP-ETH-USDT": {
            type: string;
            tokenId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            precision: number;
            precisionForOrder: number;
            orderAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            luckyTokenAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            fastWithdrawLimit: string;
            gasAmounts: {
                distribution: string;
                deposit: string;
            };
            enabled: boolean;
            isLpToken: boolean;
        };
        DAI: {
            type: string;
            tokenId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            precision: number;
            precisionForOrder: number;
            orderAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            luckyTokenAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            fastWithdrawLimit: string;
            gasAmounts: {
                distribution: string;
                deposit: string;
            };
            enabled: boolean;
            isLpToken: boolean;
            tradePairs: string[];
        };
        USDC: {
            type: string;
            tokenId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            precision: number;
            precisionForOrder: number;
            orderAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            luckyTokenAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            fastWithdrawLimit: string;
            gasAmounts: {
                distribution: string;
                deposit: string;
            };
            enabled: boolean;
            isLpToken: boolean;
            tradePairs: string[];
        };
        "LP-USDC-ETH": {
            type: string;
            tokenId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            precision: number;
            precisionForOrder: number;
            orderAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            luckyTokenAmounts: {
                minimum: string;
                maximum: string;
                dust: string;
            };
            fastWithdrawLimit: string;
            gasAmounts: {
                distribution: string;
                deposit: string;
            };
            enabled: boolean;
            isLpToken: boolean;
        };
    };
    idIndex: {
        0: string;
        1: string;
        2: string;
        4: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    marketMap: {
        "LRC-ETH": {
            baseTokenId: number;
            enabled: boolean;
            market: string;
            orderbookAggLevels: number;
            precisionForPrice: number;
            quoteTokenId: number;
            status: number;
            isSwapEnabled: boolean;
            createdAt: number;
        };
        "ETH-USDT": {
            baseTokenId: number;
            enabled: boolean;
            market: string;
            orderbookAggLevels: number;
            precisionForPrice: number;
            quoteTokenId: number;
            status: number;
            isSwapEnabled: boolean;
            createdAt: number;
        };
        "DAI-USDT": {
            baseTokenId: number;
            enabled: boolean;
            market: string;
            orderbookAggLevels: number;
            precisionForPrice: number;
            quoteTokenId: number;
            status: number;
            isSwapEnabled: boolean;
            createdAt: number;
        };
        "USDC-ETH": {
            baseTokenId: number;
            enabled: boolean;
            market: string;
            orderbookAggLevels: number;
            precisionForPrice: number;
            quoteTokenId: number;
            status: number;
            isSwapEnabled: boolean;
            createdAt: number;
        };
    };
};
export declare let AMM_MAP: {
    "AMM-LRC-ETH": {
        name: string;
        market: string;
        address: string;
        version: string;
        tokens: {
            pooled: number[];
            lp: number;
        };
        feeBips: number;
        precisions: {
            price: number;
            amount: number;
        };
        createdAt: string;
        status: number;
    };
    "AMM-ETH-USDT": {
        name: string;
        market: string;
        address: string;
        version: string;
        tokens: {
            pooled: number[];
            lp: number;
        };
        feeBips: number;
        precisions: {
            price: number;
            amount: number;
        };
        createdAt: string;
        status: number;
    };
    "AMM-USDC-ETH": {
        name: string;
        market: string;
        address: string;
        version: string;
        tokens: {
            pooled: number[];
            lp: number;
        };
        feeBips: number;
        precisions: {
            price: number;
            amount: number;
        };
        createdAt: string;
        status: number;
    };
};
export declare const testTypedData: EIP712TypedData;
export declare function signatureKeyPairMock(accInfo: sdk.AccountInfo, _web3?: Web3): Promise<{
    keyPair: {
        publicKeyX: string;
        publicKeyY: string;
        secretKey: string;
    };
    formatedPx: string;
    formatedPy: string;
    sk: string;
    counterFactualInfo: any;
}>;
