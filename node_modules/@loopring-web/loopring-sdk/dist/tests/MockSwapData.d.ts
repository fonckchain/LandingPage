import * as sdk from "../index";
export declare const marketArray: string[];
export declare const marketMap: {
    "LRC-ETH": {
        baseTokenId: number;
        enabled: boolean;
        market: string;
        orderbookAggLevels: number;
        precisionForPrice: number;
        quoteTokenId: number;
        status: number;
        isSwapEnabled: boolean;
        createdAt: number;
    };
};
export declare const deepMock: {
    symbol: string;
    version: number;
    timestamp: number;
    mid_price: number;
    bids: {
        price: number;
        amt: string;
        vol: string;
        amtTotal: string;
        volTotal: string;
    }[];
    bids_prices: number[];
    bids_amtTotals: string[];
    bids_volTotals: string[];
    bids_amtTotal: string;
    bids_volTotal: string;
    asks: {
        price: number;
        amt: string;
        vol: string;
        amtTotal: string;
        volTotal: string;
    }[];
    asks_prices: number[];
    asks_amtTotals: string[];
    asks_volTotals: string[];
    asks_amtTotal: string;
    asks_volTotal: string;
};
export declare const ammPoolSnapshot: sdk.AmmPoolSnapshot;
export declare const ammPool: {
    poolName: string;
    poolAddress: string;
    pooled: {
        tokenId: number;
        volume: string;
    }[];
    lp: {
        tokenId: number;
        volume: string;
    };
    risky: boolean;
};
export declare const ticker: {
    tickers: string[][];
};
export declare const userAmount: {
    "LRC-ETH": {
        LRC: {
            tokenSymbol: string;
            baseOrderInfo: {
                minAmount: string;
                makerRate: number;
                takerRate: number;
            };
            userOrderInfo: {
                minAmount: string;
                makerRate: number;
                takerRate: number;
            };
            tradeCost: string;
        };
        ETH: {
            tokenSymbol: string;
            baseOrderInfo: {
                minAmount: string;
                makerRate: number;
                takerRate: number;
            };
            userOrderInfo: {
                minAmount: string;
                makerRate: number;
                takerRate: number;
            };
            tradeCost: string;
        };
    };
    "AMM-LRC-ETH": {
        LRC: {
            tokenSymbol: string;
            baseOrderInfo: {
                minAmount: string;
                makerRate: number;
                takerRate: number;
            };
            userOrderInfo: {
                minAmount: string;
                makerRate: number;
                takerRate: number;
            };
            tradeCost: string;
        };
        ETH: {
            tokenSymbol: string;
            baseOrderInfo: {
                minAmount: string;
                makerRate: number;
                takerRate: number;
            };
            userOrderInfo: {
                minAmount: string;
                makerRate: number;
                takerRate: number;
            };
            tradeCost: string;
        };
    };
};
export declare const TokenMapMockSwap: {
    ETH: {
        type: string;
        tokenId: number;
        symbol: string;
        name: string;
        address: string;
        decimals: number;
        precision: number;
        precisionForOrder: number;
        orderAmounts: {
            minimum: string;
            maximum: string;
            dust: string;
        };
        luckyTokenAmounts: {
            minimum: string;
            maximum: string;
            dust: string;
        };
        fastWithdrawLimit: string;
        gasAmounts: {
            distribution: string;
            deposit: string;
        };
        enabled: boolean;
        isLpToken: boolean;
        tradePairs: string[];
    };
    LRC: {
        type: string;
        tokenId: number;
        symbol: string;
        name: string;
        address: string;
        decimals: number;
        precision: number;
        precisionForOrder: number;
        orderAmounts: {
            minimum: string;
            maximum: string;
            dust: string;
        };
        luckyTokenAmounts: {
            minimum: string;
            maximum: string;
            dust: string;
        };
        fastWithdrawLimit: string;
        gasAmounts: {
            distribution: string;
            deposit: string;
        };
        enabled: boolean;
        isLpToken: boolean;
        tradePairs: string[];
    };
};
export declare const MAPFEEBIPS = 63;
